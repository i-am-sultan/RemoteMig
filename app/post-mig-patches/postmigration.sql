/*SELECT pg_size_pretty(sum(pg_relation_size(quote_ident(schemaname) || '.' || quote_ident(tablename)))::bigint) 
FROM pg_tables*/

TRUNCATE INT$ERROR_LOG;
UPDATE gateway.installation SET db_username = 'main';

-- Audit Data Population
--Aud2_Module
TRUNCATE TABLE AUD2_MODULE;
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Finance Site Allocation', 'Finance Site Allocation', 'Finance Site Allocation', 'Accounts', 'FINCOSTTAG', 'ENTNO', 'Y', 'SELECT COALESCE (P.POSTCODE, TRAN_DET.POSTCODE) DOCCODE,
        RTRIM(F.ENTNAME
          || '' : ''
          || COALESCE (P.SCHEME_DOCNO, TRAN_DET.DISP)
          || '' : ''
          || COALESCE(GL.GLNAME,'''')
          || '' : ''
          || COALESCE(SL.SLNAME,''''),
          '' : '') AS DOCNO,
       TRAN_DET.CNT                             COUNT
  FROM finpost P
       LEFT OUTER JOIN FINENTTYPE F ON P.ENTTYPE = F.ENTTYPE
       INNER JOIN FINGL GL ON P.GLCODE = GL.GLCODE
       LEFT OUTER JOIN FINSL SL ON P.SLCODE = SL.SLCODE
       RIGHT OUTER JOIN
       (  SELECT trans.MODULE_SHORTCODE,
                 HEADER_KEY_VALUE,
                 AUD_DEL.POSTCODE,
                 AUD_DEL.DISP DISP,
                 COUNT (*)  cnt
            FROM AUD2_TRANSACTION trans
                 LEFT OUTER JOIN
                 (SELECT M.POSTCODE,
                            F.ENTNAME
                         || '' : ''
                         || P.SCHEME_DOCNO
                         || '' : ''
                         || GL.GLNAME
                         || '' : ''
                         || SL.SLNAME
                            DISP
                    FROM AUD2_FINCOSTTAG M
                         INNER JOIN finpost P
                            ON M.POSTCODE = P.POSTCODE
                         LEFT OUTER JOIN FINENTTYPE F
                            ON COALESCE (P.ENTTYPE, ''XX'') =
                                  COALESCE (F.ENTTYPE, ''XX'')
                         INNER JOIN FINGL GL
                            ON P.GLCODE = GL.GLCODE
                         LEFT OUTER JOIN FINSL SL
                            ON P.SLCODE = SL.SLCODE
                   WHERE ACTION = ''DELETE''
                  UNION ALL
                  SELECT M.POSTCODE,
                            F.ENTNAME
                         || '' : ''
                         || P.SCHEME_DOCNO
                         || '' : ''
                         || GL.GLNAME
                         || '' : ''
                         || SL.SLNAME
                            DISP
                    FROM AUD2_FINCOSTTAG M
                         INNER JOIN finpost_deleted P
                            ON M.POSTCODE = P.POSTCODE
                         LEFT OUTER JOIN FINENTTYPE F
                            ON COALESCE (P.ENTTYPE, ''XX'') =
                                  COALESCE (F.ENTTYPE, ''XX'')
                         INNER JOIN FINGL GL
                            ON P.GLCODE = GL.GLCODE
                         LEFT OUTER JOIN FINSL SL
                            ON P.SLCODE = SL.SLCODE
                   WHERE ACTION = ''DELETE'') AUD_DEL
                    ON trans.header_key_value =
                          CAST (
                             AUD_DEL.POSTCODE AS CHARACTER VARYING)
           WHERE <filter_criteria>
                 AND
                 trans.MODULE_SHORTCODE = ''Finance Site Allocation''
        GROUP BY HEADER_KEY_VALUE,
                 AUD_DEL.POSTCODE,
                 AUD_DEL.DISP,
                 trans.MODULE_SHORTCODE) tran_det
          ON CAST (P.POSTCODE AS CHARACTER VARYING) =
                TRAN_DET.HEADER_KEY_VALUE
 WHERE COALESCE (P.POSTCODE, TRAN_DET.POSTCODE) IS NOT NULL');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SubLedgerSiteAssignment', 'Sub-Ledger - Assign Organization Site', 'Sub-Ledger - Assign Organization Site', 'Common', 'FINSL_OU', 'CODE', 'N', 'SELECT COALESCE (M.CODE, TRAN_DET.CODE) DOCCODE,
       CASE
          WHEN tran_det.code IS NULL THEN F.SLNAME || '' -> '' || A.NAME
          ELSE tran_det.disp
       END
          AS DOCNO,
       TRAN_DET.CNT                     COUNT
  FROM FINSL_OU M
       INNER JOIN FINSL F ON M.SLCODE = F.SLCODE
       INNER JOIN ADMSITE A ON M.ADMSITE_CODE = A.CODE
       RIGHT OUTER JOIN
       (  SELECT trans.MODULE_SHORTCODE,
                 HEADER_KEY_VALUE,
                 AUD_DEL.CODE,
                 AUD_DEL.SLNAME || '' -> '' || AUD_DEL.NAME DISP,
                 COUNT (*)                            cnt
            FROM AUD2_TRANSACTION trans
                 LEFT OUTER JOIN
                 (SELECT F.SLNAME,
                         F.SLCODE,
                         M.CODE,
                         A.NAME,
                         A.CODE AS SITECODE
                    FROM AUD2_FINSL_OU M
                         INNER JOIN FINSL F
                            ON M.SLCODE = F.SLCODE
                         INNER JOIN ADMSITE A
                            ON M.ADMSITE_CODE = A.CODE
                   WHERE ACTION = ''DELETE'') AUD_DEL
                    ON trans.header_key_value =
                          CAST (AUD_DEL.CODE AS CHARACTER VARYING)
           WHERE <filter_criteria>
                 AND
                 trans.MODULE_SHORTCODE = ''SubLedgerSiteAssignment''
        GROUP BY HEADER_KEY_VALUE,
                 AUD_DEL.CODE,
                 AUD_DEL.SLNAME || '' -> '' || AUD_DEL.NAME,
                 trans.MODULE_SHORTCODE) tran_det
          ON CAST (M.CODE AS CHARACTER VARYING) = TRAN_DET.HEADER_KEY_VALUE
 WHERE COALESCE (M.CODE, TRAN_DET.CODE) IS NOT NULL');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('AccountsLedger', 'Ledger', 'Ledger', 'Accounts', 'FINGL', 'GLNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Article', 'Article', 'Article', 'Inventory', 'INVARTICLE', 'NAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SubLedgerOpeningBalance', 'Opening Subledger Balance', 'Opening Subledger Balance', 'Accounts', 'FINSLOP', 'YCODE', 'Y', 'SELECT DISTINCT COALESCE (M.SLCODE, TRAN_DET.SLCODE) DOCCODE,
       COALESCE (S.SLNAME, TRAN_DET.DISP)   DOCNO,
       TRAN_DET.CNT                         COUNT
  FROM FINSLOP M
       JOIN FINSL S ON M.SLCODE = S.SLCODE
       RIGHT OUTER JOIN
       (  SELECT trans.MODULE_SHORTCODE,
                 HEADER_KEY_VALUE,
                 AUD_DEL.SLCODE,
                 AUD_DEL.SLNAME DISP,
                 COUNT (*)    cnt
            FROM AUD2_TRANSACTION trans
                 LEFT OUTER JOIN
                 (SELECT M.SLCODE, S.SLNAME
                    FROM AUD2_FINSLOP M
                         JOIN FINSL S ON M.SLCODE = S.SLCODE
                   WHERE ACTION = ''DELETE'') AUD_DEL
                    ON trans.header_key_value =
                          CAST (AUD_DEL.SLCODE AS CHARACTER VARYING)
           WHERE <filter_criteria>
                 AND
                 trans.MODULE_SHORTCODE = ''SubLedgerOpeningBalance''
        GROUP BY HEADER_KEY_VALUE,
                 AUD_DEL.SLCODE,
                 AUD_DEL.SLNAME,
                 trans.MODULE_SHORTCODE) tran_det
          ON CAST (M.SLCODE AS CHARACTER VARYING) = TRAN_DET.HEADER_KEY_VALUE
 WHERE COALESCE (M.SLCODE, TRAN_DET.SLCODE) IS NOT NULL');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('GSTRate', 'GST Rates', 'GST Rates', 'Inventory', 'INVGSTRATE', 'TAX_NAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('HSNSACMaster', 'HSN/SAC Master', 'HSN/SAC Master', 'Inventory', 'INVHSNSACMAIN', 'HSN_SAC_CODE', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('InventoryItemGroup', 'Item Group', 'Item Group', 'Inventory', 'INVGRP', 'GRPNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('BatchSerialMaster', 'Batch Serial Master', 'Batch Serial Master', 'Transaction', 'INVBATCH_SERIAL', 'BATCH_SERIAL_NO', 'N', 'SELECT COALESCE (M.CODE, tran_det.code)                               DOCCODE,
       CASE
          WHEN M.BATCH_SERIAL_NO IS NOT NULL
          THEN
             M.BATCH_SERIAL_NO || '' -> '' || I.ICODE
          ELSE
             TRAN_DET.DISP
       END
          AS DOCNO,
       TRAN_DET.CNT                                                   COUNT
  FROM INVBATCH_SERIAL M
       INNER JOIN INVITEM I ON M.ICODE = I.ICODE
       RIGHT OUTER JOIN
       (  SELECT trans.MODULE_SHORTCODE,
                 HEADER_KEY_VALUE,
                 AUD_DEL.CODE,
                 AUD_DEL.BATCH_SERIAL_NO || '' -> '' || AUD_DEL.ICODE DISP,
                 COUNT (*)                                      cnt
            FROM AUD2_TRANSACTION trans
                 LEFT OUTER JOIN (SELECT A.CODE, A.BATCH_SERIAL_NO, A.ICODE
                                    FROM AUD2_INVBATCH_SERIAL A
                                   WHERE ACTION = ''DELETE'') AUD_DEL
                    ON trans.header_key_value =
                          CAST (AUD_DEL.CODE AS CHARACTER VARYING)
           WHERE <filter_criteria>
                 AND
                 trans.MODULE_SHORTCODE = ''BatchSerialMaster''
        GROUP BY HEADER_KEY_VALUE,
                 AUD_DEL.CODE,
                 AUD_DEL.BATCH_SERIAL_NO || '' -> '' || AUD_DEL.ICODE,
                 trans.MODULE_SHORTCODE) tran_det
          ON CAST (M.CODE AS CHARACTER VARYING) = TRAN_DET.HEADER_KEY_VALUE');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('AuditEntry', 'Audit Stock Adjustment', 'Audit Stock Adjustment', 'Inventory', 'INVSTKADJMAIN', 'STKADJNO', 'N', 'SELECT COALESCE (M.STKADJCODE, TRAN_DET.STKADJCODE) DOCCODE,
       CASE
          WHEN TRAN_DET.STKADJCODE IS NULL
          THEN
             COALESCE (S.DESCRIP || '' -> Adjustment No. : '' || CAST(M.STKADJNO AS CHARACTER VARYING), TRAN_DET.DISP)
          ELSE
             TRAN_DET.DISP
       END
          AS DOCNO,
       TRAN_DET.CNT  AS COUNT
  FROM INVSTKADJMAIN M
       INNER JOIN INVSTKPLANMAIN S ON M.STKPLANCODE = S.STKPLANCODE
       RIGHT OUTER JOIN
       (  SELECT trans.MODULE_SHORTCODE,
                 HEADER_KEY_VALUE,
                 AUD_DEL.STKADJCODE,
                 (
					 AUD_DEL.DESCRIP 
		        	 || '' -> Adjustment No. : '' 
				 	 || CAST(AUD_DEL.STKADJNO AS CHARACTER VARYING)
				 )
		         AS DISP,
                 COUNT (*) AS cnt
            FROM AUD2_TRANSACTION trans
                 LEFT OUTER JOIN
                 (SELECT M.STKADJCODE, M.STKADJNO, S.DESCRIP
                    FROM AUD2_INVSTKADJMAIN M
                         INNER JOIN INVSTKPLANMAIN S
                            ON M.STKPLANCODE = S.STKPLANCODE
                   WHERE ACTION = ''DELETE'') AUD_DEL
                    ON trans.header_key_value = CAST (AUD_DEL.STKADJCODE AS CHARACTER VARYING)
           WHERE <filter_criteria>
                 AND
                 trans.MODULE_SHORTCODE = ''AuditEntry''
        GROUP BY HEADER_KEY_VALUE,
                 AUD_DEL.STKADJCODE,
                 AUD_DEL.DESCRIP || '' -> Adjustment No. : '' ||  CAST(AUD_DEL.STKADJNO AS CHARACTER VARYING),
                 trans.MODULE_SHORTCODE) tran_det
          ON CAST (M.STKADJCODE AS CHARACTER VARYING) = TRAN_DET.HEADER_KEY_VALUE
 WHERE COALESCE (M.STKADJCODE, TRAN_DET.STKADJCODE) IS NOT NULL');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SNDMovement', 'Sales Invoice/Transfer Out', 'Sales Invoice/Transfer Out', 'S&D', 'SALINVMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('AccountsLedgerGroup', 'Accounts Group', 'Accounts Group', 'Accounts', 'FINGRP', 'GRPNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('AuditPlan', 'Audit Plan', 'Audit Plan', 'Inventory', 'INVSTKPLANMAIN', 'DESCRIP', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('BillofMaterials', 'BOM', 'Bill of Materials', 'Production', 'PRDBOMMAIN', 'ASSEMBLY_ICODE', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('CancelOrder', 'Cancel Order', 'Cancel Order', 'S&D', 'SALORDCNLMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('CancelPurchaseOrder', 'Cancel Purchase Order', 'Cancel Purchase Order', 'Procurement', 'PURORDCNLMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('DeliveryChallan', 'Delivery Challan', 'Delivery Challan', 'S&D', 'INVDCMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Sale Service Invoice', 'Sale Service Invoice', 'Sale Service Invoice', 'S&D', 'SALSRVMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Sales DN/CN', 'Sales DN/CN', 'Sales Debit/Credit Note', 'S&D', 'SALINVJRNMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Sales Return', 'Sales Return/Transfer In', 'Sales Return/Transfer In', 'S&D', 'SALRTMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Retail Sales', 'Retail Sales', 'Retail Sales Invoice', 'S&D', 'SALCSMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('PurchasePriceChart', 'Price Chart', 'Price Chart', 'Purchase', 'PUR_PRICE_CHART', 'CODE', 'N', 'SELECT M.CODE DOCCODE, P.SLNAME || ''->'' || M.ICODE DOCNO, TRAN_DET.CNT COUNT
  FROM PUR_PRICE_CHART M
       INNER JOIN FINSL P ON M.PCODE = P.SLCODE
       RIGHT OUTER JOIN
       (SELECT trans.MODULE_SHORTCODE, HEADER_KEY_VALUE, COUNT (*) cnt
          FROM AUD2_TRANSACTION trans
         WHERE     trans.MODULE_SHORTCODE = ''PurchasePriceChart''
               AND <filter_criteria>
GROUP BY HEADER_KEY_VALUE,trans.MODULE_SHORTCODE
) tran_det
ON CAST(M.CODE AS CHARACTER VARYING) = TRAN_DET.HEADER_KEY_VALUE');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('GRC', 'Receipts', 'GRC', 'Procurement', 'INVGRCMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('GRT', 'Returns', 'GRT', 'Procurement', 'INVGRTMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('GSTAdditionalCess', 'GST Additional Cess', 'GST Additional Cess', 'Inventory', 'INVGSTADDCESSRATE', 'CODE', 'N', 'SELECT COALESCE (M.CODE, TRAN_DET.CODE)     DOCCODE,
       COALESCE (G.TAX_NAME, TRAN_DET.DISP) DOCNO,
       TRAN_DET.CNT                         COUNT
  FROM INVGSTADDCESSRATE M
       INNER JOIN INVGSTRATE G ON M.INVGSTRATE_CODE = G.CODE
       RIGHT OUTER JOIN (SELECT trans.MODULE_SHORTCODE,
                                HEADER_KEY_VALUE,
                                AUD_DEL.CODE,
                                AUD_DEL.TAX_NAME DISP,
                                COUNT (*)        cnt
                           FROM AUD2_TRANSACTION trans
                                LEFT OUTER JOIN
                                (SELECT M.CODE, G.TAX_NAME
                                   FROM AUD2_INVGSTADDCESSRATE M
                                        INNER JOIN INVGSTRATE G
                                           ON M.INVGSTRATE_CODE = G.CODE
                                  WHERE ACTION = ''DELETE'') AUD_DEL
                                   ON trans.header_key_value =
                                         cast (AUD_DEL.CODE as character varying)
                          WHERE <filter_criteria>
                        AND
                        trans.MODULE_SHORTCODE = ''GSTAdditionalCess''
                        GROUP BY HEADER_KEY_VALUE,AUD_DEL.CODE, AUD_DEL.TAX_NAME,trans.MODULE_SHORTCODE
                        ) tran_det
                        ON cast(M.CODE as character varying) = TRAN_DET.HEADER_KEY_VALUE
                        WHERE COALESCE(M.CODE,TRAN_DET.CODE) IS NOT NULL');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('LedgerOpeningBalance', 'Opening Ledger Balance', 'Opening Ledger Balance', 'Accounts', 'FINGLOP', 'YCODE', 'Y', 'SELECT DISTINCT
       COALESCE (M.GLCODE, TRAN_DET.GLCODE) DOCCODE,
       COALESCE (G.GLNAME, TRAN_DET.DISP)   DOCNO,
       TRAN_DET.CNT                         COUNT
  FROM FINGLOP M
       INNER JOIN FINGL G ON M.GLCODE = G.GLCODE
       RIGHT OUTER JOIN
       (  SELECT trans.MODULE_SHORTCODE,
                 HEADER_KEY_VALUE,
                 AUD_DEL.GLCODE,
                 AUD_DEL.GLNAME DISP,
                 COUNT (*)    cnt
            FROM AUD2_TRANSACTION trans
                 LEFT OUTER JOIN
                 (SELECT M.GLCODE, G.GLNAME
                    FROM AUD2_FINGLOP M
                         JOIN FINGL G ON M.GLCODE = G.GLCODE
                   WHERE ACTION = ''DELETE'') AUD_DEL
                    ON trans.header_key_value =
                          CAST (AUD_DEL.GLCODE AS CHARACTER VARYING)
           WHERE <filter_criteria>
                 AND
                 trans.MODULE_SHORTCODE = ''LedgerOpeningBalance''
        GROUP BY HEADER_KEY_VALUE,
                 AUD_DEL.GLCODE,
                 AUD_DEL.GLNAME,
                 trans.MODULE_SHORTCODE) tran_det
          ON CAST (M.GLCODE AS CHARACTER VARYING) = TRAN_DET.HEADER_KEY_VALUE
 WHERE COALESCE (M.GLCODE, TRAN_DET.GLCODE) IS NOT NULL');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('JobOrder', 'Job Order', 'Job Order', 'Production', 'PRDJOBMAIN', 'JOBNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('JobOrderCancel', 'Job Order Cancel', 'Job Order Cancel', 'Production', 'PRDJOBCNLMAIN', 'CNLNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('JobReceipts', 'Job Receipts', 'Job Receipts', 'Production', 'PRDJRCMAIN', 'JRCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('FinanceDocumentAdjustment', 'Document Adjustment', 'Document Adjustment', 'Accounts', 'FINTAG', 'CODE', 'Y', 'SELECT CASE
          WHEN TRAN_DET.POSTCODE IS NULL 
		  THEN 
		  CAST(M.POSTCODE1 AS CHARACTER VARYING) || ''#'' || CAST(M.POSTCODE2 AS CHARACTER VARYING)
          ELSE TRAN_DET.HEADER_KEY_VALUE
       END
          AS DOCCODE,
       CASE
          WHEN TRAN_DET.POSTCODE IS NULL
          THEN
             COALESCE (p1.SCHEME_DOCNO || '' : '' || p2.SCHEME_DOCNO,
                       TRAN_DET.DISP)
          ELSE
             TRAN_DET.DISP
       END
          AS DOCNO,
       TRAN_DET.CNT COUNT
  FROM FINTAG M
       LEFT JOIN FINPOST p1 ON M.POSTCODE1 = p1.POSTCODE
       LEFT JOIN FINPOST p2 ON M.POSTCODE2 = p2.POSTCODE
       RIGHT OUTER JOIN
       (  SELECT trans.MODULE_SHORTCODE,
                 HEADER_KEY_VALUE,
                 AUD_DEL.POSTCODE,
                 AUD_DEL.DISP DISP,
                 COUNT (*)  cnt
            FROM AUD2_TRANSACTION trans
                 INNER JOIN AUD2_FINTAG AF
                    ON (    trans.HEADER_KEY_VALUE =
                               CAST(AF.POSTCODE1 AS CHARACTER VARYING) || ''#'' || CAST(AF.POSTCODE2 AS CHARACTER VARYING)
                        AND trans.transaction_id = AF.TRANSACTION_ID)
                 LEFT OUTER JOIN
                 (SELECT DISTINCT --M.CODE,
                         CAST(M.POSTCODE1 AS CHARACTER VARYING) || ''#'' || CAST(M.POSTCODE2 AS CHARACTER VARYING) POSTCODE,
                            COALESCE (p1.SCHEME_DOCNO, CAST (M.ENTCODE1 AS CHARACTER VARYING))
                         || '' : ''
                         || COALESCE (p2.SCHEME_DOCNO, CAST (M.ENTCODE2 AS CHARACTER VARYING))
                            DISP
                    FROM AUD2_FINTAG M
                         LEFT JOIN FINPOST p1 ON M.POSTCODE1 = p1.POSTCODE
                         LEFT JOIN FINPOST p2 ON M.POSTCODE2 = p2.POSTCODE
                   WHERE ACTION = ''DELETE'') AUD_DEL
                    ON trans.header_key_value = AUD_DEL.POSTCODE
           WHERE <filter_criteria>
                 AND
                 trans.MODULE_SHORTCODE = ''FinanceDocumentAdjustment''
        GROUP BY HEADER_KEY_VALUE,
                 AUD_DEL.POSTCODE,
                 AUD_DEL.DISP,
                 trans.MODULE_SHORTCODE) tran_det
          ON CAST(M.POSTCODE1 AS CHARACTER VARYING) || ''#'' || CAST(M.POSTCODE2 AS CHARACTER VARYING) = TRAN_DET.HEADER_KEY_VALUE
 WHERE 
 COALESCE (REPLACE(CAST(M.POSTCODE1 AS CHARACTER VARYING) || ''#'' || CAST(M.POSTCODE2 AS CHARACTER VARYING),CAST(M.POSTCODE1 AS CHARACTER VARYING) || ''#'' || CAST(M.POSTCODE2 AS CHARACTER VARYING),''#''), TRAN_DET.POSTCODE) 
 IS NOT NULL');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('MarginRule', 'Margin Rule', 'Margin Rule', 'Purchase', 'INVMMRULE', 'NAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('MiscellaneousEntry', 'Miscellaneous Entry', 'Miscellaneous Entry', 'Inventory', 'INVMISCMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Production', 'Conversion Entry', 'Conversion Entry', 'Inventory', 'PRDORD', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('PurchaseChargeMaster', 'Purchase Charge Master', 'Purchase Charge Master', 'Purchase', 'FINCHG', 'CHGNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('PurchaseOrder', 'Purchase Order', 'Purchase Order', 'Procurement', 'PURORDMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('PurchaseTermMaster', 'Purchase Term Master', 'Purchase Term Master', 'Purchase', 'PURTERMMAIN', 'NAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Role', 'Roles', 'Roles', 'Admin', 'ROLE', 'NAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SaleChargeMaster', 'Sale Charge Master', 'Sale Charge Master', 'S&D', 'SALCHG', 'SALCHGNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SaleOrder', 'Sales/Transfer Order', 'Sales/Transfer Order', 'S&D', 'SALORDMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SalePriceList', 'Price List', 'Price List', 'S&D', 'SALPRICELISTMAIN', 'PRICELISTNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SaleTermMaster', 'Sale Term Master', 'Sale Term Master', 'S&D', 'SALTERMMAIN', 'SALTERMNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SecondaryRetailSales', 'Secondary Retail Sales', 'Secondary Retail Sales', 'S&D', 'SALSSMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('ServiceOrder', 'Service Order/Cancelorder', 'Service Order and Cancel', 'Procurement', 'PURSRVORDMAIN', 'SCHEME_DOCNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Site', 'Site', 'Site', 'Common', 'ADMSITE', 'NAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('SubLedger', 'Sub-Ledger', 'Sub-Ledger', 'Accounts', 'FINSL', 'SLNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('TDSSection', 'TDS Section', 'TDS Section', 'Finance', 'FINTDSTYPE', 'TDSNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('TDSSource', 'TDS Source', 'TDS Source', 'Finance', 'FINTDSSRC', 'TDSSRCNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('TaxGroup', 'Tax Group', 'Tax Group', 'Inventory', 'FINTAXMAIN', 'TAXNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('TaxRates', 'Tax Rates', 'Tax Rates', 'Inventory', 'FINTAXDET', 'TAXDESC', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('TaxRegion', 'Tax Region', 'Tax Region', 'Inventory', 'ADMCMPTAX', 'NAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('UserProfile', 'User Profile', 'User Profile', 'Admin', 'ADMPROF', 'PROFNAME', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('WIPClearence', 'WIP Clearence', 'WIP Clearence', 'Production', 'PRDWIPCLRMAIN', 'CLRNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('WIPMaterialTransaction', 'WIP Material Transaction', 'WIP Material Transaction', 'Production', 'PRDWIPMAIN', 'WIPTXNNO', 'N', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('AUDCONFIG', 'Audit Configuration', 'Audit Configuration', 'Admin', 'AUD2_MODULE', 'NAME', 'Y', 'SELECT COALESCE (M.SHORTCODE, TRAN_DET.HEADER_KEY_VALUE) DOCCODE,
       COALESCE (M.NAME, TRAN_DET.DISP)           DOCNO,
       TRAN_DET.CNT                               COUNT
  FROM AUD2_MODULE M
       RIGHT OUTER JOIN
       (  SELECT trans.MODULE_SHORTCODE,
                 HEADER_KEY_VALUE,
                 AUD_DEL.SHORTCODE,
                 AUD_DEL.NAME DISP,
                 COUNT (*)  cnt
            FROM AUD2_TRANSACTION trans
                 LEFT OUTER JOIN
                 (SELECT A1.SHORTCODE, A2.NAME
                    FROM AUD2_AUD2_MODULE A1
                         INNER JOIN AUD2_MODULE A2
                            ON A1.SHORTCODE = A1.SHORTCODE
                   WHERE ACTION = ''DELETE'') AUD_DEL
                    ON trans.MODULE_SHORTCODE =
                          cast (AUD_DEL.SHORTCODE as character varying)
           WHERE     <filter_criteria>
                 AND 
                 trans.MODULE_SHORTCODE = ''AUDCONFIG''
        GROUP BY HEADER_KEY_VALUE,
                 AUD_DEL.SHORTCODE,
                 AUD_DEL.NAME,
                 trans.MODULE_SHORTCODE) tran_det
          ON cast (M.SHORTCODE as character varying) = TRAN_DET.HEADER_KEY_VALUE
 WHERE COALESCE (M.SHORTCODE, TRAN_DET.SHORTCODE) IS NOT NULL');
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Gift Voucher Issue', 'Gift Voucher Issue', 'Gift Voucher Issue', 'Retail', 'GVISSUE_JOURNAL', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('FinVoucher', 'Voucher', 'Voucher', 'Accounts', 'FINVCHMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('OrganizationUnit', 'Organization Unit', 'Organization Unit', 'Admin', 'ADMOU', 'NAME', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('POS GRT', 'POS GRT', 'POS GRT', 'S&D', 'PSITE_GRT', 'DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('POSGRC', 'Goods Receive At Site', 'POS GRC', 'S&D', 'PSITE_GRC', 'DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Purchase DN/CN', 'Purchase DN/CN', 'Purchase Debit/Credit Note', 'Procurement', 'PURINVJRNMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Purchase Service Debit Note', 'Purchase Service Debit Note', 'Purchase Service Debit Note', 'Procurement', 'PURSRVJRNMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Purchase Service Invoice', 'Purchase Service Invoice', 'Purchase Service Invoice', 'Procurement', 'PURSRVMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('UserSiteAssignment', 'User', 'User', 'Admin', 'HRDEMP', 'FNAME', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Journal', 'Journal', 'Journal', 'Accounts', 'FINJRNMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Purchase Invoice', 'Purchase Invoice', 'Purchase Invoice', 'Procurement', 'PURINVMAIN', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Item', 'Item', 'Item', 'Inventory', 'INVITEM', 'ICODE', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('POS Journal', 'POS Journal', 'POS Journal', 'Accounts', 'POSJOURNAL', 'SCHEME_DOCNO', 'Y', NULL);
INSERT INTO main.aud2_module (shortcode, name, description, area, header_table, header_key_display, ismandatory, summary_view_query) VALUES ('Purchase Return', 'Purchase Return', 'Purchase Return', 'Procurement', 'PURRTMAIN', 'SCHEME_DOCNO', 'Y', NULL);

--Aud2_Table
TRUNCATE TABLE aud2_table;
INSERT INTO main.aud2_table VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'Header', 1, 'PurchaseServiceHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvmain 
AS  
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID         TRANSACTION_ID,
          AUD.SRVCODE                MODULE_KEY,
          AUD.SRVCODE                SERVICE_INVOICE_CODE,
          SRV.SCHEME_DOCNO           MODULE_KEY_DISPLAY,
          AUD.SRVDT                  SERVICE_INVOICE_DATE,
          AUD.TYPE                   TYPE,
          AUD.PCODE                  VENDOR_CODE,
          SL1.SLNAME                 VENDOR_NAME,
          AUD.DOCNO                  DOCUMENT_NUMBER,
          AUD.DOCDT                  DOCUMENT_DATE,
          AUD.DUEDT                  DUE_DATE,
          AUD.JRNCODE                TDS_JOURNAL_CODE,
          JRN.SCHEME_DOCNO           TDS_JOURNAL_NO,
          AUD.GRSAMT                 GROSS_AMOUNT,
          AUD.CHGAMT                 CHARGE_AMOUNT,
          AUD.NETAMT                 NET_AMOUNT,
          AUD.REM                    REMARKS,
          AUD.ECODE                  USER_CODE,
          H1.FNAME                   CREATEDBY_USER,
          AUD.LAST_ACCESS_ECODE      LASTMODIFIEDBY_USERCODE,
          H2.FNAME                   LASTMODIFIEDBY_USER,
          AUD.TDSRATE                TDS_RATE,
          AUD.ADMOU_CODE             OU_CODE,
          OU.NAME                    OU_NAME,
          AUD.DOCCODE                DOCSCHEME_CODE,
          DOC.DOCNAME                DOCSCHEME_NAME,
          AUD.SCHEME_DOCNO           DOCSCHEME_NO,
          AUD.ADMSITE_CODE_OWNER     TRANSACTION_SITE_CODE,
          S1.NAME                    TRANSACTION_SITE_NAME,
          AUD.TDS_APP                FIN_TDS_APPL,
          AUD.TDSTYPECODE            TDS_TYPE_CODE,
          TDST.TDSNAME               TDS_NAME,
          AUD.TDSSRCCODE             TDS_SOURCE_CODE,
          TDSS.TDSSRCNAME            TDS_SOURCE_NAME,
          AUD.TDSSECTION             TDS_SECTION,
          AUD.TDSGLCODE              TDS_GENERAL_LEDGER_CODE,
          GL.GLNAME                  TDS_GENERAL_LEDGER_NAME,
          AUD.TDSSLCODE              TDS_SUB_LEDGER_CODE,
          SL2.SLNAME                 TDS_SUB_LEDGER_NAME,
          AUD.TDS_APPAMT             TDS_APP_AMOUNT,
          AUD.TDSAMT                 TDS_AMOUNT,
          AUD.CERTIFICATENO          CERTIFICATE_NO,
          AUD.TDS_ROUNDOFF_AMT       TDS_ROUNDED_OFF_AMOUNT,
          AUD.TDS_GROSSAMT           TDS_GROSS_AMOUNT,
          AUD.ADMCURRENCY_CODE       CURRENCY_CODE,
          CUR.NAME                   CURRENCY,
          AUD.EXRATE                 EXCHANGE_RATE,
          AUD.FINTRADEGRP_CODE       TRADE_GROUP_CODE,
          FIN.NAME                   PUR_TRADE_GROUP_NAME,
          AUD.FORMCODE               FORM_CODE,
          FF.FORMNAME                FORM_NAME,
          AUD.FORMNO                 FORM_NO,
          AUD.FORMDT                 FORM_DATE,
          CASE
             WHEN AUD.RELEASE_STATUS = ''U'' THEN ''Unposted''
             WHEN AUD.RELEASE_STATUS = ''P'' THEN ''Posted''
          END
             RELEASE_STATUS,
          AUD.RELEASE_ECODE          RELEASED_USERCODE,
          H3.FNAME                   RELEASED_USER,
          AUD.REF_PERIOD             REFERENCE_PERIOD,
          AUD.REF_ADMSITE_CODE       REF_SITE_CODE,
          S2.NAME                    REFERENCE_SITE_NAME,
          AUD.PURTERMCODE            TERM_CODE,
          TERM.NAME                  TERM_NAME,
          AUD.FORMAMT                FORM_AMOUNT,
          AUD.OWNER_GSTIN_NO         TRANSACTION_GSTIN,
          AUD.OWNER_GSTIN_STATE_CODE TRANSACTION_GST_STATECODE,
          G1.NAME                    TRANSACTION_GST_STATENAME,
          AUD.CP_GSTIN_NO            CP_GST_REG_NO,
          AUD.CP_GSTIN_STATE_CODE    CP_GST_REG_STATE_CODE,
          G2.NAME                    CP_GST_REG_STATE_NAME,
          AUD.GSTAPPL                GST_APPLICABILITY,
          AUD.ENTRY_SOURCE           ENTRY_SOURCE,
          AUD.UDFSTRING01            UDFSTRING01,
          AUD.UDFSTRING02            UDFSTRING02,
          AUD.UDFSTRING03            UDFSTRING03,
          AUD.UDFSTRING04            UDFSTRING04,
          AUD.UDFSTRING05            UDFSTRING05,
          AUD.UDFSTRING06            UDFSTRING06,
          AUD.UDFSTRING07            UDFSTRING07,
          AUD.UDFSTRING08            UDFSTRING08,
          AUD.UDFSTRING09            UDFSTRING09,
          AUD.UDFSTRING10            UDFSTRING10,
          AUD.UDFNUM01               UDFNUM01,
          AUD.UDFNUM02               UDFNUM02,
          AUD.UDFNUM03               UDFNUM03,
          AUD.UDFNUM04               UDFNUM04,
          AUD.UDFNUM05               UDFNUM05,
          AUD.UDFDATE01              UDFDATE01,
          AUD.UDFDATE02              UDFDATE02,
          AUD.UDFDATE03              UDFDATE03,
          AUD.UDFDATE04              UDFDATE04,
          AUD.UDFDATE05              UDFDATE05
     FROM aud2_pursrvmain aud INNER JOIN (SELECT A.*,
										  RANK()
										  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										  FROM AUD2_TRANSACTION A
										  WHERE MODULE_SHORTCODE = ''Purchase Service Invoice'') trans_det 
							  ON (AUD.SRVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finsl sl1 ON AUD.PCODE = SL1.SLCODE
INNER JOIN admou ou ON AUD.ADMOU_CODE = OU.CODE 
INNER JOIN hrdemp h1 ON AUD.ECODE = H1.ECODE
INNER JOIN fintradegrp fin ON AUD.FINTRADEGRP_CODE = FIN.CODE 
LEFT OUTER JOIN pursrvmain srv ON (AUD.SRVCODE = SRV.SRVCODE)
LEFT OUTER JOIN finjrnmain jrn ON (AUD.JRNCODE = JRN.JRNCODE)
LEFT OUTER JOIN hrdemp h2 ON (AUD.LAST_ACCESS_ECODE = H2.ECODE)
LEFT OUTER JOIN admdocscheme doc ON (AUD.DOCCODE = DOC.DOCCODE)
LEFT OUTER JOIN admsite s1 ON (AUD.ADMSITE_CODE_OWNER = S1.CODE)
LEFT OUTER JOIN fintdstype tdst ON (AUD.TDSTYPECODE = TDST.TDSTYPECODE)
LEFT OUTER JOIN fintdssrc tdss ON (AUD.TDSSRCCODE = TDSS.TDSSRCCODE)
LEFT OUTER JOIN fingl gl ON (AUD.TDSGLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl2 ON (AUD.TDSSLCODE = SL2.SLCODE)
LEFT OUTER JOIN admcurrency cur ON (AUD.ADMCURRENCY_CODE = CUR.CODE)
LEFT OUTER JOIN finform ff ON (AUD.FORMCODE = FF.FORMCODE)
LEFT OUTER JOIN hrdemp h3 ON (AUD.RELEASE_ECODE = H3.ECODE)
LEFT OUTER JOIN admsite s2 ON (AUD.REF_ADMSITE_CODE = S2.CODE)
LEFT OUTER JOIN purtermmain term ON (AUD.PURTERMCODE = TERM.CODE)
LEFT OUTER JOIN admgststate g1 ON (AUD.OWNER_GSTIN_STATE_CODE = G1.CODE)
LEFT OUTER JOIN admgststate g2 ON (AUD.CP_GSTIN_STATE_CODE = G2.CODE)', 'SRVCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'SRVCODE');
INSERT INTO main.aud2_table VALUES ('UserProfile', 'ADMPROF', 'User Profile', 1, 'UserProfile', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_admprof 
AS 
SELECT	  TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          PROFCODE MODULE_KEY,
          PROFCODE USER_PROFILE_CODE,
          PROFNAME USER_PROFILE_NAME,
          PROFNAME MODULE_KEY_DISPLAY,
          CASE LOCK_CAT1 WHEN ''Y'' THEN ''YES'' WHEN ''N'' THEN ''NO'' END
             AS LOCK_CAT1,
          CASE LOCK_CAT2 WHEN ''Y'' THEN ''YES'' WHEN ''N'' THEN ''NO'' END
             AS LOCK_CAT2,
          CASE LOCK_CAT3 WHEN ''Y'' THEN ''YES'' WHEN ''N'' THEN ''NO'' END
             AS LOCK_CAT3,
          CASE LOCK_CAT4 WHEN ''Y'' THEN ''YES'' WHEN ''N'' THEN ''NO'' END
             AS LOCK_CAT4,
          CASE LOCK_CAT5 WHEN ''Y'' THEN ''YES'' WHEN ''N'' THEN ''NO'' END
             AS LOCK_CAT5,
          CASE LOCK_CAT6 WHEN ''Y'' THEN ''YES'' WHEN ''N'' THEN ''NO'' END
             AS LOCK_CAT6,
          CASE NEGATIVE_STOCK_ALERT
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS NEGATIVE_STOCK_ALERT,
          CASE ALLOW_ITEM_EDITING
             WHEN ''Y'' THEN ''Allowed (All item properties)''
             WHEN ''N'' THEN ''Not Allowed''
             WHEN ''R'' THEN ''Allowed (Price change restricted)''
          END
             AS ALLOW_ITEM_EDITING,
          ALLOW_CONSIGNMENT_GRC,
          PHYSTK_ITEM_MODIFY,
          ENABLE_USER_LOG,
          CREATE_NEW_ITEMCODE,
          OVERRECEIPT_CONTROL,
          AUTHORISE_PURCHASEORDER,
          OVERDELIVERY_CONTROL,
          AUTHRORISE_SALESORDER,
          ALLOW_ZERORATE_SALESORDER,
          ALLOW_ZERORATE_DELIVERY,
          ALLOW_RATECHANGE_SALESORDER,
          ALLOW_RATECHANGE_DELIVERY,
          ALLOW_RATECHANGE_SALESRETURN,
          CASE CREDIT_ALERT_SALES
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS CREDIT_ALERT_SALES,
          ALLOW_INVCAT_NAME_CHANGE,
          LOCK_ATTR1,
          LOCK_ATTR2,
          LOCK_ATTR3,
          LOCK_ATTR4,
          LOCK_ATTR5,
          LOCK_ATTR6,
          CASE MARGIN_MONITOR_ALERT
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS MARGIN_MONITOR_ALERT,
          ALLOW_MAP_MODIFICATION,
          ALLOW_BKDT_PSTKPLAN_ACTIVATION,
          ALLOW_PO_RATE_CHANGE,
          ALLOW_SELITEM_IN_PHYSTK_ENTRY,
          CASE ALLOW_GRC_AGST_PO_RATE_CHANGE
             WHEN ''A'' THEN ''All Allow''
             WHEN ''R'' THEN ''Adhoc Allowed and Orders upto PO Rate''
             WHEN ''N'' THEN ''Not Allowed''
          END
             AS ALLOW_GRC_AGST_PO_RATE_CHANGE,
          ALLOW_GLOBAL_PRICE_CHANGE,
          ALLOW_SELARTICLE_SPLIT_ITEM,
          ALLOW_SALES_TERM_CHANGE,
          CASE ALLOW_GRC_AGAINST_PO
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS ALLOW_GRC_AGAINST_PO,
          ALLOW_RATECHANGE_JOBRECEIPT,
          ALLOW_ALTERNATE_GRC,
          ALLOW_ALTERNATE_DC,
          ALLOW_DISCOUNT_SALESORDER,
          ALLOW_DISCOUNT_DELIVERY,
          ALLOW_PDC_ENTRY,
          BLOCK_SAME_ITEM_DELIVERY,
          ALLOW_SAME_ITEM_DELIVERY_AFTER,
          ALLOW_ITEM_COST_VIEW,
          ADJUST_MANDATORY_AP,
          ADJUST_MANDATORY_PRDN,
          AUTHORISE_PSITE_GRC,
          AUTHORIZE_INV_DOCS,
          ALLOW_SITE_CHANGE_DELIVERY,
          AUTO_REFRESH_PRICE_DELIVERY,
          MANUAL_REFRESH_PRICE_DELIVERY,
          ALLOW_RATECHANGE_JOBORDER,
          ALLOW_JOBORD_CLOSE,
          AUTO_REFRESH_PRICE_PROCUREMENT,
          ALLOW_VENDOR_EXCESS_PAYMENT,
          ALLOW_PRDJRC_FGRATE_UPDATE,
          AUTHORISE_PURCHASESERVICE,
          PROC_AUTORELEASE,
          PROC_CANRELEASE,
          PROC_CANREVERT,
          SAL_AUTORELEASE,
          SAL_CANRELEASE,
          SAL_CANREVERT,
          FIN_AUTORELEASE,
          FIN_CANRELEASE,
          FIN_CANREVERT,
          ALLOW_SO_SITE_CHANGE,
          ALLOW_ZERO_RATE_JOBORD,
          CASE MISC_OPERATION_STATUS
             WHEN ''I'' THEN ''Issue''
             WHEN ''B'' THEN ''Both''
             WHEN ''R'' THEN ''Receive''
          END
             AS MISC_OPERATION_STATUS,
          CASE NON_PRICE_CHART_ITEMS
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS NON_PRICE_CHART_ITEMS,
          CASE SETOFF_SO
             WHEN ''N'' THEN ''Dont setoff''
             WHEN ''A'' THEN ''All pending orders''
             WHEN ''O'' THEN ''only POS order linked order''
          END
             AS SETOFF_SO,
          ALLOW_AUTO_PI_PRDN,
          ALLOW_ADVANCE_AP,
          ALLOW_SELITEM_IN_DCADHOC,
          ALLOW_PSITE_GRC_GRT_REVERT,
          PO_ITEM_DUEDT_MODIFY,
          ALLOW_PRICE_POPULATION_GRC,
          APPROVE_BOMVERSION,
          ALLOW_PLAN_PROCESS_EDIT,
          ROUTEGRP_MANDATORY,
          ALLOW_PENDING_COMPONENT_PRDJRC,
          ALLOW_ALTERNATE_JRC,
          CASE PROD_BOM_MANDATORY
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS PROD_BOM_MANDATORY,
          CASE ALTJRC_BOM_MANDATORY
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS ALTJRC_BOM_MANDATORY,
          ALLOW_ALL_MISC_LR_OPERATION,
          ALLOW_SND_ITM_RATE_UPD,
          ALLOW_CDRULE_OVERRIDE,
          OVERRECEIPT_TOLERANCE_CONTROL,
          CASE PUR_ORDER_LIMIT_ALERT_METHOD
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS PUR_ORDER_LIMIT_ALERT_METHOD,
          CASE JOB_ORDER_LIMIT_ALERT_METHOD
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS JOB_ORDER_LIMIT_ALERT_METHOD,
          ALLOW_AUTO_SI_TO,
          DATACUBE_ADMIN,
          ALLOW_TDSEXPRATE_APTDSJRN,
          ALLOW_ITEM_ADHOC_GRC,
          ALLOW_ITEM_CONSOLIDATE_GRC,
          ALLOW_ORDERITEM_GRC,
          ALLOW_SET_ITEM_GRC,
          ALLOW_RATE_VALUE_DISPLAY,
          ALLOW_EXCESS_PUT_IN_BIN,
          ALLOW_UNASSRT_ITEM_IN_BIN,
          ALLOW_MULTI_SRT,
          ADJUST_MANDATORY_SRT,
          ALLOW_RATE_CHANGE_GRT_ADHOC,
          ALLOW_WIZARD_MULTI_GRT,
          CASE PURCHASE_INVOICE_MODE
             WHEN ''N'' THEN ''Non-consignment''
             WHEN ''C'' THEN ''Consignment''
             WHEN ''B'' THEN ''Both''
          END
             AS PURCHASE_INVOICE_MODE,
          AUTHORIZE_JOBORDER,
          ALLOW_COMP_UPD_IN_AUTH_JOBORD,
          ALLOW_PURCHASETERM_CHANGE,
          ALLOW_GRCGRT_EDIT_POSTRELEASE,
          CASE ALLOW_GRT_CREATE_MODE
             WHEN ''A'' THEN ''Adhoc Only''
             WHEN ''R'' THEN ''Against Receipt Only''
             WHEN ''B'' THEN ''Both Adhoc and Against Receipt''
          END
             AS ALLOW_GRT_CREATE_MODE,
          CASE ALLOW_DELIVERY_EXPIRE_ITEM
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
          END
             AS ALLOW_DELIVERY_EXPIRE_ITEM
     FROM AUD2_ADMPROF AUD
          INNER JOIN (SELECT A.*,
					  RANK()
					  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                            ORDER BY TRANSACTION_DATE) VERSION_SEQ
					  FROM AUD2_TRANSACTION A
					  WHERE MODULE_SHORTCODE = ''UserProfile'') TRANS_DET
          ON (AUD.PROFCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)', 'PROFCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'PROFCODE');
INSERT INTO main.aud2_table VALUES ('GRC', 'INVGRCMAIN', 'Header', 1, 'PurchaseGRCHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrcmain 
AS 
SELECT TRANS_DET.VERSION_SEQ                 AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                  AS LOGIN_USER,
          AUD2_INVGRCMAIN.ACTION,
          TRANS_DET.TRANSACTION_ID              AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE            AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE            AS MODULE_KEY,
          AUD2_INVGRCMAIN.SCHEME_DOCNO          AS MODULE_KEY_DISPLAY,
          AUD2_INVGRCMAIN.GRCCODE               AS GOOD_RECEIVE_CODE,
          AUD2_INVGRCMAIN.GRCDT                 AS GRC_DATE,
          AUD2_INVGRCMAIN.DOCNO                 AS DOCUMENT_NUMBER,
          AUD2_INVGRCMAIN.PCODE                 AS VENDOR_CODE,
          VENDOR.SLNAME                         AS VENDOR_NAME,
          AUD2_INVGRCMAIN.ORDCODE               AS PURCHASE_ORDER_CODE,
          PURORDMAIN.SCHEME_DOCNO               AS PURCHASE_ORDER_NUMBER,
          AUD2_INVGRCMAIN.LOCCODE               AS STOCKPOINT_CODE,
          INVLOC.LOCNAME                        AS STOCKPOINT_NAME,
          AUD2_INVGRCMAIN.GENO                  AS REFERENCE_NO,
          AUD2_INVGRCMAIN.REM                   AS REMARKS,
          AUD2_INVGRCMAIN.EXT                   AS EXTINCT,
          AUD2_INVGRCMAIN.ECODE                 AS CREATED_USER_CODE,
          HRDEMP1.FNAME                         AS CREATED_USER_NAME,
          CASE AUD2_INVGRCMAIN.WHETHER_CONSIGNMENT
             WHEN ''Y'' THEN ''CONSIGNMENT''
             WHEN ''N'' THEN ''NON-CONSIGNMENT''
             ELSE '' ''
          END
             AS ORDER_TYPE,
          AUD2_INVGRCMAIN.RCQTY                 AS RECEIVED_QUANTITY,
          AUD2_INVGRCMAIN.RTQTY                 AS RETURN_QUANTITY,
          AUD2_INVGRCMAIN.RCINVQTY              AS INVOICE_QUANTITY,
          AUD2_INVGRCMAIN.RTINVQTY              AS RETURN_INVOICE_QUANTITY,
          AUD2_INVGRCMAIN.LAST_ACCESS_ECODE     AS LAST_MODIFIED_USER_CODE,
          HRDEMP2.FNAME                         AS LAST_MODIFIED_USER_NAME,
          AUD2_INVGRCMAIN.AGCODE                AS AGENT_CODE,
          AGENT.SLNAME                          AS AGENT_NAME,
          AUD2_INVGRCMAIN.ADMOU_CODE            AS OU_CODE,
          OU.NAME                               AS OU_NAME,
          AUD2_INVGRCMAIN.INVGATEIN_CODE        AS GATE_ENTRY_CODE,
          INVGATEIN.GATEINNO                    AS GATE_ENTRY_NO,
          AUD2_INVGRCMAIN.LGTCODE               AS LOGISTICS_CODE,
          INVLGTNOTE.LGTNO                      AS LOGISTICS_NUMBER,
          AUD2_INVGRCMAIN.LGTRECQTY             AS RECEIVE_QUANTITY,
          AUD2_INVGRCMAIN.FINTRADEGRP_CODE      AS TRADE_GROUP_CODE,
          FINTRADEGRP.NAME                      AS TRADE_GROUP_NAME,
          AUD2_INVGRCMAIN.DOCCODE               AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                  AS DOCSCHEME_NAME,
          AUD2_INVGRCMAIN.SCHEME_DOCNO          AS GRC_NUMBER,
          AUD2_INVGRCMAIN.GRSAMT                AS GROSS_AMOUNT,
          AUD2_INVGRCMAIN.CHGAMT                AS CHARGE_AMOUNT,
          AUD2_INVGRCMAIN.NETAMT                AS NET_AMOUNT,
          AUD2_INVGRCMAIN.ADMCURRENCY_CODE      AS CURRENCY_CODE,
          ADMCURRENCY.NAME                      AS CURRENCY_NAME,
          AUD2_INVGRCMAIN.EXRATE                AS EXCHANGE_RATE,
          AUD2_INVGRCMAIN.ADMSITE_CODE_IN       AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                          AS TRANSACTION_SITE_NAME,
          AUD2_INVGRCMAIN.AUTH_ECODE            AS AUTHORIZATION_USERCODE,
          HRDEMP.FNAME                          AS AUTHORIZATION_USER,
          AUD2_INVGRCMAIN.PSITE_STOCKPOINT_CODE AS POS_STOCKPOINT_CODE,
          PSITE_STOCKPOINT.NAME                 AS POS_STOCKPOINT_NAME,
          AUD2_INVGRCMAIN.FORMCODE              AS FORMCODE,
          FINFORM.FORMNAME                      AS FORM_NAME,
          CASE AUD2_INVGRCMAIN.SET_APPLICABLE
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS SET_APPLICABILITY,
          AUD2_INVGRCMAIN.PURTERMCODE           AS TERM_CODE,
          PURTERMMAIN.NAME                      AS TERM_NAME,
          AUD2_INVGRCMAIN.ENTRY_SOURCE          AS ENTRY_SOURCE,
          CASE AUD2_INVGRCMAIN.ENTRY_MODE
             WHEN ''A'' THEN ''ADHOC''
             WHEN ''O'' THEN ''AGAINST ORDER''
             WHEN ''M'' THEN ''MIXED''
             ELSE '' ''
          END
             AS ENTRY_MODE,
          AUD2_INVGRCMAIN.DOCDT                 AS DOC_DATE,
          AUD2_INVGRCMAIN.UDFSTRING01           AS UDFSTRING01,
          AUD2_INVGRCMAIN.UDFSTRING02           AS UDFSTRING02,
          AUD2_INVGRCMAIN.UDFSTRING03           AS UDFSTRING03,
          AUD2_INVGRCMAIN.UDFSTRING04           AS UDFSTRING04,
          AUD2_INVGRCMAIN.UDFSTRING05           AS UDFSTRING05,
          AUD2_INVGRCMAIN.UDFSTRING06           AS UDFSTRING06,
          AUD2_INVGRCMAIN.UDFSTRING07           AS UDFSTRING07,
          AUD2_INVGRCMAIN.UDFSTRING08           AS UDFSTRING08,
          AUD2_INVGRCMAIN.UDFSTRING09           AS UDFSTRING09,
          AUD2_INVGRCMAIN.UDFSTRING10           AS UDFSTRING10,
          AUD2_INVGRCMAIN.UDFNUM01              AS UDFNUM01,
          AUD2_INVGRCMAIN.UDFNUM02              AS UDFNUM02,
          AUD2_INVGRCMAIN.UDFNUM03              AS UDFNUM03,
          AUD2_INVGRCMAIN.UDFNUM04              AS UDFNUM04,
          AUD2_INVGRCMAIN.UDFNUM05              AS UDFNUM05,
          AUD2_INVGRCMAIN.UDFDATE01             AS UDFDATE01,
          AUD2_INVGRCMAIN.UDFDATE02             AS UDFDATE02,
          AUD2_INVGRCMAIN.UDFDATE03             AS UDFDATE03,
          AUD2_INVGRCMAIN.UDFDATE04             AS UDFDATE04,
          AUD2_INVGRCMAIN.UDFDATE05             AS UDFDATE05
FROM AUD2_INVGRCMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GRC'') TRANS_DET
             ON (AUD2_INVGRCMAIN.GRCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGRCMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINSL VENDOR ON AUD2_INVGRCMAIN.PCODE = VENDOR.SLCODE
LEFT OUTER JOIN PURORDMAIN PURORDMAIN ON AUD2_INVGRCMAIN.ORDCODE = PURORDMAIN.ORDCODE
INNER JOIN INVLOC INVLOC ON AUD2_INVGRCMAIN.LOCCODE = INVLOC.LOCCODE
LEFT OUTER JOIN FINSL AGENT ON AUD2_INVGRCMAIN.AGCODE = AGENT.SLCODE
LEFT OUTER JOIN ADMOU OU ON AUD2_INVGRCMAIN.ADMOU_CODE = OU.CODE
LEFT OUTER JOIN INVGATEIN INVGATEIN ON AUD2_INVGRCMAIN.INVGATEIN_CODE = INVGATEIN.CODE
LEFT OUTER JOIN INVLGTNOTE INVLGTNOTE ON AUD2_INVGRCMAIN.LGTCODE = INVLGTNOTE.LGTCODE
INNER JOIN FINTRADEGRP FINTRADEGRP ON AUD2_INVGRCMAIN.FINTRADEGRP_CODE = FINTRADEGRP.CODE
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_INVGRCMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT OUTER JOIN ADMCURRENCY ADMCURRENCY ON AUD2_INVGRCMAIN.ADMCURRENCY_CODE = ADMCURRENCY.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_INVGRCMAIN.ADMSITE_CODE_IN = ADMSITE.CODE
LEFT OUTER JOIN HRDEMP HRDEMP ON AUD2_INVGRCMAIN.AUTH_ECODE = HRDEMP.ECODE
LEFT OUTER JOIN PSITE_STOCKPOINT PSITE_STOCKPOINT ON AUD2_INVGRCMAIN.PSITE_STOCKPOINT_CODE = PSITE_STOCKPOINT.CODE
LEFT OUTER JOIN FINFORM FINFORM ON AUD2_INVGRCMAIN.FORMCODE = FINFORM.FORMCODE
INNER JOIN PURTERMMAIN PURTERMMAIN ON AUD2_INVGRCMAIN.PURTERMCODE = PURTERMMAIN.CODE
INNER JOIN HRDEMP HRDEMP1 ON AUD2_INVGRCMAIN.ECODE = HRDEMP1.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP2 ON AUD2_INVGRCMAIN.LAST_ACCESS_ECODE = HRDEMP2.ECODE', 'GRCCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'GRCCODE');
INSERT INTO main.aud2_table VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'Header', 1, 'SecondaryRetailSaleHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salssmain 
AS 
SELECT 	  TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          AUD2_SALSSMAIN.ACTION,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_SALSSMAIN.SCHEME_DOCNO          AS MODULE_KEY_DISPLAY,
          AUD2_SALSSMAIN.SSCODE                AS RETAIL_SALE_CODE,
          AUD2_SALSSMAIN.SSDATE                AS RETAIL_SALE_DATE,
          AUD2_SALSSMAIN.DOCCODE               AS SCHEME_DOC_CODE,
          ADMDOCSCHEME.DOCNAME                 AS DOCUMENT_SCHEME_NAME,
          AUD2_SALSSMAIN.SCHEME_DOCNO          AS DOCSCHEME_NO,
          AUD2_SALSSMAIN.PCODE                 AS CHANNEL_NAME,
          CUSTOMER.SLNAME                      AS CUSTOMER_NAME,
          AUD2_SALSSMAIN.ADMOU_CODE            AS OU_CODE,
          ADMOU.NAME                           AS OU_NAME,
          AUD2_SALSSMAIN.ADMSITE_CODE          AS OWNER_SITE_CODE,
          ADMSITE.NAME                         AS OWNER_SITE_NAME,
          AUD2_SALSSMAIN.OUTLOCCODE            AS SALE_STOCKPOINT_CODE,
          INVLOC.LOCNAME                       AS SALE_STOCKPOINT_NAME,
          AUD2_SALSSMAIN.REMARKS               AS REMARKS,
          CREATEDBY.ECODE                      AS CREATED_BY,
          CREATEDBY.FNAME                      AS CREATED_BY_USER,
          MODIFIEDBY.ECODE                     AS LAST_ACCESS_USER_CODE,
          MODIFIEDBY.FNAME                     AS LAST_ACCESSED_BY_USER,
          CASE
             WHEN AUD2_SALSSMAIN.STATUS = ''O'' THEN ''Open''
             WHEN AUD2_SALSSMAIN.STATUS = ''C'' THEN ''Closed''
          END
             RETAIL_SALE_STATUS,
          POSSTLM.CODE                         AS POS_STLM_CODE,
          POSSTLM.HO_SETTLEDON                 AS STORE_SETTLEMENT_DATE,
          AUD2_SALSSMAIN.ROUNDOFF              AS ROUNDOFF_AMT,
          AUD2_SALSSMAIN.NETPAYABLE            AS NET_PAYABLE,
          AUD2_SALSSMAIN.REFNO                 AS REF_NO,
          AUD2_SALSSMAIN.QTY                   AS TOTAL_QUANTITY,
          AUD2_SALSSMAIN.GRSAMT                AS GROSS_AMT,
          AUD2_SALSSMAIN.DISCOUNT              AS ITEM_DISCOUNT,
          AUD2_SALSSMAIN.EXTAXAMT              AS EXTRA_TAX,
          AUD2_SALSSMAIN.NETAMT                AS ITEM_NET_AMT,
          AUD2_SALSSMAIN.UDFSTRING01           AS UDFSTRING01,
          AUD2_SALSSMAIN.UDFSTRING02           AS UDFSTRING02,
          AUD2_SALSSMAIN.UDFSTRING03           AS UDFSTRING03,
          AUD2_SALSSMAIN.UDFSTRING04           AS UDFSTRING04,
          AUD2_SALSSMAIN.UDFSTRING05           AS UDFSTRING05,
          AUD2_SALSSMAIN.UDFSTRING06           AS UDFSTRING06,
          AUD2_SALSSMAIN.UDFSTRING07           AS UDFSTRING07,
          AUD2_SALSSMAIN.UDFSTRING08           AS UDFSTRING08,
          AUD2_SALSSMAIN.UDFSTRING09           AS UDFSTRING09,
          AUD2_SALSSMAIN.UDFSTRING10           AS UDFSTRING10,
          AUD2_SALSSMAIN.UDFNUM01              AS UDFNUM01,
          AUD2_SALSSMAIN.UDFNUM02              AS UDFNUM02,
          AUD2_SALSSMAIN.UDFNUM03              AS UDFNUM03,
          AUD2_SALSSMAIN.UDFNUM04              AS UDFNUM04,
          AUD2_SALSSMAIN.UDFNUM05              AS UDFNUM05,
          AUD2_SALSSMAIN.UDFDATE01             AS UDFDATE01,
          AUD2_SALSSMAIN.UDFDATE02             AS UDFDATE02,
          AUD2_SALSSMAIN.UDFDATE03             AS UDFDATE03,
          AUD2_SALSSMAIN.UDFDATE04             AS UDFDATE04,
          AUD2_SALSSMAIN.UDFDATE05             AS UDFDATE05,
          PSITE_CUSTOMER.CODE                  AS RETAIL_CUSTOMER_CODE,
          PSITE_CUSTOMER.FNAME                 AS RETAIL_CUSTOMER,
          AUD2_SALSSMAIN.GDS_ENTITY_DOCUMENTID AS GDS_ENTITY_DOCUMENT_ID,
          ENTITY.ENTITY_ID                     AS GDS_ENTITY_ID,
          ENTITY.ENTITY_NAME                   AS GDS_ENTITY_NAME,
          SITE.CODE                            AS RETAIL_ORDER_SITE_CODE,
          SITE.NAME                            AS RETAIL_ORDER_SITE_NAME,
          CASE AUD2_SALSSMAIN.CHANNELTYPE
             WHEN ''ETL'' THEN ''OMS''
             WHEN ''RTL'' THEN ''RETAIL''
             ELSE '' ''
          END
             AS CHANNEL_TYPE,
          GRP.CODE                             AS TRADEGRP_CODE,
          GRP.NAME                             AS TRADEGRP_NAME,
          AUD2_SALSSMAIN.OWNER_GSTIN_NO        AS TRANSACTION_SITE_GSTIN,
          AUD2_SALSSMAIN.OWNER_GSTIN_STATE_CODE
             AS TRANSACTION_SITE_GSTIN_STATE,
          AUD2_SALSSMAIN.CP_GSTIN_NO           AS CP_GSTIN_NO,
          AUD2_SALSSMAIN.CP_GSTIN_STATE_CODE   AS CP_GSTIN_STATE_NAME,
          AUD2_SALSSMAIN.TEMP_DOCCODE          AS TEMP_DOCCODE,
          AUD2_SALSSMAIN.BILL_FNAME            AS BILL_CUSTOMER_FNAME,
          AUD2_SALSSMAIN.BILL_MNAME            AS BILL_CUSTOMER_MNAME,
          AUD2_SALSSMAIN.BILL_LNAME            AS BILL_CUSTOMER_LNAME,
          AUD2_SALSSMAIN.BILL_SALUTATION       AS BILL_CUSTOMER_SALUTATION,
          AUD2_SALSSMAIN.BILL_GENDER           AS BILL_CUSTOMER_GENDER,
          AUD2_SALSSMAIN.BILL_PROFESSION       AS BILL_CUSTOMER_PROFESSION,
          AUD2_SALSSMAIN.BILL_SPOUSENAME       AS BILL_CUSTOMER_SPOUSE,
          AUD2_SALSSMAIN.BILL_DOB              AS BILL_CUSTOMER_DOB,
          AUD2_SALSSMAIN.BILL_DOA              AS BILL_CUSTOMER_DOA,
          AUD2_SALSSMAIN.BILL_ISEMPLOYEE       AS BILL_CUSTOMER_IS_EMPLOYEE,
          AUD2_SALSSMAIN.BILL_ADMISD_CODE      AS BILL_CUSTOMER_ISD_CODE,
          AUD2_SALSSMAIN.BILL_MOBILE           AS BILL_CUSTOMER_MOBILE,
          AUD2_SALSSMAIN.BILL_EMAIL            AS BILL_CUSTOMER_EMAIL,
          AUD2_SALSSMAIN.BILL_ADDRESSLINE1     AS BILL_CUSTOMER_ADDRESS_1,
          AUD2_SALSSMAIN.BILL_ADDRESSLINE2     AS BILL_CUSTOMER_ADDRESS_2,
          AUD2_SALSSMAIN.BILL_ADDRESSLINE3     AS BILL_CUSTOMER_ADDRESS_3,
          AUD2_SALSSMAIN.BILL_CITY             AS BILL_CUSTOMER_CITY,
          AUD2_SALSSMAIN.BILL_STATE            AS BILL_CUSTOMER_STATE,
          AUD2_SALSSMAIN.BILL_COUNTRY          AS BILL_CUSTOMER_COUNTRY,
          AUD2_SALSSMAIN.BILL_PIN              AS BILL_CUSTOMER_PIN,
          AUD2_SALSSMAIN.BILL_PANNO            AS BILL_CUSTOMER_PAN,
          AUD2_SALSSMAIN.BILL_GSTIN_NO         AS BILL_CUSTOMER_GSTIN,
          AUD2_SALSSMAIN.BILL_GST_STATE_CODE   AS BILL_CUSTOMER_GSTIN_STATE,
          AUD2_SALSSMAIN.BILL_GST_DATE         AS BILL_CUSTOMER_GSTIN_DATE,
          AUD2_SALSSMAIN.BILL_REMARKS          AS BILL_CUSTOMER_REMARKS,
          AUD2_SALSSMAIN.SHIP_FNAME            AS SHIP_CUSTOMER_FNAME,
          AUD2_SALSSMAIN.SHIP_MNAME            AS SHIP_CUSTOMER_MNAME,
          AUD2_SALSSMAIN.SHIP_LNAME            AS SHIP_CUSTOMER_LNAME,
          AUD2_SALSSMAIN.SHIP_SALUTATION       AS SHIP_CUSTOMER_SALUTATION,
          AUD2_SALSSMAIN.SHIP_GENDER           AS SHIP_CUSTOMER_GENDER,
          AUD2_SALSSMAIN.SHIP_PROFESSION       AS SHIP_CUSTOMER_PROFESSION,
          AUD2_SALSSMAIN.SHIP_SPOUSENAME       AS SHIP_CUSTOMER_SPOUSE,
          AUD2_SALSSMAIN.SHIP_DOB              AS SHIP_CUSTOMER_DOB,
          AUD2_SALSSMAIN.SHIP_DOA              AS SHIP_CUSTOMER_DOA,
          AUD2_SALSSMAIN.SHIP_ISEMPLOYEE       AS SHIP_CUSTOMER_IS_EMPLOYEE,
          AUD2_SALSSMAIN.SHIP_ADMISD_CODE      AS SHIP_CUSTOMER_ISD_CODE,
          AUD2_SALSSMAIN.SHIP_MOBILE           AS SHIP_CUSTOMER_MOBILE,
          AUD2_SALSSMAIN.SHIP_EMAIL            AS SHIP_CUSTOMER_EMAIL,
          AUD2_SALSSMAIN.SHIP_ADDRESSLINE1     AS SHIP_CUSTOMER_ADDRESS_1,
          AUD2_SALSSMAIN.SHIP_ADDRESSLINE2     AS SHIP_CUSTOMER_ADDRESS_2,
          AUD2_SALSSMAIN.SHIP_ADDRESSLINE3     AS SHIP_CUSTOMER_ADDRESS_3,
          AUD2_SALSSMAIN.SHIP_CITY             AS SHIP_CUSTOMER_CITY,
          AUD2_SALSSMAIN.SHIP_STATE            AS SHIP_CUSTOMER_STATE,
          AUD2_SALSSMAIN.SHIP_COUNTRY          AS SHIP_CUSTOMER_COUNTRY,
          AUD2_SALSSMAIN.SHIP_PIN              AS SHIP_CUSTOMER_PIN,
          AUD2_SALSSMAIN.SHIP_PANNO            AS SHIP_CUSTOMER_PAN,
          AUD2_SALSSMAIN.SHIP_GSTIN_NO         AS SHIP_CUSTOMER_GSTIN,
          AUD2_SALSSMAIN.SHIP_GST_STATE_CODE   AS SHIP_CUSTOMER_GSTIN_STATE,
          AUD2_SALSSMAIN.SHIP_GST_DATE         AS SHIP_CUSTOMER_GSTIN_DATE,
          AUD2_SALSSMAIN.SHIP_REMARKS          AS SHIP_CUSTOMER_REMARKS,
          AUD2_SALSSMAIN.AWBNO                 AS AWB_NO,
          AUD2_SALSSMAIN.AWBDATE               AS AWB_DATE,
          AUD2_SALSSMAIN.DELIVERYDATE          AS DELIVERY_DATE,
          RETAIL_ORDER.ORDCODE                 AS RETAIL_ORDER_CODE,
          RETAIL_ORDER.SCHEME_DOCNO            AS RETAIL_ORDER_NUMBER,
          REF_RETAIL_INVOICE.SSCODE            AS REF_RETAIL_INVOICE_CODE,
          REF_RETAIL_INVOICE.SCHEME_DOCNO      AS REF_RETAIL_INVOICE_NUMBER,
          AUD2_SALSSMAIN.CHANNELINVOICEID      AS CHANNEL_INVOICE_ID,
          AUD2_SALSSMAIN.CHANNELINVOICEDATE    AS CHANNEL_INVOICE_DATE,
          CASE AUD2_SALSSMAIN.ISBILLINGSHIPPINGSAME
             WHEN 0 THEN ''NO''
             WHEN 1 THEN ''YES''
             ELSE '' ''
          END
             AS IS_BILLING_SHIPPING_SAME,
          RETURNLOC.LOCCODE                    AS RETURN_STOCKPOINT,
          RETURNLOC.LOCNAME                    AS RETURN_STOCKPOINT_NAME,
          DAMAGEDLOC.LOCCODE                   AS DAMAGE_STOCKPOINT,
          DAMAGEDLOC.LOCNAME                   AS DAMAGE_STOCKPOINT_NAME,
          SHIPFROM.CODE                        AS SHIP_FROM_SITE_CODE,
          SHIPFROM.NAME                        AS SHIP_FROM_SITE_NAME
     FROM AUD2_SALSSMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE) VERSION_SEQ
				  FROM AUD2_TRANSACTION A
				  WHERE MODULE_SHORTCODE = ''SecondaryRetailSales'') TRANS_DET
				  ON (AUD2_SALSSMAIN.SSCODE::text = TRANS_DET.HEADER_KEY_VALUE AND AUD2_SALSSMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          LEFT JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_SALSSMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
          LEFT JOIN FINSL CUSTOMER ON AUD2_SALSSMAIN.PCODE = CUSTOMER.SLCODE
          LEFT JOIN ADMOU ADMOU ON AUD2_SALSSMAIN.ADMOU_CODE = ADMOU.CODE
          INNER JOIN ADMSITE ADMSITE ON AUD2_SALSSMAIN.ADMSITE_CODE = ADMSITE.CODE
          INNER JOIN INVLOC INVLOC ON AUD2_SALSSMAIN.OUTLOCCODE = INVLOC.LOCCODE
          LEFT JOIN HRDEMP CREATEDBY ON AUD2_SALSSMAIN.ECODE = CREATEDBY.ECODE
          LEFT JOIN HRDEMP MODIFIEDBY ON AUD2_SALSSMAIN.LAST_ACCESS_ECODE = MODIFIEDBY.ECODE
          LEFT JOIN PSITE_CUSTOMER PSITE_CUSTOMER ON AUD2_SALSSMAIN.PSITE_CUSTOMER_CODE = PSITE_CUSTOMER.CODE
          LEFT JOIN INVLOC RETURNLOC ON AUD2_SALSSMAIN.RETURN_LOCCODE = RETURNLOC.LOCCODE
          LEFT JOIN INVLOC DAMAGEDLOC ON AUD2_SALSSMAIN.DAMAGED_LOCCODE = DAMAGEDLOC.LOCCODE
          LEFT JOIN ADMSITE SHIPFROM ON AUD2_SALSSMAIN.SHIPFROM_ADMSITE_CODE = SHIPFROM.CODE
          LEFT JOIN PSITE_POSSTLM POSSTLM ON AUD2_SALSSMAIN.PSITE_POSSTLM_CODE = POSSTLM.CODE
          LEFT JOIN GDS_ENTITY ENTITY ON AUD2_SALSSMAIN.GDS_ENTITY_ID = ENTITY.ENTITY_ID
          LEFT JOIN ADMSITE SITE ON AUD2_SALSSMAIN.ORDER_ADMSITE_CODE = SITE.CODE
          LEFT JOIN FINTRADEGRP GRP ON AUD2_SALSSMAIN.FINTRADEGRP_CODE = GRP.CODE
          LEFT JOIN RETAILORDMAIN RETAIL_ORDER ON AUD2_SALSSMAIN.RETAILORDER_CODE = RETAIL_ORDER.ORDCODE
          LEFT JOIN SALSSMAIN REF_RETAIL_INVOICE ON AUD2_SALSSMAIN.REF_SALSSMAIN_CODE = REF_RETAIL_INVOICE.SSCODE', 'SSCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'SSCODE');
INSERT INTO main.aud2_table VALUES ('SNDMovement', 'SALINVCHG', 'Charge', 1, 'SalesInvoiceCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salinvchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          AUD2_SALINVCHG.ACTION               AS ACTION,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          AUD2_SALINVCHG.TRANSACTION_ID       AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_SALINVCHG.INVCODE              AS INVOICE_TRANSFER_CODE,
          --SALINVMAIN.SCHEME_DOCNO             AS INVOICE_TRANSFER_NUMBER,
          AUD2_SALINVCHG.SEQ                  AS SEQUENCE,
          AUD2_SALINVCHG.SALCHGCODE           AS CHARGE_CODE,
          SALCHG.SALCHGNAME                   AS CHARGE_NAME,
          AUD2_SALINVCHG.RATE                 AS FACTOR,
          AUD2_SALINVCHG.SIGN                 AS SIGN,
          AUD2_SALINVCHG.CHGAMT               AS CHARGE_AMOUNT,
          AUD2_SALINVCHG.GLCODE               AS GENERAL_LEDGER_CODE,
          FINGL.GLNAME                        AS GENERAL_LEDGER_NAME,
          AUD2_SALINVCHG.WITHOUT_TERM_FORMULA AS WITHOUT_TERM_FORMULA,
          AUD2_SALINVCHG.CODE                 AS INV_TRANSFER_CHARGE_CODE,
          AUD2_SALINVCHG.SLCODE               AS SUB_LEDGER_CODE,
          FINSL.SLNAME                        AS SUB_LEDGER_NAME,
          AUD2_SALINVCHG.GL_CC_APPL           AS GL_SITE_APPL,
          CASE AUD2_SALINVCHG.BASIS
             WHEN ''A'' THEN ''Amount''
             WHEN ''P'' THEN ''Percentage''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_SALINVCHG.APPAMT               AS APPLICABLE_AMOUNT,
          AUD2_SALINVCHG.FORMULAE             AS FORMULA,
          CASE
             WHEN AUD2_SALINVCHG.OPERATION_LEVEL = ''L'' THEN ''Line Level''
             WHEN AUD2_SALINVCHG.OPERATION_LEVEL = ''H'' THEN ''Header Level''
          END
             AS OPERATION_LEVEL,
          AUD2_SALINVCHG.ISTAX                AS ISTAX,
          AUD2_SALINVCHG.SOURCE               AS FACTOR_SOURCE,
          AUD2_SALINVCHG.GST_COMPONENT        AS GST_COMPONENT
     FROM AUD2_SALINVCHG INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										ORDER BY TRANSACTION_DATE)
									 VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''SNDMovement'') TRANS_DET 
						 ON (AUD2_SALINVCHG.INVCODE::text = TRANS_DET.HEADER_KEY_VALUE 
						     AND AUD2_SALINVCHG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          --LEFT JOIN SALINVMAIN SALINVMAIN
          --ON AUD2_SALINVCHG.INVCODE = SALINVMAIN.INVCODE
INNER JOIN SALCHG SALCHG ON AUD2_SALINVCHG.SALCHGCODE = SALCHG.SALCHGCODE
LEFT JOIN FINGL FINGL ON AUD2_SALINVCHG.GLCODE = FINGL.GLCODE
LEFT JOIN FINSL FINSL ON AUD2_SALINVCHG.SLCODE = FINSL.SLCODE', 'INVCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'INVCODE#SALCHGCODE#RATE#COALESCE(SIGN,''X'')#GLCODE#GL_CC_APPL#COALESCE(SLCODE,0)#BASIS#ISTAX#SOURCE#FORMULAE');
INSERT INTO main.aud2_table VALUES ('AuditEntry', 'INVSTKADJDET', 'Details', 1, 'AuditEntryDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invstkadjdet 
AS
SELECT TRANS_DET.VERSION_SEQ                  AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                   AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID               AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE             AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE             AS MODULE_KEY,
          AUD2_INVSTKADJDET.ACTION,
          AUD2_INVSTKADJDET.STKADJCODE           AS STOCK_ADJUSTMENT_CODE,
          AUD2_INVSTKADJDET.STKADJNO             AS STOCK_ADJUSTMENT_NUMBER,
          AUD2_INVSTKADJDET.STKADJDT             AS STOCK_ADJUSTMENT_DATE,
          AUD2_INVSTKADJDET.LOCCODE              AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                         AS STOCK_POINT_NAME,
          AUD2_INVSTKADJDET.ICODE                AS ICODE,
          INVITEM.BARCODE                        AS ITEM_BARCODE,
          AUD2_INVSTKADJDET.REM                  AS REMARKS,
          AUD2_INVSTKADJDET.PHYSTKQTY            AS PHYSICAL_STOCK,
          AUD2_INVSTKADJDET.QTY                  AS DIFFERENCE_QUANTITY,
          AUD2_INVSTKADJDET.CODE                 AS CODE,
          AUD2_INVSTKADJDET.COSTRATE             AS COST_RATE,
          AUD2_INVSTKADJDET.LEV1GRPCODE          AS LEVEL1_GROUP_CODE,
          AUD2_INVSTKADJDET.LEV2GRPCODE          AS LEVEL2_GROUP_CODE,
          AUD2_INVSTKADJDET.GRPCODE              AS GROUP_CODE,
          AUD2_INVSTKADJDET.INVARTICLE_CODE      AS ARTICLE_CODE,
          AUD2_INVSTKADJDET.CCODE1               AS CATEGORY1_CODE,
          AUD2_INVSTKADJDET.CCODE2               AS CATEGORY2_CODE,
          AUD2_INVSTKADJDET.CCODE3               AS CATEGORY3_CODE,
          AUD2_INVSTKADJDET.CCODE4               AS CATEGORY4_CODE,
          AUD2_INVSTKADJDET.CCODE5               AS CATEGORY5_CODE,
          AUD2_INVSTKADJDET.CCODE6               AS CATEGORY6_CODE,
          AUD2_INVSTKADJDET.LEV1GRPNAME          AS LEVEL1_GROUP_NAME,
          AUD2_INVSTKADJDET.LEV2GRPNAME          AS LEVEL2_GROUP_NAME,
          AUD2_INVSTKADJDET.GRPNAME              AS GROUP_NAME,
          AUD2_INVSTKADJDET.ARTICLE_NAME         AS ARTICLE_NAME,
          AUD2_INVSTKADJDET.CNAME1               AS CATEGORY1_NAME,
          AUD2_INVSTKADJDET.CNAME2               AS CATEGORY2_NAME,
          AUD2_INVSTKADJDET.CNAME3               AS CATEGORY3_NAME,
          AUD2_INVSTKADJDET.CNAME4               AS CATEGORY4_NAME,
          AUD2_INVSTKADJDET.CNAME5               AS CATEGORY5_NAME,
          AUD2_INVSTKADJDET.CNAME6               AS CATEGORY6_NAME,
          AUD2_INVSTKADJDET.MRPFROM              AS MRP_FROM,
          AUD2_INVSTKADJDET.MRPTO                AS MRP_TO,
          AUD2_INVSTKADJDET.PARTYCODE            AS PARTY_CODE,
          AUD2_INVSTKADJDET.PARTYNAME            AS PARTY_NAME,
          AUD2_INVSTKADJDET.BARCODE              AS BAR_CODE,
          AUD2_INVSTKADJDET.STOCKINDATE          AS STOCK_IN_DATE,
          AUD2_INVSTKADJDET.EXPIRY_DATE          AS EXPIRY_DATE,
          AUD2_INVSTKADJDET.WSP                  AS WHOLE_SALE_PRICE,
          AUD2_INVSTKADJDET.RATE                 AS RATE,
          AUD2_INVSTKADJDET.MRP                  AS MAXIMUN_RETAIL_PRICE,
          AUD2_INVSTKADJDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO        AS BATCH_SERIAL_NUMBER
FROM AUD2_INVSTKADJDET
          INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''AuditEntry'') TRANS_DET
             ON (AUD2_INVSTKADJDET.STKADJCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVSTKADJDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVLOC INVLOC ON AUD2_INVSTKADJDET.LOCCODE = INVLOC.LOCCODE
INNER JOIN INVITEM INVITEM ON AUD2_INVSTKADJDET.ICODE = INVITEM.ICODE
LEFT OUTER  JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_INVSTKADJDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'STKADJCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('JobReceipts', 'PRDJRCBOM', 'Bom Details', 1, 'JobReceiptsBOMDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdjrcbom 
AS 
SELECT TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID            AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_PRDJRCBOM.ACTION,
          AUD2_PRDJRCBOM.CODE                 AS CODE,
          AUD2_PRDJRCBOM.JRCCODE              AS JOB_RECEIPT_CODE,
          AUD2_PRDJRCBOM.LOTCODE              AS WORKING_PLAN_CODE,
          PRDLOTMAIN.LOTNO                    AS WORKING_PLAN_NUMBER,
          AUD2_PRDJRCBOM.JOBCODE              AS JOB_CODE,
          PRDJOBMAIN.JOBNO                    AS JOB_ORDER_NUMBER,
          AUD2_PRDJRCBOM.JOBDET_CODE          AS JOB_ORDER_DET_CODE,
          AUD2_PRDJRCBOM.JOBBOM_CODE          AS JOB_ORDER_BOM_CODE,
          --PRDJOBBOM.PRDJOBDET_CODE            AS JOB_ORDER_BOM_NUMBER,
          AUD2_PRDJRCBOM.ASSEMBLY_ICODE       AS ASSEMBLY_ITEM_ICODE,
          ASSEMBLY_ITEM.BARCODE               AS ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDJRCBOM.COMPONENT_ICODE      AS COMPONENT_ITEM_ICODE,
          COMPONENT_ITEM.BARCODE              AS COMPONENT_ITEM_BARCODE,
          AUD2_PRDJRCBOM.CONSUME_QTY          AS CONSUME_QUANTITY,
          AUD2_PRDJRCBOM.COSTRATE             AS COST_RATE,
          AUD2_PRDJRCBOM.CONSUME_RATE         AS CONSUME_RATE,
          AUD2_PRDJRCBOM.JOBRECEIPT_QTY       AS ACTUAL_RECEIPT_QUANTITY,
          AUD2_PRDJRCBOM.ASS_SAITEM_CODE      AS ASSEMBLY_SAITEM_CODE,
          PRD_SAITEM.SAINAME                  AS ASSEMBLY_SAITEM_NAME,
          AUD2_PRDJRCBOM.COM_SAITEM_CODE      AS COMPONENT_SAITEM_CODE,
          COM_PRD_SAITEM.SAINAME              AS COMPONENT_SAITEM_NAME,
          AUD2_PRDJRCBOM.CONSUME_QTY_SYSTEM   AS CONSUME_QTY_SYSTEM,
          AUD2_PRDJRCBOM.JOB_ASSEMBLY_ICODE   AS JOB_ASSEMBLY_ICODE,
          JOB_ASSEMBLY_ITEM.BARCODE           AS JOB_ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDJRCBOM.JRCDET_CODE          AS JOB_RECEIPT_DET_CODE,
          AUD2_PRDJRCBOM.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO     AS BATCH_SERIAL_NUMBER
FROM AUD2_PRDJRCBOM
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''JobReceipts'') TRANS_DET
             ON (AUD2_PRDJRCBOM.JRCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDJRCBOM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN PRDLOTMAIN PRDLOTMAIN ON AUD2_PRDJRCBOM.LOTCODE = PRDLOTMAIN.CODE
INNER JOIN PRDJOBMAIN PRDJOBMAIN ON AUD2_PRDJRCBOM.JOBCODE = PRDJOBMAIN.CODE
--LEFT OUTER JOIN PRDJOBBOM PRDJOBBOM ON AUD2_PRDJRCBOM.JOBBOM_CODE = PRDJOBBOM.JOBCODE
INNER JOIN INVITEM ASSEMBLY_ITEM ON AUD2_PRDJRCBOM.ASSEMBLY_ICODE = ASSEMBLY_ITEM.ICODE
INNER JOIN INVITEM COMPONENT_ITEM ON AUD2_PRDJRCBOM.COMPONENT_ICODE = COMPONENT_ITEM.ICODE
LEFT OUTER JOIN PRD_SAITEM PRD_SAITEM ON AUD2_PRDJRCBOM.ASS_SAITEM_CODE = PRD_SAITEM.CODE
LEFT OUTER JOIN PRD_SAITEM COM_PRD_SAITEM ON AUD2_PRDJRCBOM.COM_SAITEM_CODE = COM_PRD_SAITEM.CODE
INNER JOIN INVITEM JOB_ASSEMBLY_ITEM ON AUD2_PRDJRCBOM.JOB_ASSEMBLY_ICODE = JOB_ASSEMBLY_ITEM.ICODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_PRDJRCBOM.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'JRCCODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE             CODE,
          AUD.SRVCODE          SERVICE_INVOICE_CODE,
          AUD.SRVCODE          MODULE_KEY,
          AUD.PURSRVDET_CODE   SERVICE_INV_DET_CODE,
          AUD.SEQ              SEQUENCE,
          AUD.CHGCODE          CHARGE_CODE,
          CHG.CHGNAME          CHARGE_NAME,
          AUD.RATE             FACTOR,
          CASE
             WHEN AUD.BASIS = ''A'' THEN ''AMOUNT''
             WHEN AUD.BASIS = ''P'' THEN ''PERCENTAGE''
          END
             BASIS,
          AUD.SIGN             SIGN,
          AUD.CHGAMT           CHARGE_AMOUNT,
          AUD.APPAMT           APPLICABLE_AMOUNT,
          AUD.FORMULAE         FORMULAE,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''I'' THEN ''Item''
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          AUD.SOURCE           FACTOR_SOURCE,
          AUD.CODE             DETAIL_CHARGE_CODE,
          AUD.INCLUDE_IN_TDS   INCLUDE_IN_TDS,
          AUD.GLCODE           LEDGER_CODE,
          GL.GLNAME            LEDGER_NAME,
          AUD.SLCODE           SUBLEDGER_CODE,
          SL.SLNAME            SUBLEDGER_NAME,
          AUD.GST_COMPONENT    GST_COMPONENT,
          AUD.ISREVERSE        GST_REVERSE_CHARGE,
          AUD.ROUNDOFF_ADJ_AMT ROUNDOFF_ADJUSTED_AMT
     FROM aud2_pursrvchg_item aud INNER JOIN (SELECT A.*,
											  RANK()
											  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
											  FROM AUD2_TRANSACTION A
											  WHERE MODULE_SHORTCODE = ''Purchase Service Invoice'') trans_det 
								  ON (AUD.SRVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN finchg chg ON (AUD.CHGCODE = CHG.CHGCODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'SRVCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'PURSRVDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('Purchase Invoice', 'PURINVCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purinvchg 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.INVCODE              MODULE_KEY,
          AUD.INVCODE              INVOICE_TRANSFER_CODE,
          AUD.INVDT                INVOICE_TRANSFER_DATE,
          AUD.INVDT                INVOICE_DATE,
          AUD.DOCNO                DOCUMENT_NUMBER,
          AUD.CHGCODE              CHARGE_CODE,
          CHG.CHGNAME              CHARGE_NAME,
          AUD.RATE                 RATE,
          AUD.SIGN                 SIGN,
          AUD.CHGAMT               CHARGE_AMOUNT,
          AUD.GLCODE               LEDGER_CODE,
          GL.GLNAME                LEDGER_NAME,
          AUD.FORMCODE             FORM_CODE,
          FF.FORMNAME              FORM_NAME,
          AUD.FORMNO               FORM_NO,
          AUD.FORMDT               FORM_DATE,
          AUD.CODE                 CODE,
          AUD.SLCODE               SUBLEDGER_CODE,
          SL.SLNAME                SUBLEDGER_NAME,
          AUD.SEQ                  SEQUENCE,
          AUD.WITHOUT_TERM_FORMULA WITHOUT_TERM_FORMULA,
          CASE
             WHEN AUD.BASIS = ''P'' THEN ''Percentage''
             WHEN AUD.BASIS = ''A'' THEN ''Amount''
          END
             BASIS,
          AUD.APPAMT               APPLICABLE_AMOUNT,
          AUD.FORMULAE             FORMULA,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''I'' THEN ''Item''
             WHEN AUD.OPERATION_LEVEL = ''H'' THEN ''Header''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          AUD.SOURCE               FACTOR_SOURCE,
          AUD.GST_COMPONENT        GST_COMPONENT,
          AUD.ISREVERSE            GST_REVERSE_CHARGE
FROM aud2_purinvchg aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Purchase Invoice'') trans_det
			ON (AUD.INVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finchg chg ON AUD.CHGCODE = CHG.CHGCODE  
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finform ff ON (AUD.FORMCODE = FF.FORMCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'INVCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'INVCODE#CHGCODE#RATE#COALESCE(SIGN,''X'')#GLCODE#GL_CC_APPL#COALESCE(SLCODE,0)#BASIS#ISTAX#SOURCE#FORMULAE');
INSERT INTO main.aud2_table VALUES ('SubLedgerSiteAssignment', 'FINSL_OU', 'Sub Ledger Sites', 1, 'SLSiteAssignment', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finsl_ou 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE                     SL_SITE_ASSIGNMENT_CODE,
          AUD.CODE                     MODULE_KEY,
          AUD.SLCODE                   SUBLEDGER_CODE,
          F.SLNAME                     SUBLEDGER_NAME,
          F.SLNAME || '' -> '' || A.NAME MODULE_KEY_DISPLAY,
          AUD.ADMSITE_CODE             ORGANISATION_SITE_CODE,
          A.NAME                       ORGANISATION_SITE_NAME,
          AUD.TERMCODE                 SALES_TERM_CODE,
          S.SALTERMNAME                SALES_TERM_NAME,
          AUD.LGT_APPL                 LGT_IN_APPL,
          AUD.OUT_LGT_APPL             LGT_OUT_APPL,
          AUD.PERMIT_APPL              LGT_IN_PERMIT_APPL,
          AUD.OUT_PERMIT_APPL          LGT_OUT_PERMIT_APPL,
          AUD.GATEIN_APPL              GATEIN_APPL,
          AUD.FINTRADEGRP_CODE         PUR_TRADE_GROUP_CODE,
          T1.NAME                      PUR_TRADE_GROUP_NAME,
          AUD.PURTERMMAIN_CODE         PUR_TERM_CODE,
          P.NAME                       PUR_TERM_NAME,
          AUD.PRICELISTCODE            SALES_PRICE_LIST_CODE,
          SP.PRICELISTNAME             SALES_PRICE_LIST_NAME,
          AUD.INLOCCODE                RECEIVE_STOCK_POINT_CODE,
          I1.LOCNAME                   RECEIVE_STOCK_POINT_NAME,
          AUD.OUTLOCCODE               ISSUE_STOCK_POINT_CODE,
          I2.LOCNAME                   ISSUE_STOCK_POINT_NAME,
          AUD.PURFORMCODE              PUR_FORM_NAME_CODE,
          FN1.FORMNAME                 PURCHASE_FORM_NAME,
          AUD.SALTRADEGRP_CODE         SALES_TRADE_GROUP_CODE,
          T2.NAME                      SALES_TRADE_GROUP_NAME,
          AUD.SALFORMCODE              SALES_FORM_NAME_CODE,
          FN2.FORMNAME                 SALES_FORM_NAME,
          AUD.SHIPMENT_TRACKING_APPL   LGT_IN_SHIPTRACK_APPL,
          AUD.BALE_WISE_LRQTY          LGT_IN_BALETRACK_APPL
     FROM aud2_finsl_ou aud INNER JOIN (SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''SubLedgerSiteAssignment'') trans_det
							ON (AUD.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
							    AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finsl f ON AUD.SLCODE = F.SLCODE
INNER JOIN admsite a ON AUD.ADMSITE_CODE = A.CODE
LEFT OUTER JOIN saltermmain s ON (AUD.TERMCODE = S.SALTERMCODE)
LEFT OUTER JOIN fintradegrp t1 ON (AUD.FINTRADEGRP_CODE = T1.CODE)
LEFT OUTER JOIN purtermmain p ON (AUD.PURTERMMAIN_CODE = P.CODE)
LEFT OUTER JOIN salpricelistmain sp ON (AUD.PRICELISTCODE = SP.PRICELISTCODE)
LEFT OUTER JOIN invloc i1 ON (AUD.INLOCCODE = I1.LOCCODE)
LEFT OUTER JOIN invloc i2 ON (AUD.OUTLOCCODE = I2.LOCCODE)
LEFT OUTER JOIN finform fn1 ON (AUD.PURFORMCODE = FN1.FORMCODE)
LEFT OUTER JOIN fintradegrp t2 ON (AUD.SALTRADEGRP_CODE = T2.CODE)
LEFT OUTER JOIN finform fn2 ON (AUD.SALFORMCODE = FN2.FORMCODE)
LEFT OUTER JOIN admou ad ON (AUD.ADMOU_CODE = AD.CODE)', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase Service Invoice', 'PURSRVDET', 'Details', 1, 'PurchaseServiceDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE             CODE,
          AUD.SRVCODE          MODULE_KEY,
          SRV.SCHEME_DOCNO     MODULE_KEY_DISPLAY,
          AUD.SRVCODE          SERVICE_INVOICE_CODE,
          SRV.SCHEME_DOCNO     SERVICE_INVOICE_NO,
          AUD.SRVDT            SERVICE_INVOICE_DATE,
          AUD.SRVAMT           SERVICE_AMOUNT,
          AUD.GLCODE           LEDGER_CODE,
          GL1.GLNAME           LEDGER_NAME,
          AUD.GLCODE           SUBLEDGER_CODE,
          SL1.SLNAME           SUBLEDGER_NAME,
          AUD.SERVICECODE      SERVICE_CODE,
          PUR.SERVICENAME      SERVICE_NAME,
          AUD.CODE             SERVICE_DET_CODE,
          AUD.TAXCODE          TAX_GROUP_CODE,
          TAX.TAXNAME          TAX_GROUP_NAME,
          AUD.QTY              QUANTITY,
          AUD.RATE             RATE,
          AUD.TDSTYPECODE      TDS_TYPE_CODE,
          TDS.TDSNAME          TDS_NAME,
          AUD.TDSSECTION       TDS_SECTION,
          AUD.TDSGLCODE        TDS_GENERAL_LEDGER_CODE,
          GL2.GLNAME           TDS_GENERAL_LEDGER_NAME,
          AUD.TDSSLCODE        TDS_SUB_LEDGER_CODE,
          SL2.SLNAME           TDS_SUB_LEDGER_NAME,
          AUD.TDS_APPAMT       TDS_APP_AMOUNT,
          AUD.TDSRATE          TDS_RATE,
          AUD.TDSAMT           TDS_AMOUNT,
          AUD.CERTIFICATENO    CERTIFICATE_NO,
          AUD.TDS_ROUNDOFF_AMT TDS_ROUNDED_OFF_AMOUNT,
          AUD.TDS_GROSSAMT     TDS_GROSS_AMOUNT,
          AUD.HSN_SAC_CODE     HSN_SAC_CODE,
          AUD.GST_ITC_APPL     ITC_ELIGIBILITY
     FROM aud2_pursrvdet aud INNER JOIN (SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''Purchase Service Invoice'') trans_det 
							 ON (AUD.SRVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN fingl gl1 ON AUD.GLCODE = GL1.GLCODE
LEFT OUTER JOIN pursrvmain srv ON (AUD.SRVCODE = SRV.SRVCODE)
LEFT OUTER JOIN finsl sl1 ON (AUD.SLCODE = SL1.SLCODE)
LEFT OUTER JOIN purservice pur ON (AUD.SERVICECODE = PUR.SERVICECODE)
LEFT OUTER JOIN fintaxmain tax ON (AUD.TAXCODE = TAX.TAXCODE)
LEFT OUTER JOIN fintdstype tds ON (AUD.TDSTYPECODE = TDS.TDSTYPECODE)
LEFT OUTER JOIN fingl gl2 ON (AUD.TDSGLCODE = GL2.GLCODE)
LEFT OUTER JOIN finsl sl2 ON (AUD.TDSSLCODE = SL2.SLCODE)', 'SRVCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('PurchaseTermMaster', 'PURTERMDET', 'Detail', 1, 'PurTermCharges', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purtermdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          AUD.TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE,
          AUD.PURTERMMAIN_CODE TERM_CODE,
          AUD.PURTERMMAIN_CODE MODULE_KEY,
          P.NAME               TERM_NAME,
          P.NAME               MODULE_KEY_DISPLAY,
          AUD.SEQ              SEQUENCE,
          AUD.CHGCODE          CHARGE_CODE,
          C.CHGNAME            CHARGE_NAME,
          AUD.RATE             FACTOR,
          AUD.FORMULAE         EXPRESSION,
          AUD.SIGN             SIGN,
          AUD.OPERATION_LEVEL  OPERATION_LEVEL,
          AUD.CODE,
          AUD.INCLUDE_IN_TDS   INCLUDE_IN_TDS
     FROM aud2_purtermdet aud INNER JOIN (SELECT A.*, 
										  RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										  FROM AUD2_TRANSACTION A
										  WHERE MODULE_SHORTCODE = ''PurchaseTermMaster'') trans_det 
							  ON ((AUD.PURTERMMAIN_CODE::TEXT) = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finchg C ON (AUD.CHGCODE = C.CHGCODE)
LEFT OUTER JOIN purtermmain p ON (AUD.PURTERMMAIN_CODE = P.CODE)', 'PURTERMMAIN_CODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 2, 'PURTERMMAIN_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('GRC', 'INVGRCCHG', 'Charge', 1, 'PurchaseGRCCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrcchg 
AS 
SELECT TRANS_DET.VERSION_SEQ          AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER           AS LOGIN_USER,
          AUD2_INVGRCCHG.ACTION,
          TRANS_DET.TRANSACTION_ID       AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE     AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE     AS MODULE_KEY,
          AUD2_INVGRCCHG.GRCCODE         AS GOOD_RECEIVE_CODE,
          AUD2_INVGRCCHG.SEQ             AS SEQUENCE,
          AUD2_INVGRCCHG.CHGCODE         AS CHARGE_CODE,
          FINCHG.CHGNAME                 AS CHARGE_NAME,
          AUD2_INVGRCCHG.RATE            AS RATE,
          AUD2_INVGRCCHG.SIGN            AS SIGN,
          AUD2_INVGRCCHG.CHGAMT          AS CHARGE_AMOUNT,
          CASE AUD2_INVGRCCHG.BASIS
             WHEN ''A'' THEN ''Amount''
             WHEN ''P'' THEN ''Percentage''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_INVGRCCHG.APPAMT          AS APPLICABLE_AMOUNT,
          AUD2_INVGRCCHG.FORMULAE        AS FORMULA,
          CASE AUD2_INVGRCCHG.OPERATION_LEVEL
             WHEN ''H'' THEN ''HEADER''
             WHEN ''L'' THEN ''LINE LEVEL''
             ELSE '' ''
          END
             AS OPERATION_LEVEL,
          CASE AUD2_INVGRCCHG.ISTAX
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS ISTAX,
          CASE AUD2_INVGRCCHG.SOURCE
             WHEN ''F'' THEN ''Fixed''
             WHEN ''V'' THEN ''VAT''
             WHEN ''G'' THEN ''GST''
             WHEN ''E'' THEN ''Excise''
          END
             AS FACTOR_SOURCE,
          AUD2_INVGRCCHG.FORGN_CURR_RATE AS FOREIGN_CURRENCY_RATE,
          AUD2_INVGRCCHG.CODE            AS CODE,
          AUD2_INVGRCCHG.GST_COMPONENT   AS GST_COMPONENT,
          CASE AUD2_INVGRCCHG.ISREVERSE
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS GST_REVERSE_CHARGE
FROM AUD2_INVGRCCHG
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GRC'') TRANS_DET
             ON (AUD2_INVGRCCHG.GRCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGRCCHG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINCHG FINCHG ON AUD2_INVGRCCHG.CHGCODE = FINCHG.CHGCODE', 'GRCCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'GRCCODE#CHGCODE#RATE#FORMULAE#COALESCE(SIGN,''X'')');
INSERT INTO main.aud2_table VALUES ('JobOrderCancel', 'PRDJOBCNLDET', 'Details', 1, 'JobOrderCancelDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdjobcnldet 
AS
SELECT TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PRDJOBCNLDET.ACTION,
          AUD2_PRDJOBCNLDET.CNLCODE         AS CANCELLATION_CODE,
          PRDJOBCNLMAIN.CNLNO               AS CANCELLATION_NUMBER,
          AUD2_PRDJOBCNLDET.CODE            AS CODE,
          AUD2_PRDJOBCNLDET.PRDJOBMAIN_CODE AS JOB_CODE,
          PRDJOBMAIN.JOBNO                  AS JOB_ORDER_NUMBER,
          AUD2_PRDJOBCNLDET.PRDJOBDET_CODE  AS JOB_ORDER_DET_CODE,
          AUD2_PRDJOBCNLDET.ICODE           AS ICODE,
          INVITEM.BARCODE                   AS ITEM_BARCODE,
          AUD2_PRDJOBCNLDET.LOTCODE         AS WORKING_PLAN_CODE,
          PRDLOTMAIN.LOTNO                  AS WORKING_PLAN_NUMBER,
          AUD2_PRDJOBCNLDET.QTY             AS QUANTITY,
          AUD2_PRDJOBCNLDET.ASS_SAITEM_CODE AS ASSEMBLY_SAITEM_CODE,
          PRD_SAITEM.SAINAME                AS ASSEMBLY_SAITEM_NAME
FROM AUD2_PRDJOBCNLDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''JobOrderCancel'') TRANS_DET
             ON (AUD2_PRDJOBCNLDET.CNLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDJOBCNLDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN PRDJOBCNLMAIN PRDJOBCNLMAIN ON AUD2_PRDJOBCNLDET.CNLCODE = PRDJOBCNLMAIN.CODE
INNER JOIN PRDJOBMAIN PRDJOBMAIN ON AUD2_PRDJOBCNLDET.PRDJOBMAIN_CODE = PRDJOBMAIN.CODE
INNER JOIN INVITEM INVITEM ON AUD2_PRDJOBCNLDET.ICODE = INVITEM.ICODE
LEFT OUTER JOIN PRDLOTMAIN PRDLOTMAIN ON AUD2_PRDJOBCNLDET.LOTCODE = PRDLOTMAIN.CODE
LEFT OUTER JOIN PRD_SAITEM PRD_SAITEM ON AUD2_PRDJOBCNLDET.ASS_SAITEM_CODE = PRD_SAITEM.CODE', 'CNLCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purinvjrnchg 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE                 CODE,
          AUD.JRNCODE              MODULE_KEY,
          AUD.CODE                 PUR_INV_CHARGE_CODE,
          AUD.JRNCODE              DEBIT_CREDIT_NOTE_CODE,
          AUD.SEQ                  SEQUENCE,
          AUD.CHGCODE              CHARGE_CODE,
          CHG.CHGNAME              CHARGE_NAME,
          AUD.RATE                 RATE,
          AUD.SIGN                 SIGN,
          AUD.CHGAMT               CHARGE_AMOUNT,
          AUD.GLCODE               LEDGER_CODE,
          GL.GLNAME                GENERAL_LEDGER_NAME,
          AUD.SLCODE               SUBLEDGER_CODE,
          SL.SLNAME                SUBLEDGER_NAME,
          AUD.WITHOUT_TERM_FORMULA WITHOUT_TERM_FORMULA,
          AUD.GL_CC_APPL           GL_SITE_APPL,
          CASE
             WHEN AUD.BASIS = ''A'' THEN ''AMOUNT''
             WHEN AUD.BASIS = ''P'' THEN ''PERCENTAGE''
          END
             BASIS,
          AUD.APPAMT               APPLICABLE_AMOUNT,
          AUD.FORMULAE             FORMULA,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line Level''
             WHEN AUD.OPERATION_LEVEL = ''H'' THEN ''Header Level''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          CASE
             WHEN AUD.SOURCE = ''F'' THEN ''Fixed''
             WHEN AUD.SOURCE = ''V'' THEN ''VAT''
             WHEN AUD.SOURCE = ''G'' THEN ''GST''
             WHEN AUD.SOURCE = ''E'' THEN ''Excise''
          END
             AS FACTOR_SOURCE,
          AUD.GST_COMPONENT        GST_COMPONENT,
          AUD.FORMDT               FORM_DATE,
          AUD.FORMNO               FORM_NO,
          AUD.FORMCODE             FORM_CODE,
          F.FORMNAME               FORM_NAME,
          AUD.ISREVERSE            GST_REVERSE_CHARGE
FROM aud2_purinvjrnchg aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Purchase DN/CN'') trans_det
			ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finchg chg ON AUD.CHGCODE = CHG.CHGCODE 
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN finform f ON (AUD.FORMCODE = F.FORMCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'JRNCODE#CHGCODE#RATE#COALESCE(SIGN,''X'')#GLCODE#GL_CC_APPL#COALESCE(SLCODE,0)#BASIS#ISTAX#SOURCE#FORMULAE');
INSERT INTO main.aud2_table VALUES ('Sales Return', 'SALRTCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_salrtchg
 AS
 SELECT trans_det.version_seq,
    trans_det.login_user,
    trans_det.transaction_date,
	aud2_salrtchg.transaction_id,
    trans_det.header_key_value AS module_key,
    aud2_salrtchg.action,
    aud2_salrtchg.rtcode AS return_code,
    return.scheme_docno AS return_number,
    aud2_salrtchg.salchgcode AS charge_code,
    charge.salchgname AS charge_name,
    aud2_salrtchg.seq AS sequence,
    aud2_salrtchg.sign,
    aud2_salrtchg.rate,
    aud2_salrtchg.chgamt AS charge_amount,
    aud2_salrtchg.glcode AS general_ledger_code,
    general_ledger.glname AS general_ledger_name,
    aud2_salrtchg.formcode AS form_code,
    form.formname AS form_name,
    aud2_salrtchg.formno AS form_no,
    aud2_salrtchg.formdt AS form_date,
    aud2_salrtchg.code,
    aud2_salrtchg.without_term_formula,
    aud2_salrtchg.slcode AS sub_ledger_code,
    sub_ledger.slname AS sub_ledger_name,
        CASE aud2_salrtchg.basis
            WHEN ''A''::bpchar THEN ''AMOUNT''::text
            WHEN ''P''::bpchar THEN ''PERCENTAGE''::text
            ELSE '' ''::text
        END AS basis,
    aud2_salrtchg.appamt AS applicable_amount,
    aud2_salrtchg.formulae AS expression,
        CASE aud2_salrtchg.operation_level
            WHEN ''L''::bpchar THEN ''Line Level''::text
            WHEN ''H''::bpchar THEN ''Header Level''::text
            ELSE '' ''::text
        END AS applicability,
        CASE aud2_salrtchg.istax
            WHEN ''Y''::bpchar THEN ''YES''::text
            WHEN ''N''::bpchar THEN ''NO''::text
            ELSE '' ''::text
        END AS tax_charge,
        CASE aud2_salrtchg.source
            WHEN ''F''::bpchar THEN ''Fixed''::text
            WHEN ''V''::bpchar THEN ''VAT''::text
            WHEN ''E''::bpchar THEN ''Excise''::text
            WHEN ''G''::bpchar THEN ''GST''::text
            ELSE '' ''::text
        END AS factor_source,
    aud2_salrtchg.formamt AS form_amount,
    aud2_salrtchg.gst_component
   FROM aud2_salrtchg
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''Sales Return''::text) trans_det ON aud2_salrtchg.rtcode::text = trans_det.header_key_value::text AND aud2_salrtchg.transaction_id::text = trans_det.transaction_id::text
     LEFT JOIN salrtmain return ON aud2_salrtchg.rtcode = return.rtcode
     LEFT JOIN salchg charge ON aud2_salrtchg.salchgcode = charge.salchgcode
     LEFT JOIN fingl general_ledger ON aud2_salrtchg.glcode = general_ledger.glcode
     LEFT JOIN finform form ON aud2_salrtchg.formcode = form.formcode
     LEFT JOIN finsl sub_ledger ON aud2_salrtchg.slcode = sub_ledger.slcode', 'RTCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'RTCODE#SALCHGCODE#RATE#GLCODE#COALESCE(SLCODE,0)#FORMULAE#COALESCE(SIGN,''X'')#ISTAX#SOURCE#BASIS');
INSERT INTO main.aud2_table VALUES ('Sale Service Invoice', 'SALSRVCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salsrvchg
 AS
 SELECT trans_det.version_seq,
    aud.action,
    trans_det.login_user,
    trans_det.transaction_date,
    aud.transaction_id,
    aud.srvcode AS module_key,
    aud.srvcode AS service_invoice_code,
    s.salchgcode AS charge_code,
    s.salchgname AS charge_name,
    aud.rate AS factor,
    aud.sign,
    aud.chgamt AS charge_amount,
    gl.glcode AS general_ledger_code,
    gl.glname AS general_ledger_name,
    f.formcode AS form_code,
    f.formname AS form_name,
    aud.formno AS form_no,
    aud.formdt AS form_date,
    aud.code AS sales_charge_code,
    sl.slcode AS sub_ledger_code,
    sl.slname AS sub_ledger_name,
    aud.seq AS sequence,
    aud.appamt AS applicable_amount,
    aud.formulae AS formula,
        CASE
            WHEN aud.operation_level = ''L''::bpchar THEN ''Item''::text
            WHEN aud.operation_level = ''H''::bpchar THEN ''Header''::text
            ELSE NULL::text
        END AS operation_level,
        CASE
            WHEN aud.istax = ''Y''::bpchar THEN ''YES''::text
            WHEN aud.istax = ''N''::bpchar THEN ''NO''::text
            ELSE NULL::text
        END AS istax,
        CASE
            WHEN aud.source = ''G''::bpchar THEN ''GST''::text
            WHEN aud.source = ''F''::bpchar THEN ''Fixed''::text
            WHEN aud.source = ''E''::bpchar THEN ''Excise''::text
            ELSE NULL::text
        END AS factor_source,
        CASE
            WHEN aud.basis = ''A''::bpchar THEN ''Amount''::text
            ELSE ''Percentage''::text
        END AS basis,
    aud.gst_component
   FROM aud2_salsrvchg aud
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''Sale Service Invoice''::text) trans_det ON aud.srvcode::character varying::text = trans_det.header_key_value::text AND aud.transaction_id::text = trans_det.transaction_id::text
     JOIN salchg s ON aud.chgcode = s.salchgcode
     LEFT JOIN fingl gl ON aud.glcode = gl.glcode
     LEFT JOIN finform f ON aud.formcode = f.formcode
     LEFT JOIN finsl sl ON aud.slcode = sl.slcode', 'SRVCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'SRVCODE#CHGCODE#RATE#GLCODE#COALESCE(SLCODE,0)#FORMULAE#ISTAX#SOURCE#BASIS');
INSERT INTO main.aud2_table VALUES ('Retail Sales', 'SALCSMOP', 'MOP', 1, 'RetailSaleMOP', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salcsmop 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE               CODE,
          AUD.CSCODE             RETAIL_SALE_CODE,
          AUD.CODE               RETAIL_SALE_MOP_CODE,
          AUD.CSCODE             MODULE_KEY,
          AUD.PSITE_MOP_CODE     RETAIL_MOP_ID,
          MOP.NAME               RETAIL_SALE_MOP_NAME,
          AUD.GLCODE             LEDGER_CODE,
          GL.GLNAME              LEDGER_NAME,
          AUD.SLCODE             SUB_LEDGER_CODE,
          SL.SLNAME              SUB_LEDGER_NAME,
          AUD.AMOUNT             MOP_AMOUNT,
          AUD.TENDER_MASTER_CODE TENDER_CODE,
          T.NAME                 TENDER_NAME,
          AUD.REFNO              REF_NO,
          AUD.REFDATETIME        REF_DATE_TIME,
          AUD.REMARKS            REMARKS,
          AUD.ADDITIONALDETAILS1 ADDITIONAL_DETAILS_1,
          AUD.ADDITIONALDETAILS2 ADDITIONAL_DETAILS_2,
          AUD.ADDITIONALDETAILS3 ADDITIONAL_DETAILS_3,
          AUD.ADDITIONALDETAILS4 ADDITIONAL_DETAILS_4
     FROM aud2_salcsmop aud INNER JOIN (SELECT A.*, 
										RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''Retail Sales'') trans_det 
							ON (AUD.CSCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN psite_mop mop ON (AUD.PSITE_MOP_CODE = MOP.CODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN tender_master t ON (AUD.TENDER_MASTER_CODE = T.CODE)', 'CSCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'CSCODE#COALESCE(PSITE_MOP_CODE,0)');
INSERT INTO main.aud2_table VALUES ('Sales DN/CN', 'SALINVJRNDET', 'Detail', 1, 'SalesDNCNDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salinvjrndet 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE           CODE,
          AUD.JRNCODE        DEBIT_CREDIT_CODE,
          AUD.JRNCODE        MODULE_KEY,
          AUD.SALINVDET_CODE INVOICE_TRANSFER_DET_CODE,
          AUD.CODE           INVOICE_DETAIL_CODE,
          AUD.ICODE,
          I.BARCODE          BARCODE,
          AUD.QTY            QUANTITY,
          AUD.RATE           STANDARD_COST,
          AUD.AMOUNT         ADJUSTMENT_AMOUNT,
          AUD.REMARKS        REMARKS,
          AUD.CHGAMT         CHARGE_AMOUNT,
          AUD.HSN_SAC_CODE   HSN_SAC_CODE,
          AUD.TAXAMT         TAX_AMOUNT,
          AUD.GLCODE         LEDGER_CODE,
          GL.GLNAME          LEDGER_NAME,
          SL.SLCODE          SUBLEDGER_CODE,
          SL.SLNAME          SUBLEDGER_NAME
     FROM aud2_salinvjrndet aud INNER JOIN (SELECT A.*,
											RANK()
											OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
												ORDER BY TRANSACTION_DATE)
											 VERSION_SEQ
											FROM AUD2_TRANSACTION A
											WHERE MODULE_SHORTCODE = ''Sales DN/CN'') trans_det
								ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
								    AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN invitem i ON AUD.ICODE = I.ICODE
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'Charge Detail', 1, 'SalesInvoiceChargeDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salinvchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          AUD2_SALINVCHG_ITEM.ACTION           AS ACTION,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          AUD2_SALINVCHG_ITEM.TRANSACTION_ID   AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_SALINVCHG_ITEM.INVCODE          AS INVOICE_TRANSFER_CODE,
          --SALINVMAIN.SCHEME_DOCNO              AS INVOICE_TRANSFER_NUMBER,
          AUD2_SALINVCHG_ITEM.SALINVDET_CODE   AS INVOICE_TRANSFER_DET_CODE,
          --SALINVDET.DCDETCODE                  AS CHALLAN_DETAIL_CODE,
          --SALINVDET.DCCODE                     AS CHALLAN_CODE,
          --SALINVDET.ICODE                      AS ICODE,
          --SALINVDET.RATE                       AS ITEM_RATE,
          AUD2_SALINVCHG_ITEM.CHGCODE          AS CHARGE_CODE,
          SALCHG.SALCHGNAME                    AS CHARGE_NAME,
          AUD2_SALINVCHG_ITEM.GLCODE           AS GENERAL_LEDGER_CODE,
          FINGL.GLNAME                         AS GENERAL_LEDGER_NAME,
          AUD2_SALINVCHG_ITEM.SLCODE           AS SUB_LEDGER_CODE,
          FINSL.SLNAME                         AS SUB_LEDGER_NAME,
          AUD2_SALINVCHG_ITEM.RATE             AS FACTOR,
          CASE AUD2_SALINVCHG_ITEM.BASIS
             WHEN ''A'' THEN ''Amount''
             WHEN ''P'' THEN ''Percentage''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_SALINVCHG_ITEM.SIGN             AS SIGN,
          AUD2_SALINVCHG_ITEM.CHGAMT           AS CHARGE_AMOUNT,
          AUD2_SALINVCHG_ITEM.APPAMT           AS APPLICABLE_AMOUNT,
          AUD2_SALINVCHG_ITEM.FORMULAE         AS FORMULA,
          AUD2_SALINVCHG_ITEM.ISTAX            AS ISTAX,
          AUD2_SALINVCHG_ITEM.SOURCE           AS FACTOR_SOURCE,
          AUD2_SALINVCHG_ITEM.CODE             AS DETAIL_CHARGE_CODE,
          CASE
             WHEN AUD2_SALINVCHG_ITEM.OPERATION_LEVEL = ''I'' THEN ''Item''
             WHEN AUD2_SALINVCHG_ITEM.OPERATION_LEVEL = ''L'' THEN ''Line''
          END
             AS OPERATION_LEVEL,
          AUD2_SALINVCHG_ITEM.GST_COMPONENT    AS GST_COMPONENT,
          AUD2_SALINVCHG_ITEM.ROUNDOFF_ADJ_AMT AS ROUNDOFF_ADJUSTED_AMT
     FROM AUD2_SALINVCHG_ITEM INNER JOIN(SELECT A.*, 
										 RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										 FROM AUD2_TRANSACTION A
										 WHERE MODULE_SHORTCODE = ''SNDMovement'') TRANS_DET
										 ON (AUD2_SALINVCHG_ITEM.INVCODE::text = TRANS_DET.HEADER_KEY_VALUE
										     AND AUD2_SALINVCHG_ITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
--LEFT JOIN SALINVMAIN SALINVMAIN ON AUD2_SALINVCHG_ITEM.INVCODE = SALINVMAIN.INVCODE
--INNER JOIN SALINVDET SALINVDET ON AUD2_SALINVCHG_ITEM.SALINVDET_CODE = SALINVDET.CODE
INNER JOIN SALCHG SALCHG ON AUD2_SALINVCHG_ITEM.CHGCODE = SALCHG.SALCHGCODE
LEFT JOIN FINGL FINGL ON AUD2_SALINVCHG_ITEM.GLCODE = FINGL.GLCODE
LEFT JOIN FINSL FINSL ON AUD2_SALINVCHG_ITEM.SLCODE = FINSL.SLCODE', 'INVCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'SALINVDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('SubLedgerSiteAssignment', 'FINSL_OU_SITE', 'Customer Sites', 1, 'CustomerSiteAssignment', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finsl_ou_site 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          AUD.TRANSACTION_ID,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          F.SLNAME                          SUBLEDGER_NAME,
          AUD.FINSL_OU_CODE                 MODULE_KEY,
          F.SLNAME || '' -> '' || AD.NAME     MODULE_KEY_DISPLAY,
          AD.NAME,
          AUD.CODE                          SL_SITE_SLSITE_ASSGN_CODE,
          A3.NAME                           ORGANISATION_SITE_NAME,
          AUD.SITE_CODE                     CUSTOMER_SITE_CODE,
          A1.NAME                           CUSTOMER_SITE_NAME,
          AUD.TERMCODE                      SALES_TERM_CODE,
          TM.SALTERMNAME                    SALES_TERM_NAME,
          AUD.OUT_LGT_APPL                  LGT_OUT_APPL,
          AUD.OUT_PERMIT_APPL               LGT_OUT_PERMIT_APPL,
          AUD.PRICELISTCODE                 SALES_PRICE_LIST_CODE,
          SP.PRICELISTNAME                  SALES_PRICE_LIST_NAME,
          AUD.SALTRADEGRP_CODE              SALES_TRADE_GROUP_CODE,
          T.NAME                            SALES_TRADE_GROUP_NAME,
          AUD.SALFORMCODE                   SALES_FORM_NAME_CODE,
          FN.FORMNAME                       SALES_FORM_NAME,
          AUD.TRANSIT_VIA_ADMSITE_CODE      TRANSIT_VIA_SITE_CODE,
          A2.NAME                           TRANSIT_VIA_SITE_NAME,
          AUD.STRICTLY_FOLLOW_TRANSIT_ROUTE TRANSIT_VIA_STRICT_FOLLOW
     FROM aud2_finsl_ou_site aud INNER JOIN (SELECT A.*,
											RANK()
											OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
											ORDER BY TRANSACTION_DATE)
											VERSION_SEQ
											FROM AUD2_TRANSACTION A
											WHERE MODULE_SHORTCODE = ''SubLedgerSiteAssignment'') trans_det
								ON ((AUD.FINSL_OU_CODE::TEXT) = TRANS_DET.HEADER_KEY_VALUE 
								    AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN admsite a1 ON AUD.SITE_CODE = A1.CODE 
LEFT OUTER JOIN salpricelistmain sp ON (AUD.PRICELISTCODE = SP.PRICELISTCODE)
LEFT OUTER JOIN finform fn ON (AUD.SALFORMCODE = FN.FORMCODE)
LEFT OUTER JOIN fintradegrp t ON (AUD.SALTRADEGRP_CODE = T.CODE)
LEFT OUTER JOIN saltermmain tm ON (AUD.TERMCODE = TM.SALTERMCODE)
LEFT OUTER JOIN admsite a2 ON (AUD.TRANSIT_VIA_ADMSITE_CODE = A2.CODE)
INNER JOIN (
			SELECT CODE, ADMOU_CODE, SLCODE, ADMSITE_CODE 
			FROM FINSL_OU
			UNION
			SELECT CODE, ADMOU_CODE, SLCODE, ADMSITE_CODE
			FROM AUD2_FINSL_OU
			WHERE ACTION_SUBTYPE = ''OLD''
		   ) fs ON AUD.FINSL_OU_CODE = FS.CODE
LEFT OUTER JOIN admsite a3 ON (FS.ADMSITE_CODE = A3.CODE)
LEFT OUTER JOIN finsl f ON (FS.SLCODE = F.SLCODE)
LEFT OUTER JOIN admou ad ON (FS.ADMOU_CODE = AD.CODE)', 'FINSL_OU_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase Service Invoice', 'PURSRV_SCHEDULE', 'Service Schedule', 1, 'PurchaseServiceSchedule', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrv_schedule 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE                    CODE,
          AUD.PURSRVMAIN_CODE         MODULE_KEY,
          SRV.SCHEME_DOCNO            MODULE_KEY_DISPLAY,
          AUD.PURSRVMAIN_CODE         SERVICE_INVOICE_CODE,
          SRV.SCHEME_DOCNO            ORDER_NUMBER,
          AUD.PURSRVDET_CODE          SERVICE_DET_CODE,
          DET.SERVICECODE             SERVICE_CODE,
          ORD.CODE                    SERVICE_ORD_DET_CODE,
          AUD.PURSRVORD_SCHEDULE_CODE PURSRVORD_SCHEDULE_CODE,
          SCH.PURSRVORDMAIN_CODE      SERVICE_ORD_CODE,
          PUR.SERVICENAME             SERVICENAME,
          AUD.ADMSITE_CODE            SITE_CODE,
          S.NAME                      SITE_NAME,
          AUD.QTY                     QUANTITY,
          AUD.RATE                    RATE,
          AUD.AMT                     AMOUNT,
          AUD.REMARKS                 REMARKS
	FROM aud2_pursrv_schedule aud INNER JOIN (SELECT A.*,
											  RANK()
											  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
											  FROM AUD2_TRANSACTION A
											  WHERE MODULE_SHORTCODE = ''Purchase Service Invoice'') trans_det 
								  ON (AUD.PURSRVMAIN_CODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
								      AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN pursrvord_schedule sch ON AUD.PURSRVORD_SCHEDULE_CODE = SCH.CODE
INNER JOIN admsite s ON AUD.ADMSITE_CODE = S.CODE
INNER JOIN purservice pur ON AUD.SERVICECODE = PUR.SERVICECODE
INNER JOIN pursrvorddet ord ON AUD.PURSRVORDDET_CODE = ORD.CODE
LEFT OUTER JOIN pursrvmain srv ON (AUD.PURSRVMAIN_CODE = SRV.SRVCODE)
LEFT OUTER JOIN pursrvdet det ON (AUD.PURSRVDET_CODE = DET.CODE)', 'PURSRVMAIN_CODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 5, 'CODE');
INSERT INTO main.aud2_table VALUES ('AccountsLedger', 'FINGL', 'Ledger', 1, 'LedgerMaster', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fingl 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.GLCODE             GLCODE,
          AUD.GLCODE             MODULE_KEY,
          AUD.GLNAME             GLNAME,
          AUD.GLNAME             MODULE_KEY_DISPLAY,
          AUD.ABBRE              ABBREVIATION,
          CASE
             WHEN AUD.TYPE = ''L'' THEN ''Liabilities''
             WHEN AUD.TYPE = ''A'' THEN ''Assets''
             WHEN AUD.TYPE = ''I'' THEN ''Income''
             WHEN AUD.TYPE = ''E'' THEN ''Expense''
          END
             TYPE,
          AUD.GRPCODE            GROUP_CODE,
          F.GRPNAME              GROUP_NAME,
          AUD.ADDR               ADDRESS,
          AUD.CTNAME             CITY,
          AUD.PIN                PINCODE,
          AUD.PH1                PHONE1,
          AUD.PH2                PHONE2,
          AUD.PH3                PHONE3,
          AUD.PH4                MOBILE_NO,
          AUD.FX1                FAX_NUMBER1,
          AUD.FX2                FAX_NUMBER2,
          AUD.EMAIL              EMAIL,
          AUD.WEBSITE            WEBSITE,
          AUD.CP                 CONTACT_PERSON,
          AUD.LSTNO              LOCAL_SALESTAX_NO,
          AUD.CSTNO              CENTRAL_SALESTAX_NO,
          AUD.PAN                PAN,
          AUD.INTRATE            INTEREST_RATE,
          CASE
             WHEN AUD.SRCTYPE = ''G'' THEN ''General''
             WHEN AUD.SRCTYPE = ''C'' THEN ''Cash''
             WHEN AUD.SRCTYPE = ''B'' THEN ''Bank''
             WHEN AUD.SRCTYPE = ''R'' THEN ''AR/AP''
          END
             NATURE,
          CASE
             WHEN AUD.COSTAPP = ''Y'' THEN ''Yes''
             WHEN AUD.COSTAPP = ''N'' THEN ''No''
          END
             SITE_APPLICABLE,
          AUD.BRSAMT             BRS_OPENING_AMOUNT,
          CASE WHEN AUD.EXT = ''Y'' THEN ''Yes'' WHEN AUD.EXT = ''N'' THEN ''No'' END
             EXTINCT,
          AUD.TDSSRCCODE         TDS_SOURCE_CODE,
          TD.TDSSRCNAME          TDS_SOURCE_NAME,
          AUD.CHQLABEL           CHEQUE_LABEL,
          CASE
             WHEN AUD.SLAPP = ''Y'' THEN ''Yes''
             WHEN AUD.SLAPP = ''N'' THEN ''No''
          END
             SUBLEDGER_APPLICABLE,
          AUD.ADMSITE_CODE_OWNER CASHBANK_SITE_CODE,
          A.NAME                 CASHBANK_SITE_NAME,
          AUD.GLSEQ              SEQUENCE
FROM aud2_fingl aud 
		INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''AccountsLedger'') trans_det
			ON (AUD.GLCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN fingrp f ON AUD.GRPCODE = F.GRPCODE
LEFT OUTER JOIN fintdssrc td ON (AUD.TDSSRCCODE = TD.TDSSRCCODE)
LEFT OUTER JOIN admsite a ON (AUD.ADMSITE_CODE_OWNER = A.CODE)', 'GLCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'GLCODE');
INSERT INTO main.aud2_table VALUES ('PurchaseOrder', 'PURORDCHG', 'Charge', 1, 'POCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purordchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          AUD2_PURORDCHG.TRANSACTION_ID       AS TRANSACTION_ID,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_PURORDCHG.ORDCODE              AS ORDER_CODE,
          AUD2_PURORDCHG.CHGCODE              AS CHARGE_CODE,
          FINCHG.CHGNAME                      AS CHARGE_NAME,
          AUD2_PURORDCHG.RATE                 AS FACTOR,
          AUD2_PURORDCHG.SIGN                 AS SIGN,
          AUD2_PURORDCHG.CODE                 AS ORDER_CHARGE_CODE,
          AUD2_PURORDCHG.SEQ                  AS SEQUENCE,
          CASE AUD2_PURORDCHG.BASIS
             WHEN ''A'' THEN ''Amount''
             WHEN ''P'' THEN ''Percentage''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_PURORDCHG.APPAMT               AS APPLICABLE_AMOUNT,
          AUD2_PURORDCHG.CHGAMT               AS CHARGE_AMOUNT,
          AUD2_PURORDCHG.FORMULAE             AS FORMULA,
          CASE AUD2_PURORDCHG.OPERATION_LEVEL
             WHEN ''L'' THEN ''Line''
             WHEN ''H'' THEN ''Header''
             ELSE '' ''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD2_PURORDCHG.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD2_PURORDCHG.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          CASE AUD2_PURORDCHG.SOURCE
             WHEN ''F'' THEN ''Fixed''
             WHEN ''V'' THEN ''VAT''
             WHEN ''E'' THEN ''Excise''
             WHEN ''G'' THEN ''GST''
             ELSE '' ''
          END
             FACTOR_SOURCE,
          AUD2_PURORDCHG.WITHOUT_TERM_FORMULA AS WITHOUT_TERM_FORMULA,
          AUD2_PURORDCHG.GST_COMPONENT        AS GST_COMPONENT,
          CASE
             WHEN AUD2_PURORDCHG.ISREVERSE = ''Y'' THEN ''YES''
             WHEN AUD2_PURORDCHG.ISREVERSE = ''N'' THEN ''NO''
          END
             GST_REVERSE_CHARGE
     FROM AUD2_PURORDCHG INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''PurchaseOrder'') TRANS_DET
						 ON (AUD2_PURORDCHG.ORDCODE::text = TRANS_DET.HEADER_KEY_VALUE 
						     AND AUD2_PURORDCHG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINCHG FINCHG ON AUD2_PURORDCHG.CHGCODE = FINCHG.CHGCODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'ORDCODE#CHGCODE#RATE');
INSERT INTO main.aud2_table VALUES ('JobReceipts', 'PRDJRCDET', 'Details', 1, 'JobReceiptsDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdjrcdet 
AS 
SELECT TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID            AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_PRDJRCDET.ACTION,
          AUD2_PRDJRCDET.JRCCODE              AS JOB_RECEIPT_CODE,
          AUD2_PRDJRCDET.JOBCODE              AS JOB_CODE,
          PRDJOBMAIN.JOBNO                    AS JOB_ORDER_NUMBER,
          AUD2_PRDJRCDET.LOTCODE              AS WORKING_PLAN_CODE,
          PRDLOTMAIN.LOTNO                    AS WORKING_PLAN_NUMBER,
          AUD2_PRDJRCDET.ASSEMBLY_ICODE       AS ICODE,
          ASSEMBLY_ITEM.BARCODE               AS ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDJRCDET.RECEIVE_LOCCODE      AS RECEIVE_STOCKPOINT_CODE,
          RECEIVE_STOCKPOINT.LOCNAME          AS RECEIVE_STOCKPOINT_NAME,
          AUD2_PRDJRCDET.QTY                  AS QUANTITY,
          AUD2_PRDJRCDET.JOB_RATE             AS JOB_RATE,
          AUD2_PRDJRCDET.RATE                 AS RATE,
          AUD2_PRDJRCDET.JOBDET_CODE          AS JOB_ORDER_DET_CODE,
          AUD2_PRDJRCDET.CODE                 AS CODE,
          AUD2_PRDJRCDET.REMARKS              AS REMARKS,
          AUD2_PRDJRCDET.JOB_ASSEMBLY_ICODE   AS JOB_ASSEMBLY_ICODE,
          JOB_ASSEMBLY_ITEM.BARCODE           AS JOB_ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDJRCDET.COSTRATE             AS COST_RATE,
          AUD2_PRDJRCDET.ASS_SAITEM_CODE      AS ASSEMBLY_SAITEM_CODE,
          PRD_SAITEM.SAINAME                  AS ASSEMBLY_SAITEM_NAME,
          AUD2_PRDJRCDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO     AS BATCH_SERIAL_NUMBER
FROM AUD2_PRDJRCDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''JobReceipts'') TRANS_DET
             ON (AUD2_PRDJRCDET.JRCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDJRCDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN PRDJOBMAIN PRDJOBMAIN ON AUD2_PRDJRCDET.JOBCODE = PRDJOBMAIN.CODE
LEFT OUTER JOIN PRDLOTMAIN PRDLOTMAIN ON AUD2_PRDJRCDET.LOTCODE = PRDLOTMAIN.CODE
INNER JOIN INVITEM ASSEMBLY_ITEM ON AUD2_PRDJRCDET.ASSEMBLY_ICODE = ASSEMBLY_ITEM.ICODE
INNER JOIN INVLOC RECEIVE_STOCKPOINT ON AUD2_PRDJRCDET.RECEIVE_LOCCODE = RECEIVE_STOCKPOINT.LOCCODE
INNER JOIN INVITEM JOB_ASSEMBLY_ITEM ON AUD2_PRDJRCDET.JOB_ASSEMBLY_ICODE = JOB_ASSEMBLY_ITEM.ICODE
LEFT OUTER JOIN PRD_SAITEM PRD_SAITEM ON AUD2_PRDJRCDET.ASS_SAITEM_CODE = PRD_SAITEM.CODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_PRDJRCDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'JRCCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Production', 'PRDRC', 'Receive Details', 1, 'ProductionReceiveDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdrc 
AS 
SELECT TRANS_DET.VERSION_SEQ            AS VERSION_SEQ,
          AUD2_PRDRC.ACTION,
          TRANS_DET.LOGIN_USER             AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID         AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE       AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE       AS MODULE_KEY,
          AUD2_PRDRC.ORDCODE               AS ORDER_CODE,
          AUD2_PRDRC.ORDDT                 AS ORDER_DATE,
          AUD2_PRDRC.LOCCODE               AS STOCK_POINT_CODE,
          STOCK_POINT.LOCNAME              AS STOCK_POINT_NAME,
          AUD2_PRDRC.ICODE                 AS ICODE,
          INVITEM.BARCODE                  AS ITEM_BARCODE,
          AUD2_PRDRC.QTY                   AS QUANTITY,
          AUD2_PRDRC.SRVRATE               AS SERVICE_RATE,
          AUD2_PRDRC.SRVAMT                AS SERVICE_AMOUNT,
          AUD2_PRDRC.REM                   AS REMARKS,
          AUD2_PRDRC.SEQ                   AS SEQUENCE,
          AUD2_PRDRC.RATE                  AS RATE,
          AUD2_PRDRC.CODE                  AS CODE,
          AUD2_PRDRC.PSITE_STOCKPOINT_CODE AS POS_STOCKPOINT_CODE,
          POS_STOCK_POINT.NAME             AS POS_STOCKPOINT_NAME,
          AUD2_PRDRC.INVBATCH_SERIAL_CODE  AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO  AS BATCH_SERIAL_NUMBER
FROM AUD2_PRDRC
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Production'') TRANS_DET
             ON (AUD2_PRDRC.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDRC.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVLOC STOCK_POINT ON AUD2_PRDRC.LOCCODE = STOCK_POINT.LOCCODE
INNER JOIN INVITEM INVITEM ON AUD2_PRDRC.ICODE = INVITEM.ICODE
LEFT OUTER JOIN PSITE_STOCKPOINT POS_STOCK_POINT ON AUD2_PRDRC.PSITE_STOCKPOINT_CODE = POS_STOCK_POINT.CODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_PRDRC.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('Role', 'INT$CLASS_ROLE', 'Data Import Assign', 1, 'DataImportAssignment', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_int$class_role 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          CR.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          CR.TRANSACTION_ID,
          CR.CODE,
          CR.ROLEID     MODULE_KEY,
          CR.ROLEID     ROLE_CODE,
          --R.RLNAME      ROLE_NAME,
          CR.CLASSNAME  DATA_IMPORT_CLASS_CODE,
          DISPLAYNAME   DATA_IMPORT_CLASS_NAME,
          C.DISPLAYNAME MODULE_KEY_DISPLAY
     FROM AUD2_INT$CLASS_ROLE CR INNER JOIN (SELECT A.*,
											 RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
											 FROM AUD2_TRANSACTION A
											 WHERE MODULE_SHORTCODE = ''Role'') TRANS_DET 
								 ON (CR.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID) 
INNER JOIN INT$CLASS C ON CR.CLASSNAME = C.CLASSNAME', 'ROLEID', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'ROLEID#CLASSNAME');
INSERT INTO main.aud2_table VALUES ('MarginRule', 'INVMMRULE', 'Header', 1, 'RuleHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invmmrule 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          AUD.TRANSACTION_ID,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          CODE,
          CODE                                  MODULE_KEY,
          NAME                                  MARGINRULE_NAME,
          NAME                                  MODULE_KEY_DISPLAY,
          REMARKS                               REMARKS,
          CASE WHEN EXT=''Y'' THEN  ''Yes'' WHEN EXT=''N'' THEN  ''No'' END  EXTINCT
     FROM AUD2_INVMMRULE AUD 
	 INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''MarginRule'') TRANS_DET
			ON ((AUD.CODE)::TEXT = TRANS_DET.HEADER_KEY_VALUE
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('POSGRC', 'PSITE_GRCCHG', 'Total Charge', 1, 'PurchaseGRTCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_psite_grcchg 
AS 
SELECT TRANS_DET.VERSION_SEQ            AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER             AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID         AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE       AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE       AS MODULE_KEY,
          AUD2_PSITE_GRCCHG.ACTION,
          AUD2_PSITE_GRCCHG.CODE           AS CODE,
          AUD2_PSITE_GRCCHG.PSITE_GRC_CODE AS RETAIL_GRC_CODE,
          AUD2_PSITE_GRCCHG.CHARGE_CODE    AS CHARGE_CODE,
          SALCHG.SALCHGNAME                AS CHARGE_NAME,
          AUD2_PSITE_GRCCHG.FACTOR         AS CHARGE_FACTOR,
          CASE AUD2_PSITE_GRCCHG.BASIS
             WHEN ''P'' THEN ''PERCENTAGE A''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_PSITE_GRCCHG.SIGN           AS CHARGE_SIGN,
          AUD2_PSITE_GRCCHG.ISTAX          AS IS_TAX,
          CASE AUD2_PSITE_GRCCHG.SOURCE
             WHEN ''F'' THEN ''FIXED''
             WHEN ''V'' THEN ''VAT''
             WHEN ''E'' THEN ''EXCISE''
             WHEN ''G'' THEN ''GST''
             ELSE '' ''
          END
             AS SOURCE,
          AUD2_PSITE_GRCCHG.CHARGEAMT      AS CHARGE_AMOUNT,
          AUD2_PSITE_GRCCHG.CHARGEAPPAMT   AS CHARGE_APPLICABLE_AMT,
          AUD2_PSITE_GRCCHG.ADMSITE_CODE   AS OWNER_SITE_CODE,
          ADMSITE.NAME                     AS OWNER_SITE_NAME,
          AUD2_PSITE_GRCCHG.FORMULA        AS FORMULA,
          AUD2_PSITE_GRCCHG.GSTCOMPONENT   AS GST_COMPONENT
FROM AUD2_PSITE_GRCCHG
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''POSGRC'') TRANS_DET
             ON (AUD2_PSITE_GRCCHG.PSITE_GRC_CODE = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PSITE_GRCCHG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN SALCHG SALCHG ON AUD2_PSITE_GRCCHG.CHARGE_CODE = SALCHG.SALCHGCODE
LEFT OUTER JOIN ADMSITE ADMSITE ON AUD2_PSITE_GRCCHG.ADMSITE_CODE = ADMSITE.CODE', 'PSITE_GRC_CODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('PurchaseTermMaster', 'PURTERMMAIN', 'Header', 1, 'PurTermHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purtermmain 
AS 
SELECT    VERSION_SEQ,
          ACTION,
          AUD.TRANSACTION_ID,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.CODE,
          AUD.CODE                                  MODULE_KEY,
          AUD.NAME                                  TERM_NAME,
          AUD.NAME                                  MODULE_KEY_DISPLAY,
          CASE WHEN AUD.EXT=''Y'' THEN  ''Yes'' WHEN AUD.EXT=''N'' THEN  ''No'' END  EXTINCT,
          AUD.FINTRADEGRP_CODE                      TRADEGROUP_CODE,
          T.NAME                                    TRADEGROUP_NAME,
          AUD.HEADER_LEVEL_ISCHANGEABLE             HEADER_LEVEL_ISCHANGEABLE,
          AUD.LINE_LEVEL_ISCHANGEABLE               LINE_LEVEL_ISCHANGEABLE,
          AUD.PURCHASE_GLCODE                       INVOICE_LEDGER_CODE,
          G1.GLNAME                                 INVOICE_LEDGER_NAME,
          AUD.PURCHASE_SLCODE                       INVOICE_SUBLEDGER_CODE,
          S1.SLNAME                                 INVOICE_SUBLEDGER_NAME,
          AUD.PURCHASE_RETURN_GLCODE                RETURN_LEDGER_CODE,
          G2.GLNAME                                 RETURN_LEDGER_NAME,
          AUD.PURCHASE_RETURN_SLCODE                RETURN_SUBLEDGER_CODE,
          S2.SLNAME                                 RETURN_SUBLEDGER_NAME
     FROM aud2_purtermmain aud INNER JOIN (SELECT A.*, 
										   RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										   FROM AUD2_TRANSACTION A
										   WHERE MODULE_SHORTCODE = ''PurchaseTermMaster'') trans_det 
							   ON ((AUD.CODE::TEXT) = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN fintradegrp t ON AUD.FINTRADEGRP_CODE = T.CODE
LEFT OUTER JOIN fingl g1 ON (AUD.PURCHASE_GLCODE = G1.GLCODE)
LEFT OUTER JOIN fingl g2 ON (AUD.PURCHASE_RETURN_GLCODE = G2.GLCODE)
LEFT OUTER JOIN finsl s1 ON (AUD.PURCHASE_SLCODE = S1.SLCODE)
LEFT OUTER JOIN finsl s2 ON (AUD.PURCHASE_RETURN_SLCODE = S2.SLCODE)', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('SaleOrder', 'SALORDDET', 'Detail', 1, 'OrderItem', NULL, NULL, 'CREATE OR REPLACE VIEW V_AUD2_SALORDDET
AS
   SELECT TRANS_DET.VERSION_SEQ                  AS VERSION_SEQ,
          AUD2_SALORDDET.ACTION                  AS ACTION,
          TRANS_DET.LOGIN_USER                   AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE             AS TRANSACTION_DATE,
          AUD2_SALORDDET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.HEADER_KEY_VALUE             AS MODULE_KEY,
          AUD2_SALORDDET.ORDCODE                 AS ORDER_CODE,
          --SALORDMAIN.SCHEME_DOCNO                AS ORDER_NUMBER,
          AUD2_SALORDDET.ICODE                   AS ICODE,
          INVITEM.BARCODE                        AS BARCODE,
          AUD2_SALORDDET.INTGORDERDETID          AS INTGORDERDETID,
          AUD2_SALORDDET.CHANNEL_B2C_ORDERDETID  AS CHANNEL_B2C_ORDERDETID,
          AUD2_SALORDDET.ORDQTY                  AS ORDER_QUANTITY,
          AUD2_SALORDDET.RATE                    AS ITEM_RATE,
          AUD2_SALORDDET.REM                     AS REMARKS,
          AUD2_SALORDDET.CODE                    AS ORDER_DETAIL_CODE,
          AUD2_SALORDDET.FACTOR                  AS DISCOUNT_FACTOR,
          AUD2_SALORDDET.DISCOUNT                AS DISCOUNT_AMT,
          AUD2_SALORDDET.BASIC_RATE              AS BASIC_RATE,
          AUD2_SALORDDET.ROUNDOFF                AS ROUNDOFF_AMT,
          AUD2_SALORDDET.NETAMT                  AS ITEM_AMOUNT,
          AUD2_SALORDDET.CHGAMT                  AS CHARGE_AMOUNT,
          AUD2_SALORDDET.TAXAMT                  AS TAX_AMOUNT,
          AUD2_SALORDDET.EXCISEMAIN_CODE         AS EXCISE_CODE,
          EXCISEMAIN.TARIFFNO                    AS EXCISE_TARIFF_NO,
          AUD2_SALORDDET.EX_BASIS                AS EXCISE_BASIS,
          AUD2_SALORDDET.EX_EFFRATE              AS EXCISE_EFFRATE,
          AUD2_SALORDDET.EX_ABTFACTOR            AS EXCISE_ABTFACTOR,
          AUD2_SALORDDET.EX_DUTYFACTOR           AS EXCISE_DUTYFACTOR,
          AUD2_SALORDDET.EX_CESSFACTOR           AS EXCISE_CESSFACTOR,
          AUD2_SALORDDET.EX_APPAMT               AS EXCISE_APPAMT,
          AUD2_SALORDDET.EX_DUTYAMT              AS EXCISE_DUTYAMT,
          AUD2_SALORDDET.EX_CESSAMT              AS EXCISE_CESSAMT,
          AUD2_SALORDDET.EX_ROUNDOFF             AS EXCISE_ROUNDOFF,
          PSITE_POSORDER.ORDERNO                 AS POSORDER_NUMBER,
          AUD2_SALORDDET.PSITE_POSORDERITEM_CODE AS POS_ORDER_ITEM_CODE,
          AUD2_SALORDDET.POS_REMARKS             AS POS_ORDER_REMARKS,
          AUD2_SALORDDET.EX_APPLICABLE_FROM      AS EXCISE_APPLICABLE_FROM,
          AUD2_SALORDDET.INVBATCH_SERIAL_CODE    AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO        AS BATCH_SERIAL_NO
     FROM AUD2_SALORDDET INNER JOIN (SELECT A.*,
									RANK ()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
									ORDER BY TRANSACTION_DATE)
									VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''SaleOrder'') TRANS_DET
						 ON (AUD2_SALORDDET.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
							 AND AUD2_SALORDDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          --INNER JOIN SALORDMAIN SALORDMAIN
          --ON AUD2_SALORDDET.ORDCODE = SALORDMAIN.ORDCODE
INNER JOIN INVITEM INVITEM ON AUD2_SALORDDET.ICODE = INVITEM.ICODE
LEFT JOIN EXCISEMAIN EXCISEMAIN ON AUD2_SALORDDET.EXCISEMAIN_CODE = EXCISEMAIN.CODE
LEFT JOIN PSITE_POSORDERITEM PSITE_POSORDERITEM ON AUD2_SALORDDET.PSITE_POSORDERITEM_CODE = PSITE_POSORDERITEM.CODE
LEFT JOIN PSITE_POSORDER ON PSITE_POSORDERITEM.PSITE_POSORDER_CODE = PSITE_POSORDER.CODE
LEFT JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_SALORDDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('POS GRT', 'PSITE_GRTCHGITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_psite_grtchgitem 
AS 
SELECT TRANS_DET.VERSION_SEQ                    AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                     AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                 AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE               AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE               AS MODULE_KEY,
          AUD2_PSITE_GRTCHGITEM.ACTION,
          AUD2_PSITE_GRTCHGITEM.CODE               AS GRT_ITEM_CHARGE_CODE,
          AUD2_PSITE_GRTCHGITEM.PSITE_GRT_CODE     AS RETAIL_GRT_CODE,
          AUD2_PSITE_GRTCHGITEM.PSITE_GRTITEM_CODE AS GRT_DET_CODE,
          PSITE_GRTITEM.ICODE                      AS ICODE,
          AUD2_PSITE_GRTCHGITEM.DISPLAYORDER       AS DISPLAY_ORDER,
          AUD2_PSITE_GRTCHGITEM.CHARGE_CODE        AS ITEM_CHARGE_CODE,
          SALCHG.SALCHGNAME                        AS ITEM_CHARGE_NAME,
          AUD2_PSITE_GRTCHGITEM.FACTOR             AS ITEM_CHARGE_FACTOR,
          AUD2_PSITE_GRTCHGITEM.BASIS              AS ITEM_CHARGE_BASIS,
          AUD2_PSITE_GRTCHGITEM.SIGN               AS ITEM_CHARGE_SIGN,
          AUD2_PSITE_GRTCHGITEM.FORMULA            AS FORMULA,
          CASE AUD2_PSITE_GRTCHGITEM.ISTAX
             WHEN 1 THEN ''YES''
             WHEN 0 THEN ''NO''
             ELSE '' ''
          END
             AS ISTAX,
          CASE AUD2_PSITE_GRTCHGITEM.SOURCE
             WHEN ''F'' THEN ''FIXED''
             WHEN ''V'' THEN ''VAT''
             WHEN ''E'' THEN ''EXCISE''
             WHEN ''G'' THEN ''GST''
             ELSE '' ''
          END
             AS SOURCE,
          AUD2_PSITE_GRTCHGITEM.CHARGEAMT          AS ITEM_CHARGEAMT,
          AUD2_PSITE_GRTCHGITEM.CHARGEAPPAMT       AS ITEM_CHARGE_APPL_AMT
FROM AUD2_PSITE_GRTCHGITEM
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''POS GRT'') TRANS_DET
             ON (AUD2_PSITE_GRTCHGITEM.PSITE_GRT_CODE = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PSITE_GRTCHGITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN PSITE_GRTITEM PSITE_GRTITEM ON AUD2_PSITE_GRTCHGITEM.PSITE_GRTITEM_CODE = PSITE_GRTITEM.CODE
INNER JOIN SALCHG SALCHG ON AUD2_PSITE_GRTCHGITEM.CHARGE_CODE = SALCHG.SALCHGCODE', 'PSITE_GRT_CODE', 'AuditTriggerTemplateAllColumnsNew', 4, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvjrnchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID   TRANSACTION_ID,
          AUD.CODE             CODE,
          SEQ                  SEQUENCE,
          AUD.JRNCODE          MODULE_KEY,
          FIN.CHGCODE          CHGCODE,
          FIN.CHGNAME          CHARGE_NAME,
          AUD.RATE             FACTOR,
          CASE
             WHEN AUD.BASIS = ''P'' THEN ''Percentage''
             WHEN AUD.BASIS = ''A'' THEN ''Amount''
          END
             BASIS,
          AUD.SIGN             SIGN,
          AUD.CHGAMT           CHARGE_AMOUNT,
          AUD.APPAMT           APPLICABLE_AMOUNT,
          AUD.FORMULAE         FORMULA,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''I'' THEN ''Item Level''
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line Level''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          CASE
             WHEN AUD.SOURCE = ''G'' THEN ''GST''
             WHEN AUD.SOURCE = ''F'' THEN ''Fixed''
             WHEN AUD.SOURCE = ''E'' THEN ''Excise''
          END
             FACTOR_SOURCE,
          AUD.CODE             DETAIL_CHARGE_CODE,
          GL.GLCODE            GENERAL_LEDGER_CODE,
          GL.GLNAME            LEDGER_NAME,
          SL.SLCODE            SUB_LEDGER_CODE,
          SL.SLNAME            SUBLEDGER_NAME,
          AUD.GST_COMPONENT    GST_COMPONENT,
          AUD.ISREVERSE        GST_REVERSE_CHARGE,
          AUD.ROUNDOFF_ADJ_AMT ROUNDOFF_ADJUSTED_AMT,
          DET.CODE             SRV_JRN_DET_CODE,
          DET.CODE             SRV_JRN_DET_CODE_NO,
          AUD.JRNCODE          SRV_JRN_CODE
     FROM aud2_pursrvjrnchg_item aud INNER JOIN (SELECT A.*,
												 RANK()
												 OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
												 FROM AUD2_TRANSACTION A
												 WHERE MODULE_SHORTCODE = ''Purchase Service Debit Note'') trans_det
									 ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN finchg fin ON (AUD.CHGCODE = FIN.CHGCODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN pursrvjrndet det ON (AUD.PURSRVJRNDET_CODE = DET.CODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'PURSRVJRNDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('WIPClearence', 'PRDWIPCLRDET', 'Details', 1, 'WIPClearenceDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdwipclrdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ                  AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                   AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID               AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE             AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE             AS MODULE_KEY,
          AUD2_PRDWIPCLRDET.ACTION,
          AUD2_PRDWIPCLRDET.CODE                 AS CODE,
          AUD2_PRDWIPCLRDET.WIPCLRMAIN_CODE      AS WIP_CLEARENCE_CODE,
          AUD2_PRDWIPCLRDET.LOTCODE              AS WORKING_PLAN_CODE,
          PRDLOTMAIN.LOTNO                       AS WORKING_PLAN_NUMBER,
          AUD2_PRDWIPCLRDET.PRC_ASSEMBLY_ICODE   AS PROCESSED_ASSEMBLY_ICODE,
          PROCESSED_ASSEMBLY.BARCODE             AS PROCESSED_ASSEMBLY_BARCODE,
          AUD2_PRDWIPCLRDET.ASS_SAITEM_CODE      AS ASSEMBLY_SAITEM_CODE,
          PRD_SAITEM.SAINAME                     AS ASSEMBLY_SAITEM_NAME,
          AUD2_PRDWIPCLRDET.QTY                  AS QUANTITY,
          AUD2_PRDWIPCLRDET.RATE                 AS RATE,
          AUD2_PRDWIPCLRDET.PRCODE               AS PROCESS_CODE,
          PRDPR.PRNAME                           AS PROCESS_NAME,
          AUD2_PRDWIPCLRDET.OPERATION_SEQ        AS OPERATION_SEQUENCE,
          AUD2_PRDWIPCLRDET.REC_ASSEMBLY_ICODE   AS RECEIVE_ASSEMBLY_ICODE,
          RECEIVE_ASSEMBLY.BARCODE               AS RECEIVE_ASSEMBLY_BARCODE,
          AUD2_PRDWIPCLRDET.LOCCODE              AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                         AS STOCK_POINT_NAME,
          AUD2_PRDWIPCLRDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO        AS BATCH_SERIAL_NUMBER
     FROM AUD2_PRDWIPCLRDET INNER JOIN(SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										ORDER BY TRANSACTION_DATE)
										VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''WIPClearence'') TRANS_DET
							ON (AUD2_PRDWIPCLRDET.WIPCLRMAIN_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
							    AND AUD2_PRDWIPCLRDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN PRDLOTMAIN PRDLOTMAIN ON AUD2_PRDWIPCLRDET.LOTCODE = PRDLOTMAIN.CODE
INNER JOIN INVITEM PROCESSED_ASSEMBLY ON AUD2_PRDWIPCLRDET.PRC_ASSEMBLY_ICODE = PROCESSED_ASSEMBLY.ICODE
LEFT JOIN PRD_SAITEM PRD_SAITEM ON AUD2_PRDWIPCLRDET.ASS_SAITEM_CODE = PRD_SAITEM.CODE
INNER JOIN PRDPR PRDPR ON AUD2_PRDWIPCLRDET.PRCODE = PRDPR.PRCODE
LEFT JOIN INVITEM RECEIVE_ASSEMBLY ON AUD2_PRDWIPCLRDET.REC_ASSEMBLY_ICODE = RECEIVE_ASSEMBLY.ICODE
LEFT JOIN INVLOC INVLOC ON AUD2_PRDWIPCLRDET.LOCCODE = INVLOC.LOCCODE
LEFT JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_PRDWIPCLRDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'WIPCLRMAIN_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase Invoice', 'PURINVDET', 'Details', 1, 'PurchaseInvoiceDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purinvdet 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.INVCODE            INVOICE_TRANSFER_CODE,
          AUD.INVCODE            MODULE_KEY,
          AUD.ICODE              ICODE,
          ITEM.BARCODE           BARCODE,
          AUD.QTY                QUANTITY,
          AUD.RATE               RATE,
          AUD.GRSAMT             BASIC_VALUE,
          AUD.NETAMT             NET_AMOUNT,
          AUD.REM                REMARKS,
          AUD.GRCCODE            GOODS_RECEIVE_CODE,
          GRC.GRCCODE            GRC_CODE,
          AUD.DISCOUNT           DISCOUNT_AMT,
          AUD.TAXAMT             TAX_AMOUNT,
          AUD.CODE               CODE,
          AUD.INVGRCDET_CODE     INV_GRT_DET_CODE,
          GRCD.CODE              INV_GRT_DET_NO,
          AUD.EXCISEMAIN_CODE    EXCISE_TARIFF_CODE,
          EXCS.TARIFFNO          EXCISE_TARIFF_NO,
          AUD.EX_BASIS           EXCISE_BASIS,
          AUD.EX_EFFRATE         EXCISE_EFFRATE,
          AUD.EX_ABTFACTOR       EXCISE_ABTFACTOR,
          AUD.EX_DUTYFACTOR      EXCISE_DUTYFACTOR,
          AUD.EX_CESSFACTOR      EXCISE_CESSFACTOR,
          AUD.EX_ROUNDOFF        EXCISE_ROUNDOFF,
          AUD.EX_APPAMT          EXCISE_APPAMT,
          AUD.EX_DUTYAMT         EXCISE_DUTYAMT,
          AUD.EX_CESSAMT         EXCISE_CESSAMT,
          AUD.EX_APPLICABLE_FROM EXCISE_APPLICABLE_FROM,
          AUD.HSN_SAC_CODE       HSN_SAC_CODE,
          AUD.DIFF_AMT           DIFFERENCE_AMOUNT,
          AUD.GST_ITC_APPL       GST_ITC_APPL,
          AUD.GLCODE             LEDGER_CODE,
          GL.GLNAME              LEDGER_NAME,
          AUD.SLCODE             SUBLEDGER_CODE,
          SL.SLNAME              SUBLEDGER_NAME
FROM aud2_purinvdet aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Purchase Invoice'') trans_det
			ON (AUD.INVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN invitem item ON AUD.ICODE = ITEM.ICODE
LEFT OUTER JOIN invgrcmain grc ON (AUD.GRCCODE = GRC.GRCCODE)
LEFT OUTER JOIN invgrcdet grcd ON (AUD.INVGRCDET_CODE = GRCD.CODE)
LEFT OUTER JOIN excisemain excs ON (AUD.EXCISEMAIN_CODE = EXCS.CODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'INVCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'Header', 1, 'PurchaseServiceOrderHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvordmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ                 AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                  AS LOGIN_USER,
          AUD2_PURSRVORDMAIN.ACTION,
          TRANS_DET.TRANSACTION_ID              AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE            AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE            AS MODULE_KEY,
          AUD2_PURSRVORDMAIN.SCHEME_DOCNO       AS MODULE_KEY_DISPLAY,
          AUD2_PURSRVORDMAIN.ORDCODE            AS ORDER_NUMBER,
          AUD2_PURSRVORDMAIN.SCHEME_DOCNO       AS DOCSCHEME_NUMBER,
          AUD2_PURSRVORDMAIN.DOCCODE            AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                  AS DOCSCHEME_NAME,
          AUD2_PURSRVORDMAIN.ORDDATE            AS ORDER_DATE,
          AUD2_PURSRVORDMAIN.REFNO              AS DOCUMENT_NO,
          AUD2_PURSRVORDMAIN.REFDT              AS DOCUMENT_DATE,
          AUD2_PURSRVORDMAIN.ADMOU_CODE         AS OU_CODE,
          ADMOU.NAME                            AS OU_NAME,
          AUD2_PURSRVORDMAIN.ADMSITE_CODE_OWNER AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                          AS TRANSACTION_SITE_NAME,
          AUD2_PURSRVORDMAIN.PCODE              AS VENDOR_CODE,
          VENDOR.SLNAME                         AS VENDOR_NAME,
          AUD2_PURSRVORDMAIN.FINTRADEGRP_CODE   AS TRADEGROUP_CODE,
          FINTRADEGRP.NAME                      AS TRADEGROUP_NAME,
          AUD2_PURSRVORDMAIN.ADMCURRENCY_CODE   AS CURRENCY_CODE,
          ADMCURRENCY.NAME                      AS CURRENCY_NAME,
          AUD2_PURSRVORDMAIN.EXRATE             AS EXCHANGE_RATE,
          AUD2_PURSRVORDMAIN.GRSAMT             AS GROSS_AMOUNT,
          AUD2_PURSRVORDMAIN.CHGAMT             AS CHARGE_AMOUNT,
          AUD2_PURSRVORDMAIN.NETAMT             AS NET_AMOUNT,
          AUD2_PURSRVORDMAIN.REMARKS            AS REMARKS,
          AUD2_PURSRVORDMAIN.AUTHORCODE         AS AUTHORIZEDBY_USERCODE,
          HRDEMP.FNAME                          AS AUTHORIZEDBY_USER_NAME,
          AUD2_PURSRVORDMAIN.ECODE              AS CREATED_USER_CODE,
          HRDEMP1.FNAME                         AS CREATED_USER_NAME,
          AUD2_PURSRVORDMAIN.LAST_ACCESS_ECODE  AS LAST_MODIFIED_USER_CODE,
          HRDEMP2.FNAME                         AS LAST_MODIFIED_USER_NAME,
          CASE AUD2_PURSRVORDMAIN.STATUS
             WHEN ''N'' THEN ''NEW''
             WHEN ''P'' THEN ''PARTIAL''
             WHEN ''T'' THEN ''TOTAL RECEIVED''
             ELSE '' ''
          END
             AS STATUS,
          CASE AUD2_PURSRVORDMAIN.TDS_APP
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS TDS_APPLICIBILITY,
          AUD2_PURSRVORDMAIN.TDSSRC_CODE        AS TDS_SOURCE_CODE,
          FINTDSSRC.TDSSRCNAME                  AS TDS_SOURCE_NAME,
          AUD2_PURSRVORDMAIN.FORMCODE           AS FORM_CODE,
          FINFORM.FORMNAME                      AS FORM_NAME,
          AUD2_PURSRVORDMAIN.PURTERMCODE        AS TERM_CODE,
          PURTERMMAIN.NAME                      AS TERM_NAME,
          AUD2_PURSRVORDMAIN.UDFSTRING01        AS UDFSTRING01,
          AUD2_PURSRVORDMAIN.UDFSTRING02        AS UDFSTRING02,
          AUD2_PURSRVORDMAIN.UDFSTRING03        AS UDFSTRING03,
          AUD2_PURSRVORDMAIN.UDFSTRING04        AS UDFSTRING04,
          AUD2_PURSRVORDMAIN.UDFSTRING05        AS UDFSTRING05,
          AUD2_PURSRVORDMAIN.UDFSTRING06        AS UDFSTRING06,
          AUD2_PURSRVORDMAIN.UDFSTRING07        AS UDFSTRING07,
          AUD2_PURSRVORDMAIN.UDFSTRING08        AS UDFSTRING08,
          AUD2_PURSRVORDMAIN.UDFSTRING09        AS UDFSTRING09,
          AUD2_PURSRVORDMAIN.UDFSTRING10        AS UDFSTRING10,
          AUD2_PURSRVORDMAIN.UDFNUM01           AS UDFNUM01,
          AUD2_PURSRVORDMAIN.UDFNUM02           AS UDFNUM02,
          AUD2_PURSRVORDMAIN.UDFNUM03           AS UDFNUM03,
          AUD2_PURSRVORDMAIN.UDFNUM04           AS UDFNUM04,
          AUD2_PURSRVORDMAIN.UDFNUM05           AS UDFNUM05,
          AUD2_PURSRVORDMAIN.UDFDATE01          AS UDFDATE01,
          AUD2_PURSRVORDMAIN.UDFDATE02          AS UDFDATE02,
          AUD2_PURSRVORDMAIN.UDFDATE03          AS UDFDATE03,
          AUD2_PURSRVORDMAIN.UDFDATE04          AS UDFDATE04,
          AUD2_PURSRVORDMAIN.UDFDATE05          AS UDFDATE05,
          AUD2_PURSRVORDMAIN.ENTRY_SOURCE       AS ENTRY_SOURCE
    FROM AUD2_PURSRVORDMAIN INNER JOIN (SELECT A.*, 
										RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''ServiceOrder'') TRANS_DET
							ON (AUD2_PURSRVORDMAIN.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
							    AND AUD2_PURSRVORDMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PURSRVORDMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
INNER JOIN ADMOU ADMOU ON AUD2_PURSRVORDMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PURSRVORDMAIN.ADMSITE_CODE_OWNER = ADMSITE.CODE
INNER JOIN FINSL VENDOR ON AUD2_PURSRVORDMAIN.PCODE = VENDOR.SLCODE
INNER JOIN FINTRADEGRP FINTRADEGRP ON AUD2_PURSRVORDMAIN.FINTRADEGRP_CODE = FINTRADEGRP.CODE
LEFT JOIN ADMCURRENCY ADMCURRENCY ON AUD2_PURSRVORDMAIN.ADMCURRENCY_CODE = ADMCURRENCY.CODE
LEFT JOIN HRDEMP HRDEMP ON AUD2_PURSRVORDMAIN.AUTHORCODE = HRDEMP.ECODE
LEFT JOIN FINTDSSRC FINTDSSRC ON AUD2_PURSRVORDMAIN.TDSSRC_CODE = FINTDSSRC.TDSSRCCODE 
LEFT JOIN FINFORM FINFORM ON AUD2_PURSRVORDMAIN.FORMCODE = FINFORM.FORMCODE 
INNER JOIN PURTERMMAIN PURTERMMAIN ON AUD2_PURSRVORDMAIN.PURTERMCODE = PURTERMMAIN.CODE
INNER JOIN HRDEMP HRDEMP1 ON AUD2_PURSRVORDMAIN.ECODE = HRDEMP1.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP2 ON AUD2_PURSRVORDMAIN.LAST_ACCESS_ECODE = HRDEMP2.ECODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'ORDCODE');
INSERT INTO main.aud2_table VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salinvjrnchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE              CODE,
          AUD.JRNCODE           MODULE_KEY,
          AUD.JRNCODE           DEBIT_CREDIT_CODE,
          AUD.SALINVJRNDET_CODE SAL_INV_JRN_DETAIL_CODE,
          AUD.SEQ               SEQUENCE,
          AUD.CHGCODE           CHARGE_CODE,
          CHG.SALCHGNAME        CHARGE_NAME,
          AUD.GLCODE            LEDGER_CODE,
          GL.GLNAME             LEDGER_NAME,
          AUD.SLCODE            SUBLEDGER_CODE,
          SL.SLNAME             SUBLEDGER_NAME,
          AUD.RATE              FACTOR,
          CASE
             WHEN AUD.BASIS = ''A'' THEN ''Amount''
             WHEN AUD.BASIS = ''P'' THEN ''Percentage''
          END
             Basis,
          AUD.SIGN              SIGN,
          AUD.CHGAMT            CHARGE_AMOUNT,
          AUD.APPAMT            APPLICABLE_AMOUNT,
          AUD.FORMULAE          EXPRESSION,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          AUD.SOURCE            FACTOR_SOURCE,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''I'' THEN ''Item Level''
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line Level''
          END
             AS OPERATION_LEVEL,
          AUD.GST_COMPONENT     GST_COMPONENT,
          AUD.ROUNDOFF_ADJ_AMT  ROUNDOFF_ADJUSTED_AMT
     FROM aud2_salinvjrnchg_item aud INNER JOIN (SELECT A.*,
												RANK()
												OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
													ORDER BY TRANSACTION_DATE)
												 VERSION_SEQ
												FROM AUD2_TRANSACTION A
												WHERE MODULE_SHORTCODE = ''Sales DN/CN'') trans_det 
									 ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
									     AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN salchg chg ON AUD.CHGCODE = CHG.SALCHGCODE 
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'SALINVJRNDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('SaleOrder', 'SALORDCHG', 'Charge', 1, 'SOCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salordchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          AUD2_SALORDCHG.ACTION               AS ACTION,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          AUD2_SALORDCHG.TRANSACTION_ID       AS TRANSACTION_ID,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_SALORDCHG.ORDCODE              AS ORDER_CODE,
          --SALORDMAIN.SCHEME_DOCNO             AS ORDER_NUMBER,
          AUD2_SALORDCHG.CHGCODE              AS CHARGE_CODE,
          SALCHG.SALCHGNAME                   AS CHARGE_NAME,
          AUD2_SALORDCHG.RATE                 AS FACTOR,
          AUD2_SALORDCHG.SIGN                 AS SIGN,
          AUD2_SALORDCHG.CODE                 AS ORDER_CHARGE_ITEM_CODE,
          AUD2_SALORDCHG.SEQ                  AS SEQUENCE,
          AUD2_SALORDCHG.CHGAMT               AS CHARGE_AMOUNT,
          AUD2_SALORDCHG.GLCODE               AS GENERAL_LEDGER_CODE,
          FINGL.GLNAME                        AS GENERAL_LEDGER_NAME,
          AUD2_SALORDCHG.SLCODE               AS SUB_LEDGER_CODE,
          FINSL.SLNAME                        AS SUB_LEDGER_NAME,
          AUD2_SALORDCHG.WITHOUT_TERM_FORMULA AS WITHOUT_TERM_FORMULA,
          CASE AUD2_SALORDCHG.BASIS
             WHEN ''A'' THEN ''Amount''
             WHEN ''P'' THEN ''Percentage''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_SALORDCHG.APPAMT               AS APPLICABLE_AMOUNT,
          AUD2_SALORDCHG.FORMULAE             AS FORMULA,
          CASE
             WHEN AUD2_SALORDCHG.OPERATION_LEVEL = ''I'' THEN ''Item''
             WHEN AUD2_SALORDCHG.OPERATION_LEVEL = ''H'' THEN ''Header''
          END
             AS OPERATION_LEVEL,
          AUD2_SALORDCHG.ISTAX                AS ISTAX,
          AUD2_SALORDCHG.SOURCE               AS FACTOR_SOURCE,
          AUD2_SALORDCHG.GST_COMPONENT        AS GST_COMPONENT
     FROM AUD2_SALORDCHG INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										ORDER BY TRANSACTION_DATE)
									 VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''SaleOrder'') TRANS_DET
						 ON (AUD2_SALORDCHG.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
						     AND AUD2_SALORDCHG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          --INNER JOIN SALORDMAIN SALORDMAIN
          --ON AUD2_SALORDCHG.ORDCODE = SALORDMAIN.ORDCODE
INNER JOIN SALCHG SALCHG ON AUD2_SALORDCHG.CHGCODE = SALCHG.SALCHGCODE
INNER JOIN FINGL FINGL ON AUD2_SALORDCHG.GLCODE = FINGL.GLCODE
LEFT JOIN FINSL FINSL ON AUD2_SALORDCHG.SLCODE = FINSL.SLCODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'ORDCODE#CHGCODE#RATE');
INSERT INTO main.aud2_table VALUES ('WIPClearence', 'PRDWIPCLRMAIN', 'Header', 1, 'WIPClearenceHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdwipclrmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_PRDWIPCLRMAIN.CLRNO             AS MODULE_KEY_DISPLAY,
          AUD2_PRDWIPCLRMAIN.ACTION,
          AUD2_PRDWIPCLRMAIN.CODE              AS CODE,
          AUD2_PRDWIPCLRMAIN.CLRNO             AS SCHEME_DOC_NUMBER,
          AUD2_PRDWIPCLRMAIN.DOCCODE           AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                 AS DOCSCHEME_NAME,
          AUD2_PRDWIPCLRMAIN.REMARKS           AS REMARKS,
          AUD2_PRDWIPCLRMAIN.ADMOU_CODE        AS OU_CODE,
          ADMOU.NAME                           AS OU_NAME,
          AUD2_PRDWIPCLRMAIN.ADMSITE_CODE      AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                         AS TRANSACTION_SITE_NAME,
          AUD2_PRDWIPCLRMAIN.REFNO             AS REFERENCE_NO,
          AUD2_PRDWIPCLRMAIN.REFDT             AS REFERENCE_DATE,
          AUD2_PRDWIPCLRMAIN.ECODE             AS CREATED_USER_CODE,
          HRDEMP.FNAME                         AS CREATED_USER_NAME,
          AUD2_PRDWIPCLRMAIN.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                        AS LAST_MODIFIED_USER_NAME,
          AUD2_PRDWIPCLRMAIN.LOCCODE           AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                       AS STOCK_POINT_NAME,
          AUD2_PRDWIPCLRMAIN.ENTRY_SOURCE      AS ENTRY_SOURCE,
          AUD2_PRDWIPCLRMAIN.UDFSTRING01       AS UDFSTRING01,
          AUD2_PRDWIPCLRMAIN.UDFSTRING02       AS UDFSTRING02,
          AUD2_PRDWIPCLRMAIN.UDFSTRING03       AS UDFSTRING03,
          AUD2_PRDWIPCLRMAIN.UDFSTRING04       AS UDFSTRING04,
          AUD2_PRDWIPCLRMAIN.UDFSTRING05       AS UDFSTRING05,
          AUD2_PRDWIPCLRMAIN.UDFSTRING06       AS UDFSTRING06,
          AUD2_PRDWIPCLRMAIN.UDFSTRING07       AS UDFSTRING07,
          AUD2_PRDWIPCLRMAIN.UDFSTRING08       AS UDFSTRING08,
          AUD2_PRDWIPCLRMAIN.UDFSTRING09       AS UDFSTRING09,
          AUD2_PRDWIPCLRMAIN.UDFSTRING10       AS UDFSTRING10,
          AUD2_PRDWIPCLRMAIN.UDFNUM01          AS UDFNUM01,
          AUD2_PRDWIPCLRMAIN.UDFNUM02          AS UDFNUM02,
          AUD2_PRDWIPCLRMAIN.UDFNUM03          AS UDFNUM03,
          AUD2_PRDWIPCLRMAIN.UDFNUM04          AS UDFNUM04,
          AUD2_PRDWIPCLRMAIN.UDFNUM05          AS UDFNUM05,
          AUD2_PRDWIPCLRMAIN.UDFDATE01         AS UDFDATE01,
          AUD2_PRDWIPCLRMAIN.UDFDATE02         AS UDFDATE02,
          AUD2_PRDWIPCLRMAIN.UDFDATE03         AS UDFDATE03,
          AUD2_PRDWIPCLRMAIN.UDFDATE04         AS UDFDATE04,
          AUD2_PRDWIPCLRMAIN.UDFDATE05         AS UDFDATE05
     FROM AUD2_PRDWIPCLRMAIN INNER JOIN(SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
											  ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''WIPClearence'') TRANS_DET
							 ON (AUD2_PRDWIPCLRMAIN.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
							     AND AUD2_PRDWIPCLRMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PRDWIPCLRMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT JOIN ADMOU ADMOU ON AUD2_PRDWIPCLRMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PRDWIPCLRMAIN.ADMSITE_CODE = ADMSITE.CODE
LEFT JOIN INVLOC INVLOC ON AUD2_PRDWIPCLRMAIN.LOCCODE = INVLOC.LOCCODE
INNER JOIN HRDEMP HRDEMP ON AUD2_PRDWIPCLRMAIN.ECODE = HRDEMP.ECODE
LEFT JOIN HRDEMP HRDEMP1 ON AUD2_PRDWIPCLRMAIN.LAST_ACCESS_ECODE = HRDEMP1.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('AuditPlan', 'INVSTKPLANITEM', 'Audit Plan Item', 1, 'AuditPlanItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invstkplanitem 
AS 
SELECT TRANS_DET.VERSION_SEQ                    AS VERSION_SEQ,
          AUD2_INVSTKPLANITEM.ACTION,
          TRANS_DET.LOGIN_USER                     AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                 AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE               AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE               AS MODULE_KEY,
          AUD2_INVSTKPLANITEM.STKPLANCODE          AS PLAN_CODE,
          INVSTKPLANMAIN.DESCRIP                   AS PLAN_NAME,
          AUD2_INVSTKPLANITEM.LOCCODE              AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                           AS STOCK_POINT_NAME,
          AUD2_INVSTKPLANITEM.ICODE                AS ICODE,
          INVITEM.BARCODE                          AS ITEM_BARCODE,
          AUD2_INVSTKPLANITEM.LEV1GRPNAME          AS LEVEL1_GROUP_NAME,
          AUD2_INVSTKPLANITEM.LEV2GRPNAME          AS LEVEL2_GROUP_NAME,
          AUD2_INVSTKPLANITEM.GRPNAME              AS GROUP_NAME,
          AUD2_INVSTKPLANITEM.ARTICLE_NAME         AS ARTICLE_NAME,
          AUD2_INVSTKPLANITEM.CNAME1               AS CATEGORY1_NAME,
          AUD2_INVSTKPLANITEM.CNAME2               AS CATEGORY2_NAME,
          AUD2_INVSTKPLANITEM.CNAME3               AS CATEGORY3_NAME,
          AUD2_INVSTKPLANITEM.CNAME4               AS CATEGORY4_NAME,
          AUD2_INVSTKPLANITEM.CNAME5               AS CATEGORY5_NAME,
          AUD2_INVSTKPLANITEM.CNAME6               AS CATEGORY6_NAME,
          AUD2_INVSTKPLANITEM.MRPFROM              AS MRP_FROM,
          AUD2_INVSTKPLANITEM.MRPTO                AS MRP_TO,
          AUD2_INVSTKPLANITEM.PARTYNAME            AS PARTY_NAME,
          AUD2_INVSTKPLANITEM.BARCODE              AS BAR_CODE,
          AUD2_INVSTKPLANITEM.STOCKINDATE          AS STOCK_IN_DATE,
          AUD2_INVSTKPLANITEM.EXPIRY_DATE          AS EXPIRY_DATE,
          AUD2_INVSTKPLANITEM.COSTRATE             AS COST_RATE,
          AUD2_INVSTKPLANITEM.WSP                  AS WSP,
          AUD2_INVSTKPLANITEM.RATE                 AS RATE,
          AUD2_INVSTKPLANITEM.MRP                  AS MRP,
          AUD2_INVSTKPLANITEM.WHETHER_CONSIGNMENT  AS WHETHER_CONSIGNMENT,
          AUD2_INVSTKPLANITEM.TIME                 AS ACTIVATION_TIME,
          AUD2_INVSTKPLANITEM.LOCK_INVSTOCK_QTY    AS LOCK_INVSTOCK_QTY,
          AUD2_INVSTKPLANITEM.CODE                 AS CODE,
          AUD2_INVSTKPLANITEM.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO          AS BATCH_SERIAL_NUMBER
FROM AUD2_INVSTKPLANITEM
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''AuditPlan'') TRANS_DET
             ON (AUD2_INVSTKPLANITEM.STKPLANCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVSTKPLANITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVSTKPLANMAIN INVSTKPLANMAIN ON AUD2_INVSTKPLANITEM.STKPLANCODE = INVSTKPLANMAIN.STKPLANCODE
INNER JOIN INVLOC INVLOC ON AUD2_INVSTKPLANITEM.LOCCODE = INVLOC.LOCCODE
INNER JOIN INVITEM INVITEM ON AUD2_INVSTKPLANITEM.ICODE = INVITEM.ICODE
LEFT OUTER  JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_INVSTKPLANITEM.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'STKPLANCODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('MiscellaneousEntry', 'INVMISCDET', 'Details', 1, 'MiscellaneousEntryDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invmiscdet 
AS 
SELECT TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          AUD2_INVMISCDET.ACTION,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_INVMISCDET.MISCCODE             AS ENTRY_CODE,
          AUD2_INVMISCDET.MISCDETCODE          AS DETAIL_CODE,
          AUD2_INVMISCDET.ICODE                AS ICODE,
          INVITEM.BARCODE                      AS ITEM_BARCODE,
          AUD2_INVMISCDET.QTY                  AS QUANTITY,
          AUD2_INVMISCDET.RATE                 AS ITEM_RATE,
          AUD2_INVMISCDET.COSTRATE             AS STANDARD_RATE,
          AUD2_INVMISCDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO      AS BATCH_SERIAL_NUMBER
FROM AUD2_INVMISCDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''MiscellaneousEntry'') TRANS_DET
             ON (AUD2_INVMISCDET.MISCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVMISCDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVITEM INVITEM ON AUD2_INVMISCDET.ICODE = INVITEM.ICODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL
ON AUD2_INVMISCDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'MISCCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'MISCDETCODE');
INSERT INTO main.aud2_table VALUES ('PurchaseChargeMaster', 'FINCHG', 'Master', 1, 'PurchaseCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          ACTION,
          AUD.TRANSACTION_ID,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.CHGCODE,
          AUD.CHGCODE                               MODULE_KEY,
          AUD.CHGNAME                               CHARGE_NAME,
          AUD.CHGNAME                               MODULE_KEY_DISPLAY,
          AUD.GLCODE                                LEDGER_CODE,
          G.GLNAME                                  LEDGER_NAME,
          AUD.RATE                                  FACTOR,
          AUD.SIGN                                  SIGN,
          AUD.ROUNDOFF                              ROUNDOFF,
          CASE WHEN AUD.EXT=''Y'' THEN  ''Yes'' WHEN AUD.EXT=''N'' THEN  ''No'' END  EXTINCT,
          AUD.SLCODE                                SUBLEDGER_CODE,
          S.SLNAME                                  SUBLEDGER_NAME,
          AUD.BASIS                                 PERCENT_OR_AMOUNT,
          AUD.OPERATION_LEVEL                       APPLICABILITY,
          AUD.FINTRADEGRP_CODE                      TRADEGROUP_CODE,
          T.NAME                                    TRADEGROUP_NAME,
          AUD.ISTAX                                 TAX_CHARGE,
          AUD.SOURCE                                FACTOR_SOURCE,
          AUD.INCLUDE_IN_COST                       CONSIDER_IN_COST,
          AUD.EXCLUDE_IN_INVOICE                    DONT_CONSIDER_IN_INVOICE,
          AUD.IS_CHANGEABLE                         ALLOW_USER_MODIFICATION,
          AUD.CASH_DISCOUNT_APPLICABLE              CONSIDER_IN_CASHDISCOUNT,
          AUD.GST_COMPONENT                         GST_COMPONENT,
          AUD.ISREVERSE                             GST_REVERSE_CHARGE,
          AUD.ISSYSTEM                              SYSTEM_CHARGE
     FROM aud2_finchg aud INNER JOIN (SELECT A.*,
									  RANK()
									  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE 
									        ORDER BY TRANSACTION_DATE)VERSION_SEQ
									  FROM AUD2_TRANSACTION A
									  WHERE MODULE_SHORTCODE = ''PurchaseChargeMaster'') trans_det 
						  ON ((AUD.CHGCODE::text) = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID )
LEFT OUTER JOIN fingl g ON (AUD.GLCODE = G.GLCODE)
LEFT OUTER JOIN finsl s ON (AUD.SLCODE = S.SLCODE)
LEFT OUTER JOIN fintradegrp t ON (AUD.FINTRADEGRP_CODE = T.CODE)', 'CHGCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CHGCODE');
INSERT INTO main.aud2_table VALUES ('MarginRule', 'INVMMRULE_EXCEPTION', 'Margin Rule Exception', 1, 'RuleException', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_invmmrule_exception
 AS
 SELECT trans_det.version_seq,
    trans_det.login_user,
    trans_det.transaction_date,
	aud2_invmmrule_exception.transaction_id,
    trans_det.header_key_value AS module_key,
    aud2_invmmrule_exception.action,
    aud2_invmmrule_exception.code,
    aud2_invmmrule_exception.invmmrule_code AS marginrule_code,
    marginrule.name AS marginrule_name,
    aud2_invmmrule_exception.invmmrule_det_code,
    aud2_invmmrule_exception.range_from,
    aud2_invmmrule_exception.range_to,
        CASE aud2_invmmrule_exception.exp_calc_mode
            WHEN ''F''::bpchar THEN ''FIXED''::text
            WHEN ''R''::bpchar THEN ''PERCENTAGE''::text
            ELSE '' ''::text
        END AS factor_type,
    aud2_invmmrule_exception.value AS factor
   FROM aud2_invmmrule_exception
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''MarginRule''::text) trans_det ON aud2_invmmrule_exception.invmmrule_code::text = trans_det.header_key_value::text AND aud2_invmmrule_exception.transaction_id::text = trans_det.transaction_id::text
     JOIN invmmrule marginrule ON aud2_invmmrule_exception.invmmrule_code = marginrule.code;', 'INVMMRULE_CODE', 'AuditTriggerTemplateAllColumnsNew', 4, 'CODE');
INSERT INTO main.aud2_table VALUES ('MarginRule', 'INVMMRULE_DET', 'Detail', 1, 'RuleDefinition', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_invmmrule_det
 AS
 SELECT trans_det.version_seq,
    trans_det.login_user,
    trans_det.transaction_date,
	aud2_invmmrule_det.transaction_id,
    trans_det.header_key_value AS module_key,
    aud2_invmmrule_det.action,
    aud2_invmmrule_det.code AS marginrule_det_code,
    aud2_invmmrule_det.invmmrule_date_code AS marginrule_app_code,
    invmmrule_date.eff_dtfr AS effective_date_from,
    aud2_invmmrule_det.invmmrule_code AS marginrule_code,
    invmmrule.name AS marginrule_name,
        CASE aud2_invmmrule_det.rule_type
            WHEN ''CM''::bpchar THEN ''Cost to MRP''::text
            WHEN ''CW''::bpchar THEN ''Cost to WSP''::text
            ELSE '' ''::text
        END AS cost_to_mrp_wsp,
        CASE aud2_invmmrule_det.cost_def
            WHEN ''B''::bpchar THEN ''Basic Cost''::text
            WHEN ''E''::bpchar THEN ''Effective Cost''::text
            ELSE '' ''::text
        END AS mrp_or_rsp_to_consider,
        CASE aud2_invmmrule_det.price_def
            WHEN ''M''::bpchar THEN ''RSP''::text
            WHEN ''L''::bpchar THEN ''MRP''::text
            WHEN ''W''::bpchar THEN ''WSP''::text
            ELSE '' ''::text
        END AS cost_to_consider,
        CASE aud2_invmmrule_det.basis
            WHEN ''U''::bpchar THEN ''Mark Up''::text
            WHEN ''D''::bpchar THEN ''Mark Down''::text
            ELSE '' ''::text
        END AS markup_markdown,
        CASE aud2_invmmrule_det.calc_mode
            WHEN ''P''::bpchar THEN ''Percentage''::text
            WHEN ''A''::bpchar THEN ''Amount''::text
            ELSE '' ''::text
        END AS min_margin_percent_amt,
    aud2_invmmrule_det.value AS min_margin_factor,
        CASE aud2_invmmrule_det.state
            WHEN ''A''::bpchar THEN ''Active''::text
            WHEN ''I''::bpchar THEN ''Inactive''::text
            ELSE '' ''::text
        END AS rule_status,
        CASE aud2_invmmrule_det.margin_calc_mode
            WHEN ''G''::bpchar THEN ''Gross of Tax''::text
            WHEN ''N''::bpchar THEN ''Net of Tax''::text
            ELSE '' ''::text
        END AS consider_tax_in_margin,
        CASE aud2_invmmrule_det.auto_calculate_mrp
            WHEN ''Y''::bpchar THEN ''Yes''::text
            WHEN ''N''::bpchar THEN ''No''::text
            ELSE '' ''::text
        END AS alert_cost_to_mrp,
        CASE aud2_invmmrule_det.auto_calculate_wsp
            WHEN ''Y''::bpchar THEN ''Yes''::text
            WHEN ''N''::bpchar THEN ''No''::text
            ELSE '' ''::text
        END AS alert_cost_to_wsp,
        CASE aud2_invmmrule_det.round_off
            WHEN ''N''::text THEN ''None''::text
            WHEN ''U''::text THEN ''Upper''::text
            WHEN ''L''::text THEN ''Lower''::text
            WHEN ''R''::text THEN ''Round''::text
            ELSE NULL::text
        END AS round_off,
    aud2_invmmrule_det.multiples_of,
    aud2_invmmrule_det.factor AS factor_value
   FROM aud2_invmmrule_det
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''MarginRule''::text) trans_det ON aud2_invmmrule_det.invmmrule_code::text = trans_det.header_key_value::text AND aud2_invmmrule_det.transaction_id::text = trans_det.transaction_id::text
     LEFT JOIN invmmrule_date invmmrule_date ON aud2_invmmrule_det.invmmrule_date_code = invmmrule_date.code
     LEFT JOIN invmmrule invmmrule ON aud2_invmmrule_det.invmmrule_code = invmmrule.code;', 'INVMMRULE_CODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('GRC', 'INVGRCCHG_ITEM', 'Charge Item', 1, 'PurchaseGRCChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrcchg_item 
AS 
SELECT TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          AUD2_INVGRCCHG_ITEM.ACTION,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_INVGRCCHG_ITEM.GRCCODE          AS GOOD_RECEIVE_CODE,
          AUD2_INVGRCCHG_ITEM.INVGRCDET_CODE   AS GOOD_RECEIVE_DET_CODE,
          AUD2_INVGRCCHG_ITEM.SEQ              AS SEQUENCE,
          AUD2_INVGRCCHG_ITEM.CHGCODE          AS CHARGE_CODE,
          FINCHG.CHGNAME                       AS CHARGE_NAME,
          AUD2_INVGRCCHG_ITEM.RATE             AS RATE,
          CASE AUD2_INVGRCCHG_ITEM.BASIS
             WHEN ''A'' THEN ''Amount''
             WHEN ''P'' THEN ''Percentage''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_INVGRCCHG_ITEM.SIGN             AS SIGN,
          AUD2_INVGRCCHG_ITEM.CHGAMT           AS CHARGE_AMOUNT,
          AUD2_INVGRCCHG_ITEM.APPAMT           AS APPLICABLE_AMOUNT,
          AUD2_INVGRCCHG_ITEM.FORMULAE         AS FORMULA,
          CASE AUD2_INVGRCCHG_ITEM.OPERATION_LEVEL
             WHEN ''L'' THEN ''Line Level''
             WHEN ''I'' THEN ''Item Level''
             ELSE '' ''
          END
             AS OPERATION_LEVEL,
          CASE AUD2_INVGRCCHG_ITEM.ISTAX
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS ISTAX,
          CASE AUD2_INVGRCCHG_ITEM.SOURCE
             WHEN ''F'' THEN ''Fixed''
             WHEN ''V'' THEN ''VAT''
             WHEN ''G'' THEN ''GST''
             WHEN ''E'' THEN ''Excise''
          END
             AS FACTOR_SOURCE,
          AUD2_INVGRCCHG_ITEM.FORGN_CURR_RATE  AS FOREIGN_CURRENCY_RATE,
          AUD2_INVGRCCHG_ITEM.CODE             AS CODE,
          AUD2_INVGRCCHG_ITEM.GST_COMPONENT    AS GST_COMPONENT,
          CASE AUD2_INVGRCCHG_ITEM.ISREVERSE
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS GST_REVERSE_CHARGE,
          AUD2_INVGRCCHG_ITEM.ROUNDOFF_ADJ_AMT AS ROUNDOFF_ADJ_AMT,
          CASE AUD2_INVGRCCHG_ITEM.INCLUDE_IN_COST
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS INCLUDE_IN_COST
FROM AUD2_INVGRCCHG_ITEM
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GRC'') TRANS_DET
             ON (AUD2_INVGRCCHG_ITEM.GRCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGRCCHG_ITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINCHG FINCHG ON AUD2_INVGRCCHG_ITEM.CHGCODE = FINCHG.CHGCODE', 'GRCCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'INVGRCDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('SaleTermMaster', 'SALTERMDET', 'Detail', 1, 'SalesTermCharges', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_saltermdet 
AS
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.SALTERMCODE MODULE_KEY,
          --S.SALTERMNAME       TERM_NAME,
          --S.SALTERMNAME       MODULE_KEY_DISPLAY,
          AUD.SEQ         SEQUENCE,
          AUD.CHGCODE     CHARGE_CODE,
          CHG.SALCHGNAME  CHARGE_NAME,
          AUD.RATE        FACTOR,
          AUD.FORMULAE    EXPRESSION,
          AUD.SIGN        SIGN,
          AUD.CODE        TERM_DETAIL_CODE,
          CASE AUD.OPERATION_LEVEL
             WHEN ''L'' THEN ''Line level''
             WHEN ''H'' THEN ''Header level''
          END
             OPERATION_LEVEL
FROM AUD2_SALTERMDET AUD INNER JOIN (SELECT A.*, 
										  RANK() 
										  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
									      ORDER BY TRANSACTION_DATE) VERSION_SEQ
										  FROM AUD2_TRANSACTION A
										  WHERE MODULE_SHORTCODE = ''SaleTermMaster'') TRANS_DET 
										  ON (AUD.SALTERMCODE::varchar = TRANS_DET.HEADER_KEY_VALUE
										      AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)							
INNER JOIN SALCHG CHG ON AUD.CHGCODE = CHG.SALCHGCODE', 'SALTERMCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 2, 'SALTERMCODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('CancelOrder', 'SALORDCNLMAIN', 'Header', 1, 'SalesCancelOrderHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salordcnlmain 
AS 
SELECT TRANS_DET.VERSION_SEQ                 AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                  AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID              AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE            AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE            AS MODULE_KEY,
          AUD2_SALORDCNLMAIN.SCHEME_DOCNO       AS MODULE_KEY_DISPLAY,
          AUD2_SALORDCNLMAIN.ACTION,
          AUD2_SALORDCNLMAIN.CNLCODE            AS CODE,
          AUD2_SALORDCNLMAIN.CNLDT              AS CANCEL_DATE,
          AUD2_SALORDCNLMAIN.DOCNO              AS DOCUMENT_NUMBER,
          AUD2_SALORDCNLMAIN.REM                AS REMARKS,
          AUD2_SALORDCNLMAIN.ECODE              AS CREATED_USER_CODE,
          HRDEMP.FNAME                          AS CREATED_USER_NAME,
          AUD2_SALORDCNLMAIN.LAST_ACCESS_ECODE  AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                         AS LAST_MODIFIED_USER_NAME,
          AUD2_SALORDCNLMAIN.DOCCODE            AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                  AS DOCSCHEME_NAME,
          AUD2_SALORDCNLMAIN.SCHEME_DOCNO       AS CANCEL_ORDER_NO,
          AUD2_SALORDCNLMAIN.ADMOU_CODE         AS OU_CODE,
          ADMOU.NAME                            AS OU_NAME,
          AUD2_SALORDCNLMAIN.ADMSITE_CODE_OWNER AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                          AS TRANSACTION_SITE_NAME,
          AUD2_SALORDCNLMAIN.ENTRY_SOURCE       AS ENTRY_SOURCE,
          AUD2_SALORDCNLMAIN.UDFSTRING01        AS UDFSTRING01,
          AUD2_SALORDCNLMAIN.UDFSTRING02        AS UDFSTRING02,
          AUD2_SALORDCNLMAIN.UDFSTRING03        AS UDFSTRING03,
          AUD2_SALORDCNLMAIN.UDFSTRING04        AS UDFSTRING04,
          AUD2_SALORDCNLMAIN.UDFSTRING05        AS UDFSTRING05,
          AUD2_SALORDCNLMAIN.UDFSTRING06        AS UDFSTRING06,
          AUD2_SALORDCNLMAIN.UDFSTRING07        AS UDFSTRING07,
          AUD2_SALORDCNLMAIN.UDFSTRING08        AS UDFSTRING08,
          AUD2_SALORDCNLMAIN.UDFSTRING09        AS UDFSTRING09,
          AUD2_SALORDCNLMAIN.UDFSTRING10        AS UDFSTRING10,
          AUD2_SALORDCNLMAIN.UDFNUM01           AS UDFNUM01,
          AUD2_SALORDCNLMAIN.UDFNUM02           AS UDFNUM02,
          AUD2_SALORDCNLMAIN.UDFNUM03           AS UDFNUM03,
          AUD2_SALORDCNLMAIN.UDFNUM04           AS UDFNUM04,
          AUD2_SALORDCNLMAIN.UDFNUM05           AS UDFNUM05,
          AUD2_SALORDCNLMAIN.UDFDATE01          AS UDFDATE01,
          AUD2_SALORDCNLMAIN.UDFDATE02          AS UDFDATE02,
          AUD2_SALORDCNLMAIN.UDFDATE03          AS UDFDATE03,
          AUD2_SALORDCNLMAIN.UDFDATE04          AS UDFDATE04,
          AUD2_SALORDCNLMAIN.UDFDATE05          AS UDFDATE05
FROM AUD2_SALORDCNLMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''CancelOrder'') TRANS_DET
             ON (AUD2_SALORDCNLMAIN.CNLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_SALORDCNLMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_SALORDCNLMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT OUTER JOIN ADMOU ADMOU ON AUD2_SALORDCNLMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_SALORDCNLMAIN.ADMSITE_CODE_OWNER = ADMSITE.CODE
INNER JOIN HRDEMP HRDEMP ON AUD2_SALORDCNLMAIN.ECODE = HRDEMP.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP1 ON AUD2_SALORDCNLMAIN.LAST_ACCESS_ECODE = HRDEMP1.ECODE', 'CNLCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CNLCODE');
INSERT INTO main.aud2_table VALUES ('Journal', 'FINJRNDET', 'Detail', 1, 'JournalDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finjrndet 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.JRNCODE          JOURNAL_CODE,
          AUD.JRNCODE          MODULE_KEY,
          --AUD.JRNNO            JOURNAL_NUMBER,
          AUD.JRNDT            JOURNAL_DATE,
          CASE
             WHEN AUD.JRNTYPE = ''C'' THEN ''Credit Journal''
             WHEN AUD.JRNTYPE = ''D'' THEN ''Debit Journal''
             WHEN AUD.JRNTYPE = ''J'' THEN ''General Journal''
             WHEN AUD.JRNTYPE = ''R'' THEN ''TDS Reversal Journal''
             WHEN AUD.JRNTYPE = ''T'' THEN ''TDS Journal''
          END
             JOURNAL_TYPE,
          AUD.GLCODE           LEDGER_CODE,
          GL.GLNAME            LEDGER_NAME,
          AUD.SLCODE           SUBLEDGER_CODE,
          SL.SLNAME            SUBLEDGER_NAME,
          AUD.DAMOUNT          DEBIT_AMOUNT,
          AUD.CAMOUNT          CREDIT_AMOUNT,
          AUD.NARTEXT          NARRATION,
          AUD.CODE             CODE,
          AUD.TDSTYPECODE      TDS_TYPE_CODE,
          TT.TDSNAME           TDS_TYPE_NAME,
          AUD.TDSSRCCODE       TDS_SOURCE_CODE,
          TS.TDSSRCNAME        TDS_SOURCE_NAME,
          AUD.TDSSECTION       TDS_SECTION,
          AUD.TDSRATE          TDS_RATE,
          AUD.TDS_APPAMT       TDS_APPLICABLE_AMOUNT,
          AUD.CERTIFICATENO    CERTIFICATE_NO,
          AUD.TDS_ROUNDOFF_AMT TDS_ROUNDOFF_AMOUNT,
          AUD.TDS_GROSSAMT     TDS_GROSSAMOUNT,
          AUD.REF_ADMSITE_CODE REF_SITE_CODE,
          S.NAME               REF_SITE_NAME,
          AUD.FINVCHDET_CODE   VOUCHER_DET_CODE,
          AUD.TDS_JOURNAL_CODE TDS_JOURNAL_CODE,
          AUD.TDS_REV_AMT      TDS_REV_AMOUNT,
          AUD.TDS_REV_APP_AMT  TDS_REV_APP_AMOUNT
FROM aud2_finjrndet aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Journal'') trans_det 
			ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN fingl gl ON AUD.GLCODE = GL.GLCODE 
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN fintdstype tt ON (AUD.TDSTYPECODE = TT.TDSTYPECODE)
LEFT OUTER JOIN fintdssrc ts ON (AUD.TDSSRCCODE = TS.TDSSRCCODE)
LEFT OUTER JOIN admsite s ON (AUD.REF_ADMSITE_CODE = S.CODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Sales Return', 'SALRTCHG_ITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_salrtchg_item
 AS
 SELECT trans_det.version_seq,
    trans_det.login_user,
    trans_det.transaction_date,
	aud2_salrtchg_item.transaction_id,
    trans_det.header_key_value AS module_key,
    aud2_salrtchg_item.action,
    aud2_salrtchg_item.rtcode AS return_code,
    return.scheme_docno AS return_number,
    aud2_salrtchg_item.salrtdet_code AS sales_return_det_code,
    aud2_salrtchg_item.seq AS sequence,
    aud2_salrtchg_item.chgcode AS charge_code,
    charge.salchgname AS charge_name,
    aud2_salrtchg_item.glcode AS general_ledger_code,
    general_ledger.glname AS general_ledger_name,
    aud2_salrtchg_item.slcode AS sub_ledger_code,
    sub_ledger.slname AS sub_ledger_name,
    aud2_salrtchg_item.rate,
        CASE aud2_salrtchg_item.basis
            WHEN ''A''::bpchar THEN ''AMOUNT''::text
            WHEN ''P''::bpchar THEN ''PERCENTAGE''::text
            ELSE '' ''::text
        END AS basis,
    aud2_salrtchg_item.sign,
    aud2_salrtchg_item.chgamt AS charge_amount,
    aud2_salrtchg_item.appamt AS applicable_amount,
    aud2_salrtchg_item.formulae AS expression,
        CASE aud2_salrtchg_item.istax
            WHEN ''Y''::bpchar THEN ''YES''::text
            WHEN ''N''::bpchar THEN ''NO''::text
            ELSE '' ''::text
        END AS istax,
        CASE aud2_salrtchg_item.source
            WHEN ''F''::bpchar THEN ''Fixed''::text
            WHEN ''V''::bpchar THEN ''VAT''::text
            WHEN ''E''::bpchar THEN ''Excise''::text
            WHEN ''G''::bpchar THEN ''GST''::text
            ELSE '' ''::text
        END AS factor_source,
    aud2_salrtchg_item.code AS detail_charge_code,
    aud2_salrtchg_item.gst_component,
    aud2_salrtchg_item.roundoff_adj_amt AS roundoff_adjusted_amt
   FROM aud2_salrtchg_item
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''Sales Return''::text) trans_det ON aud2_salrtchg_item.rtcode::text = trans_det.header_key_value::text AND aud2_salrtchg_item.transaction_id::text = trans_det.transaction_id::text
     LEFT JOIN salrtmain return ON aud2_salrtchg_item.rtcode = return.rtcode
     LEFT JOIN salchg charge ON aud2_salrtchg_item.chgcode = charge.salchgcode
     LEFT JOIN fingl general_ledger ON aud2_salrtchg_item.glcode = general_ledger.glcode
     LEFT JOIN finsl sub_ledger ON aud2_salrtchg_item.slcode = sub_ledger.slcode', 'RTCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'SALRTDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('JobOrder', 'PRDJOBMAIN', 'Header', 1, 'JobOrderHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdjobmain 
AS 
SELECT TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PRDJOBMAIN.ACTION,
          AUD2_PRDJOBMAIN.CODE              AS CODE,
          AUD2_PRDJOBMAIN.JOBNO             AS JOB_ORDER_NUMBER,
          AUD2_PRDJOBMAIN.DOCCODE           AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME              AS DOCSCHEME_NAME,
          AUD2_PRDJOBMAIN.JOB_DATE          AS JOB_DATE,
          AUD2_PRDJOBMAIN.REF_NO            AS REFERENCE_NUMBER,
          AUD2_PRDJOBMAIN.PCODE             AS JOBBER_CODE,
          FINSL.SLNAME                      AS JOBBER_NAME,
          AUD2_PRDJOBMAIN.PRCODE            AS PROCESS_CODE,
          PRDPR.PRNAME                      AS PROCESS_NAME,
          CASE AUD2_PRDJOBMAIN.JOBTYPE
             WHEN ''LS'' THEN ''LOTBASED STANDARD''
             WHEN ''LN'' THEN ''LOTBASED NONSTANDARD''
             WHEN ''AS'' THEN ''ADHOC NEW''
             WHEN ''AN'' THEN ''ADHOC REPROCESS''
             ELSE '' ''
          END
             AS JOB_TYPE,
          AUD2_PRDJOBMAIN.REMARKS           AS REMARKS,
          AUD2_PRDJOBMAIN.ADMOU_CODE        AS OU_CODE,
          ADMOU.NAME                        AS OU_NAME,
          CASE AUD2_PRDJOBMAIN.IS_CLOSED
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS IS_CLOSED,
          AUD2_PRDJOBMAIN.CLOSE_DATE        AS CLOSE_DATE,
          AUD2_PRDJOBMAIN.ECODE             AS CREATED_USER_CODE,
          HRDEMP1.FNAME                     AS CREATED_USER_NAME,
          AUD2_PRDJOBMAIN.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP2.FNAME                     AS LAST_MODIFIED_USER_NAME,
          AUD2_PRDJOBMAIN.ADMSITE_CODE      AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                      AS TRANSACTION_SITE_NAME,
          AUD2_PRDJOBMAIN.JOBBER_LOCCODE    AS JOBBER_STOCK_POINT_CODE,
          INVLOC.LOCNAME                    AS JOBBER_STOCK_POINT_NAME,
          AUD2_PRDJOBMAIN.REF_DT            AS REFERENCE_DATE,
          CASE AUD2_PRDJOBMAIN.ALLOW_JOBBER_STOCKPOINT
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS ALLOW_JOBBER_STOCKPOINT,
          AUD2_PRDJOBMAIN.PRD_MAX_DAYS      AS MAXIMUM_OVERDUE_DAYS,
          CASE AUD2_PRDJOBMAIN.PRD_OVERDUE_ACTION
             WHEN ''O'' THEN ''RESTRICT ORDER''
             WHEN ''N'' THEN ''NO RESTRICTION''
             ELSE '' ''
          END
             AS PRD_OVERDUE_ACTION,
          AUD2_PRDJOBMAIN.ENTRY_SOURCE      AS ENTRY_SOURCE,
          AUD2_PRDJOBMAIN.UDFSTRING01       AS UDFSTRING01,
          AUD2_PRDJOBMAIN.UDFSTRING02       AS UDFSTRING02,
          AUD2_PRDJOBMAIN.UDFSTRING03       AS UDFSTRING03,
          AUD2_PRDJOBMAIN.UDFSTRING04       AS UDFSTRING04,
          AUD2_PRDJOBMAIN.UDFSTRING05       AS UDFSTRING05,
          AUD2_PRDJOBMAIN.UDFSTRING06       AS UDFSTRING06,
          AUD2_PRDJOBMAIN.UDFSTRING07       AS UDFSTRING07,
          AUD2_PRDJOBMAIN.UDFSTRING08       AS UDFSTRING08,
          AUD2_PRDJOBMAIN.UDFSTRING09       AS UDFSTRING09,
          AUD2_PRDJOBMAIN.UDFSTRING10       AS UDFSTRING10,
          AUD2_PRDJOBMAIN.UDFNUM01          AS UDFNUM01,
          AUD2_PRDJOBMAIN.UDFNUM02          AS UDFNUM02,
          AUD2_PRDJOBMAIN.UDFNUM03          AS UDFNUM03,
          AUD2_PRDJOBMAIN.UDFNUM04          AS UDFNUM04,
          AUD2_PRDJOBMAIN.UDFNUM05          AS UDFNUM05,
          AUD2_PRDJOBMAIN.UDFDATE01         AS UDFDATE01,
          AUD2_PRDJOBMAIN.UDFDATE02         AS UDFDATE02,
          AUD2_PRDJOBMAIN.UDFDATE03         AS UDFDATE03,
          AUD2_PRDJOBMAIN.UDFDATE04         AS UDFDATE04,
          AUD2_PRDJOBMAIN.UDFDATE05         AS UDFDATE05,
          AUD2_PRDJOBMAIN.AUTH_ECODE        AS AUTHORIZATION_USERCODE,
          HRDEMP.FNAME                      AS AUTHORIZATION_USER_NAME
FROM AUD2_PRDJOBMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''JobOrder'') TRANS_DET
             ON (AUD2_PRDJOBMAIN.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDJOBMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PRDJOBMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
INNER JOIN FINSL FINSL ON AUD2_PRDJOBMAIN.PCODE = FINSL.SLCODE
INNER JOIN PRDPR PRDPR ON AUD2_PRDJOBMAIN.PRCODE = PRDPR.PRCODE
INNER JOIN ADMOU ADMOU ON AUD2_PRDJOBMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PRDJOBMAIN.ADMSITE_CODE = ADMSITE.CODE
LEFT OUTER JOIN INVLOC INVLOC ON AUD2_PRDJOBMAIN.JOBBER_LOCCODE = INVLOC.LOCCODE
LEFT OUTER JOIN HRDEMP HRDEMP ON AUD2_PRDJOBMAIN.AUTH_ECODE = HRDEMP.ECODE
INNER JOIN HRDEMP HRDEMP1 ON AUD2_PRDJOBMAIN.ECODE = HRDEMP1.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP2 ON AUD2_PRDJOBMAIN.LAST_ACCESS_ECODE = HRDEMP2.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('WIPMaterialTransaction', 'PRDWIPDET', 'Details', 1, 'WIPTransactionDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdwipdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID            AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_PRDWIPDET.ACTION,
          AUD2_PRDWIPDET.WIPTXN_CODE          AS WIP_TRANSACTION_CODE,
          AUD2_PRDWIPDET.CNLCODE              AS CANCELLATION_CODE,
          PRDJOBCNLMAIN.CNLNO                 AS CANCELLATION_NUMBER,
          AUD2_PRDWIPDET.JOBCODE              AS JOB_CODE,
          PRDJOBMAIN.JOBNO                    AS JOB_ORDER_NUMBER,
          AUD2_PRDWIPDET.LOTCODE              AS WORKING_PLAN_CODE,
          PRDLOTMAIN.LOTNO                    AS WORKING_PLAN_NUMBER,
          AUD2_PRDWIPDET.COMPONENT_ICODE      AS COMPONENT_ITEM_ICODE,
          COMPONENT_ITEM.BARCODE              AS COMPONENT_ITEM_BARCODE,
          AUD2_PRDWIPDET.ASSEMBLY_ICODE       AS ASSEMBLY_ITEM_ICODE,
          ASSEMBLY_ITEM.BARCODE               AS ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDWIPDET.WIP_LOCCODE          AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                      AS STOCK_POINT_NAME,
          AUD2_PRDWIPDET.QTY                  AS QUANTITY,
          AUD2_PRDWIPDET.JOBBOM_CODE          AS JOB_BOM_CODE,
          PRDJOBBOM.CODE                      AS JOB_BOM_NUMBER,
          AUD2_PRDWIPDET.COSTRATE             AS COST_RATE,
          AUD2_PRDWIPDET.CODE                 AS CODE,
          AUD2_PRDWIPDET.SITE_COSTRATE        AS SITE_COSTRATE,
          AUD2_PRDWIPDET.ASS_SAITEM_CODE      AS ASSEMBLY_SAITEM_CODE,
          PRD_SAITEM.SAINAME                  AS ASSEMBLY_SAITEM_NAME,
          AUD2_PRDWIPDET.COM_SAITEM_CODE      AS COMPONENT_SAITEM_CODE,
          PRD_SAITEM1.SAINAME                 AS COMPONENT_SAITEM_NAME,
          AUD2_PRDWIPDET.JOB_ASSEMBLY_ICODE   AS JOB_ASSEMBLY_ICODE,
          JOB_ASSEMBLY_ITEM.BARCODE           AS JOB_ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDWIPDET.RATE                 AS RATE,
          AUD2_PRDWIPDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO     AS BATCH_SERIAL_NUMBER
     FROM AUD2_PRDWIPDET INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
									ORDER BY TRANSACTION_DATE)
									VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''WIPMaterialTransaction'') TRANS_DET
						 ON (AUD2_PRDWIPDET.WIPTXN_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
							 AND AUD2_PRDWIPDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN PRDJOBCNLMAIN PRDJOBCNLMAIN ON AUD2_PRDWIPDET.CNLCODE = PRDJOBCNLMAIN.CODE
LEFT JOIN PRDJOBMAIN PRDJOBMAIN ON AUD2_PRDWIPDET.JOBCODE = PRDJOBMAIN.CODE
LEFT JOIN PRDLOTMAIN PRDLOTMAIN ON AUD2_PRDWIPDET.LOTCODE = PRDLOTMAIN.CODE
INNER JOIN INVITEM COMPONENT_ITEM ON AUD2_PRDWIPDET.COMPONENT_ICODE = COMPONENT_ITEM.ICODE
INNER JOIN INVITEM ASSEMBLY_ITEM ON AUD2_PRDWIPDET.ASSEMBLY_ICODE = ASSEMBLY_ITEM.ICODE
LEFT JOIN INVLOC INVLOC ON AUD2_PRDWIPDET.WIP_LOCCODE = INVLOC.LOCCODE
LEFT JOIN PRDJOBBOM PRDJOBBOM ON AUD2_PRDWIPDET.JOBBOM_CODE = PRDJOBBOM.JOBCODE
LEFT JOIN PRD_SAITEM PRD_SAITEM ON AUD2_PRDWIPDET.ASS_SAITEM_CODE = PRD_SAITEM.CODE
LEFT JOIN PRD_SAITEM PRD_SAITEM1 ON AUD2_PRDWIPDET.COM_SAITEM_CODE = PRD_SAITEM1.CODE
INNER JOIN INVITEM JOB_ASSEMBLY_ITEM ON AUD2_PRDWIPDET.JOB_ASSEMBLY_ICODE = JOB_ASSEMBLY_ITEM.ICODE
LEFT JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_PRDWIPDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'WIPTXN_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Article', 'INVARTICLE', 'Article', 1, 'ItemArticle', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invarticle
AS 
SELECT TRANS_DET.VERSION_SEQ,
          A.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          A.TRANSACTION_ID,
          A.CODE,
          A.CODE            MODULE_KEY,
          A.NAME            ARTICLE_NAME,
          A.NAME            MODULE_KEY_DISPLAY,
          A.INVATTR1_CODE   ATTRIBUTE1_CODE,
          AT1.NAME          ATTRIBUTE1_NAME,
          A.INVATTR2_CODE   ATTRIBUTE2_CODE,
          AT2.NAME          ATTRIBUTE2_NAME,
          A.INVATTR3_CODE   ATTRIBUTE3_CODE,
          AT3.NAME          ATTRIBUTE3_NAME,
          A.INVATTR4_CODE   ATTRIBUTE4_CODE,
          AT4.NAME          ATTRIBUTE4_NAME,
          A.INVATTR5_CODE   ATTRIBUTE5_CODE,
          AT5.NAME          ATTRIBUTE5_NAME,
          A.INVATTR6_CODE   ATTRIBUTE6_CODE,
          AT6.NAME          ATTRIBUTE6_NAME,
          A.GRPCODE         DEPARTMENT_CODE,
          G.GRPNAME         DEPARTMENT_NAME,
          A.MRP             STANDARD_RSP,
          A.MRPRANGEFROM    RSP_RANGE_FROM,
          A.MRPRANGETO      RSP_RANGE_TO,
          A.RATE            STANDARD_COST,
          A.WSP             STANDARD_WSP,
          A.VENDORCODE      VENDOR_CODE,
          S.SLNAME          VENDOR_NAME,
          A.UOM             UOM,
          CASE WHEN A.EXT = ''Y'' THEN ''Yes'' WHEN A.EXT = ''N'' THEN ''No'' END
             EXTINCT,
          A.CAT1PROMPT      CATEGORY1_PROMPT,
          A.CAT2PROMPT      CATEGORY2_PROMPT,
          A.CAT3PROMPT      CATEGORY3_PROMPT,
          A.CAT4PROMPT      CATEGORY4_PROMPT,
          A.CAT5PROMPT      CATEGORY5_PROMPT,
          A.CAT6PROMPT      CATEGORY6_PROMPT,
          CASE
             WHEN A.VARIANT_CAT1 = ''Y'' THEN ''YES''
             WHEN A.VARIANT_CAT1 = ''N'' THEN ''NO''
          END
             CATEGORY1_MANDATORY,
          CASE
             WHEN A.VARIANT_CAT2 = ''Y'' THEN ''YES''
             WHEN A.VARIANT_CAT2 = ''N'' THEN ''NO''
          END
             CATEGORY2_MANDATORY,
          CASE
             WHEN A.VARIANT_CAT3 = ''Y'' THEN ''YES''
             WHEN A.VARIANT_CAT3 = ''N'' THEN ''NO''
          END
             CATEGORY3_MANDATORY,
          CASE
             WHEN A.VARIANT_CAT4 = ''Y'' THEN ''YES''
             WHEN A.VARIANT_CAT4 = ''N'' THEN ''NO''
          END
             CATEGORY4_MANDATORY,
          CASE
             WHEN A.VARIANT_CAT5 = ''Y'' THEN ''YES''
             WHEN A.VARIANT_CAT5 = ''N'' THEN ''NO''
          END
             CATEGORY5_MANDATORY,
          CASE
             WHEN A.VARIANT_CAT6 = ''Y'' THEN ''YES''
             WHEN A.VARIANT_CAT6 = ''N'' THEN ''NO''
          END
             CATEGORY6_MANDATORY,
          A.INVMMRULE_CODE  MARGIN_RULE_CODE,
          R.NAME            MARGIN_RULE_NAME,
          A.TAXCODE         TAX_GROUP_CODE,
          T.TAXNAME         TAX_GROUP_NAME,
          CASE
             WHEN A.ITEM_MANAGEMENT_MODE = ''I'' THEN ''Item''
             WHEN A.ITEM_MANAGEMENT_MODE = ''B'' THEN ''Batch''
             WHEN A.ITEM_MANAGEMENT_MODE = ''S'' THEN ''Serial''
          END
             ITEM_MANAGEMENT_MODE,
          CASE
             WHEN A.MANAGE_EXPIRY = ''Y'' THEN ''Yes''
             WHEN A.MANAGE_EXPIRY = ''N'' THEN ''No''
          END
             MANAGE_EXPIRY,
          CASE
             WHEN A.PRICE_MANAGEMENT = ''I'' THEN ''Item''
             WHEN A.PRICE_MANAGEMENT = ''B'' THEN ''Batch''
             WHEN A.PRICE_MANAGEMENT = ''S'' THEN ''Serial''
          END
             PRICE_MANAGEMENT,
          CASE
             WHEN A.VALIDITY_MODE = ''D'' THEN ''Days''
             WHEN A.VALIDITY_MODE = ''M'' THEN ''Months''
             WHEN A.VALIDITY_MODE = ''Y'' THEN ''Years''
             WHEN A.VALIDITY_MODE = ''N'' THEN ''None''
          END
             VALIDITY_MODE,
          A.VALIDITY_PERIOD VALIDITY_PERIOD
FROM aud2_invarticle a 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Article'') trans_det 
			ON (A.CODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND A.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID) 
INNER JOIN invgrp g ON (A.GRPCODE = G.GRPCODE) 
LEFT OUTER  JOIN invattr1 at1 ON (A.INVATTR1_CODE = AT1.CODE)
LEFT OUTER JOIN invattr2 at2 ON (A.INVATTR2_CODE = AT2.CODE)
LEFT OUTER JOIN invattr3 at3 ON (A.INVATTR3_CODE = AT3.CODE)
LEFT OUTER JOIN invattr4 at4 ON (A.INVATTR4_CODE = AT4.CODE)
LEFT OUTER JOIN invattr5 at5 ON (A.INVATTR5_CODE = AT5.CODE)
LEFT OUTER JOIN invattr6 at6 ON (A.INVATTR6_CODE = AT6.CODE)
LEFT OUTER JOIN finsl s ON (A.VENDORCODE = S.SLCODE)
LEFT OUTER JOIN invmmrule r ON (A.INVMMRULE_CODE = R.CODE)
LEFT OUTER JOIN fintaxmain t ON (A.TAXCODE = T.TAXCODE)', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purrtchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE,
          AUD.RTCODE           RETURN_CODE,
          AUD.RTCODE           MODULE_KEY,
          AUD.PURRTDET_CODE    PUR_RETURN_DET_CODE,
          AUD.SEQ              SEQUENCE,
          AUD.CHGCODE          CHARGE_CODE,
          CHG.CHGNAME          CHARGE_NAME,
          AUD.GLCODE           LEDGER_CODE,
          GL.GLNAME            LEDGER_NAME,
          AUD.SLCODE           SUBLEDGER_CODE,
          SL.SLNAME            SUBLEDGER_NAME,
          AUD.RATE             FACTOR,
          CASE
             WHEN AUD.BASIS = ''A'' THEN ''AMOUNT''
             WHEN AUD.BASIS = ''P'' THEN ''PERCENTAGE''
          END
             BASIS,
          AUD.SIGN             SIGN,
          AUD.CHGAMT           CHARGE_AMOUNT,
               AUD.APPAMT           APPLICABLE_AMOUNT,
          AUD.FORMULAE         FORMULA,
          CASE
			 WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             TAX_CHARGE,
          CASE
             WHEN AUD.SOURCE = ''F'' THEN ''Fixed''
             WHEN AUD.SOURCE = ''G'' THEN ''GST''
             WHEN AUD.SOURCE = ''E'' THEN ''Excise''
          END
             FACTOR_SOURCE,
          AUD.CODE             ROLE_MENU_ASSIGNMENT_CODE,
          AUD.GST_COMPONENT    GST_COMPONENT,
          AUD.ISREVERSE        GST_REVERSE_CHARGE,
          AUD.ROUNDOFF_ADJ_AMT ROUNDOFF_ADJUSTED_AMT
    FROM aud2_purrtchg_item aud INNER JOIN (SELECT A.*,
											RANK()
											OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
											ORDER BY TRANSACTION_DATE)
											VERSION_SEQ
											FROM AUD2_TRANSACTION A
											WHERE MODULE_SHORTCODE = ''Purchase Return'') trans_det 
								ON (AUD.RTCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN finchg chg ON (AUD.CHGCODE = CHG.CHGCODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'RTCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'PURRTDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('JobOrderCancel', 'PRDJOBCNLMAIN', 'Header', 1, 'JobOrderCancelHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdjobcnlmain 
AS 
SELECT TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_PRDJOBCNLMAIN.ACTION,
          AUD2_PRDJOBCNLMAIN.CODE              AS CODE,
          AUD2_PRDJOBCNLMAIN.CNLNO             AS CANCELLATION_NUMBER,
          AUD2_PRDJOBCNLMAIN.DOCCODE           AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                 AS DOCSCHEME_NAME,
          AUD2_PRDJOBCNLMAIN.CNLDT             AS CANCELLATION_DATE,
          AUD2_PRDJOBCNLMAIN.DOCNO             AS DOCUMENT_NUMBER,
          AUD2_PRDJOBCNLMAIN.REM               AS REMARKS,
          AUD2_PRDJOBCNLMAIN.ADMOU_CODE        AS OU_CODE,
          AUD2_PRDJOBCNLMAIN.ECODE             AS CREATED_USER_CODE,
          HRDEMP1.FNAME                        AS CREATED_USER_NAME,
          AUD2_PRDJOBCNLMAIN.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP2.FNAME                        AS LAST_MODIFIED_USER_NAME,
          ADMOU.NAME                           AS OU_NAME,
          AUD2_PRDJOBCNLMAIN.ADMSITE_CODE      AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                         AS TRANSACTION_SITE_NAME,
          AUD2_PRDJOBCNLMAIN.ENTRY_SOURCE      AS ENTRY_SOURCE,
          AUD2_PRDJOBCNLMAIN.UDFSTRING01       AS UDFSTRING01,
          AUD2_PRDJOBCNLMAIN.UDFSTRING02       AS UDFSTRING02,
          AUD2_PRDJOBCNLMAIN.UDFSTRING03       AS UDFSTRING03,
          AUD2_PRDJOBCNLMAIN.UDFSTRING04       AS UDFSTRING04,
          AUD2_PRDJOBCNLMAIN.UDFSTRING05       AS UDFSTRING05,
          AUD2_PRDJOBCNLMAIN.UDFSTRING06       AS UDFSTRING06,
          AUD2_PRDJOBCNLMAIN.UDFSTRING07       AS UDFSTRING07,
          AUD2_PRDJOBCNLMAIN.UDFSTRING08       AS UDFSTRING08,
          AUD2_PRDJOBCNLMAIN.UDFSTRING09       AS UDFSTRING09,
          AUD2_PRDJOBCNLMAIN.UDFSTRING10       AS UDFSTRING10,
          AUD2_PRDJOBCNLMAIN.UDFNUM01          AS UDFNUM01,
          AUD2_PRDJOBCNLMAIN.UDFNUM02          AS UDFNUM02,
          AUD2_PRDJOBCNLMAIN.UDFNUM03          AS UDFNUM03,
          AUD2_PRDJOBCNLMAIN.UDFNUM04          AS UDFNUM04,
          AUD2_PRDJOBCNLMAIN.UDFNUM05          AS UDFNUM05,
          AUD2_PRDJOBCNLMAIN.UDFDATE01         AS UDFDATE01,
          AUD2_PRDJOBCNLMAIN.UDFDATE02         AS UDFDATE02,
          AUD2_PRDJOBCNLMAIN.UDFDATE03         AS UDFDATE03,
          AUD2_PRDJOBCNLMAIN.UDFDATE04         AS UDFDATE04,
          AUD2_PRDJOBCNLMAIN.UDFDATE05         AS UDFDATE05
FROM AUD2_PRDJOBCNLMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''JobOrderCancel'') TRANS_DET
             ON (AUD2_PRDJOBCNLMAIN.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDJOBCNLMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PRDJOBCNLMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
INNER JOIN ADMOU ADMOU ON AUD2_PRDJOBCNLMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PRDJOBCNLMAIN.ADMSITE_CODE = ADMSITE.CODE
INNER JOIN HRDEMP HRDEMP1 ON AUD2_PRDJOBCNLMAIN.ECODE = HRDEMP1.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP2 ON AUD2_PRDJOBCNLMAIN.LAST_ACCESS_ECODE = HRDEMP2.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Journal', 'FINJRNMAIN', 'Header', 1, 'JournalHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finjrnmain 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.JRNCODE            JOURNAL_CODE,
          AUD.JRNCODE            MODULE_KEY,
          AUD.JRNDT              JOURNAL_DATE,
          CASE
             WHEN AUD.JRNTYPE = ''C'' THEN ''Credit Journal''
             WHEN AUD.JRNTYPE = ''D'' THEN ''Debit Journal''
             WHEN AUD.JRNTYPE = ''J'' THEN ''General Journal''
             WHEN AUD.JRNTYPE = ''R'' THEN ''TDS Reversal Journal''
             WHEN AUD.JRNTYPE = ''T'' THEN ''TDS Journal''
          END
             JOURNAL_TYPE,
          AUD.REFNO              REFERENCE_NO,
          AUD.GLCODE             LEDGER_CODE,
          GL.GLNAME              LEDGER_NAME,
          AUD.SLCODE             SUBLEDGER_CODE,
          SL.SLNAME              SUBLEDGER_NAME,
          AUD.DAMOUNT            DEBIT_AMOUNT,
          AUD.CAMOUNT            CREDIT_AMOUNT,
          AUD.ECODE              CREATEDBY_USERCODE,
          E1.FNAME               CREATEDBY_USER,
          AUD.LAST_ACCESS_ECODE  LASTMODIFIEDBY_USERCODE,
          E2.FNAME               LASTMODIFIEDBY_USER,
          AUD.NARTEXT            NARRATION,
          CASE
             WHEN AUD.IS_INTERPARTY = ''Y'' THEN ''Yes''
             WHEN AUD.IS_INTERPARTY = ''N'' THEN ''No''
          END
             IS_INTERPARTY,
          AUD.DOCCODE            DOCSCHEME_CODE,
          AUD.SCHEME_DOCNO       DOCSCHEME_NUMBER,
          FJ.SCHEME_DOCNO        MODULE_KEY_DISPLAY,
          CASE
             WHEN AUD.RELEASE_STATUS = ''U'' THEN ''Unposted''
             WHEN AUD.RELEASE_STATUS = ''P'' THEN ''Posted''
          END
             RELEASE_STATUS,
          AUD.ADMSITE_CODE_OWNER TRANSACTION_SITE_CODE,
          S1.NAME                TRANSACTION_SITE_NAME,
          AUD.RELEASE_ECODE      RELEASED_USERCODE,
          E3.FNAME               RELEASED_USER,
          AUD.REVERSED_JRNCODE   PARENT_JRN_CODE,
          AUD.REF_ADMSITE_CODE   REF_SITE_CODE,
          S2.NAME                REF_SITE_NAME,
          AUD.ADV_VOUCHER_CODE   ADVANCE_VOUCHER_CODE,
          VM.SCHEME_DOCNO        ADVANCE_VOUCHER_NUMBER,
          AUD.ADMOU_CODE         TRANSACTION_SITE_OUCODE,
          AUD.ENTRY_SOURCE       ENTRY_SOURCE,
          AUD.UDFSTRING01        UDFSTRING01,
          AUD.UDFSTRING02        UDFSTRING02,
          AUD.UDFSTRING03        UDFSTRING03,
          AUD.UDFSTRING04        UDFSTRING04,
          AUD.UDFSTRING05        UDFSTRING05,
          AUD.UDFSTRING06        UDFSTRING06,
          AUD.UDFSTRING07        UDFSTRING07,
          AUD.UDFSTRING08        UDFSTRING08,
          AUD.UDFSTRING09        UDFSTRING09,
          AUD.UDFSTRING10        UDFSTRING10,
          AUD.UDFNUM01           UDFNUM01,
          AUD.UDFNUM02           UDFNUM02,
          AUD.UDFNUM03           UDFNUM03,
          AUD.UDFNUM04           UDFNUM04,
          AUD.UDFNUM05           UDFNUM05,
          AUD.UDFDATE01          UDFDATE01,
          AUD.UDFDATE02          UDFDATE02,
          AUD.UDFDATE03          UDFDATE03,
          AUD.UDFDATE04          UDFDATE04,
          AUD.UDFDATE05          UDFDATE05
FROM aud2_finjrnmain aud 
		INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Journal'') trans_det
			ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN hrdemp e1 ON AUD.ECODE = E1.ECODE 
INNER JOIN admsite s1 ON AUD.ADMSITE_CODE_OWNER = S1.CODE
LEFT OUTER JOIN finjrnmain fj ON (AUD.JRNCODE = FJ.JRNCODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN hrdemp e2 ON (AUD.LAST_ACCESS_ECODE = E2.ECODE)
LEFT OUTER JOIN hrdemp e3 ON (AUD.RELEASE_ECODE = E3.ECODE)
LEFT OUTER JOIN admsite s2 ON (AUD.REF_ADMSITE_CODE = S2.CODE)
LEFT OUTER JOIN finvchmain vm ON (AUD.ADV_VOUCHER_CODE = VM.VCHCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'JRNCODE');
INSERT INTO main.aud2_table VALUES ('AccountsLedgerGroup', 'FINGRP', 'Accounts Group', 1, 'AccountsGroup', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fingrp 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.GRPCODE GROUP_CODE,
          AUD.GRPCODE MODULE_KEY,
          AUD.GRPNAME GROUP_NAME,
          FIN.GRPNAME PARENT_NAME,
          AUD.GRPNAME MODULE_KEY_DISPLAY,
          AUD.PARCODE PARENT_CODE,
          AUD.REM     REMARKS,
          CASE WHEN AUD.EXT = ''Y'' THEN ''YES'' WHEN AUD.EXT = ''N'' THEN ''NO'' END
             EXTINCT,
          CASE
             WHEN AUD.TYPE = ''A'' THEN ''ASSET''
             WHEN AUD.TYPE = ''L'' THEN ''LIABILITY''
             WHEN AUD.TYPE = ''I'' THEN ''INCOME''
             WHEN AUD.TYPE = ''E'' THEN ''EXPENSE''
          END
             TYPE,
          AUD.SEQ     SEQUENCE
FROM aud2_fingrp aud
		INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''AccountsLedgerGroup'') trans_det
			ON (AUD.GRPCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN fingrp fin ON (AUD.PARCODE = FIN.GRPCODE)', 'GRPCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 1, 'GRPCODE');
INSERT INTO main.aud2_table VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE                 CODE,
          AUD.SRVCODE              SERVICE_INVOICE_CODE,
          AUD.SRVCODE              MODULE_KEY,
          AUD.SRVDT                SERVICE_INVOICE_DATE,
          AUD.CHGCODE              CHARGE_CODE,
          CHG.CHGNAME              CHARGE_NAME,
          AUD.RATE                 STANDARD_COST,
          AUD.SIGN                 SIGN,
          AUD.CHGAMT               CHARGE_AMOUNT,
          AUD.GLCODE               LEDGER_CODE,
          GL.GLNAME                LEDGER_NAME,
          AUD.FORMCODE             FORM_CODE,
          F.FORMNAME               FORM_NAME,
          AUD.FORMNO               FORM_NO,
          AUD.FORMDT               FORM_DATE,
          AUD.SLCODE               SUBLEDGER_CODE,
          SL.SLNAME                SUBLEDGER_NAME,
          AUD.INCLUDE_IN_TDS       INCLUDE_IN_TDS,
          AUD.SEQ                  SEQUENCE,
          AUD.APPAMT               APPLICABLE_AMOUNT,
          AUD.FORMULAE             FORMULAE,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''I'' THEN ''Item''
             WHEN AUD.OPERATION_LEVEL = ''H'' THEN ''Header''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          AUD.SOURCE               FACTOR_SOURCE,
          CASE
             WHEN AUD.BASIS = ''A'' THEN ''AMOUNT''
             WHEN AUD.BASIS = ''P'' THEN ''PERCENTAGE''
          END
             FACTOR,
          AUD.WITHOUT_TERM_FORMULA WITHOUT_TERM_FORMULA,
          AUD.GST_COMPONENT        GST_COMPONENT,
          AUD.ISREVERSE            GST_REVERSE_CHARGE
     FROM aud2_pursrvchg aud INNER JOIN (SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''Purchase Service Invoice'') trans_det 
							 ON (AUD.SRVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finchg chg ON AUD.CHGCODE = CHG.CHGCODE
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finform f ON (AUD.FORMCODE = F.FORMCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'SRVCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'SRVCODE#CHGCODE#RATE#GLCODE#COALESCE(SLCODE,0)#FORMULAE#ISTAX#SOURCE#BASIS#INCLUDE_IN_TDS');
INSERT INTO main.aud2_table VALUES ('GSTRate', 'INVGSTRATE', 'Gst Rates', 1, 'GSTRate', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgstrate 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          CODE,
          CODE           MODULE_KEY,
          TAX_NAME       GST_RATE_NAME,
          TAX_NAME       MODULE_KEY_DISPLAY,
          REMARKS        REMARKS,
          IGST_RATE      IGST_RATE,
          CGST_RATE      CGST_RATE,
          SGST_RATE      SGST_RATE,
          CESS_RATE      CESS_RATE,
          CASE WHEN EXTINCT = ''Y'' THEN ''YES'' WHEN EXTINCT = ''N'' THEN ''NO'' END
             EXTINCT,
          CREATEDBY      CREATEDBY_USERCODE,
          H1.FNAME       CREATEDBY_USER,
          LASTMODIFIEDBY LASTMODIFIEDBY_USERCODE,
          H2.FNAME       LASTMODIFIEDBY_USER
FROM aud2_invgstrate aud 
		INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GSTRate'') trans_det
			ON ((AUD.CODE)::TEXT = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN hrdemp h1 ON AUD.CREATEDBY = H1.ECODE 
LEFT OUTER JOIN hrdemp h2 ON (AUD.LASTMODIFIEDBY = H2.ECODE)', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('FinVoucher', 'FINVCHDET', 'Detail', 1, 'VoucherDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finvchdet 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.BOOKCODE         CHEQUE_BOOK_CODE,
          C.BOOKNO             CHEQUE_BOOK_NUMBER,
          AUD.BRSDT            BRS_DATE,
          AUD.CAMOUNT          CREDIT_AMOUNT,
          AUD.CHQDT            INSTRUMENT_DATE,
          AUD.CHQLABEL         CHEQUE_LABEL,
          AUD.CHQNO            INSTRUMENT_NUMBER,
          AUD.CODE,
          AUD.DAMOUNT          DEBIT_AMOUNT,
          AUD.DRAWNON          DRAWN_ON,
          AUD.GLCODE           GENERAL_LEDGER_CODE,
          FG1.GLNAME           GENERAL_LEDGER_NAME,
          AUD.GRS_AMT          GROSS_PAYABLE,
          AUD.ISREVERSAL       ISREVERSAL,
          AUD.NARTEXT          NARRATION,
          AUD.PAYMENT_MODE     PAYMENT_MODE,
          AUD.PRINTCHQ         PRINT_CHEQUE,
          AUD.REF_ADMSITE_CODE REFERENCE_SITE_CODE,
          A.NAME               REFERENCE_SITE_NAME,
          AUD.REFNO            REFERENCE_NUMBER,
          AUD.SLCODE           SUBLEDGER_CODE,
          FS1.SLNAME           SUBLEDGER_NAME,
          AUD.TDS_APP          TDS_APPLICABLE,
          AUD.TDS_APPAMT       TDS_APPLICABLE_AMT,
          AUD.TDS_GROSSAMT     TDS_GROSS_AMT,
          AUD.TDS_RATE         TDS_RATE,
          AUD.TDS_ROUNDOFF_AMT TDS_ROUNDOFF_AMT,
          AUD.TDSAMT           TDS_AMOUNT,
          AUD.TDSGLCODE        TDS_GL_CODE,
          FG2.GLNAME           TDS_GL_NAME,
          AUD.TDSSECTION       TDS_SECTION,
          AUD.TDSSLCODE        TDS_SL_CODE,
          FS2.SLNAME           TDS_SL_NAME,
          AUD.TDSSRCCODE       TDS_SOURCE_CODE,
          T.TDSSRCNAME         TDS_SOURCE_NAME,
          AUD.TDSTYPECODE      TDS_CODE,
          TT.TDSNAME           TDS_NAME,
          AUD.VCHCODE          VOUCHER_CODE,
          AUD.VCHCODE          MODULE_KEY,
          --V.SCHEME_DOCNO       VOUCHER_NUMBER,
          --V.SCHEME_DOCNO       MODULE_KEY_DISPLAY,
          AUD.VCHDT            VOUCHER_DATE,
          CASE AUD.VCHTYPE
             WHEN ''C'' THEN ''Contra Voucher''
             WHEN ''G'' THEN ''General Voucher''
             WHEN ''P'' THEN ''Payment Voucher''
             WHEN ''R'' THEN ''Receipt Voucher''
             WHEN ''B'' THEN ''AR/AP Voucher''
             ELSE NULL
          END
             VOUCHER_TYPE
FROM aud2_finvchdet aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''FinVoucher'') trans_det 
			ON (AUD.VCHCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID) 
INNER JOIN fingl fg1 ON AUD.GLCODE = FG1.GLCODE
LEFT OUTER JOIN finchqmain c ON (AUD.BOOKCODE = C.BOOKCODE)
LEFT OUTER JOIN admsite a ON (AUD.REF_ADMSITE_CODE = A.CODE)
LEFT OUTER JOIN finsl fs1 ON (AUD.SLCODE = FS1.SLCODE)
LEFT OUTER JOIN fingl fg2 ON (AUD.TDSGLCODE = FG2.GLCODE)
LEFT OUTER JOIN finsl fs2 ON (AUD.TDSSLCODE = FS2.SLCODE)
LEFT OUTER JOIN fintdssrc t ON (AUD.TDSSRCCODE = T.TDSSRCCODE)
LEFT OUTER JOIN fintdstype tt ON (AUD.TDSTYPECODE = TT.TDSTYPECODE)
--AND AUD.VCHCODE = V.VCHCODE(+)', 'VCHCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('POS GRT', 'PSITE_GRTITEM', 'Detail', 1, 'POSGRTDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_psite_grtitem 
AS 
SELECT TRANS_DET.VERSION_SEQ                   AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                    AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE              AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE              AS MODULE_KEY,
          AUD2_PSITE_GRTITEM.ACTION,
          AUD2_PSITE_GRTITEM.CODE                 AS GRT_DET_CODE,
          AUD2_PSITE_GRTITEM.PSITE_GRT_CODE       AS RETAIL_GRT_CODE,
          AUD2_PSITE_GRTITEM.ICODE                AS ICODE,
          AUD2_PSITE_GRTITEM.RTQTY                AS RETURN_QTY,
          AUD2_PSITE_GRTITEM.RTRATE               AS RETURN_RATE,
          AUD2_PSITE_GRTITEM.BASICAMT             AS ITEM_AMT,
          AUD2_PSITE_GRTITEM.LCHGAMT              AS LINE_CHARGE_AMT,
          AUD2_PSITE_GRTITEM.GRSAMT               AS BASIC_VALUE,
          AUD2_PSITE_GRTITEM.LREMARKS             AS ITEM_REMARKS,
          AUD2_PSITE_GRTITEM.ADMSITE_CODE         AS SITE_CODE,
          AUD2_PSITE_GRTITEM.LTAXAMT              AS ITEM_TAX_AMT,
          AUD2_PSITE_GRTITEM.PACKETDOCID          AS PCKET_ID,
          AUD2_PSITE_GRTITEM.PACKETITEMID         AS PCKET_ITEM_ID,
          AUD2_PSITE_GRTITEM.PACKETNO             AS PCKET_NUMBER,
          AUD2_PSITE_GRTITEM.PACKETDATE           AS PCKET_DATE,
          AUD2_PSITE_GRTITEM.COSTRATE             AS COST_RATE,
          AUD2_PSITE_GRTITEM.SITE_COSTRATE        AS SITE_COST_RATE,
          AUD2_PSITE_GRTITEM.DUP_PACKETDOCID      AS DUPLICATE_PACKET_ID,
          AUD2_PSITE_GRTITEM.DUP_PACKETITEMID     AS DUPLICATE_PACKET_ITEM_ID,
          CASE AUD2_PSITE_GRTITEM.ITEMRATESOURCE
             WHEN ''U'' THEN ''UNKNOWN''
             WHEN ''A'' THEN ''ADVICE''
             WHEN ''O'' THEN ''OPENING''
             WHEN ''D'' THEN ''DEFAULT''
             WHEN ''P'' THEN ''LOCAL PURCHASE''
             WHEN ''C'' THEN ''LOCAL CONVERSION''
             WHEN ''L'' THEN ''PRICELIST''
             WHEN ''M'' THEN ''MISC RECEIVE''
             ELSE '' ''
          END
             AS ITEM_RATE_SOURCE,
          AUD2_PSITE_GRTITEM.BASICPRICE           AS BASIC_PRICE,
          AUD2_PSITE_GRTITEM.DISCOUNTFACTOR       AS ITEM_DISCOUNT_FACTOR,
          AUD2_PSITE_GRTITEM.DISCOUNTAMT          AS ITEM_DISCOUNT_AMT,
          AUD2_PSITE_GRTITEM.ROUNDOFF             AS ROUND_OFF,
          AUD2_PSITE_GRTITEM.SALORDDET_CODE       AS SALES_ORD_DET_CODE,
          SALORDDET.ICODE                         AS ORDER_ITEM,
          AUD2_PSITE_GRTITEM.HSN_SAC_CODE         AS HSN_SAC_CODE,
          AUD2_PSITE_GRTITEM.GL_CC_APPL           AS GL_SITE_APPLICABLE,
          AUD2_PSITE_GRTITEM.GLCODE               AS LEDGER_CODE,
          FINGL.GLNAME                            AS LEDGER_NAME,
          AUD2_PSITE_GRTITEM.SLCODE               AS SUB_LEDGER_CODE,
          FINSL.SLNAME                            AS SUB_LEDGER_NAME,
          AUD2_PSITE_GRTITEM.INTGREFDETID         AS INTG_REF_DET_ID,
          AUD2_PSITE_GRTITEM.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO         AS BATCH_SERIAL_NO
FROM AUD2_PSITE_GRTITEM
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''POS GRT'') TRANS_DET
             ON (AUD2_PSITE_GRTITEM.PSITE_GRT_CODE = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PSITE_GRTITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN SALORDDET SALORDDET ON AUD2_PSITE_GRTITEM.SALORDDET_CODE = SALORDDET.CODE
LEFT OUTER JOIN FINGL FINGL ON AUD2_PSITE_GRTITEM.GLCODE = FINGL.GLCODE
LEFT OUTER JOIN FINSL FINSL ON AUD2_PSITE_GRTITEM.SLCODE = FINSL.SLCODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_PSITE_GRTITEM.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'PSITE_GRT_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('GRT', 'INVGRTDET', 'Details', 1, 'PurchaseGRTDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrtdet 
AS 
SELECT TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          AUD2_INVGRTDET.ACTION,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID            AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_INVGRTDET.GRTCODE              AS GOOD_RETURN_CODE,
          AUD2_INVGRTDET.GRTDT                AS GRT_DATE,
          AUD2_INVGRTDET.GRCCODE              AS GOOD_RECEIVE_CODE,
          AUD2_INVGRTDET.LOCCODE              AS STOCKPOINT_CODE,
          INVLOC.LOCNAME                      AS STOCKPOINT_NAME,
          AUD2_INVGRTDET.ICODE                AS ICODE,
          INVITEM.BARCODE                     AS ITEM_BARCODE,
          AUD2_INVGRTDET.QTY                  AS QUANTITY,
          AUD2_INVGRTDET.RATE                 AS RATE,
          AUD2_INVGRTDET.REM                  AS REMARKS,
          AUD2_INVGRTDET.RTINVQTY             AS RETURN_INVOICE_QUANTITY,
          AUD2_INVGRTDET.GRSAMT               AS GROSS_AMOUNT,
          AUD2_INVGRTDET.DISCOUNT             AS DISCOUNT_AMOUNT,
          AUD2_INVGRTDET.TAXAMT               AS TAXABLE_AMOUNT,
          AUD2_INVGRTDET.NETAMT               AS NET_AMOUNT,
          AUD2_INVGRTDET.CODE                 AS CODE,
          AUD2_INVGRTDET.CHGAMT               AS CHARGE_AMOUNT,
          AUD2_INVGRTDET.EFFAMT               AS EFFECTIVE_AMOUNT,
          AUD2_INVGRTDET.INVGRCDET_CODE       AS GOOD_RECEIVE_DET_CODE,
          AUD2_INVGRTDET.EXCISEMAIN_CODE      AS EXCISEMAIN_CODE,
          EXCISEMAIN.TARIFFNO                 AS EXCISE_TARIFF_NUMBER,
          CASE AUD2_INVGRTDET.EX_BASIS
             WHEN ''M'' THEN ''MRP''
             WHEN ''R'' THEN ''DOCUMENT RATE''
             WHEN ''L'' THEN ''LISTED MRP''
             ELSE '' ''
          END
             AS EXCISE_BASIS,
          AUD2_INVGRTDET.EX_EFFRATE           AS EXCISE_TARRIFRATE,
          AUD2_INVGRTDET.EX_ABTFACTOR         AS EXCISE_DUTYFACTOR,
          AUD2_INVGRTDET.EX_DUTYFACTOR        AS EXCISE_DUTY_FACTOR,
          AUD2_INVGRTDET.EX_CESSFACTOR        AS EXCISE_EDU_CESS_RATE,
          AUD2_INVGRTDET.EX_ROUNDOFF          AS EXCISE_ROUNDOFF_FACTOR,
          AUD2_INVGRTDET.EX_APPAMT            AS EXCISE_APPLICABLE_AMOUNT,
          AUD2_INVGRTDET.EX_DUTYAMT           AS EXCISE_DUTY_AMOUNT,
          AUD2_INVGRTDET.EX_CESSAMT           AS EXCISE_EDU_CESS_AMOUNT,
          AUD2_INVGRTDET.RSP                  AS ITEM_RSP,
          AUD2_INVGRTDET.EX_APPLICABLE_FROM   AS EXCISE_APPLICABLE_FROM,
          AUD2_INVGRTDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO     AS BATCH_SERIAL_NUMBER
FROM AUD2_INVGRTDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GRT'') TRANS_DET
             ON (AUD2_INVGRTDET.GRTCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGRTDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVLOC INVLOC ON AUD2_INVGRTDET.LOCCODE = INVLOC.LOCCODE
INNER JOIN INVITEM INVITEM ON AUD2_INVGRTDET.ICODE = INVITEM.ICODE
LEFT OUTER JOIN EXCISEMAIN EXCISEMAIN ON AUD2_INVGRTDET.EXCISEMAIN_CODE = EXCISEMAIN.CODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_INVGRTDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'GRTCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('GRC', 'INVGRCDET', 'Details', 1, 'PurchaseGRCDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrcdet 
AS 
SELECT TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          AUD2_INVGRCDET.ACTION,
          TRANS_DET.TRANSACTION_ID            AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_INVGRCDET.GRCCODE              AS GOOD_RECEIVE_CODE,
          AUD2_INVGRCDET.ORDCODE              AS PURCHASE_ORDER_CODE,
          PURORDMAIN.SCHEME_DOCNO             AS PURCHASE_ORDER_NUMBER,
          AUD2_INVGRCDET.LOCCODE              AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                      AS STOCK_POINT_NAME,
          AUD2_INVGRCDET.GRCDT                AS GRCDATE,
          AUD2_INVGRCDET.ICODE                AS ICODE,
          INVITEM.BARCODE                     AS ITEM_BARCODE,
          AUD2_INVGRCDET.ACQTY                AS ACTUAL_RECEIVE_QUANTITY,
          AUD2_INVGRCDET.ACRATE               AS ACTUAL_RATE,
          AUD2_INVGRCDET.RTQTY                AS RETURN_QUANTITY,
          AUD2_INVGRCDET.RCINVQTY             AS RECEIVE_INVOICE_QUANTITY,
          AUD2_INVGRCDET.RTINVQTY             AS RETURN_INVOICE_QUANTITY,
          AUD2_INVGRCDET.REM                  AS REMARKS,
          AUD2_INVGRCDET.GRSAMT               AS GROSS_AMT,
          AUD2_INVGRCDET.DISCOUNT             AS DISCOUNT_AMOUNT,
          AUD2_INVGRCDET.TAXAMT               AS TAXABLE_AMOUNT,
          AUD2_INVGRCDET.NETAMT               AS NET_AMOUNT,
          AUD2_INVGRCDET.CODE                 AS CODE,
          AUD2_INVGRCDET.CHGAMT               AS CHARGE_AMOUNT,
          AUD2_INVGRCDET.EFFAMT               AS EFFECTIVE_AMOUNT,
          AUD2_INVGRCDET.FORGN_CURR_RATE      AS FOREIGN_CURRENCY_RATE,
          AUD2_INVGRCDET.EXCISEMAIN_CODE      AS EXCISE_TARIFF_CODE,
          EXCISEMAIN.TARIFFNO                 AS EXCISE_TARIFF_NUMBER,
          CASE AUD2_INVGRCDET.EX_BASIS
             WHEN ''M'' THEN ''MRP''
             WHEN ''R'' THEN ''Document Rate''
             WHEN ''L'' THEN ''Listed MRP''
             ELSE '' ''
          END
             AS EXCISE_BASIS,
          AUD2_INVGRCDET.EX_EFFRATE           AS EXCISE_Tarrif_Rate,
          AUD2_INVGRCDET.EX_ABTFACTOR         AS EXCISE_DUTYFACTOR,
          AUD2_INVGRCDET.EX_DUTYFACTOR        AS EXCISE_DUTY_FACTOR,
          AUD2_INVGRCDET.EX_CESSFACTOR        AS EXCISE_EDU_CESS_RATE,
          AUD2_INVGRCDET.EX_ROUNDOFF          AS EXCISE_ROUNDOFF_FACTOR,
          AUD2_INVGRCDET.EX_APPAMT            AS EXCISE_APPLICABLE_AMOUNT,
          AUD2_INVGRCDET.EX_DUTYAMT           AS EXCISE_DUTY_AMOUNT,
          AUD2_INVGRCDET.EX_CESSAMT           AS EXCISE_EDU_CESS_AMOUNT,
          AUD2_INVGRCDET.RSP                  AS ITEM_RSP,
          AUD2_INVGRCDET.INVSETMAIN_CODE      AS SET_NUMBER,
          AUD2_INVGRCDET.EX_APPLICABLE_FROM   AS EXCISE_APPLICABLE_FROM,
          AUD2_INVGRCDET.ORATE                AS ORIGINAL_RATE,
          AUD2_INVGRCDET.MRP                  AS MAXIMUM_RETAIL_PRICE,
          AUD2_INVGRCDET.WSP                  AS WHOLE_SALE_PRICE,
          CASE AUD2_INVGRCDET.GST_ITC_APPL
             WHEN ''IP'' THEN ''INPUT APPLICABLE CP''
             ELSE '' ''
          END
             AS GST_ITC_APPLIACABLE,
          AUD2_INVGRCDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO     AS BATCH_SERIAL_NUMBER
FROM AUD2_INVGRCDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GRC'') TRANS_DET
             ON (AUD2_INVGRCDET.GRCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGRCDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN PURORDMAIN PURORDMAIN ON AUD2_INVGRCDET.ORDCODE = PURORDMAIN.ORDCODE
LEFT OUTER JOIN INVLOC INVLOC ON AUD2_INVGRCDET.LOCCODE = INVLOC.LOCCODE
INNER JOIN INVITEM INVITEM ON AUD2_INVGRCDET.ICODE = INVITEM.ICODE
LEFT OUTER JOIN EXCISEMAIN EXCISEMAIN ON AUD2_INVGRCDET.EXCISEMAIN_CODE = EXCISEMAIN.CODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_INVGRCDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'GRCCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Retail Sales', 'SALCSDET', 'Detail', 1, 'RetailSaleDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salcsdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE                                             CODE,
          AUD.CSCODE                                           RETAIL_SALE_CODE,
          AUD.CSCODE                                           MODULE_KEY,
          AUD.ICODE                                            ICODE,
          AUD.QTY                                              QUANTITY,
          AUD.MRP                                              MRP,
          AUD.RATE                                             RATE,
          AUD.GRSAMT                                           GROSS_AMT,
          AUD.DISCOUNT                                         ITEM_DISCOUNT,
          AUD.NETAMT                                           ITEM_NET_AMT,
          AUD.TAXAMT                                           ITEM_TAX_AMT,
          AUD.SITE_COSTRATE                                    SITE_COSTRATE,
          AUD.SITE_COSTAMT                                     SITE_COSTAMT,
          AUD.COSTRATE                                         COST_RATE,
          AUD.REMARKS                                          REMARKS,
          AUD.CODE                                             RETAIL_SALE_DET_CODE,
          AUD.TAXDETCODE                                       TAX_DET_CODE,
          AUD.TAXABLEAMT                                       TAXABLE_AMT,
          AUD.TAXDESCRIPTION                                   TAX_DESCRIPTION,
          AUD.PSITE_STOCKPOINT_CODE                            STOCKPOINT_CODE,
          P.NAME                                               STOCKPOINT_NAME,
          AUD.PROMOAMT                                         PROMO_AMT,
          AUD.IDISCOUNTAMT                                     ITEM_DISCOUNT_AMT,
          AUD.MDISCOUNTAMT                                     MANUAL_DISCOUNT_AMT,
          AUD.LPDISCOUNTAMT                                    LP_DISCOUNT_AMT,
          AUD.EXTAXAMT                                         EXTRA_TAX_AMT,
          AUD.TAXPERCENT                                       TAX_PERCENT,
          AUD.SHIPCHG                                          ITEM_SHIPPING_CHARGE,
          AUD.GWCHG                                            ITEM_GIFT_WRAP_CHARGE,
          AUD.CODCHG                                           ITEM_COD_CHARGE,
          CASE
             WHEN AUD.TAXREGIME = ''V'' THEN ''VAT''
             WHEN AUD.TAXREGIME = ''G'' THEN ''GST''
          END
             TAX_REGIME,
          AUD.HSN_SAC_CODE                                     HSN_SAC_CODE,
          AUD.IGSTRATE                                         IGSTRATE,
          AUD.IGSTAMT                                          IGSTAMT,
          AUD.CGSTRATE                                         CGSTRATE,
          AUD.CGSTAMT                                          CGSTAMT,
          AUD.SGSTRATE                                         SGSTRATE,
          AUD.SGSTAMT                                          SGSTAMT,
          AUD.CESSRATE                                         CESSRATE,
          AUD.CESSAMT                                          CESSAMT,
          GL.GLNAME                                            LEDGER_NAME,
          AUD.GLCODE                                           LEDGER_CODE,
          SL.SLNAME                                            SUB_LEDGER_NAME,
          AUD.SLCODE                                           SUB_LEDGER_CODE,
          AUD.PROMOCODE                                        PROMO_CODE,
          AUD.PROMONO                                          PROMO_NUMBER,
          AUD.PROMONAME                                        PROMO_NAME,
          AUD.PROMOSTARTDATE                                   PROMO_START_DATE,
          AUD.PROMOENDDATE                                     PROMO_END_DATE,
          AUD.MEMODISCOUNTAMT                                  BILL_DISCOUNT_AMT,
          AUD.MEMODISCOUNTTYPE                                 BILL_DISCOUNT_TYPE,
          AUD.MEMOPROMOCODE                                    BILL_PROMO_CODE,
          AUD.MEMOPROMONO                                      BILL_PROMO_NUMBER,
          AUD.MEMOPROMONAME                                    BILL_PROMO_NAME,
          AUD.MEMOPROMOSTARTDATE                               BILL_PROMO_START_DATE,
          AUD.MEMOPROMOENDDATE                                 BILL_PROMO_END_DATE,
          AUD.MEMOPROMOSLABFROM                                BILL_PROMO_SLAB_FROM,
          AUD.MEMOPROMOSLABTO                                  BILL_PROMO_SLAB_TO,
          AUD.MEMODISCOUNTDESC                                 BILL_DISCOUNT_DESCRIPTION,
          AUD.MEMOCOUPONCODE                                   BILL_COUPON_CODE,
          AUD.MEMOCOUPONOFFERCODE                              BILL_COUPON_OFFER_CODE,
          AUD.ISDYNAMICTAX                                     DYNAMIC_TAX_APPL,
          AUD.RETAILORDERDET_CODE                              RETAIL_ORD_DET_CODE,
          AUD.OTHERCHARGES                                     OTHER_CHARGES,
          AUD.INVBIN_CODE                                      BIN_CODE,
          AUD.INVPICKLISTMAIN_CODE                             PICKLIST_CODE,
          AUD.INTGBATCHID                                      INTG_BATCH_ID,
          AUD.INTGBATCHDETID                                   INTG_BATCH_DET_ID,
          CASE WHEN AUD.ISDAMAGED = 0 THEN ''NO'' ELSE ''YES'' END DAMAGE_ITEM,
          CASE
             WHEN(AUD.ISSECONDARYSUPPLY = 0 OR AUD.ISSECONDARYSUPPLY IS NULL)
             THEN
                ''NO''
             ELSE
                ''YES''
          END
             SECONDARY_SUPPLY_ITEM,
          AUD.SECONDARYSUPPLYPARENTICODE
             SECONDARY_PARENT_ICODE,
          CASE
             WHEN AUD.SECONDARYSUPPLYTAXPOLICY = ''I'' THEN ''PARENT ITEM''
             WHEN AUD.SECONDARYSUPPLYTAXPOLICY = ''P'' THEN ''MAX TAX''
             WHEN AUD.SECONDARYSUPPLYTAXPOLICY = ''M'' THEN ''MASTER''
          END
             SECONDARY_SUPPLY_TAX_TYPE,
          B.BATCH_SERIAL_NO
             BATCH_SERIAL_NO,
          AUD.INVBATCH_SERIAL_CODE
             BATCH_SERIAL_CODE
     FROM aud2_salcsdet aud INNER JOIN (SELECT A.*, 
										RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''Retail Sales'') trans_det 
							ON (AUD.CSCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN invitem i1 ON AUD.ICODE = I1.ICODE
LEFT OUTER JOIN psite_stockpoint p ON (AUD.PSITE_STOCKPOINT_CODE = P.CODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN invitem i2 ON (AUD.SECONDARYSUPPLYPARENTICODE = I2.ICODE)
LEFT OUTER JOIN invbatch_serial b ON (AUD.INVBATCH_SERIAL_CODE = B.CODE)', 'CSCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('LedgerOpeningBalance', 'FINGLOP', 'Ledger Opening', 1, 'FinanceLedgerOpeningDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finglop 
AS 
SELECT TRANS_DET.VERSION_SEQ      AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER       AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID   AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE AS MODULE_KEY,
          LEDGER.GLNAME              AS MODULE_KEY_DISPLAY,
          AUD2_FINGLOP.ACTION,
          AUD2_FINGLOP.GLCODE        AS LEDGER_CODE,
          LEDGER.GLNAME              AS LEDGER_NAME,
          AUD2_FINGLOP.OPDAMT        AS OP_DEBIT_AMOUNT,
          AUD2_FINGLOP.OPCAMT        AS OP_CREDIT_AMOUNT,
          AUD2_FINGLOP.YCODE         AS YCODE,
          YEAR.YNAME                 AS FINANCIAL_YEAR,
          AUD2_FINGLOP.CODE          AS CODE,
          AUD2_FINGLOP.GL_CC_APPL    AS GL_SITE_APPL,
          AUD2_FINGLOP.ADMOU_CODE    AS OU_CODE,
          OU.NAME                    AS OU_NAME
FROM AUD2_FINGLOP
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''LedgerOpeningBalance'') TRANS_DET
             ON (AUD2_FINGLOP.GLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_FINGLOP.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN FINGL LEDGER ON AUD2_FINGLOP.GLCODE = LEDGER.GLCODE
INNER JOIN ADMYEAR YEAR ON AUD2_FINGLOP.YCODE = YEAR.YCODE
INNER JOIN ADMOU OU ON AUD2_FINGLOP.ADMOU_CODE = OU.CODE', 'GLCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'GLCODE');
INSERT INTO main.aud2_table VALUES ('JobOrder', 'PRDJOBBOM', 'Bom Details', 1, 'JobOrderBOMDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdjobbom 
AS 
SELECT TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PRDJOBBOM.ACTION,
          AUD2_PRDJOBBOM.JOBCODE            AS JOB_CODE,
          AUD2_PRDJOBBOM.PRDJOBDET_CODE     AS JOB_ORDER_DET_CODE,
          AUD2_PRDJOBBOM.ASSEMBLY_ICODE     AS ASSEMBLY_ICODE,
          ASSEMBLY_ITEM.BARCODE             AS ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDJOBBOM.OPERATION_SEQ      AS OPERATION_SEQUENCE,
          AUD2_PRDJOBBOM.LOTCODE            AS WORKING_PLAN_CODE,
          PRDLOTMAIN.LOTNO                  AS WORKING_PLAN,
          AUD2_PRDJOBBOM.COMPONENT_ICODE    AS COMPONENT_ICODE,
          COMPONENT.BARCODE                 AS COMPONENT_BARCODE,
          CASE AUD2_PRDJOBBOM.COMPONENT_TYPE
             WHEN ''S'' THEN ''STANDARD''
             WHEN ''N'' THEN ''NON-STANDARD''
             WHEN ''A'' THEN ''ALTERED''
             ELSE '' ''
          END
             AS COMPONENT_TYPE,
          CASE AUD2_PRDJOBBOM.SUPPLY_TYPE
             WHEN ''P'' THEN ''PUSH''
             WHEN ''O'' THEN ''PULL-ON-ORDER''
             WHEN ''C'' THEN ''PULL-ON-COMPLETION''
             ELSE '' ''
          END
             AS SUPPLY_TYPE,
          AUD2_PRDJOBBOM.ISSUE_LOCCODE      AS ISSUE_STOCK_POINT_CODE,
          INVLOC.LOCNAME                    AS ISSUE_STOCK_POINT_NAME,
          AUD2_PRDJOBBOM.ALT_GRPCODE        AS ALTERNATIVE_GRP_CODE,
          INVGRP.GRPNAME                    AS ALTERNATIVE_GROUP_NAME,
          CASE AUD2_PRDJOBBOM.ISMANDATORY
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS ISMANDATORY,
          AUD2_PRDJOBBOM.BOM_QTY            AS BOM_QUANTITY,
          AUD2_PRDJOBBOM.QTY                AS REQUIRE_QUANTITY,
          AUD2_PRDJOBBOM.ISSUED_QTY         AS ISSUE_QUNTITY,
          AUD2_PRDJOBBOM.RETURN_QTY         AS RETURN_QUANTITY,
          AUD2_PRDJOBBOM.WASTAGE_QTY        AS WASTAGE_QUANTITY,
          AUD2_PRDJOBBOM.CANCEL_QTY         AS CANCEL_QUANTITY,
          AUD2_PRDJOBBOM.TOLERANCE          AS TOLERANCE,
          AUD2_PRDJOBBOM.REMARKS            AS REMARKS,
          AUD2_PRDJOBBOM.CODE               AS CODE,
          CASE AUD2_PRDJOBBOM.INTERNAL_ISS_FLAG
             WHEN ''Y'' THEN ''YES''
             WHEN ''NO'' THEN ''NO''
             ELSE '' ''
          END
             AS INTERNAL_ISS_FLAG,
          AUD2_PRDJOBBOM.ASSEMBLY_QTY       AS ASSEMBLY_ITEM_QUANTITY,
          AUD2_PRDJOBBOM.SHRINKAGE          AS SHRINKAGE,
          CASE AUD2_PRDJOBBOM.ISSUE_ASSEMBLY_ITEM
             WHEN ''O'' THEN ''ON ORDER''
             WHEN ''P'' THEN ''PUSH/MANUAL''
             WHEN ''N'' THEN ''NONE''
             ELSE '' ''
          END
             AS ISSUE_ASSEMBLY_ITEM,
          AUD2_PRDJOBBOM.CONSUMED_QTY       AS CONSUMED_QUANTITY,
          AUD2_PRDJOBBOM.SHORT_EXCESS_QTY   AS SHORT_EXCESS_QUANTITY,
          AUD2_PRDJOBBOM.ASS_SAITEM_CODE    AS ASSEMBLY_SAITEM_CODE,
          ASSEMBLY_SAITEM.SAINAME           AS ASSEMBLY_SAITEM_NAME,
          AUD2_PRDJOBBOM.COM_SAITEM_CODE    AS COMPONENT_SAITEM_CODE,
          COMPONENT_SAITEM.SAINAME          AS COMPONENT_SAITEM_NAME,
          AUD2_PRDJOBBOM.JOB_ASSEMBLY_ICODE AS JOB_ASSEMBLY_ICODE,
          JOB_ASSEMBLY_ITEM.BARCODE         AS JOB_ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDJOBBOM.ALTERNATE_CNL_QTY  AS ALTERNATE_CANCEL_QUANITYT,
          AUD2_PRDJOBBOM.JRCDET_CODE        AS JOB_RECEIPT_DET_CODE
FROM AUD2_PRDJOBBOM
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''JobOrder'') TRANS_DET
             ON (AUD2_PRDJOBBOM.JOBCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDJOBBOM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVITEM ASSEMBLY_ITEM ON AUD2_PRDJOBBOM.ASSEMBLY_ICODE = ASSEMBLY_ITEM.ICODE
LEFT OUTER JOIN PRDLOTMAIN PRDLOTMAIN ON AUD2_PRDJOBBOM.LOTCODE = PRDLOTMAIN.CODE
INNER JOIN INVITEM COMPONENT ON AUD2_PRDJOBBOM.COMPONENT_ICODE = COMPONENT.ICODE
LEFT OUTER JOIN INVLOC INVLOC ON AUD2_PRDJOBBOM.ISSUE_LOCCODE = INVLOC.LOCCODE
LEFT OUTER JOIN INVGRP INVGRP ON AUD2_PRDJOBBOM.ALT_GRPCODE = INVGRP.GRPCODE
LEFT OUTER JOIN PRD_SAITEM ASSEMBLY_SAITEM ON AUD2_PRDJOBBOM.ASS_SAITEM_CODE = ASSEMBLY_SAITEM.CODE
LEFT OUTER JOIN PRD_SAITEM COMPONENT_SAITEM ON AUD2_PRDJOBBOM.COM_SAITEM_CODE = COMPONENT_SAITEM.CODE
INNER JOIN INVITEM JOB_ASSEMBLY_ITEM ON AUD2_PRDJOBBOM.JOB_ASSEMBLY_ICODE = JOB_ASSEMBLY_ITEM.ICODE', 'JOBCODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('SaleChargeMaster', 'SALCHG', 'Master', 1, 'SalesCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salchg
 AS
 SELECT trans_det.version_seq,
    aud.action,
    trans_det.login_user,
    trans_det.transaction_date,
    aud.transaction_id,
    aud.salchgcode AS charge_code,
    aud.salchgcode AS module_key,
    aud.salchgname AS charge_name,
    aud.salchgname AS module_key_display,
    aud.abbre AS alias,
    aud.chgrate AS factor,
    aud.glcode AS ledger_code,
    g.glname AS ledger_name,
    aud.sign,
        CASE
            WHEN aud.roundoff = ''Y''::bpchar THEN ''Yes''::text
            WHEN aud.roundoff = ''N''::bpchar THEN ''No''::text
            ELSE NULL::text
        END AS roundoff,
        CASE
            WHEN aud.agcomm = ''Y''::bpchar THEN ''Yes''::text
            WHEN aud.agcomm = ''N''::bpchar THEN ''No''::text
            ELSE NULL::text
        END AS consider_in_agent_report,
        CASE
            WHEN aud.ext = ''Y''::bpchar THEN ''Yes''::text
            WHEN aud.ext = ''N''::bpchar THEN ''No''::text
            ELSE NULL::text
        END AS extinct,
        CASE
            WHEN aud.basis = ''P''::bpchar THEN ''Percentage''::text
            WHEN aud.basis = ''A''::bpchar THEN ''Amount''::text
            ELSE NULL::text
        END AS percent_or_amount,
        CASE
            WHEN aud.operation_level = ''H''::bpchar THEN ''Apply this charge for whole document''::text
            WHEN aud.operation_level = ''L''::bpchar THEN ''Apply this charge for each line item''::text
            ELSE NULL::text
        END AS applicability,
    aud.fintradegrp_code AS tradegroup_code,
    t.name AS tradegroup_name,
        CASE
            WHEN aud.istax = ''Y''::bpchar THEN ''Yes''::text
            WHEN aud.istax = ''N''::bpchar THEN ''No''::text
            ELSE NULL::text
        END AS tax_charge,
        CASE
            WHEN aud.source = ''F''::bpchar THEN ''Fixed''::text
            WHEN aud.source = ''E''::bpchar THEN ''Excise Charge''::text
            WHEN aud.source = ''V''::bpchar THEN ''VAT''::text
            WHEN aud.source = ''G''::bpchar THEN ''GST''::text
            ELSE NULL::text
        END AS factor_source,
    aud.slcode AS subledger_code,
    s.slname AS subledger_name,
        CASE
            WHEN aud.is_changeable_in_invoice = ''Y''::bpchar THEN ''Yes''::text
            WHEN aud.is_changeable_in_invoice = ''N''::bpchar THEN ''No''::text
            ELSE NULL::text
        END AS allow_user_modification,
        CASE
            WHEN aud.issystem = ''Y''::bpchar THEN ''Yes''::text
            WHEN aud.issystem = ''N''::bpchar THEN ''No''::text
            ELSE NULL::text
        END AS system_charge,
    aud.gst_component
   FROM aud2_salchg aud
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''SaleChargeMaster''::text) trans_det ON aud.salchgcode::character varying::text = trans_det.header_key_value::text AND aud.transaction_id::text = trans_det.transaction_id::text
     LEFT JOIN fingl g ON aud.glcode = g.glcode
     LEFT JOIN fintradegrp t ON aud.fintradegrp_code = t.code
     LEFT JOIN finsl s ON aud.slcode = s.slcode', 'SALCHGCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'SALCHGCODE');
INSERT INTO main.aud2_table VALUES ('GRT', 'INVGRTMAIN', 'Header', 1, 'PurchaseGRTHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrtmain 
AS 
SELECT TRANS_DET.VERSION_SEQ                 AS VERSION_SEQ,
          AUD2_INVGRTMAIN.ACTION,
          TRANS_DET.LOGIN_USER                  AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID              AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE            AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE            AS MODULE_KEY,
          AUD2_INVGRTMAIN.SCHEME_DOCNO          AS MODULE_KEY_DISPLAY,
          AUD2_INVGRTMAIN.GRTCODE               AS GOOD_RETURN_CODE,
          AUD2_INVGRTMAIN.GRTDT                 AS GRT_DATE,
          AUD2_INVGRTMAIN.PCODE                 AS VENDOR_CODE,
          VENDOR.SLNAME                         AS VENDOR_NAME,
          AUD2_INVGRTMAIN.GRCCODE               AS GOOD_RECEIVE_CODE,
          INVGRCMAIN.SCHEME_DOCNO               AS GOOD_RECEIVE_NUMBER,
          AUD2_INVGRTMAIN.LOCCODE               AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                        AS STOCK_POINT_NAME,
          AUD2_INVGRTMAIN.RTCODE                AS RETURN_CODE,
          PURRTMAIN.SCHEME_DOCNO                AS RETURN_SERVICE_NUMBER,
          AUD2_INVGRTMAIN.REM                   AS REMARKS,
          AUD2_INVGRTMAIN.ECODE                 AS CREATED_USER_CODE,
          HRDEMP1.FNAME                         AS CREATED_USER_NAME,
          AUD2_INVGRTMAIN.LAST_ACCESS_ECODE     AS LAST_MODIFIED_USER_CODE,
          HRDEMP2.FNAME                         AS LAST_MODIFIED_USER_NAME,
          AUD2_INVGRTMAIN.AGCODE                AS AGENT_CODE,
          AGENT.SLNAME                          AS AGENT_NAME,
          AUD2_INVGRTMAIN.ADMOU_CODE            AS OU_CODE,
          ADMOU.NAME                            AS OU_NAME,
          AUD2_INVGRTMAIN.FINTRADEGRP_CODE      AS TRADE_GROUP_CODE,
          FINTRADEGRP.NAME                      AS TRADE_GROUP_NAME,
          AUD2_INVGRTMAIN.DOCCODE               AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                  AS DOCSCHEME_NAME,
          AUD2_INVGRTMAIN.SCHEME_DOCNO          AS DOCSCHEME_NUMBER,
          AUD2_INVGRTMAIN.GRSAMT                AS GROSS_AMOUNT,
          AUD2_INVGRTMAIN.CHGAMT                AS CHARGE_AMOUNT,
          AUD2_INVGRTMAIN.NETAMT                AS NET_AMOUNT,
          AUD2_INVGRTMAIN.ADMCURRENCY_CODE      AS CURRENCY_CODE,
          ADMCURRENCY.NAME                      AS CURRENCY_NAME,
          AUD2_INVGRTMAIN.EXRATE                AS EXCHANGE_RATE,
          AUD2_INVGRTMAIN.ADMSITE_CODE          AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                          AS TRANSACTION_SITE_NAME,
          AUD2_INVGRTMAIN.AUTH_ECODE            AS AUTHORIZATION_USERCODE,
          HRDEMP.FNAME                          AS AUTHORIZATION_USER,
          AUD2_INVGRTMAIN.PSITE_STOCKPOINT_CODE AS POS_STOCKPOINT_CODE,
          PSITE_STOCKPOINT.NAME                 AS POS_STOCKPOINT_NAME,
          AUD2_INVGRTMAIN.FORMCODE              AS FORMCODE,
          FINFORM.FORMNAME                      AS FORM_NAME,
          AUD2_INVGRTMAIN.PURTERMCODE           AS TERM_CODE,
          PURTERMMAIN.NAME                      AS TERM_NAME,
          AUD2_INVGRTMAIN.UDFSTRING01           AS UDFSTRING01,
          AUD2_INVGRTMAIN.UDFSTRING02           AS UDFSTRING02,
          AUD2_INVGRTMAIN.UDFSTRING03           AS UDFSTRING03,
          AUD2_INVGRTMAIN.UDFSTRING04           AS UDFSTRING04,
          AUD2_INVGRTMAIN.UDFSTRING05           AS UDFSTRING05,
          AUD2_INVGRTMAIN.UDFSTRING06           AS UDFSTRING06,
          AUD2_INVGRTMAIN.UDFSTRING07           AS UDFSTRING07,
          AUD2_INVGRTMAIN.UDFSTRING08           AS UDFSTRING08,
          AUD2_INVGRTMAIN.UDFSTRING09           AS UDFSTRING09,
          AUD2_INVGRTMAIN.UDFSTRING10           AS UDFSTRING10,
          AUD2_INVGRTMAIN.UDFNUM01              AS UDFNUM01,
          AUD2_INVGRTMAIN.UDFNUM02              AS UDFNUM02,
          AUD2_INVGRTMAIN.UDFNUM03              AS UDFNUM03,
          AUD2_INVGRTMAIN.UDFNUM04              AS UDFNUM04,
          AUD2_INVGRTMAIN.UDFNUM05              AS UDFNUM05,
          AUD2_INVGRTMAIN.UDFDATE01             AS UDFDATE01,
          AUD2_INVGRTMAIN.UDFDATE02             AS UDFDATE02,
          AUD2_INVGRTMAIN.UDFDATE03             AS UDFDATE03,
          AUD2_INVGRTMAIN.UDFDATE04             AS UDFDATE04,
          AUD2_INVGRTMAIN.UDFDATE05             AS UDFDATE05,
          AUD2_INVGRTMAIN.ENTRY_SOURCE          AS ENTRY_SOURCE
FROM AUD2_INVGRTMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GRT'') TRANS_DET
             ON (AUD2_INVGRTMAIN.GRTCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGRTMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINSL VENDOR ON AUD2_INVGRTMAIN.PCODE = VENDOR.SLCODE
LEFT OUTER JOIN INVGRCMAIN INVGRCMAIN ON AUD2_INVGRTMAIN.GRCCODE = INVGRCMAIN.GRCCODE
INNER JOIN INVLOC INVLOC ON AUD2_INVGRTMAIN.LOCCODE = INVLOC.LOCCODE
LEFT OUTER JOIN PURRTMAIN PURRTMAIN ON AUD2_INVGRTMAIN.RTCODE = PURRTMAIN.RTCODE
LEFT OUTER JOIN FINSL AGENT ON AUD2_INVGRTMAIN.AGCODE = AGENT.SLCODE
INNER JOIN ADMOU ADMOU ON AUD2_INVGRTMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN FINTRADEGRP FINTRADEGRP ON AUD2_INVGRTMAIN.FINTRADEGRP_CODE = FINTRADEGRP.CODE
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_INVGRTMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT OUTER JOIN ADMCURRENCY ADMCURRENCY ON AUD2_INVGRTMAIN.ADMCURRENCY_CODE = ADMCURRENCY.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_INVGRTMAIN.ADMSITE_CODE = ADMSITE.CODE
LEFT OUTER JOIN HRDEMP HRDEMP ON AUD2_INVGRTMAIN.AUTH_ECODE = HRDEMP.ECODE
LEFT OUTER JOIN PSITE_STOCKPOINT PSITE_STOCKPOINT ON AUD2_INVGRTMAIN.PSITE_STOCKPOINT_CODE = PSITE_STOCKPOINT.CODE
LEFT OUTER JOIN FINFORM FINFORM ON AUD2_INVGRTMAIN.FORMCODE = FINFORM.FORMCODE
LEFT OUTER JOIN PURTERMMAIN PURTERMMAIN ON AUD2_INVGRTMAIN.PURTERMCODE = PURTERMMAIN.CODE
INNER JOIN HRDEMP HRDEMP1 ON AUD2_INVGRTMAIN.ECODE = HRDEMP1.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP2 ON AUD2_INVGRTMAIN.LAST_ACCESS_ECODE = HRDEMP2.ECODE', 'GRTCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'GRTCODE');
INSERT INTO main.aud2_table VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'Header', 1, 'MiscellaneousEntryHeader', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_invmiscmain
 AS
 SELECT trans_det.version_seq,
    aud2_invmiscmain.action,
    trans_det.login_user,
    trans_det.transaction_id,
    trans_det.transaction_date,
    trans_det.header_key_value AS module_key,
    aud2_invmiscmain.misccode AS miscellaneous_entry_code,
    aud2_invmiscmain.miscdt AS entry_date,
    aud2_invmiscmain.loccode AS stock_point_code,
    invloc.locname AS stock_point_name,
    aud2_invmiscmain.refno AS reference_number,
    aud2_invmiscmain.remarks,
    aud2_invmiscmain.admou_code AS ou_code,
    admou.name AS ou_name,
    aud2_invmiscmain.admsite_code AS transaction_site_code,
    transaction_site.name AS transaction_site_name,
    aud2_invmiscmain.admsite_cc AS admsite_cc_code,
    cost.name AS cost_center,
    aud2_invmiscmain.psite_stockpoint_code,
    stockpoint.code AS pos_stock_point,
    aud2_invmiscmain.auth_ecode AS authorization_usercode,
    author.fname AS authorization_user,
        CASE aud2_invmiscmain.gstappl
            WHEN ''Y''::bpchar THEN ''GST Tax Invoice''::text
            WHEN ''N''::bpchar THEN ''Non-GST Invoice''::text
            ELSE '' ''::text
        END AS gst_applicability,
    aud2_invmiscmain.doccode AS docscheme_name,
    aud2_invmiscmain.scheme_docno AS miscellaneous_entry_no,
    aud2_invmiscmain.udfstring01,
    aud2_invmiscmain.udfstring02,
    aud2_invmiscmain.udfstring03,
    aud2_invmiscmain.udfstring04,
    aud2_invmiscmain.udfstring05,
    aud2_invmiscmain.udfstring06,
    aud2_invmiscmain.udfstring07,
    aud2_invmiscmain.udfstring08,
    aud2_invmiscmain.udfstring09,
    aud2_invmiscmain.udfstring10,
    aud2_invmiscmain.udfnum01,
    aud2_invmiscmain.udfnum02,
    aud2_invmiscmain.udfnum03,
    aud2_invmiscmain.udfnum04,
    aud2_invmiscmain.udfnum05,
    aud2_invmiscmain.udfdate01,
    aud2_invmiscmain.udfdate02,
    aud2_invmiscmain.udfdate03,
    aud2_invmiscmain.udfdate04,
    aud2_invmiscmain.udfdate05,
    aud2_invmiscmain.creation_ecode AS created_user_code,
    hrdemp.fname AS created_user_name,
    aud2_invmiscmain.last_modified_ecode AS last_modified_user_code,
    hrdemp1.fname AS last_modified_user_name
   FROM aud2_invmiscmain
      JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''MiscellaneousEntry''::text) trans_det 
		  ON aud2_invmiscmain.misccode::text = trans_det.header_key_value::text 
		  AND aud2_invmiscmain.transaction_id::text = trans_det.transaction_id::text
     LEFT OUTER JOIN invloc invloc ON aud2_invmiscmain.loccode = invloc.loccode
     LEFT OUTER JOIN admou admou ON aud2_invmiscmain.admou_code = admou.code
     LEFT OUTER JOIN admsite transaction_site ON aud2_invmiscmain.admsite_code = transaction_site.code
     LEFT JOIN admsite cost ON aud2_invmiscmain.admsite_cc = cost.code
     LEFT JOIN psite_stockpoint stockpoint ON aud2_invmiscmain.psite_stockpoint_code::text = stockpoint.code::text
     LEFT JOIN hrdemp author ON aud2_invmiscmain.auth_ecode = author.ecode
     JOIN hrdemp ON aud2_invmiscmain.creation_ecode = hrdemp.ecode
     LEFT JOIN hrdemp hrdemp1 ON aud2_invmiscmain.last_modified_ecode = hrdemp1.ecode;', 'MISCCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'MISCCODE');
INSERT INTO main.aud2_table VALUES ('PurchaseOrder', 'PURORDMAIN', 'Header', 1, 'POHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purordmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          AUD2_PURORDMAIN.TRANSACTION_ID    AS TRANSACTION_ID,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PURORDMAIN.SCHEME_DOCNO      AS MODULE_KEY_DISPLAY,
          AUD2_PURORDMAIN.ORDCODE           AS ORDER_CODE,
          AUD2_PURORDMAIN.ORDDT             AS ORDER_DATE,
          AUD2_PURORDMAIN.PCODE             AS SUPPLIER_CODE,
          SUPPLIER.SLNAME                   AS SUPPLIER_NAME,
          AUD2_PURORDMAIN.DOCNO             AS DOCUMENT_NUMBER,
          AUD2_PURORDMAIN.AGCODE            AS AGENT_CODE,
          AGENT.SLNAME                      AS AGENT_NAME,
          AUD2_PURORDMAIN.AGRATE            AS AGENT_RATE,
          AUD2_PURORDMAIN.TRPCODE           AS TRANSPORTER_CODE,
          TRANSPORTER.SLNAME                AS TRANSPORTER_NAME,
          AUD2_PURORDMAIN.AUTHORCODE        AS AUTHORIZEDBY_USERCODE,
          AUTHORIZED.FNAME                  AS AUTHORIZEDBY_USER,
          AUD2_PURORDMAIN.REM               AS REMARKS,
          AUD2_PURORDMAIN.ECODE             AS CREATEDBY_USERCODE,
          CREATEDBY.FNAME                   AS CREATEDBY_USER,
          AUD2_PURORDMAIN.DTFR              AS VALID_FROM,
          AUD2_PURORDMAIN.DTTO              AS VALID_TO,
          AUD2_PURORDMAIN.LAST_ACCESS_ECODE AS LASTMODIFIEDBY_USERCODE,
          LASTMODIFIEDBY.FNAME              AS LASTMODIFIEDBY_USER,
          AUD2_PURORDMAIN.PAYTERM           AS ORDER_TERM,
          CASE AUD2_PURORDMAIN.WHETHER_CONSIGNMENT
             WHEN ''Y'' THEN ''Consignment''
             WHEN ''N'' THEN ''Non-Consignment''
             ELSE '' ''
          END
             AS ORDER_TYPE,
          AUD2_PURORDMAIN.DOCCODE           AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME              AS DOCSCHEME_NAME,
          AUD2_PURORDMAIN.SCHEME_DOCNO      AS ORDER_NUMBER,
          AUD2_PURORDMAIN.ADMOU_CODE        AS OU_CODE,
          ADMOU.NAME                        AS OU_NAME,
          AUD2_PURORDMAIN.MRCHNDSRCODE      AS MERCHANDISER_CODE,
          MERCHANDISER.FNAME                AS MERCHANDISER_NAME,
          AUD2_PURORDMAIN.FINTRADEGRP_CODE  AS TRADEGROUP_CODE,
          FINTRADEGRP.NAME                  AS TRADEGROUP_NAME,
          AUD2_PURORDMAIN.GRSAMT            AS GROSS_AMOUNT,
          AUD2_PURORDMAIN.CHGAMT            AS CHARGE_AMOUNT,
          AUD2_PURORDMAIN.NETAMT            AS NET_AMOUNT,
          AUD2_PURORDMAIN.ADMCURRENCY_CODE  AS CURRENCY_CODE,
          ADMCURRENCY.NAME                  AS CURRENCY_NAME,
          AUD2_PURORDMAIN.EXRATE            AS EXCHANGE_RATE,
          AUD2_PURORDMAIN.ADMSITE_CODE      AS REFERENCE_SITE_CODE,
          ADMSITE.NAME                      AS REFERENCE_SITE_NAME,
          AUD2_PURORDMAIN.FORMCODE          AS FORM_CODE,
          FINFORM.FORMNAME                  AS FORM_NAME,
          AUD2_PURORDMAIN.ENABLE_LGT_TRACK  AS SHIP_TRACKING_APPL,
          AUD2_PURORDMAIN.PURTERMCODE       AS TERM_CODE,
          PURTERMMAIN.NAME                  AS TERM_NAME,
          CASE
             WHEN AUD2_PURORDMAIN.SET_APPLICABLE = ''Y'' THEN ''YES''
             WHEN AUD2_PURORDMAIN.SET_APPLICABLE = ''N'' THEN ''NO''
          END
             SET_APPLICABILITY,
          AUD2_PURORDMAIN.UDFSTRING01       AS PURORDMAIN_UDFNUM01,
          AUD2_PURORDMAIN.UDFSTRING02       AS PURORDMAIN_UDFNUM02,
          AUD2_PURORDMAIN.UDFSTRING03       AS PURORDMAIN_UDFNUM03,
          AUD2_PURORDMAIN.UDFSTRING04       AS PURORDMAIN_UDFNUM04,
          AUD2_PURORDMAIN.UDFSTRING05       AS PURORDMAIN_UDFNUM05,
          AUD2_PURORDMAIN.UDFSTRING06       AS PURORDMAIN_UDFDATE01,
          AUD2_PURORDMAIN.UDFSTRING07       AS PURORDMAIN_UDFDATE02,
          AUD2_PURORDMAIN.UDFSTRING08       AS PURORDMAIN_UDFDATE03,
          AUD2_PURORDMAIN.UDFSTRING09       AS PURORDMAIN_UDFDATE04,
          AUD2_PURORDMAIN.UDFSTRING10       AS PURORDMAIN_UDFDATE05,
          AUD2_PURORDMAIN.UDFNUM01          AS PURORDMAIN_UDFSTR06,
          AUD2_PURORDMAIN.UDFNUM02          AS PURORDMAIN_UDFSTR07,
          AUD2_PURORDMAIN.UDFNUM03          AS PURORDMAIN_UDFSTR08,
          AUD2_PURORDMAIN.UDFNUM04          AS PURORDMAIN_UDFSTR09,
          AUD2_PURORDMAIN.UDFNUM05          AS PURORDMAIN_UDFSTR10,
          AUD2_PURORDMAIN.UDFDATE01         AS PURORDMAIN_UDFSTR01,
          AUD2_PURORDMAIN.UDFDATE02         AS PURORDMAIN_UDFSTR02,
          AUD2_PURORDMAIN.UDFDATE03         AS PURORDMAIN_UDFSTR03,
          AUD2_PURORDMAIN.UDFDATE04         AS PURORDMAIN_UDFSTR04,
          AUD2_PURORDMAIN.UDFDATE05         AS PURORDMAIN_UDFSTR05
     FROM AUD2_PURORDMAIN INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE 
									      ORDER BY TRANSACTION_DATE) VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''PurchaseOrder'') TRANS_DET
						  ON (AUD2_PURORDMAIN.ORDCODE::text = TRANS_DET.HEADER_KEY_VALUE 
						      AND AUD2_PURORDMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINSL SUPPLIER ON AUD2_PURORDMAIN.PCODE = SUPPLIER.SLCODE
LEFT JOIN FINSL AGENT ON AUD2_PURORDMAIN.AGCODE = AGENT.SLCODE
LEFT JOIN FINSL TRANSPORTER ON AUD2_PURORDMAIN.TRPCODE = TRANSPORTER.SLCODE
LEFT JOIN HRDEMP AUTHORIZED ON AUD2_PURORDMAIN.AUTHORCODE = AUTHORIZED.ECODE
INNER JOIN HRDEMP CREATEDBY ON AUD2_PURORDMAIN.ECODE = CREATEDBY.ECODE
LEFT JOIN HRDEMP LASTMODIFIEDBY ON AUD2_PURORDMAIN.LAST_ACCESS_ECODE = LASTMODIFIEDBY.ECODE
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PURORDMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
INNER JOIN ADMOU ADMOU ON AUD2_PURORDMAIN.ADMOU_CODE = ADMOU.CODE
LEFT JOIN HRDEMP MERCHANDISER ON AUD2_PURORDMAIN.MRCHNDSRCODE = MERCHANDISER.ECODE
INNER JOIN FINTRADEGRP FINTRADEGRP ON AUD2_PURORDMAIN.FINTRADEGRP_CODE = FINTRADEGRP.CODE
LEFT JOIN ADMCURRENCY ADMCURRENCY ON AUD2_PURORDMAIN.ADMCURRENCY_CODE = ADMCURRENCY.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PURORDMAIN.ADMSITE_CODE = ADMSITE.CODE
LEFT JOIN FINFORM FINFORM ON AUD2_PURORDMAIN.FORMCODE = FINFORM.FORMCODE
INNER JOIN PURTERMMAIN PURTERMMAIN ON AUD2_PURORDMAIN.PURTERMCODE = PURTERMMAIN.CODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'ORDCODE');
INSERT INTO main.aud2_table VALUES ('TDSSection', 'FINTDSTAG', 'Tds Section Details', 1, 'TDSSectionDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fintdstag 
AS 
SELECT    TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_FINTDSTAG.ACTION,
          AUD2_FINTDSTAG.TDSTYPECODE        AS TDS_SECTION_CODE,
          FINTDSTYPE.TDSNAME                AS TDS_NAME,
          AUD2_FINTDSTAG.TDSSRCCODE         AS TDS_SOURCE_CODE,
          FINTDSSRC.TDSSRCNAME              AS TDS_SOURCE_NAME,
          AUD2_FINTDSTAG.RATE               AS TDS_RATE,
          AUD2_FINTDSTAG.SURCHARGE          AS SURCHARGE,
          AUD2_FINTDSTAG.TDSLIMIT           AS TDSLIMIT,
          AUD2_FINTDSTAG.DTFR               AS EFFECTIVE_DATE_FROM,
          AUD2_FINTDSTAG.DTTO               AS EFFECTIVE_DATE_TO,
          AUD2_FINTDSTAG.CODE               AS CODE,
          AUD2_FINTDSTAG.FINTDSTYPESRC_CODE AS FINTDSTYPESRC_CODE,
          AUD2_FINTDSTAG.CMPCODE
     FROM AUD2_FINTDSTAG
          INNER JOIN(SELECT A.*,
					RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
					FROM AUD2_TRANSACTION A
					WHERE MODULE_SHORTCODE = ''TDSSection'') TRANS_DET
             ON (AUD2_FINTDSTAG.TDSTYPECODE::TEXT = TRANS_DET.HEADER_KEY_VALUE AND AUD2_FINTDSTAG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN FINTDSTYPE FINTDSTYPE ON AUD2_FINTDSTAG.TDSTYPECODE = FINTDSTYPE.TDSTYPECODE
LEFT JOIN FINTDSSRC FINTDSSRC ON AUD2_FINTDSTAG.TDSSRCCODE = FINTDSSRC.TDSSRCCODE', 'TDSTYPECODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'TDSTYPECODE#TDSSRCCODE#DTFR');
INSERT INTO main.aud2_table VALUES ('FinVoucher', 'FINVCHMAIN', 'Header', 1, 'VoucherHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finvchmain 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.ADMOU_CODE         OU_CODE,
          A.NAME                 OU_NAME,
          AUD.ADMSITE_CODE_OWNER TRANSACTION_SITE_CODE,
          ST.NAME                TRANSACTION_SITE_NAME,
          AUD.CAMOUNT            CREDIT_AMOUNT,
          AUD.DAMOUNT            DEBIT_AMOUNT,
          AUD.DOCCODE            DOCSCHEME_CODE,
          ADM.DOCNAME            DOCSCHEME_NAME,
          AUD.ECODE              CREATEDBY_USERCODE,
          H2.FNAME               CREATEDBY_USER,
          AUD.GLCODE             GENERAL_LEDGER_CODE,
          G.GLNAME               GENERAL_LEDGER_NAME,
          AUD.ISADVANCE          ISADVANCE,
          AUD.LAST_ACCESS_ECODE  LASTMODIFIEDBY_USERCODE,
          H3.FNAME               LASTMODIFIEDBY_USER,
          AUD.NARTEXT            REMARKS_OR_NARRATION,
          AUD.REFNO              REFERENCE_NUMBER,
          AUD.RELEASE_ECODE      RELEASED_USERCODE,
          H1.FNAME               RELEASED_USER,
          CASE AUD.RELEASE_STATUS
             WHEN ''U'' THEN ''Unposted''
             WHEN ''P'' THEN ''Posted''
             ELSE NULL
          END
             RELEASE_STATUS,
          AUD.SCHEME_DOCNO       VOUCHER_NUMBER,
          VCH.SCHEME_DOCNO       MODULE_KEY_DISPLAY,
          AUD.VCHCODE,
          AUD.VCHCODE            MODULE_KEY,
          AUD.VCHDT              VOUCHER_DATE,
          CASE AUD.VCHTYPE
             WHEN ''C'' THEN ''Contra Voucher''
             WHEN ''G'' THEN ''General Voucher''
             WHEN ''P'' THEN ''Payment Voucher''
             WHEN ''R'' THEN ''Receipt Voucher''
             WHEN ''B'' THEN ''AR/AP Voucher''
             ELSE NULL
          END
             VOUCHER_TYPE,
          AUD.ENTRY_SOURCE       ENTRY_SOURCE,
          AUD.UDFDATE01          UDFDATE01,
          AUD.UDFDATE02          UDFDATE02,
          AUD.UDFDATE03          UDFDATE03,
          AUD.UDFDATE04          UDFDATE04,
          AUD.UDFDATE05          UDFDATE05,
          AUD.UDFNUM01           UDFNUM01,
          AUD.UDFNUM02           UDFNUM02,
          AUD.UDFNUM03           UDFNUM03,
          AUD.UDFNUM04           UDFNUM04,
          AUD.UDFNUM05           UDFNUM05,
          AUD.UDFSTRING01        UDFSTRING01,
          AUD.UDFSTRING02        UDFSTRING02,
          AUD.UDFSTRING03        UDFSTRING03,
          AUD.UDFSTRING04        UDFSTRING04,
          AUD.UDFSTRING05        UDFSTRING05,
          AUD.UDFSTRING06        UDFSTRING06,
          AUD.UDFSTRING07        UDFSTRING07,
          AUD.UDFSTRING08        UDFSTRING08,
          AUD.UDFSTRING09        UDFSTRING09,
          AUD.UDFSTRING10        UDFSTRING10
FROM aud2_finvchmain aud 
		INNER JOIN (SELECT A.*, 
					RANK()
					OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                    ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''FinVoucher'') trans_det
			ON (AUD.VCHCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
				AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN admou a ON AUD.ADMOU_CODE = A.CODE
INNER JOIN admdocscheme adm ON AUD.DOCCODE = ADM.DOCCODE
INNER JOIN hrdemp h2 ON AUD.ECODE = H2.ECODE
INNER JOIN fingl g ON AUD.GLCODE = G.GLCODE
LEFT OUTER JOIN finvchmain vch ON (AUD.VCHCODE = VCH.VCHCODE)
LEFT OUTER JOIN admsite st ON (AUD.ADMSITE_CODE_OWNER = ST.CODE)
LEFT OUTER JOIN hrdemp h1 ON (AUD.RELEASE_ECODE = H1.ECODE)
LEFT OUTER JOIN hrdemp h3 ON (AUD.LAST_ACCESS_ECODE = H3.ECODE)', 'VCHCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'VCHCODE');
INSERT INTO main.aud2_table VALUES ('FinVoucher', 'FINVCHDN', 'AutoDN', 1, 'VoucherDebitNote', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finvchdn 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE                     VOUCHER_DEBIT_CODE,
          AUD.FINVCHMAIN_CODE          MODULE_KEY,
          AUD.CASH_DISCOUNT_AMOUNT     CASH_DISCOUNT_AMOUNT,
          AUD.CASH_DISCOUNT_APPAMOUNT  CASH_DISC_APP_AMOUNT,
          AUD.CASH_DISCOUNT_PERCENTAGE CASH_DISC_PERCENTAGE,
          AUD.FINJRNMAIN_CODE          JOURNAL_CODE,
          --J.SCHEME_DOCNO               JOURNAL_NUMBER,
          --J.SCHEME_DOCNO               MODULE_KEY_DISPLAY,
          AUD.FINOPDOC_CODE            OPENING_DOC_CODE,
          O.ENTNO                      OPENING_DOC_NUMBER,
          AUD.FINVCHMAIN_CODE          VOUCHER_CODE,
          V.SCHEME_DOCNO               VOUCHER_NUMBER,
          AUD.PURINVMAIN_INVCODE       PURCHASE_INVOICE_CODE,
          I.SCHEME_DOCNO               PURCHASE_INVOICE_NUMBER
FROM aud2_finvchdn aud 
		INNER JOIN(SELECT A.*,RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''FinVoucher'') trans_det 
			ON (AUD.FINVCHMAIN_CODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN finopdoc o ON (AUD.FINOPDOC_CODE = O.ENTCODE)
LEFT OUTER JOIN finvchmain v ON (AUD.FINVCHMAIN_CODE = V.VCHCODE)
LEFT OUTER JOIN purinvmain i ON (AUD.PURINVMAIN_INVCODE = I.INVCODE)', 'FINVCHMAIN_CODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('SaleTermMaster', 'SALTERMMAIN', 'Sale Term Master', 1, 'SalesTermHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_saltermmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.SALTERMCODE                                         TERM_CODE,
          AUD.SALTERMCODE                                         MODULE_KEY,
          AUD.SALTERMNAME                                         TERM_NAME,
          AUD.SALTERMNAME                                         MODULE_KEY_DISPLAY,
          CASE AUD.EXT WHEN ''Y'' THEN ''Yes'' WHEN ''N'' THEN ''No'' END EXTINCT,
          AUD.FINTRADEGRP_CODE
             TRADEGROUP_CODE,
          T.NAME
             TRADEGROUP_NAME,
          CASE AUD.HEADER_LEVEL_ISCHANGEABLE
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
          END
             HEADER_LEVEL_ISCHANGEABLE,
          CASE AUD.LINE_LEVEL_ISCHANGEABLE
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
          END
             LINE_LEVEL_ISCHANGEABLE,
          AUD.SALES_GLCODE
             INVOICE_LEDGER_CODE,
          G1.GLNAME
             INVOICE_LEDGER_NAME,
          AUD.SALES_SLCODE
             INVOICE_SUBLEDGER_CODE,
          S1.SLNAME
             INVOICE_SUBLEDGER_NAME,
          AUD.SALES_RETURN_GLCODE
             RETURN_LEDGER_CODE,
          G2.GLNAME
             RETURN_LEDGER_NAME,
          AUD.SALES_RETURN_SLCODE
             RETURN_SUBLEDGER_CODE,
          S2.SLNAME
             RETURN_SUBLEDGER_NAME
     FROM aud2_saltermmain aud INNER JOIN  (SELECT A.*,
											RANK()
										    OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
												ORDER BY TRANSACTION_DATE)
											 VERSION_SEQ
											FROM AUD2_TRANSACTION A
											WHERE MODULE_SHORTCODE = ''SaleTermMaster'') trans_det 
							   ON (AUD.SALTERMCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
							       AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN fintradegrp t ON AUD.FINTRADEGRP_CODE = T.CODE 
LEFT OUTER JOIN fingl g1 ON (AUD.SALES_GLCODE = G1.GLCODE)
LEFT OUTER JOIN fingl g2 ON (AUD.SALES_RETURN_GLCODE = G2.GLCODE)
LEFT OUTER JOIN finsl s1 ON (AUD.SALES_SLCODE = S1.SLCODE)
LEFT OUTER JOIN finsl s2 ON (AUD.SALES_RETURN_SLCODE = S2.SLCODE)', 'SALTERMCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'SALTERMCODE');
INSERT INTO main.aud2_table VALUES ('BillofMaterials', 'PRDBOMMAIN', 'Header', 1, 'BOMHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdbommain
AS 
SELECT TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PRDBOMMAIN.ACTION,
          AUD2_PRDBOMMAIN.CODE              AS CODE,
          AUD2_PRDBOMMAIN.ASSEMBLY_ICODE    AS ICODE,
          AUD2_PRDBOMMAIN.REMARKS,
          AUD2_PRDBOMMAIN.ECODE             AS CREATED_USER_CODE,
          HRDEMP1.FNAME                     AS CREATED_USER_NAME,
          AUD2_PRDBOMMAIN.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP2.FNAME                     AS LAST_MODIFIED_USER_NAME,
          INVITEM.BARCODE                   AS ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDBOMMAIN.ROUTECODE         AS ROUTE_CODE,
          PRDROUTEMAIN.NAME                 AS ROUTE_NAME,
          AUD2_PRDBOMMAIN.ENTRY_SOURCE      AS ENTRY_SOURCE
FROM AUD2_PRDBOMMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''BillofMaterials'') TRANS_DET
             ON (AUD2_PRDBOMMAIN.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDBOMMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVITEM INVITEM ON AUD2_PRDBOMMAIN.ASSEMBLY_ICODE = INVITEM.ICODE
INNER JOIN PRDROUTEMAIN PRDROUTEMAIN ON AUD2_PRDBOMMAIN.ROUTECODE = PRDROUTEMAIN.CODE
INNER JOIN HRDEMP HRDEMP1 ON AUD2_PRDBOMMAIN.ECODE = HRDEMP1.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP2 ON AUD2_PRDBOMMAIN.LAST_ACCESS_ECODE = HRDEMP2.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Role', 'ROLEMENU', 'Assigned Menu', 1, 'MenuAssignment', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_rolemenu 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          RM.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          RM.TRANSACTION_ID,
          RM.ID              ROLE_MENU_ASSIGNMENT_CODE,
          RM.ROLEID          MODULE_KEY,
          RM.ROLEID          ROLE_CODE,
          R.NAME             ROLE_NAME,
          R.NAME             MODULE_KEY_DISPLAY,
          RM.MDMENUSHORTCODE MENU_CODE,
          MP.CHART           MENU_PATH
     FROM aud2_rolemenu rm INNER JOIN (SELECT A.*, 
									   RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
									   FROM AUD2_TRANSACTION A
									   WHERE MODULE_SHORTCODE = ''Role'') trans_det 
						   ON (RM.ROLEID::varchar = TRANS_DET.HEADER_KEY_VALUE AND RM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN MDMENU M ON RM.MDMENUSHORTCODE = M.SYS_SHORTCODE 
INNER JOIN (WITH RECURSIVE cte AS (
									SELECT M.SYS_SHORTCODE,LTRIM(SYS_NAME, ''-->'') CHART
									FROM MDMENU M WHERE SYS_MDMENUPARENTSHORTCODE IS NULL
									UNION ALL
									SELECT M.SYS_SHORTCODE,c.CHART || ''-->'' || LTRIM(SYS_NAME, ''-->'') CHART
									FROM MDMENU M JOIN cte c ON (c.SYS_SHORTCODE = SYS_MDMENUPARENTSHORTCODE)
									)
			SELECT * FROM cte) mp ON M.SYS_SHORTCODE = MP.SYS_SHORTCODE  
LEFT OUTER JOIN role r ON (RM.ROLEID = R.ID)', 'ROLEID', 'AuditTriggerTemplateAllColumnsNew', 2, 'ID');
INSERT INTO main.aud2_table VALUES ('WIPMaterialTransaction', 'PRDWIPMAIN', 'Header', 1, 'WIPTransactionHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdwipmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ                   AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                    AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE              AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE              AS MODULE_KEY,
          AUD2_PRDWIPMAIN.WIPTXNNO                AS MODULE_KEY_DISPLAY,
          AUD2_PRDWIPMAIN.ACTION,
          AUD2_PRDWIPMAIN.CODE                    AS CODE,
          CASE AUD2_PRDWIPMAIN.AUTOGEN_TYPE
             WHEN ''O'' THEN ''JOB ORDER''
             WHEN ''R'' THEN ''JOB RECEIPT''
             WHEN ''C'' THEN ''CANCEL ORDER''
             ELSE '' ''
          END
             AS AUTO_GENERATION_TYPE,
          AUD2_PRDWIPMAIN.INVGATEIN_CODE          AS GATE_ENTRY_CODE,
          INVGATEIN.GATEINNO                      AS GATE_ENTRY_NO,
          AUD2_PRDWIPMAIN.LGTRECQTY               AS LR_QTY,
          AUD2_PRDWIPMAIN.WIPTXNNO                AS MATERIAL_TRANSACTION_NUMBER,
          AUD2_PRDWIPMAIN.DOCCODE                 AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                    AS DOCSCHEME_NAME,
          AUD2_PRDWIPMAIN.WIP_DATE                AS MATERIAL_TRANSACTION_DATE,
          AUD2_PRDWIPMAIN.REFNO                   AS REFERENCE_NUMBER,
          CASE AUD2_PRDWIPMAIN.WIPTXN_TYPE
             WHEN ''I'' THEN ''ISSUE''
             WHEN ''R'' THEN ''RETURN''
             WHEN ''W'' THEN ''WASTAGE''
             ELSE '' ''
          END
             AS TRANSACTION_TYPE,
          AUD2_PRDWIPMAIN.PCODE                   AS JOBBER_CODE,
          FINSL.SLNAME                            AS JOBBER_NAME,
          AUD2_PRDWIPMAIN.PRCODE                  AS PROCESS_CODE,
          PRDPR.PRNAME                            AS PROCESS_NAME,
          AUD2_PRDWIPMAIN.REMARKS                 AS REMARKS,
          AUD2_PRDWIPMAIN.JOBCODE                 AS JOB_CODE,
          PRDJOBMAIN.JOBNO                        AS JOB_ORDER_NUMBER,
          AUD2_PRDWIPMAIN.ADMOU_CODE              AS OU_CODE,
          ADMOU.NAME                              AS OU_NAME,
          AUD2_PRDWIPMAIN.ECODE                   AS CREATED_USER_CODE,
          HRDEMP.FNAME                            AS CREATED_USER_NAME,
          AUD2_PRDWIPMAIN.LAST_ACCESS_ECODE       AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                           AS LAST_MODIFIED_USER_NAME,
          AUD2_PRDWIPMAIN.JRCCODE                 AS JOB_RECEIPT_CODE,
          PRDJRCMAIN.JRCNO                        AS JOB_RECEIPT_NUMBER,
          AUD2_PRDWIPMAIN.ADMSITE_CODE            AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                            AS TRANSACTION_SITE_NAME,
          AUD2_PRDWIPMAIN.LGTCODE                 AS LOGISTICS_CODE,
          INVLGTNOTE.LGTNO                        AS LOGISTICS_NUMBER,
          AUD2_PRDWIPMAIN.EWAYBILLNO              AS EWAY_BILL_NUMBER,
          AUD2_PRDWIPMAIN.EWAYBILLGENERATEDON     AS EWAY_BILL_CREATE_DATE,
          AUD2_PRDWIPMAIN.EWAYBILLVALIDUPTO       AS EWAY_BILL_VALIDITY_DATE,
          AUD2_PRDWIPMAIN.EWAYBILL_DOCUMENT_URL   AS EWAYBILL_DOCUMENT_URL,
          AUD2_PRDWIPMAIN.EWAYBILL_DOCUMENT_DATA  AS EWAYBILL_DOCUMENT_DATA,
          AUD2_PRDWIPMAIN.EWAYBILLGENERATEDON_DUMMY
             AS EWAYBILLGENERATEDON_DUMMY,
          AUD2_PRDWIPMAIN.EWAYBILLVALIDUPTO_DUMMY AS EWAYBILLVALIDUPTO_DUMMY,
          AUD2_PRDWIPMAIN.ENTRY_SOURCE            AS ENTRY_SOURCE,
          AUD2_PRDWIPMAIN.UDFSTRING01             AS UDFSTRING01,
          AUD2_PRDWIPMAIN.UDFSTRING02             AS UDFSTRING02,
          AUD2_PRDWIPMAIN.UDFSTRING03             AS UDFSTRING03,
          AUD2_PRDWIPMAIN.UDFSTRING04             AS UDFSTRING04,
          AUD2_PRDWIPMAIN.UDFSTRING05             AS UDFSTRING05,
          AUD2_PRDWIPMAIN.UDFSTRING06             AS UDFSTRING06,
          AUD2_PRDWIPMAIN.UDFSTRING07             AS UDFSTRING07,
          AUD2_PRDWIPMAIN.UDFSTRING08             AS UDFSTRING08,
          AUD2_PRDWIPMAIN.UDFSTRING09             AS UDFSTRING09,
          AUD2_PRDWIPMAIN.UDFSTRING10             AS UDFSTRING10,
          AUD2_PRDWIPMAIN.UDFNUM01                AS UDFNUM01,
          AUD2_PRDWIPMAIN.UDFNUM02                AS UDFNUM02,
          AUD2_PRDWIPMAIN.UDFNUM03                AS UDFNUM03,
          AUD2_PRDWIPMAIN.UDFNUM04                AS UDFNUM04,
          AUD2_PRDWIPMAIN.UDFNUM05                AS UDFNUM05,
          AUD2_PRDWIPMAIN.UDFDATE01               AS UDFDATE01,
          AUD2_PRDWIPMAIN.UDFDATE02               AS UDFDATE02,
          AUD2_PRDWIPMAIN.UDFDATE03               AS UDFDATE03,
          AUD2_PRDWIPMAIN.UDFDATE04               AS UDFDATE04,
          AUD2_PRDWIPMAIN.UDFDATE05               AS UDFDATE05
     FROM AUD2_PRDWIPMAIN INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
									ORDER BY TRANSACTION_DATE)
									VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''WIPMaterialTransaction'') TRANS_DET
						  ON (AUD2_PRDWIPMAIN.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
							  AND AUD2_PRDWIPMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN INVGATEIN INVGATEIN ON AUD2_PRDWIPMAIN.INVGATEIN_CODE = INVGATEIN.CODE
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PRDWIPMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT JOIN FINSL FINSL ON AUD2_PRDWIPMAIN.PCODE = FINSL.SLCODE
INNER JOIN PRDPR PRDPR ON AUD2_PRDWIPMAIN.PRCODE = PRDPR.PRCODE
LEFT JOIN PRDJOBMAIN PRDJOBMAIN ON AUD2_PRDWIPMAIN.JOBCODE = PRDJOBMAIN.CODE
LEFT JOIN ADMOU ADMOU ON AUD2_PRDWIPMAIN.ADMOU_CODE = ADMOU.CODE
LEFT JOIN PRDJRCMAIN PRDJRCMAIN ON AUD2_PRDWIPMAIN.JRCCODE = PRDJRCMAIN.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PRDWIPMAIN.ADMSITE_CODE = ADMSITE.CODE
LEFT JOIN INVLGTNOTE INVLGTNOTE ON AUD2_PRDWIPMAIN.LGTCODE = INVLGTNOTE.LGTCODE
INNER JOIN HRDEMP HRDEMP ON AUD2_PRDWIPMAIN.ECODE = HRDEMP.ECODE
LEFT JOIN HRDEMP HRDEMP1 ON AUD2_PRDWIPMAIN.LAST_ACCESS_ECODE = HRDEMP1.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('BillofMaterials', 'PRDBOMVER', 'Version Details', 1, 'BOMVersionDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdbomver
AS 
SELECT TRANS_DET.VERSION_SEQ            AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER             AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID         AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE       AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE       AS MODULE_KEY,
          AUD2_PRDBOMVER.ACTION,
          AUD2_PRDBOMVER.BOM_VERSION_NO    AS BOM_VERSION_NUMBER,
          AUD2_PRDBOMVER.CODE              AS CODE,
          AUD2_PRDBOMVER.BOMCODE           AS BOM_CODE,
          CASE AUD2_PRDBOMVER.STATUS
             WHEN ''A'' THEN ''APPROVED''
             WHEN ''N'' THEN ''NOT APPROVED''
             ELSE '' ''
          END
             AS STATUS,
          AUD2_PRDBOMVER.ECODE             AS CREATED_USER_CODE,
          HRDEMP1.FNAME                    AS CREATED_USER_NAME,
          AUD2_PRDBOMVER.APPROV_ECODE      AS APPROVE_USER_CODE,
          HRDEMP2.FNAME                    AS APPROVE_USER_NAME,
          AUD2_PRDBOMVER.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP3.FNAME                    AS LAST_MODIFIED_USER_NAME
FROM AUD2_PRDBOMVER
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''BillofMaterials'') TRANS_DET
             ON (AUD2_PRDBOMVER.BOMCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDBOMVER.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN HRDEMP HRDEMP1 ON AUD2_PRDBOMVER.ECODE = HRDEMP1.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP2 ON AUD2_PRDBOMVER.APPROV_ECODE = HRDEMP2.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP3 ON AUD2_PRDBOMVER.LAST_ACCESS_ECODE = HRDEMP3.ECODE', 'BOMCODE', 'AuditTriggerTemplateAllColumnsNew', 4, 'CODE');
INSERT INTO main.aud2_table VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'Detail', 1, 'POSJournalDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_posjournal_detail 
AS 
SELECT TRANS_DET.VERSION_SEQ                      AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                       AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                   AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE                 AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE                 AS MODULE_KEY,
          AUD2_POSJOURNAL_DETAIL.ACTION,
          AUD2_POSJOURNAL_DETAIL.CODE                AS POS_JOURNAL_DET_CODE,
          AUD2_POSJOURNAL_DETAIL.POSJOURNAL_CODE     AS POS_JOURNAL_CODE,
          AUD2_POSJOURNAL_DETAIL.PSITE_MOP_CODE      AS POS_MOP_CODE,
          PSITE_MOP.NAME                             AS POS_MOP_NAME,
          AUD2_POSJOURNAL_DETAIL.GLCODE              AS LEDGER_CODE,
          FINGL.GLNAME                               AS LEDGER_NAME,
          AUD2_POSJOURNAL_DETAIL.SLCODE              AS SUB_LEDGER_CODE,
          FINSL.SLNAME                               AS SUB_LEDGER_NAME,
          AUD2_POSJOURNAL_DETAIL.AMOUNT              AS JOURNAL_AMT,
          AUD2_POSJOURNAL_DETAIL.PSITE_PTCHEAD_CODE  AS PETTY_CASH_HEAD_CODE,
          PSITE_PTCHEAD.NAME                         AS PETTY_CASH_HEAD_NAME,
          CASE AUD2_POSJOURNAL_DETAIL.PTCHEADMODE
             WHEN ''R'' THEN ''RECEIPT''
             WHEN ''P'' THEN ''PAYMENT''
             ELSE '' ''
          END
             AS PETTY_CASH_HEAD_MODE,
          AUD2_POSJOURNAL_DETAIL.TENDER_MASTER_CODE  AS TENDER_CODE,
          TENDER_MASTER.NAME                         AS TENDER_NAME,
          AUD2_POSJOURNAL_DETAIL.EXPENSE_MASTER_CODE AS EXPENSE_CODE,
          EXPENSE_MASTER.NAME                        AS EXPENSE_NAME,
          AUD2_POSJOURNAL_DETAIL.EXPENSEMODE         AS EXPENSE_MODE,
          AUD2_POSJOURNAL_DETAIL.REFNO               AS REFERENCE_NO,
          AUD2_POSJOURNAL_DETAIL.REFDATETIME         AS REFERENCE_DATE,
          AUD2_POSJOURNAL_DETAIL.REMARKS             AS REMARKS,
          AUD2_POSJOURNAL_DETAIL.ADDITIONALDETAILS1  AS ADDITIONAL_DETAILS_1,
          AUD2_POSJOURNAL_DETAIL.ADDITIONALDETAILS2  AS ADDITIONAL_DETAILS_2,
          AUD2_POSJOURNAL_DETAIL.ADDITIONALDETAILS3  AS ADDITIONAL_DETAILS_3,
          AUD2_POSJOURNAL_DETAIL.ADDITIONALDETAILS4  AS ADDITIONAL_DETAILS_4
FROM AUD2_POSJOURNAL_DETAIL
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''POS Journal'') TRANS_DET
             ON (AUD2_POSJOURNAL_DETAIL.POSJOURNAL_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_POSJOURNAL_DETAIL.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN PSITE_MOP PSITE_MOP ON AUD2_POSJOURNAL_DETAIL.PSITE_MOP_CODE = PSITE_MOP.CODE
LEFT OUTER JOIN FINGL FINGL ON AUD2_POSJOURNAL_DETAIL.GLCODE = FINGL.GLCODE
LEFT OUTER JOIN FINSL FINSL ON AUD2_POSJOURNAL_DETAIL.SLCODE = FINSL.SLCODE
LEFT OUTER JOIN PSITE_PTCHEAD PSITE_PTCHEAD ON AUD2_POSJOURNAL_DETAIL.PSITE_PTCHEAD_CODE = PSITE_PTCHEAD.CODE
LEFT OUTER JOIN TENDER_MASTER TENDER_MASTER ON AUD2_POSJOURNAL_DETAIL.TENDER_MASTER_CODE = TENDER_MASTER.CODE
LEFT OUTER JOIN EXPENSE_MASTER EXPENSE_MASTER ON AUD2_POSJOURNAL_DETAIL.EXPENSE_MASTER_CODE = EXPENSE_MASTER.CODE', 'POSJOURNAL_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Role', 'ROLEMENUOPERATION', 'Assigned Operation', 1, 'OperationAssignment', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_rolemenuoperation 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          RMO.TRANSACTION_ID,
          RMO.ID           ROLE_MENU_OPERATION_ID,
          RMO.ROLEID       MODULE_KEY,
          RMO.ROLEMENUID   ROLE_MENU_ASSIGNMENT_CODE,
          MDAPPOPERATIONID OPERATION_CODE,
          R.NAME           ROLE_NAME,
          R.NAME           MODULE_KEY_DISPLAY,
          MP.CHART         MENU_PATH,
          AO.SYS_NAME      OPERATION_NAME
     FROM aud2_rolemenuoperation rmo INNER JOIN (SELECT A.*, 
												 RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
												 FROM AUD2_TRANSACTION A
												 WHERE MODULE_SHORTCODE = ''Role'') trans_det 
									 ON (RMO.ROLEID::varchar = TRANS_DET.HEADER_KEY_VALUE AND RMO.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN mdappoperation ao ON (RMO.MDAPPOPERATIONID = AO.ID)
LEFT OUTER JOIN rolemenu rm ON (RMO.ROLEMENUID = RM.ID)
LEFT OUTER JOIN mdmenu m ON (coalesce(RM.MDMENUSHORTCODE, ''-10'') = M.SYS_SHORTCODE)
LEFT OUTER JOIN role r ON (coalesce(RM.ROLEID, -10) = R.ID)
LEFT OUTER JOIN (WITH RECURSIVE cte AS (
										 SELECT SYS_SHORTCODE,LTRIM(SYS_NAME, ''-->'') CHART
										 FROM MDMENU 
										 WHERE SYS_MDMENUPARENTSHORTCODE IS NULL
										 UNION ALL
										 SELECT M.SYS_SHORTCODE,c.CHART::TEXT || ''-->'' || LTRIM(M.SYS_NAME, ''-->'') CHART
										 FROM MDMENU M JOIN cte c ON (c.SYS_SHORTCODE = SYS_MDMENUPARENTSHORTCODE)
										) 
				 SELECT * FROM cte) mp 
			ON (M.SYS_SHORTCODE = MP.SYS_SHORTCODE)', 'ROLEID', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'ROLEMENUID#MDAPPOPERATIONID');
INSERT INTO main.aud2_table VALUES ('SubLedgerOpeningBalance', 'FINOPDOC', 'Opening Docs', 1, 'FinanceOpeningDocsDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finopdoc 
AS 
SELECT    TRANS_DET.VERSION_SEQ                  AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                   AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID               AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE             AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE             AS MODULE_KEY,
          AUD2_FINOPDOC.ACTION,
          AUD2_FINOPDOC.ENTCODE                  AS ENT_CODE,
          AUD2_FINOPDOC.ENTNO                    AS ENT_NUMBER,
          AUD2_FINOPDOC.ENTDT                    AS ENTRY_DATE,
          CASE AUD2_FINOPDOC.ENTTYPE
             WHEN ''PIM'' THEN ''PURCHASEINVOICE''
             WHEN ''PSM'' THEN ''PURCHASESERVICEINVOICE''
             WHEN ''PRM'' THEN ''PURCHARSERETURNDEBITNOTE''
             WHEN ''SIM'' THEN ''SALEINVOICE''
             WHEN ''SRM'' THEN ''SALERETURNINVOICE''
             WHEN ''VDP'' THEN ''VOUCHER (AR/AP)''
             WHEN ''JMD'' THEN ''DEBITNOTE''
             WHEN ''JMC'' THEN ''CREDIT NOTE''
             ELSE '' ''
          END
             AS ENTRY_TYPE,
          AUD2_FINOPDOC.DOCNO                    AS REF_DOCUMENT_NUMBER,
          AUD2_FINOPDOC.DOCDT                    AS REF_DOCUMENT_DATE,
          AUD2_FINOPDOC.DUEDT                    AS DUE_DATE,
          GENERAL_LEDGER.GLNAME                  AS LEDGER_NAME,
          SUB_LEDGER.SLNAME                      AS SUBLEDGER_NAME,
          AUD2_FINOPDOC.DAMOUNT                  AS DEBIT_AMOUNT,
          AUD2_FINOPDOC.CAMOUNT                  AS CREDIT_AMOUNT,
          AUD2_FINOPDOC.YCODE                    AS YCODE,
          YEAR.YNAME                             AS FINANCIAL_YEAR,
          AUD2_FINOPDOC.NARTEXT                  AS NARRATION,
          AUD2_FINOPDOC.SCHEME_DOCNO             AS DOCSCHEME_NO,
          AUD2_FINOPDOC.ADMSITE_CODE_OWNER       AS TRANSACTION_SITE_CODE,
          TRANSACTION_SITE.NAME                  AS TRANSACTION_SITE_NAME,
          AUD2_FINOPDOC.AGCODE                   AS AGENT_CODE,
          AGENT.SLNAME                           AS AGENT_NAME,
          AUD2_FINOPDOC.ECODE                    AS CREATED_USER_CODE,
          HRDEMP.FNAME                           AS CREATED_USER_NAME,
          AUD2_FINOPDOC.LAST_ACCESS_ECODE        AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                          AS LAST_MODIFIED_USER_NAME,
          AUD2_FINOPDOC.AGCOMVALUE               AS AGENT_COMMISION_AMOUNT,
          AUD2_FINOPDOC.AGRATE                   AS AGENT_COMMISION_RATE,
          AUD2_FINOPDOC.REF_ADMSITE_CODE         AS REF_SITE_CODE,
          REF_SITE.NAME                          AS REF_SITE_NAME,
          AUD2_FINOPDOC.CHQNO                    AS CHEQUE_NO,
          AUD2_FINOPDOC.CHQDT                    AS CHEQUE_DATE,
          AUD2_FINOPDOC.DRAWNON                  AS DRAWNON,
          AUD2_FINOPDOC.CHQLABEL                 AS CHEQUE_LABEL,
          CASE AUD2_FINOPDOC.CASH_DISCOUNT_APPLICABLE
             WHEN ''N'' THEN ''No''
             WHEN ''Y'' THEN ''Yes''
             ELSE '' ''
          END
             AS CASH_DISCOUNT_APPLICABLE,
          AUD2_FINOPDOC.CASH_DISCOUNT_PERCENTAGE AS CASH_DISCOUNT_PERCENTAGE,
          AUD2_FINOPDOC.CASH_DISCOUNT_PERIOD     AS CASH_DISCOUNT_PERIOD,
          AUD2_FINOPDOC.CASH_DISCOUNT_APPAMT     AS CASH_DISCOUNT_APPAMT,
          AUD2_FINOPDOC.ADMOU_CODE               AS OU_CODE,
          OU.NAME                                AS OU_NAME
     FROM AUD2_FINOPDOC INNER JOIN (SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''SubLedgerOpeningBalance'') TRANS_DET
						ON (AUD2_FINOPDOC.SLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
						    AND AUD2_FINOPDOC.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN ADMYEAR YEAR ON AUD2_FINOPDOC.YCODE = YEAR.YCODE
INNER JOIN ADMSITE TRANSACTION_SITE ON AUD2_FINOPDOC.ADMSITE_CODE_OWNER = TRANSACTION_SITE.CODE
LEFT JOIN FINSL AGENT ON AUD2_FINOPDOC.AGCODE = AGENT.SLCODE
LEFT JOIN ADMSITE REF_SITE ON AUD2_FINOPDOC.REF_ADMSITE_CODE = REF_SITE.CODE
INNER JOIN ADMOU OU ON AUD2_FINOPDOC.ADMOU_CODE = OU.CODE
LEFT JOIN FINGL GENERAL_LEDGER ON AUD2_FINOPDOC.GLCODE = GENERAL_LEDGER.GLCODE
LEFT JOIN FINSL SUB_LEDGER ON AUD2_FINOPDOC.SLCODE = SUB_LEDGER.SLCODE
LEFT JOIN HRDEMP ON AUD2_FINOPDOC.ECODE = HRDEMP.ECODE
LEFT JOIN HRDEMP HRDEMP1 ON AUD2_FINOPDOC.LAST_ACCESS_ECODE = HRDEMP1.ECODE', 'SLCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'ENTCODE');
INSERT INTO main.aud2_table VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'Header', 1, 'PurchaseServiceDNHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvjrnmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.JRNCODE                SRV_DEBIT_NOTE_CODE,
          AUD.JRNCODE                MODULE_KEY,
          JRN.SCHEME_DOCNO           MODULE_KEY_DISPLAY,
          AUD.JRNDT                  SRV_DEBIT_NOTE_DATE,
          DOC.DOCNAME                DOCSCHEME_NAME,
          AUD.SCHEME_DOCNO           DOCSCHEME_NO,
          AUD.GSTAPPL                GST_APPLICABILITY,
          AUD.DOCNO                  DOCUMENT_NUMBER,
          AUD.DOCDT                  DOCUMENT_DATE,
          S1.NAME                    TRANSACTION_SITE_NAME,
          S2.NAME                    REFERENCE_SITE_NAME,
          OU.NAME                    OU_NAME,
          SL.SLNAME                  VENDOR_NAME,
          AUD.JRNTYPE                SRV_NOTE_TYPE,
          SRV.SRVCODE                SRV_MAIN_CODE_NO,
          AUD.OWNER_GSTIN_NO         TRANSACTION_GSTIN,
          AUD.OWNER_GSTIN_STATE_CODE TRANSACTION_GST_STATECODE,
          AUD.CP_GSTIN_NO            CP_GSTIN,
          AUD.CP_GSTIN_STATE_CODE    CP_GST_STATECODE,
          REA.REASON                 REASON_NAME,
          AUD.REMARKS                REMARKS,
          TERM.NAME                  TERM_NAME,
          T.NAME                     TRADEGROUP_NAME,
          FF.FORMNAME                FORM_NAME,
          AUD.GRSAMT                 GROSS_AMOUNT,
          AUD.CHGAMT                 CHARGE_AMOUNT,
          AUD.NETAMT                 NET_AMOUNT,
          H1.FNAME                   CREATEDBY_USER,
          AUD.ECODE                  CREATEDBY_USERCODE,
          CASE
             WHEN AUD.RELEASE_STATUS = ''U'' THEN ''Unposted''
             WHEN AUD.RELEASE_STATUS = ''P'' THEN ''Posted''
          END
             RELEASE_STATUS,
          AUD.RELEASE_ECODE          RELEASED_USERCODE,
          H2.FNAME                   RELEASED_USER,
          AUD.LAST_MODIFIED_BY       LASTMODIFIEDBY_USERCODE,
          H3.FNAME                   LASTMODIFIEDBY_USER,
          AUD.UDFSTRING01            UDFSTRING01,
          AUD.UDFSTRING02            UDFSTRING02,
          AUD.UDFSTRING03            UDFSTRING03,
          AUD.UDFSTRING04            UDFSTRING04,
          AUD.UDFSTRING05            UDFSTRING05,
          AUD.UDFSTRING06            UDFSTRING06,
          AUD.UDFSTRING07            UDFSTRING07,
          AUD.UDFSTRING08            UDFSTRING08,
          AUD.UDFSTRING09            UDFSTRING09,
          AUD.UDFSTRING10            UDFSTRING10,
          AUD.UDFNUM01               UDFNUM01,
          AUD.UDFNUM02               UDFNUM02,
          AUD.UDFNUM03               UDFNUM03,
          AUD.UDFNUM04               UDFNUM04,
          AUD.UDFNUM05               UDFNUM05,
          AUD.UDFDATE01              UDFDATE01,
          AUD.UDFDATE02              UDFDATE02,
          AUD.UDFDATE03              UDFDATE03,
          AUD.UDFDATE04              UDFDATE04,
          AUD.UDFDATE05              UDFDATE05,
          AUD.ENTRY_SOURCE           ENTRY_SOURCE
     FROM aud2_pursrvjrnmain aud INNER JOIN (SELECT A.*, RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
									         FROM AUD2_TRANSACTION A 
											 WHERE MODULE_SHORTCODE = ''Purchase Service Debit Note'') trans_det 
								 ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN fintradegrp t ON AUD.FINTRADEGRP_CODE = T.CODE
INNER JOIN pursrvmain srv ON AUD.PURSRVMAIN_CODE = SRV.SRVCODE
INNER JOIN finsl sl ON AUD.PCODE = SL.SLCODE
INNER JOIN admsite s2 ON AUD.REF_ADMSITE_CODE = S2.CODE
INNER JOIN admsite s1 ON AUD.ADMSITE_CODE_OWNER = S1.CODE
INNER JOIN hrdemp h1 ON AUD.ECODE = H1.ECODE
INNER JOIN admdocscheme doc ON AUD.DOCCODE = DOC.DOCCODE
LEFT OUTER JOIN pursrvjrnmain jrn ON (AUD.JRNCODE = JRN.JRNCODE)
LEFT OUTER JOIN admou ou ON (AUD.ADMOU_CODE = OU.CODE)
LEFT OUTER JOIN admgstjrnreason rea ON (AUD.ADMGSTJRNREASON_CODE = REA.CODE)
LEFT OUTER JOIN purtermmain term ON (AUD.PURTERMCODE = TERM.CODE)
LEFT OUTER JOIN finform ff ON (AUD.FORMCODE = FF.FORMCODE)
LEFT OUTER JOIN hrdemp h2 ON (AUD.RELEASE_ECODE = H2.ECODE)
LEFT OUTER JOIN hrdemp h3 ON (AUD.LAST_MODIFIED_BY = H3.ECODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'JRNCODE');
INSERT INTO main.aud2_table VALUES ('AuditPlan', 'INVSTKPLANMAIN', 'Header', 1, 'AuditPlanHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invstkplanmain 
AS 
SELECT TRANS_DET.VERSION_SEQ                 AS VERSION_SEQ,
          AUD2_INVSTKPLANMAIN.ACTION,
          TRANS_DET.LOGIN_USER                  AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID              AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE            AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE            AS MODULE_KEY,
          AUD2_INVSTKPLANMAIN.DESCRIP           AS MODULE_KEY_DISPLAY,
          AUD2_INVSTKPLANMAIN.STKPLANCODE       AS AUDIT_PLAN_CODE,
          CASE AUD2_INVSTKPLANMAIN.ENTRYTYPE
             WHEN ''I'' THEN ''ITEMWISE''
             WHEN ''G'' THEN ''ASSORTMENTWISE''
             ELSE '' ''
          END
             AS ENTRY_TYPE,
          AUD2_INVSTKPLANMAIN.DESCRIP           AS PLAN_NAME,
          AUD2_INVSTKPLANMAIN.STARTDT           AS ACTIVATION_DATE,
          CASE AUD2_INVSTKPLANMAIN.STATUS
             WHEN ''N'' THEN ''NEW''
             WHEN ''A'' THEN ''ACTIVE''
             WHEN ''V'' THEN ''LOCK/VERIFY''
             WHEN ''U'' THEN ''UPDATE''
             WHEN ''C'' THEN ''COMPLETE''
             ELSE '' ''
          END
             AS STATUS,
          AUD2_INVSTKPLANMAIN.LOCCODE           AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                        AS STOCK_POINT_NAME,
          AUD2_INVSTKPLANMAIN.ACTUAL_STARTDT    AS AUDIT_START_DATE,
          AUD2_INVSTKPLANMAIN.ACTUAL_ENDDT      AS AUDIT_END_DATE,
          AUD2_INVSTKPLANMAIN.REMARKS           AS REMARKS,
          AUD2_INVSTKPLANMAIN.ADMOU_CODE        AS OU_CODE,
          ADMOU.NAME                            AS OU_NAME,
          AUD2_INVSTKPLANMAIN.ADMSITE_CODE      AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                          AS TRANSACTION_SITE_NAME,
          AUD2_INVSTKPLANMAIN.ECODE             AS CREATED_USER_CODE,
          HRDEMP.FNAME                          AS CREATED_USER_NAME,
          AUD2_INVSTKPLANMAIN.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                         AS LAST_MODIFIED_USER_NAME
FROM AUD2_INVSTKPLANMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''AuditPlan'') TRANS_DET
             ON (AUD2_INVSTKPLANMAIN.STKPLANCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVSTKPLANMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVLOC INVLOC ON AUD2_INVSTKPLANMAIN.LOCCODE = INVLOC.LOCCODE
INNER JOIN ADMOU ADMOU ON AUD2_INVSTKPLANMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_INVSTKPLANMAIN.ADMSITE_CODE = ADMSITE.CODE
INNER JOIN HRDEMP ON AUD2_INVSTKPLANMAIN.ECODE = HRDEMP.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP1 ON AUD2_INVSTKPLANMAIN.LAST_ACCESS_ECODE = HRDEMP1.ECODE', 'STKPLANCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'STKPLANCODE');
INSERT INTO main.aud2_table VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'Header', 1, 'SalesDNCNHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salinvjrnmain 
AS
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.JRNCODE                MODULE_KEY,
          SALM.SCHEME_DOCNO          MODULE_KEY_DISPLAY,
          AUD.JRNCODE                DEBIT_CREDIT_NOTE_CODE,
          AUD.JRNDT                  DEBIT_CREDIT_NOTE_DATE,
          DOC.DOCNAME                DOCSCHEME_NAME,
          AUD.DOCCODE                DOCSCHEME_CODE,
          AUD.SCHEME_DOCNO           DOCSCHEME_NO,
          AUD.GSTAPPL                GST_APPLICABILITY,
          AUD.DOCNO                  DOCUMENT_NUMBER,
          AUD.DOCDT                  DOCUMENT_DATE,
          S1.CODE                    CASHBANK_SITE_CODE,
          S1.NAME                    TRANSACTION_SITE_NAME,
          OU.CODE                    OU_CODE,
          OU.NAME                    OU_NAME,
          S2.CODE                    SITE_CODE,
          S2.NAME                    DESTINATION_SITE_NAME,
          SL1.SLCODE                 VENDOR_CODE,
          SL1.SLNAME                 VENDOR_NAME,
          GL1.GLCODE                 DEBTOR_LEDGER_CODE,
          GL1.GLNAME                 DEBTOR_LEDGER_NAME,
          CASE
             WHEN AUD.JRNTYPE = ''C'' THEN ''CREDIT NOTE''
             WHEN AUD.JRNTYPE = ''D'' THEN ''DEBIT NOTE''
          END
             SALES_NOTE_TYPE,
          INV.INVCODE                SAL_INV_CODE,
          INV.SCHEME_DOCNO           SALE_INVOICE_NO,
          AUD.OWNER_GSTIN_NO         TRANSACTION_GSTIN,
          AUD.OWNER_GSTIN_STATE_CODE TRANSACTION_GST_STATECODE,
          AUD.CP_GSTIN_NO            FIN_GST_REG_NUMBER,
          AUD.CP_GSTIN_STATE_CODE    FIN_GST_STATE_CODE,
          GL2.GLCODE                 LEDGER_CODE,
          GL2.GLNAME                 LEDGER_NAME,
          SL2.SLCODE                 SUB_LEDGER_CODE,
          SL2.SLNAME                 SUB_LEDGER_NAME,
          R.CODE                     REASON_CODE,
          R.REASON                   REASON_NAME,
          AUD.REMARKS                REMARKS,
          TERM.SALTERMCODE           TERM_CODE,
          TERM.SALTERMNAME           TERM_NAME,
          F.CODE                     TRADE_GROUP_CODE,
          F.NAME                     SAL_TRADE_GROUP_NAME,
          FF.FORMCODE,
          FF.FORMNAME,
          AUD.GRSAMT                 GROSS_AMOUNT,
          AUD.CHGAMT                 CHARGE_AMOUNT,
          AUD.NETAMT                 NET_AMOUNT,
          H1.ECODE                   CREATEDBY_USERCODE,
          H1.FNAME                   CREATEDBY_USER,
          CASE
             WHEN AUD.RELEASE_STATUS = ''U'' THEN ''Unposted''
             WHEN AUD.RELEASE_STATUS = ''P'' THEN ''Posted''
          END
             RELEASE_STATUS,
          H2.ECODE                   RELEASED_USERCODE,
          H2.FNAME                   RELEASED_USER,
          H3.ECODE                   LASTMODIFIEDBY_USERCODE,
          H3.FNAME                   LASTMODIFIEDBY_USER,
          AUD.UDFSTRING01            UDFSTRING01,
          AUD.UDFSTRING02            UDFSTRING02,
          AUD.UDFSTRING03            UDFSTRING03,
          AUD.UDFSTRING04            UDFSTRING04,
          AUD.UDFSTRING05            UDFSTRING05,
          AUD.UDFSTRING06            UDFSTRING06,
          AUD.UDFSTRING07            UDFSTRING07,
          AUD.UDFSTRING08            UDFSTRING08,
          AUD.UDFSTRING09            UDFSTRING09,
          AUD.UDFSTRING10            UDFSTRING10,
          AUD.UDFNUM01               UDFNUM01,
          AUD.UDFNUM02               UDFNUM02,
          AUD.UDFNUM03               UDFNUM03,
          AUD.UDFNUM04               UDFNUM04,
          AUD.UDFNUM05               UDFNUM05,
          AUD.UDFDATE01              UDFDATE01,
          AUD.UDFDATE02              UDFDATE02,
          AUD.UDFDATE03              UDFDATE03,
          AUD.UDFDATE04              UDFDATE04,
          AUD.UDFDATE05              UDFDATE05,
          AUD.ENTRY_SOURCE           ENTRY_SOURCE
     FROM aud2_salinvjrnmain aud INNER JOIN (SELECT A.*,
											RANK()
											OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
												ORDER BY TRANSACTION_DATE)
											 VERSION_SEQ
											FROM AUD2_TRANSACTION A
											WHERE MODULE_SHORTCODE = ''Sales DN/CN'') trans_det				
								 ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
								     AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finsl sl1 ON AUD.PCODE = SL1.SLCODE
INNER JOIN admsite s2 ON AUD.ADMSITE_CODE = S2.CODE 
INNER JOIN admsite s1 ON AUD.ADMSITE_CODE_OWNER = S1.CODE  
INNER JOIN admgstjrnreason r ON AUD.ADMGSTJRNREASON_CODE = R.CODE
INNER JOIN admou ou ON AUD.ADMOU_CODE = OU.CODE
INNER JOIN salinvmain inv ON AUD.SALINVMAIN_CODE = INV.INVCODE
INNER JOIN hrdemp h1 ON AUD.ECODE = H1.ECODE  
INNER JOIN fingl gl2 ON AUD.JRNGLCODE = GL2.GLCODE
INNER JOIN fingl gl1 ON AUD.PGLCODE = GL1.GLCODE   
INNER JOIN finform ff ON AUD.FORMCODE = FF.FORMCODE
INNER JOIN fintradegrp f ON AUD.SALTRADEGRP_CODE = F.CODE  
INNER JOIN admdocscheme doc ON AUD.DOCCODE = DOC.DOCCODE
LEFT OUTER JOIN salinvjrnmain salm ON (AUD.JRNCODE = SALM.JRNCODE)
LEFT OUTER JOIN finsl sl2 ON (AUD.JRNSLCODE = SL2.SLCODE)
LEFT OUTER JOIN saltermmain term ON (AUD.SALTERMCODE = TERM.SALTERMCODE)
LEFT OUTER JOIN hrdemp h2 ON (AUD.RELEASE_ECODE = H2.ECODE)
LEFT OUTER JOIN hrdemp h3 ON (AUD.LAST_MODIFIED_BY = H3.ECODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'JRNCODE');
INSERT INTO main.aud2_table VALUES ('TaxRegion', 'ADMCMPTAX', 'Tax Region Name', 1, 'TaxRegionName', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_admcmptax 
AS 
SELECT    TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          AUD2_ADMCMPTAX.ACTION,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID            AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_ADMCMPTAX.NAME                 AS MODULE_KEY_DISPLAY,
          AUD2_ADMCMPTAX.CODE                 AS TAX_REGION_CODE,
          AUD2_ADMCMPTAX.NAME                 AS TAX_REGION_NAME,
          AUD2_ADMCMPTAX.EXT                  AS EXTINCT,
          AUD2_ADMCMPTAX.TAXREVERSALDAYS      AS REVERSAL_DAYS_SALES,
          AUD2_ADMCMPTAX.TAXREVERSALDAYS_PROC AS REVERSAL_DAYS_PROCUREMENT,
          AUD2_ADMCMPTAX.ECODE                AS CREATED_USER_CODE,
          AUD2_ADMCMPTAX.LAST_ACCESS_ECODE    LAST_MODIFIED_USER_CODE,
          HRDEMP.FNAME                        CREATED_USER_NAME,
          HRDEMP1.FNAME                       LAST_MODIFIED_USER_NAME
     FROM AUD2_ADMCMPTAX
          INNER JOIN(SELECT A.*,
					RANK()
					OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                          ORDER BY TRANSACTION_DATE) VERSION_SEQ
					FROM AUD2_TRANSACTION A
					WHERE MODULE_SHORTCODE = ''TaxRegion'') TRANS_DET
          ON (AUD2_ADMCMPTAX.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE AND AUD2_ADMCMPTAX.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN HRDEMP ON AUD2_ADMCMPTAX.ECODE = HRDEMP.ECODE
LEFT JOIN HRDEMP HRDEMP1 ON AUD2_ADMCMPTAX.LAST_ACCESS_ECODE = HRDEMP1.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('SubLedgerOpeningBalance', 'FINSLOP', 'Subledger Opening', 1, 'FinanceSubledgerOpeningDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finslop 
AS 
SELECT    TRANS_DET.VERSION_SEQ      AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER       AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID   AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE AS MODULE_KEY,
          SUBLEDGER.SLNAME           AS MODULE_KEY_DISPLAY,
          AUD2_FINSLOP.ACTION,
          AUD2_FINSLOP.SLCODE        AS SUBLEDGER_CODE,
          SUBLEDGER.SLNAME           AS SUBLEDGER_NAME,
          AUD2_FINSLOP.GLCODE        AS LEDGER_CODE,
          LEDGER.GLNAME              AS LEDGER_NAME,
          AUD2_FINSLOP.OPDAMT        AS OP_DEBIT_AMOUNT,
          AUD2_FINSLOP.OPCAMT        AS OP_CREDIT_AMOUNT,
          AUD2_FINSLOP.YCODE         AS YCODE,
          YEAR.YNAME                 AS FINANCIAL_YEAR,
          AUD2_FINSLOP.CODE          AS CODE,
          AUD2_FINSLOP.GL_CC_APPL    AS GL_SITE_APPL,
          AUD2_FINSLOP.ADMOU_CODE    AS OU_CODE,
          OU.NAME                    AS OU_NAME
     FROM AUD2_FINSLOP
          INNER JOIN(SELECT A.*,
					RANK()
					OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
					FROM AUD2_TRANSACTION A
					WHERE MODULE_SHORTCODE = ''SubLedgerOpeningBalance'') TRANS_DET
          ON (AUD2_FINSLOP.SLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
		      AND AUD2_FINSLOP.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN FINSL SUBLEDGER ON AUD2_FINSLOP.SLCODE = SUBLEDGER.SLCODE
LEFT JOIN FINGL LEDGER ON AUD2_FINSLOP.GLCODE = LEDGER.GLCODE
INNER JOIN ADMYEAR YEAR ON AUD2_FINSLOP.YCODE = YEAR.YCODE
INNER JOIN ADMOU OU ON AUD2_FINSLOP.ADMOU_CODE = OU.CODE', 'SLCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 1, 'SLCODE#GLCODE#YCODE#ADMOU_CODE');
INSERT INTO main.aud2_table VALUES ('SalePriceList', 'SALPRICELISTDET', 'Detail', 1, 'PriceListExceptions', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salpricelistdet AS SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          AUD.TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE,
          AUD.PRICELISTCODE        PRICE_LIST_CODE,
          AUD.PRICELISTCODE        MODULE_KEY,
          AUD.CODE                 PRICE_LIST_DETAIL_CODE,
          S.PRICELISTNAME          PRICE_LIST_NAME,
          S.PRICELISTNAME          MODULE_KEY_DISPLAY,
          AUD.ICODE                ICODE,
          I.BARCODE                BARCODE,
          AUD.DTFR                 APPLICABLE_DATE_FROM,
          AUD.DTTO                 APPLICABLE_DATE_TO,
          CASE AUD.EXCEPTION_BASIS
             WHEN ''F'' THEN ''Fixed Price''
             WHEN ''P'' THEN ''As per Master Config''
          END
             EXCEPTION_BASIS,
          AUD.DISCOUNT_FACTOR      EXCEPTION_FACTOR_OR_PRICE,
          AUD.DIVISION_GRPCODE     DIVISION_CODE,
          G1.GRPNAME               DIVISION_NAME,
          AUD.SECTION_GRPCODE      SECTION_CODE,
          G2.GRPNAME               SECTION_NAME,
          AUD.DEPT_GRPCODE         DEPARTMENT_CODE,
          G3.GRPNAME               DEPARTMENT_NAME,
          AUD.INVARTICLE_CODE      ARTICLE_CODE,
          A.NAME                   ARTICLE_NAME,
          AUD.CCODE1               CATEGORY1_CODE,
          C1.CNAME                 CATEGORY1_NAME,
          AUD.CCODE2               CATEGORY2_CODE,
          C2.CNAME                 CATEGORY2_NAME,
          AUD.CCODE3               CATEGORY3_CODE,
          C3.CNAME                 CATEGORY3_NAME,
          AUD.CCODE4               CATEGORY4_CODE,
          C4.CNAME                 CATEGORY4_NAME,
          AUD.CCODE5               CATEGORY5_CODE,
          C5.CNAME                 CATEGORY5_NAME,
          AUD.CCODE6               CATEGORY6_CODE,
          C6.CNAME                 CATEGORY6_NAME,
          AUD.PRICEFR              PRICE_FROM,
          AUD.PRICETO              PRICE_TO,
          AUD.PRIORITY             PRIORITY,
          AUD.BATCH_EXP_DATE_FR    BATCH_EXP_DATE_FROM,
          AUD.BATCH_EXP_DATE_TO    BATCH_EXP_DATE_TO,
          AUD.INVBATCH_SERIAL_CODE BATCH_SERIAL_CODE
     FROM aud2_salpricelistdet aud INNER JOIN (SELECT A.*,
											   RANK()
											   OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
											   ORDER BY TRANSACTION_DATE)
											   VERSION_SEQ
												FROM AUD2_TRANSACTION A
											   WHERE MODULE_SHORTCODE = ''SalePriceList'') trans_det 
								   ON ((AUD.PRICELISTCODE::TEXT) = TRANS_DET.HEADER_KEY_VALUE 
								        AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN salpricelistmain s ON (AUD.PRICELISTCODE = S.PRICELISTCODE)
LEFT OUTER JOIN invitem i ON (AUD.ICODE = I.ICODE)
LEFT OUTER JOIN invgrp g1 ON (AUD.DIVISION_GRPCODE = G1.GRPCODE)
LEFT OUTER JOIN invgrp g2 ON (AUD.SECTION_GRPCODE = G2.GRPCODE)
LEFT OUTER JOIN invgrp g3 ON (AUD.DEPT_GRPCODE = G3.GRPCODE)
LEFT OUTER JOIN invarticle a ON (AUD.INVARTICLE_CODE = A.CODE)
LEFT OUTER JOIN invcat1 c1 ON (AUD.CCODE1 = C1.CCODE)
LEFT OUTER JOIN invcat2 c2 ON (AUD.CCODE2 = C2.CCODE)
LEFT OUTER JOIN invcat3 c3 ON (AUD.CCODE3 = C3.CCODE)
LEFT OUTER JOIN invcat4 c4 ON (AUD.CCODE4 = C4.CCODE)
LEFT OUTER JOIN invcat5 c5 ON (AUD.CCODE5 = C5.CCODE)
LEFT OUTER JOIN invcat6 c6 ON (AUD.CCODE6 = C6.CCODE)', 'PRICELISTCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 2, 'PRICELISTCODE#COALESCE(ICODE,''XX'')#COALESCE(EFFDT,''2000-01-01'')#COALESCE(PRICE,0)#COALESCE(CMPCODE,0)#COALESCE(DIVISION_GRPCODE,0)#COALESCE(SECTION_GRPCODE,0)#COALESCE(DEPT_GRPCODE,0)#COALESCE(INVARTICLE_CODE,0)#COALESCE(CCODE1,0)#COALESCE(CCODE2,0)#COALESCE(CCODE3,0)#COALESCE(CCODE4,0)#COALESCE(CCODE5,0)#COALESCE(CCODE6,0)#COALESCE(DTFR,''2000-01-01'')#COALESCE(DTTO,''2000-01-01'')#COALESCE(PRICEFR,0)#COALESCE(PRICETO,0)#COALESCE(INVBATCH_SERIAL_CODE,0)#COALESCE(BATCH_EXP_DATE_FR,''2000-01-01'')#COALESCE(BATCH_EXP_DATE_TO,''2000-01-01'')');
INSERT INTO main.aud2_table VALUES ('Purchase Return', 'PURRTDET', 'Detail', 1, 'PurchaseReturnDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purrtdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE,
          AUD.RTCODE             RETURN_CODE,
          AUD.RTCODE             MODULE_KEY,
          AUD.ICODE              ICODE,
          I.BARCODE              ITEM_BARCODE,
          AUD.QTY                QUANTITY,
          AUD.RATE               STANDARD_COST,
          AUD.GRSAMT             GROSS_AMOUNT,
          AUD.NETAMT             NET_AMOUNT,
          AUD.REM                REMARKS,
          AUD.GRTCODE            GOODS_RETURN_CODE,
          G.GRTCODE              GRT_CODE,
          AUD.DISCOUNT           DISCOUNT_AMT,
          AUD.TAXAMT             TAX_AMOUNT,
          AUD.CODE               ROLE_MENU_ASSIGNMENT_CODE,
          AUD.INVGRTDET_CODE     INV_GRT_DET_CODE,
          GD.CODE                INV_GRT_DET_NO,
          AUD.EXCISEMAIN_CODE    EXCISE_TARIFF_CODE,
          E.TARIFFNO             EXCISE_TARIFF_NO,
          AUD.EX_BASIS           EXCISE_BASIS,
          AUD.EX_EFFRATE         EXCISE_EFFRATE,
          AUD.EX_ABTFACTOR       EXCISE_ABTFACTOR,
          AUD.EX_DUTYFACTOR      EXCISE_DUTYFACTOR,
          AUD.EX_CESSFACTOR      EXCISE_CESSFACTOR,
          AUD.EX_ROUNDOFF        EXCISE_ROUNDOFF,
          AUD.EX_APPAMT          EXCISE_APPAMT,
          AUD.EX_DUTYAMT         EXCISE_DUTYAMT,
          AUD.EX_CESSAMT         EXCISE_CESSAMT,
          AUD.EX_APPLICABLE_FROM EXCISE_APPLICABLE_FROM,
          AUD.HSN_SAC_CODE       HSN_SAC_CODE,
          AUD.GST_ITC_APPL       ITC_ELIGIBILITY,
          AUD.GLCODE             LEDGER_CODE,
          GL.GLNAME              LEDGER_NAME,
          AUD.SLCODE             SUBLEDGER_CODE,
          SL.SLNAME              SUBLEDGER_NAME,
          AUD.GL_CC_APPL         GL_SITE_APPL
     FROM aud2_purrtdet aud INNER JOIN(SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										ORDER BY TRANSACTION_DATE)
										VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''Purchase Return'') trans_det 
							ON (AUD.RTCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN invitem i ON AUD.ICODE = I.ICODE
LEFT OUTER JOIN invgrtmain g ON (AUD.GRTCODE = G.GRTCODE)
LEFT OUTER JOIN invgrtdet gd ON (AUD.INVGRTDET_CODE = GD.CODE)
LEFT OUTER JOIN excisemain e ON (AUD.EXCISEMAIN_CODE = E.CODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'RTCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('TDSSource', 'FINTDSSRC', 'Tds Source Name', 1, 'TDSSourceName', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fintdssrc 
AS 
SELECT    TRANS_DET.VERSION_SEQ           AS VERSION_SEQ,
          AUD2_FINTDSSRC.ACTION,
          TRANS_DET.LOGIN_USER            AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID        AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE      AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE      AS MODULE_KEY,
          AUD2_FINTDSSRC.TDSSRCNAME       AS MODULE_KEY_DISPLAY,
          AUD2_FINTDSSRC.TDSSRCCODE       AS TDS_SOURCE_CODE,
          AUD2_FINTDSSRC.TDSSRCNAME       AS TDS_SOURCE_NAME,
          CASE AUD2_FINTDSSRC.SRCTYPE
             WHEN ''C'' THEN ''Corporate''
             WHEN ''N'' THEN ''NON-Corporate''
             ELSE '' ''
          END
             AS NATURE,
          AUD2_FINTDSSRC.CREATED_BY       CREATED_USER_CODE,
          HRDEMP.FNAME                    CREATED_USER_NAME,
          AUD2_FINTDSSRC.LAST_MODIFIED_BY LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                   LAST_MODIFIED_USER_NAME
     FROM AUD2_FINTDSSRC
          INNER JOIN(SELECT A.*,
					RANK()
					OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
					FROM AUD2_TRANSACTION A
					WHERE MODULE_SHORTCODE = ''TDSSource'') TRANS_DET
          ON (AUD2_FINTDSSRC.TDSSRCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE AND AUD2_FINTDSSRC.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN HRDEMP ON AUD2_FINTDSSRC.CREATED_BY = HRDEMP.ECODE
LEFT JOIN HRDEMP HRDEMP1 ON AUD2_FINTDSSRC.LAST_MODIFIED_BY = HRDEMP1.ECODE', 'TDSSRCCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'TDSSRCCODE');
INSERT INTO main.aud2_table VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'Header', 1, 'PurchaseDNCNHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purinvjrnmain 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.JRNCODE                MODULE_KEY,
          JRN.SCHEME_DOCNO           MODULE_KEY_DISPLAY,
          AUD.JRNCODE                DEBIT_CREDIT_NOTE_CODE,
          AUD.JRNDT                  DEBIT_CREDIT_NOTE_DATE,
          AUD.DOCCODE                DOCSCHEME_CODE,
          DOC.DOCNAME                DOCSCHEME_NAME,
          AUD.SCHEME_DOCNO           DOCSCHEME_NO,
          AUD.GSTAPPL                GST_APPLICABILITY,
          AUD.DOCNO                  DOCUMENT_NUMBER,
          AUD.DOCDT                  DOCUMENT_DATE,
          AUD.ADMSITE_CODE_OWNER     OWNER_SITE_CODE,
          S1.NAME                    TRANSACTION_SITE_NAME,
          AUD.REF_ADMSITE_CODE       REFERENCE_SITE_CODE,
          S2.NAME                    REFERENCE_SITE_NAME,
          AUD.ADMOU_CODE             OU_CODE,
          OU.NAME                    OU_NAME,
          AUD.PCODE                  VENDOR_CODE,
          SL1.SLNAME                 VENDOR_NAME,
          AUD.PGLCODE                VENDOR_LEDGER_CODE,
          GL1.GLNAME                 VENDOR_LEDGER_NAME,
          CASE
             WHEN AUD.JRNTYPE = ''C'' THEN ''CREDIT NOTE''
             WHEN AUD.JRNTYPE = ''D'' THEN ''DEBIT NOTE''
          END
             NOTE_TYPE,
          AUD.PURINVMAIN_CODE        INV_MAIN_CODE,
          INV.INVCODE                PUR_INV_MAIN_CODE,
          AUD.OWNER_GSTIN_NO         TRANSACTION_GSTIN,
          AUD.OWNER_GSTIN_STATE_CODE TRANSACTION_GST_STATECODE,
          AUD.CP_GSTIN_NO            CP_GSTIN,
          AUD.CP_GSTIN_STATE_CODE    CP_GST_STATECODE,
          AUD.JRNGLCODE              PURCHASE_LEDGER_CODE,
          GL2.GLNAME                 PURCHASE_LEDGER_NAME,
          AUD.JRNSLCODE              PURCHASE_SUB_LEDGER_CODE,
          SL2.SLNAME                 PURCHASE_SUB_LEDGER_NAME,
          AUD.ADMGSTJRNREASON_CODE   REASON_CODE,
          R.REASON                   REASON_NAME,
          AUD.REMARKS                REMARKS,
          AUD.PURTERMCODE            TERM_CODE,
          TERM.NAME                  TERM_NAME,
          AUD.FINTRADEGRP_CODE       TRADEGROUP_CODE,
          T.NAME                     TRADEGROUP_NAME,
          AUD.FORMCODE               FORM_CODE,
          F.FORMNAME                 FORM_NAME,
          AUD.GRSAMT                 BASIC_VALUE,
          AUD.CHGAMT                 CHARGE_AMOUNT,
          AUD.NETAMT                 NET_AMOUNT,
          AUD.ECODE                  CREATEDBY_USERCODE,
          H1.FNAME                   CREATEDBY_USER,
          AUD.TIME                   CREATEDON,
          CASE
             WHEN AUD.RELEASE_STATUS = ''U'' THEN ''Unposted''
             WHEN AUD.RELEASE_STATUS = ''P'' THEN ''Posted''
          END
             STATUS,
          AUD.RELEASE_ECODE          RELEASED_USERCODE,
          H2.FNAME                   RELEASED_USER,
          H3.FNAME                   LASTMODIFIEDBY_USER,
          AUD.LAST_MODIFIED_BY       LASTMODIFIEDBY_USERCODE,
          AUD.LAST_MODIFIED_ON       MODIFIEDON,
          AUD.UDFSTRING01            UDFSTRING01,
          AUD.UDFSTRING02            UDFSTRING02,
          AUD.UDFSTRING03            UDFSTRING03,
          AUD.UDFSTRING04            UDFSTRING04,
          AUD.UDFSTRING05            UDFSTRING05,
          AUD.UDFSTRING06            UDFSTRING06,
          AUD.UDFSTRING07            UDFSTRING07,
          AUD.UDFSTRING08            UDFSTRING08,
          AUD.UDFSTRING09            UDFSTRING09,
          AUD.UDFSTRING10            UDFSTRING10,
          AUD.UDFNUM01               UDFNUM01,
          AUD.UDFNUM02               UDFNUM02,
          AUD.UDFNUM03               UDFNUM03,
          AUD.UDFNUM04               UDFNUM04,
          AUD.UDFNUM05               UDFNUM05,
          AUD.UDFDATE01              UDFDATE01,
          AUD.UDFDATE02              UDFDATE02,
          AUD.UDFDATE03              UDFDATE03,
          AUD.UDFDATE04              UDFDATE04,
          AUD.UDFDATE05              UDFDATE05
FROM aud2_purinvjrnmain aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Purchase DN/CN'') trans_det
			ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN admdocscheme doc ON AUD.DOCCODE = DOC.DOCCODE
INNER JOIN admsite s1 ON AUD.ADMSITE_CODE_OWNER = S1.CODE   
INNER JOIN admsite s2 ON AUD.REF_ADMSITE_CODE = S2.CODE 
INNER JOIN admou ou ON AUD.ADMOU_CODE = OU.CODE 
INNER JOIN finsl sl1 ON AUD.PCODE = SL1.SLCODE 
INNER JOIN fingl gl1 ON AUD.PGLCODE = GL1.GLCODE  
INNER JOIN purinvmain inv ON AUD.PURINVMAIN_CODE = INV.INVCODE  
INNER JOIN fingl gl2 ON AUD.JRNGLCODE = GL2.GLCODE  
INNER JOIN admgstjrnreason r ON AUD.ADMGSTJRNREASON_CODE = R.CODE  
INNER JOIN fintradegrp t ON AUD.FINTRADEGRP_CODE = T.CODE  
INNER JOIN finform f ON AUD.FORMCODE = F.FORMCODE  
INNER JOIN hrdemp h1 ON AUD.ECODE = H1.ECODE  
LEFT OUTER JOIN purinvjrnmain jrn ON (AUD.JRNCODE = JRN.JRNCODE)
LEFT OUTER JOIN finsl sl2 ON (AUD.JRNSLCODE = SL2.SLCODE)
LEFT OUTER JOIN purtermmain term ON (AUD.PURTERMCODE = TERM.CODE)
LEFT OUTER JOIN hrdemp h2 ON (AUD.RELEASE_ECODE = H2.ECODE)
LEFT OUTER JOIN hrdemp h3 ON (AUD.LAST_MODIFIED_BY = H3.ECODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'JRNCODE');
INSERT INTO main.aud2_table VALUES ('POSGRC', 'PSITE_GRC', 'Header', 1, 'POSGRCHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_psite_grc 
AS 
SELECT TRANS_DET.VERSION_SEQ                    AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                     AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                 AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE               AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE               AS MODULE_KEY,
          AUD2_PSITE_GRC.DOCNO                     AS MODULE_KEY_DISPLAY,
          AUD2_PSITE_GRC.ACTION,
          AUD2_PSITE_GRC.CODE                      AS RETAIL_GRC_CODE,
          AUD2_PSITE_GRC.SLCODE                    AS CUSTOMER_SUB_LEDGER_CODE,
          FINSL.SLNAME                             AS CUSTOMER_NAME,
          AUD2_PSITE_GRC.ADMSITE_CODE              AS OWNER_SITE_CODE,
          ADMSITE.NAME                             AS OWNER_SITE_NAME,
          AUD2_PSITE_GRC.ADMOU_CODE                AS OU_CODE,
          ADMOU.NAME                               AS OU_NAME,
          AUD2_PSITE_GRC.DOCNO                     AS GRC_NUMBER,
          AUD2_PSITE_GRC.DOCDT                     AS GRC_DATE,
          AUD2_PSITE_GRC.INVCODE                   AS INVOICE_CODE,
          SALINVMAIN.SCHEME_DOCNO                  AS INVOICE_NUMBER,
          AUD2_PSITE_GRC.PSITE_TRANSIT_LOCCODE     AS TRANSIT_STOCK_POINT_CODE,
          TRANSIT_STOCK_POINT.LOCNAME              AS TRANSIT_STOCK_POINT_NAME,
          AUD2_PSITE_GRC.STORE_LOCCODE             AS STORE_LOCATION_CODE,
          STORE_LOCATION.LOCNAME                   AS STORE_LOCATION_NAME,
          AUD2_PSITE_GRC.REMARKS                   AS REMARKS,
          AUD2_PSITE_GRC.RECEIVEAMT                AS RECEIVE_AMOUNT,
          AUD2_PSITE_GRC.DAMAGEAMT                 AS DAMAGE_AMOUNT,
          AUD2_PSITE_GRC.SHORTEXCESSAMT            AS SHORT_EXCESS_AMOUNT,
          CASE AUD2_PSITE_GRC.ISSECONDARY
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS IS_OWNER_SITE_SECONDARY,
          AUD2_PSITE_GRC.DOC                       AS DOCUMENT_DATE,
          AUD2_PSITE_GRC.TRANSFERIN_GLCODE         AS TRANSFER_IN_LEDGER_CODE,
          TRANSFER_IN_LEDGER.GLNAME                AS TRANSFER_IN_LEDGER_NAME,
          AUD2_PSITE_GRC.TRANSFERIN_SLCODE         AS TRANSFER_IN_SL_CODE,
          TRANSFER_IN_SL.SLNAME                    AS TRANSFER_IN_SL_NAME,
          AUD2_PSITE_GRC.TRANSIT_GLCODE            AS TRANSIT_LEDGER_CODE,
          TRANSIT_LEDGER.GLNAME                    AS TRANSIT_LEDGER_NAME,
          AUD2_PSITE_GRC.TRANSIT_SLCODE            AS TRANSIT_SUB_LEDGER_CODE,
          TRANSIT_SUB_LEDGER.SLNAME                AS TRANSIT_SUB_LEDGER_NAME,
          AUD2_PSITE_GRC.TRANSITDIFF_GLCODE        AS SAL_TRANSITDIFF_GL_CODE,
          TRANSITDIFF_LEDGER.GLNAME                    AS TRANSIT_DIFF_LEDGER_NAME,
          AUD2_PSITE_GRC.TRANSITDIFF_SLCODE        AS SAL_TRANSITDIFF_SL_CODE,
          TRANSIT_SUBLEDGER.SLNAME                 AS TRANSIT_DIFF_SUBLEDGER_NAME,
          AUD2_PSITE_GRC.PSITE_GRT_CODE            AS GOODS_RETURN_CODE,
          GOODS_RETURN.DOCNO                       AS GOODS_RETURN_NUMBER,
          AUD2_PSITE_GRC.REPLN_ADMSITE_CODE        AS REPLENISHMENT_SITE_CODE,
          REPLENISHMENT_SITE.NAME                  AS REPLENISHMENT_SITE_NAME,
          AUD2_PSITE_GRC.REC_PSITE_STOCKPOINT_CODE AS RECEIVE_STOCKPOINT_CODE,
          RECEICE_STOCKPOINT.NAME                  AS RECEIVE_STOCKPOINT_NAME,
          AUD2_PSITE_GRC.DAM_PSITE_STOCKPOINT_CODE AS DAMAGE_STOCKPOINT_CODE,
          DAMAGE_STOCKPOINT.NAME                   AS DAMAGE_STOCKPOINT_NAME,
          AUD2_PSITE_GRC.CHGAMT                    AS CHARGE_AMOUNT,
          AUD2_PSITE_GRC.PSITE_DOCSCHEME_CODE      AS DOCSCHEME_CODE,
          PSITE_DOCSCHEME.NAME                     AS DOCSCHEME_NUMBER,
          AUD2_PSITE_GRC.TERMINALID                AS POS_TERMINAL_ID,
          AUD2_PSITE_GRC.MAIN_GL_RECEIVEAMT        AS MAIN_LEDGER_RECEIVE_AMT,
          AUD2_PSITE_GRC.MAIN_GL_DAMAGEAMT
             AS MAIN_LEDGER_DAMAGE_AMOUNT,
          AUD2_PSITE_GRC.MAIN_GL_SHORTEXCESSAMT    AS LEDGER_SHORT_EXCESS_AMT,
          AUD2_PSITE_GRC.CLOSEDBY                  AS CLOSEDBY_USER_NAME,
          -- AUD2_PSITE_GRC.CREATEDBY                 AS CREATED_USER_CODE,
          AUD2_PSITE_GRC.CREATEDBY                 AS CREATED_USER_NAME,
          -- AUD2_PSITE_GRC.LASTMODIFIEDBY            AS LAST_MODIFIED_USER_CODE,
          AUD2_PSITE_GRC.LASTMODIFIEDBY            AS LAST_MODIFIED_USER_NAME
FROM AUD2_PSITE_GRC
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''POSGRC'') TRANS_DET
             ON (AUD2_PSITE_GRC.CODE = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PSITE_GRC.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN FINSL FINSL ON AUD2_PSITE_GRC.SLCODE = FINSL.SLCODE
LEFT OUTER JOIN ADMSITE ADMSITE ON AUD2_PSITE_GRC.ADMSITE_CODE = ADMSITE.CODE
LEFT OUTER JOIN ADMOU ADMOU ON AUD2_PSITE_GRC.ADMOU_CODE = ADMOU.CODE
LEFT OUTER JOIN SALINVMAIN SALINVMAIN ON AUD2_PSITE_GRC.INVCODE = SALINVMAIN.INVCODE
LEFT OUTER JOIN INVLOC TRANSIT_STOCK_POINT ON AUD2_PSITE_GRC.PSITE_TRANSIT_LOCCODE = TRANSIT_STOCK_POINT.LOCCODE
LEFT OUTER JOIN INVLOC STORE_LOCATION ON AUD2_PSITE_GRC.STORE_LOCCODE = STORE_LOCATION.LOCCODE
LEFT OUTER JOIN FINGL TRANSFER_IN_LEDGER ON AUD2_PSITE_GRC.TRANSFERIN_GLCODE = TRANSFER_IN_LEDGER.GLCODE
LEFT OUTER JOIN FINSL TRANSFER_IN_SL ON AUD2_PSITE_GRC.TRANSFERIN_SLCODE = TRANSFER_IN_SL.SLCODE
LEFT OUTER JOIN FINGL TRANSIT_LEDGER ON AUD2_PSITE_GRC.TRANSIT_GLCODE = TRANSIT_LEDGER.GLCODE
LEFT OUTER JOIN FINSL TRANSIT_SUB_LEDGER ON AUD2_PSITE_GRC.TRANSIT_SLCODE = TRANSIT_SUB_LEDGER.SLCODE
LEFT OUTER JOIN FINGL TRANSITDIFF_LEDGER ON AUD2_PSITE_GRC.TRANSITDIFF_GLCODE = TRANSITDIFF_LEDGER.GLCODE
LEFT OUTER JOIN FINSL TRANSIT_SUBLEDGER ON AUD2_PSITE_GRC.TRANSITDIFF_SLCODE = TRANSIT_SUBLEDGER.SLCODE
LEFT OUTER JOIN PSITE_GRT GOODS_RETURN ON AUD2_PSITE_GRC.PSITE_GRT_CODE = GOODS_RETURN.CODE
LEFT OUTER JOIN ADMSITE REPLENISHMENT_SITE ON AUD2_PSITE_GRC.REPLN_ADMSITE_CODE = REPLENISHMENT_SITE.CODE
LEFT OUTER JOIN PSITE_STOCKPOINT RECEICE_STOCKPOINT ON AUD2_PSITE_GRC.REC_PSITE_STOCKPOINT_CODE = RECEICE_STOCKPOINT.CODE
LEFT OUTER JOIN PSITE_STOCKPOINT DAMAGE_STOCKPOINT ON AUD2_PSITE_GRC.DAM_PSITE_STOCKPOINT_CODE = DAMAGE_STOCKPOINT.CODE
LEFT OUTER JOIN PSITE_DOCSCHEME PSITE_DOCSCHEME ON AUD2_PSITE_GRC.PSITE_DOCSCHEME_CODE = PSITE_DOCSCHEME.CODE
LEFT OUTER JOIN HRDEMP ON AUD2_PSITE_GRC.CREATEDBYID = HRDEMP.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('HSNSACMaster', 'INVHSNSACDET', 'RateDetails', 1, 'EffDateRate', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invhsnsacdet 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE               HSN_SAC_DETAIL_CODE,
          AUD.INVHSNSACMAIN_CODE HSN_SAC_INTERNAL_CODE,
          AUD.INVHSNSACMAIN_CODE MODULE_KEY,
          H.CODE                 HSN_SAC_CODE,
          --H.HSN_SAC_CODE         MODULE_KEY_DISPLAY,
          AUD.EFFECTIVE_DATE     EFFECTIVE_DATE,
          AUD.INVGSTRATE_CODE    GST_RATE_CODE,
          G.TAX_NAME             GST_RATE_NAME,
          AUD.REMARKS            REMARKS,
          CASE
             WHEN AUD.SLAB_APPL = ''Y'' THEN ''YES''
             WHEN AUD.SLAB_APPL = ''N'' THEN ''NO''
          END
             SLAB_APPLICABLE,
          CASE
             WHEN AUD.SLAB_BASIS = ''N'' THEN ''Net Amt''
             WHEN AUD.SLAB_BASIS = ''R'' THEN ''RSP''
          END
             SLAB_PRICE_BASIS
FROM aud2_invhsnsacdet aud 
		INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''HSNSACMaster'') trans_det
			ON ((AUD.INVHSNSACMAIN_CODE)::TEXT = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN invhsnsacmain h ON (AUD.INVHSNSACMAIN_CODE = H.CODE)
LEFT OUTER JOIN invgstrate g ON (AUD.INVGSTRATE_CODE = G.CODE)', 'INVHSNSACMAIN_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('CancelPurchaseOrder', 'PURORDCNLDET', 'Details', 1, 'PurchaseOrderCancelDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purordcnldet 
AS 
SELECT TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          AUD2_PURORDCNLDET.ACTION,
          TRANS_DET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PURORDCNLDET.CNLCODE         AS CANCELLATION_CODE,
          AUD2_PURORDCNLDET.ORDCODE         AS PURCHASE_ORDER_CODE,
          PURORDMAIN.SCHEME_DOCNO           AS PURCHASE_ORDER_NUMBER,
          AUD2_PURORDCNLDET.ICODE           AS ICODE,
          INVITEM.BARCODE                   AS ITEM_BARCODE,
          AUD2_PURORDCNLDET.CNLQTY          AS CANCEL_QUANTITY,
          AUD2_PURORDCNLDET.RATE            AS ITEM_RATE,
          AUD2_PURORDCNLDET.CODE            AS CODE,
          AUD2_PURORDCNLDET.INVSETMAIN_CODE AS SET_CODE,
          INVSETMAIN.SETCODE                AS SET_NUMBER,
          AUD2_PURORDCNLDET.PURORDDET_CODE  AS PURORDDET_CODE
FROM AUD2_PURORDCNLDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
		WHERE MODULE_SHORTCODE = ''CancelPurchaseOrder'') TRANS_DET
		ON (AUD2_PURORDCNLDET.CNLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
		AND AUD2_PURORDCNLDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN PURORDMAIN PURORDMAIN ON AUD2_PURORDCNLDET.ORDCODE = PURORDMAIN.ORDCODE
INNER JOIN INVITEM INVITEM ON AUD2_PURORDCNLDET.ICODE = INVITEM.ICODE
LEFT OUTER JOIN INVSETMAIN INVSETMAIN ON AUD2_PURORDCNLDET.INVSETMAIN_CODE = INVSETMAIN.SETCODE', 'CNLCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('DeliveryChallan', 'INVDCMAIN', 'Header', 1, 'ChallanHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invdcmain 
AS 
SELECT TRANS_DET.VERSION_SEQ                 AS VERSION_SEQ,
          AUD2_INVDCMAIN.ACTION                 AS ACTION,
          TRANS_DET.LOGIN_USER                  AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID              AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE            AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE            AS MODULE_KEY,
          AUD2_INVDCMAIN.SCHEME_DOCNO           AS MODULE_KEY_DISPLAY,
          AUD2_INVDCMAIN.DCCODE                 AS CHALLAN_CODE,
          AUD2_INVDCMAIN.DCDT                   AS CHALLAN_DATE,
          AUD2_INVDCMAIN.PCODE                  AS CUSTOMER_CODE,
          CUSTOMER.SLNAME                       AS CUSTOMER_NAME,
          AUD2_INVDCMAIN.INLOCCODE              AS IN_STOCKPOINT_CODE,
          IN_STOCKPOINT.LOCNAME                 AS IN_STOCKPOINT_NAME,
          AUD2_INVDCMAIN.OUTLOCCODE             AS OUT_STOCKPOINT_CODE,
          OUT_STOCKPOINT.LOCNAME                AS OUT_STOCKPOINT_NAME,
          AUD2_INVDCMAIN.REM                    AS REMARKS,
          AUD2_INVDCMAIN.ECODE                  AS CREATEDBY_USERCODE,
          CREATEDBY.FNAME                       AS CREATEDBY_USER,
          AUD2_INVDCMAIN.LAST_ACCESS_ECODE      AS LAST_MODIFIED_USER_CODE,
          LASTMODIFIED.FNAME                    AS LAST_MODIFIED_USER_NAME,
          AUD2_INVDCMAIN.AGCODE                 AS AGENT_CODE,
          AGENT.SLNAME                          AS AGENT_NAME,
          AUD2_INVDCMAIN.TRPCODE                AS TRANSPORTER_CODE,
          TRANSPORTER.SLNAME                    AS TRANSPORTER_NAME,
          CASE AUD2_INVDCMAIN.SALETYPE
             WHEN ''O'' THEN ''Outright''
             WHEN ''C'' THEN ''Consignment''
             ELSE '' ''
          END
             AS CHALLAN_TYPE,
          AUD2_INVDCMAIN.CNLECODE               AS CANCELLEDBY_USERCODE,
          CANCELLEDBY.FNAME                     AS CANCELLEDBY_USER,
          CASE AUD2_INVDCMAIN.STATUS
             WHEN ''P'' THEN ''Pending''
             WHEN ''I'' THEN ''Invoiced''
             WHEN ''C'' THEN ''Cancelled''
             ELSE '' ''
          END
             AS CHALLAN_STATUS,
          AUD2_INVDCMAIN.CNLDT                  AS CANCELLEDON,
          AUD2_INVDCMAIN.AGAINST_SO             AS AGAINST_ORDER,
          AUD2_INVDCMAIN.DCBARCODE              AS CHALLAN_BARCODE,
          AUD2_INVDCMAIN.DOCCODE                AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                  AS DOCSCHEME_NAME,
          AUD2_INVDCMAIN.SCHEME_DOCNO           AS ORDER_NUMBER,
          AUD2_INVDCMAIN.ADMOU_CODE             AS OU_CODE,
          OU.NAME                               AS OU_NAME,
          AUD2_INVDCMAIN.ADMSITE_CODE           AS DESTINATION_SITE_CODE,
          DESTINATION_SITE.NAME                 AS DESTINATION_SITE_NAME,
          AUD2_INVDCMAIN.ADMSITE_CODE_OWNER     AS TRANSACTION_SITE_CODE,
          TRANSACTION_SITE.NAME                 AS TRANSACTION_SITE_NAME,
          AUD2_INVDCMAIN.LINKED_DCCODE          AS LINKED_CHALLAN_CODE,
          DCBARCODE.DCBARCODE                   AS DCBARCODE,
          AUD2_INVDCMAIN.SALTRADEGRP_CODE       AS TRADE_GROUP_CODE,
          TRADE_GROUP.NAME                      AS TRADE_GROUP_NAME,
          AUD2_INVDCMAIN.FORMCODE               AS FORM_CODE,
          FORM.FORMNAME                         AS FORM_NAME,
          AUD2_INVDCMAIN.LINKED_PSITE_PACKET_ID AS LINKED_PACKET_ID,
          LINKED_PACKET.PACKETNO                AS LINKED_PACKET_NO,
          AUD2_INVDCMAIN.AGAINST_RESERVE        AS AGAINST_RESERVATION,
          AUD2_INVDCMAIN.ENTRY_MODE,
          AUD2_INVDCMAIN.ENTRY_SOURCE,
          AUD2_INVDCMAIN.LAST_ACCESS_ECODE      AS LAST_ACCESS_USER_CODE,
          AUD2_INVDCMAIN.UDFDATE01,
          AUD2_INVDCMAIN.UDFDATE02,
          AUD2_INVDCMAIN.UDFDATE03,
          AUD2_INVDCMAIN.UDFDATE04,
          AUD2_INVDCMAIN.UDFDATE05,
          AUD2_INVDCMAIN.UDFNUM01,
          AUD2_INVDCMAIN.UDFNUM02,
          AUD2_INVDCMAIN.UDFNUM03,
          AUD2_INVDCMAIN.UDFNUM04,
          AUD2_INVDCMAIN.UDFNUM05,
          AUD2_INVDCMAIN.UDFSTRING01,
          AUD2_INVDCMAIN.UDFSTRING02,
          AUD2_INVDCMAIN.UDFSTRING03,
          AUD2_INVDCMAIN.UDFSTRING04,
          AUD2_INVDCMAIN.UDFSTRING05,
          AUD2_INVDCMAIN.UDFSTRING06,
          AUD2_INVDCMAIN.UDFSTRING07,
          AUD2_INVDCMAIN.UDFSTRING08,
          AUD2_INVDCMAIN.UDFSTRING09,
          AUD2_INVDCMAIN.UDFSTRING10
FROM AUD2_INVDCMAIN 
		INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''DeliveryChallan'') TRANS_DET
             ON (AUD2_INVDCMAIN.DCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVDCMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN FINSL CUSTOMER ON AUD2_INVDCMAIN.PCODE = CUSTOMER.SLCODE
INNER JOIN INVLOC IN_STOCKPOINT ON AUD2_INVDCMAIN.INLOCCODE = IN_STOCKPOINT.LOCCODE
INNER JOIN INVLOC OUT_STOCKPOINT ON AUD2_INVDCMAIN.OUTLOCCODE = OUT_STOCKPOINT.LOCCODE
INNER JOIN HRDEMP CREATEDBY ON AUD2_INVDCMAIN.ECODE = CREATEDBY.ECODE
LEFT OUTER JOIN FINSL AGENT ON AUD2_INVDCMAIN.AGCODE = AGENT.SLCODE
LEFT OUTER JOIN FINSL TRANSPORTER ON AUD2_INVDCMAIN.TRPCODE = TRANSPORTER.SLCODE
LEFT OUTER JOIN HRDEMP CANCELLEDBY ON AUD2_INVDCMAIN.CNLECODE = CANCELLEDBY.ECODE
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_INVDCMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT OUTER JOIN ADMOU OU ON AUD2_INVDCMAIN.ADMOU_CODE = OU.CODE
INNER JOIN ADMSITE DESTINATION_SITE ON AUD2_INVDCMAIN.ADMSITE_CODE = DESTINATION_SITE.CODE
INNER JOIN ADMSITE TRANSACTION_SITE ON AUD2_INVDCMAIN.ADMSITE_CODE_OWNER = TRANSACTION_SITE.CODE
LEFT OUTER JOIN INVDCMAIN DCBARCODE ON AUD2_INVDCMAIN.LINKED_DCCODE = DCBARCODE.DCCODE
LEFT OUTER JOIN FINTRADEGRP TRADE_GROUP ON AUD2_INVDCMAIN.SALTRADEGRP_CODE = TRADE_GROUP.CODE
LEFT OUTER JOIN FINFORM FORM ON AUD2_INVDCMAIN.FORMCODE = FORM.FORMCODE
LEFT OUTER JOIN PSITE_PACKET LINKED_PACKET ON AUD2_INVDCMAIN.LINKED_PSITE_PACKET_ID = LINKED_PACKET.ID
LEFT OUTER JOIN HRDEMP LASTMODIFIED ON AUD2_INVDCMAIN.LAST_ACCESS_ECODE = LASTMODIFIED.ECODE', 'DCCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'DCCODE');
INSERT INTO main.aud2_table VALUES ('InventoryItemGroup', 'INVGRP', 'Item Group', 1, 'ItemGroup', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrp 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          D.DOCCODE                  DOCSCHEME_CODE,
          D.DOCNAME                  DOCSCHEME_NAME,
          AUD.GRPCODE                GROUP_CODE,
          AUD.GRPCODE                MODULE_KEY,
          AUD.GRPNAME                GRPNAME,
          RTRIM(
                AUD.GRPNAME
             || ''-''
             || coalesce(AUD.LEV1GRPNAME, '' '')
             || ''-''
             || coalesce(AUD.LEV2GRPNAME, '' ''),
             ''-'')
             MODULE_KEY_DISPLAY,
          AUD.LEV1GRPNAME            PARENT_DIVISION_NAME,
          AUD.LEV2GRPNAME            PARENT_SECTION_NAME,
          AUD.PARCODE                PARENT_CODE,
          AUD.LEV                    LEVEL,
          AUD.REM                    ALIAS,
          CASE WHEN AUD.EXT = ''Y'' THEN ''YES'' WHEN AUD.EXT = ''N'' THEN ''NO'' END
             EXTINCT,
          CASE
             WHEN AUD.AGEING_APPL = ''Y'' THEN ''CREATE New Codes''
             WHEN AUD.AGEING_APPL = ''N'' THEN ''Use Existing Codes''
          END
             FOR_CHANGE_IN_SEASON,
          AUD.SEQ                    SEQUENCE,
          CASE
             WHEN AUD.COSTING_METHOD = ''L'' THEN ''CREATE New Codes''
             WHEN AUD.COSTING_METHOD = ''A'' THEN ''Use Existing Codes''
          END
             FOR_CHANGE_IN_STANDARD_RATE,
          AUD.TAXCODE                TAX_GROUP_CODE,
          F.TAXNAME                  TAX_GROUP_NAME,
          AUD.ATTR1PROMPT            ATTR1_PROMPT,
          AUD.ATTR2PROMPT            ATTR2_PROMPT,
          AUD.ATTR3PROMPT            ATTR3_PROMPT,
          AUD.ATTR4PROMPT            ATTR4_PROMPT,
          AUD.ATTR5PROMPT            ATTR5_PROMPT,
          AUD.ATTR6PROMPT            ATTR6_PROMPT,
          AUD.GENERIC_ATTR1          ATTR1_MANDATORY,
          AUD.GENERIC_ATTR2          ATTR2_MANDATORY,
          AUD.GENERIC_ATTR3          ATTR3_MANDATORY,
          AUD.GENERIC_ATTR4          ATTR4_MANDATORY,
          AUD.GENERIC_ATTR5          ATTR5_MANDATORY,
          AUD.GENERIC_ATTR6          ATTR6_MANDATORY,
          CASE
             WHEN AUD.SUPPLIER_APPL = ''C'' THEN ''CREATE New Codes''
             WHEN AUD.SUPPLIER_APPL = ''U'' THEN ''Use Existing Codes''
          END
             FOR_CHANGE_IN_VENDOR,
          CASE
             WHEN AUD.MATERIAL_TYPE = ''R'' THEN ''RAW MATERIAL''
             WHEN AUD.MATERIAL_TYPE = ''S'' THEN ''SEMI FINISHED GOODS''
             WHEN AUD.MATERIAL_TYPE = ''F'' THEN ''FINISHED GOODS''
          END
             MATERIAL_TYPE,
          AUD.EXCISEMAIN_CODE        EXCISE_TARIFF_CODE,
          E.TARIFFNO                 EXCISE_TARIFF_NO,
          AUD.IMG_CONVENTION         IMAGE_CONVENTION,
          AUD.INVHSNSACMAIN_CODE     HSN_INTERNAL_CODE,
          H.HSN_SAC_CODE             HSN_CODE,
          AUD.GRP_BARUNIT            SCAN_UNIT,
          AUD.GRP_UNITNAME           UOM,
          CASE
             WHEN AUD.GRP_AUTOQTYPOPUP = ''Y'' THEN ''YES''
             WHEN AUD.GRP_AUTOQTYPOPUP = ''N'' THEN ''NO''
          END
             POS_EDIT_QTY_PRICE,
          CASE
             WHEN AUD.GRP_POS_MULTIPRICE_ACTION = ''Y'' THEN ''YES''
             WHEN AUD.GRP_POS_MULTIPRICE_ACTION = ''N'' THEN ''NO''
          END
             POS_MULTI_PRICE_ACTION,
          CASE
             WHEN AUD.GRP_ALLOW_PRICE_MODIFICATION = ''Y'' THEN ''YES''
             WHEN AUD.GRP_ALLOW_PRICE_MODIFICATION = ''N'' THEN ''NO''
          END
             POS_ALLOW_PRICE_CHANGE,
          AUD.GRP_PRICE_CHANGE_LIMIT POS_PRICE_CHANGE_LIMIT,
          CASE
             WHEN AUD.GRP_NEGATIVE_STOCK_ALERT = ''I'' THEN ''IGNORE''
             WHEN AUD.GRP_NEGATIVE_STOCK_ALERT = ''W'' THEN ''WARNING''
             WHEN AUD.GRP_NEGATIVE_STOCK_ALERT = ''S'' THEN ''STOP''
             WHEN AUD.GRP_NEGATIVE_STOCK_ALERT = ''P'' THEN ''PROFILE''
          END
             NEGATIVE_STOCK_ALERT,
          CASE
             WHEN AUD.ISCREATEBATCHDOCUMENTWISE = ''Y'' THEN ''Yes''
             WHEN AUD.ISCREATEBATCHDOCUMENTWISE = ''N'' THEN ''No''
          END
             CREATE_BATCH_DOCUMENT_WISE,
          CASE
             WHEN AUD.ITEM_MANAGEMENT_MODE = ''I'' THEN ''Item''
             WHEN AUD.ITEM_MANAGEMENT_MODE = ''B'' THEN ''Batch''
             WHEN AUD.ITEM_MANAGEMENT_MODE = ''S'' THEN ''Serial''
          END
             ITEM_MANAGEMENT_MODE,
          CASE
             WHEN AUD.MANAGE_EXPIRY = ''Y'' THEN ''Yes''
             WHEN AUD.MANAGE_EXPIRY = ''N'' THEN ''No''
          END
             MANAGE_EXPIRY,
          CASE
             WHEN AUD.PRICE_MANAGEMENT = ''I'' THEN ''Item''
             WHEN AUD.PRICE_MANAGEMENT = ''B'' THEN ''Batch''
             WHEN AUD.PRICE_MANAGEMENT = ''S'' THEN ''Serial''
          END
             PRICE_MANAGEMENT
FROM aud2_invgrp aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''InventoryItemGroup'') trans_det
			ON (AUD.GRPCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN fintaxmain f ON (AUD.TAXCODE = F.TAXCODE)
LEFT OUTER JOIN excisemain e ON (AUD.EXCISEMAIN_CODE = E.CODE)
LEFT OUTER JOIN invhsnsacmain h ON (AUD.INVHSNSACMAIN_CODE = H.CODE)
LEFT OUTER JOIN admdocscheme d ON (AUD.DOCCODE = D.DOCCODE)', 'GRPCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'GRPCODE');
INSERT INTO main.aud2_table VALUES ('Purchase DN/CN', 'PURINVJRNDET', 'Details', 1, 'PurchaseDNCNDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purinvjrndet 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE           CODE,
          AUD.JRNCODE        MODULE_KEY,
          AUD.JRNCODE        DEBIT_CREDIT_NOTE_CODE,
          AUD.PURINVDET_CODE INV_DET_CODE,
          INV.CODE           PUR_INV_DET_CODE,
          AUD.ICODE          ITEM_CODE,
          I.BARCODE          ITEM_BARCODE,
          AUD.QTY            QUANTITY,
          AUD.RATE           RATE,
          AUD.AMOUNT         ADJUSTMENT_AMOUNT,
          AUD.REMARKS        REMARKS,
          AUD.CHGAMT         CHARGE_AMOUNT,
          AUD.HSN_SAC_CODE   HSN_SAC_CODE,
          AUD.TAXAMT         TAX_AMOUNT,
          AUD.GST_ITC_APPL   GST_ITC_APPL,
          AUD.GLCODE         GENERAL_LEDGER_CODE,
          GL.GLNAME          GENERAL_LEDGER_NAME,
          AUD.SLCODE         SUBLEDGER_CODE,
          SL.SLNAME          SUBLEDGER_NAME
FROM aud2_purinvjrndet aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Purchase DN/CN'') trans_det
			ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN invitem i ON AUD.ICODE = I.ICODE
LEFT OUTER JOIN purinvdet inv ON (AUD.PURINVDET_CODE = INV.CODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('ServiceOrder', 'PURSRVORD_SCHEDULE', 'Service Schedule', 1, 'PurchaseCancelServiceSchedule', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvord_schedule 
AS 
SELECT    TRANS_DET.VERSION_SEQ                      AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                       AS LOGIN_USER,
          AUD2_PURSRVORD_SCHEDULE.ACTION,
          TRANS_DET.TRANSACTION_ID                   AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE                 AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE                 AS MODULE_KEY,
          AUD2_PURSRVORD_SCHEDULE.CODE               AS CODE,
          AUD2_PURSRVORD_SCHEDULE.PURSRVORDMAIN_CODE AS SERVICE_ORDER_CODE,
          AUD2_PURSRVORD_SCHEDULE.PURSRVORDDET_CODE  AS SERVICE_ORDER_DET_NUMBER,
          AUD2_PURSRVORD_SCHEDULE.SERVICECODE        AS SERVICE_CODE,
          PURSERVICE.SERVICENAME                     AS SERVICE_NAME,
          AUD2_PURSRVORD_SCHEDULE.ADMSITE_CODE       AS ALLOCATE_SITE_CODE,
          ADMSITE.NAME                               AS ALLOCATE_SITE_NAME,
          AUD2_PURSRVORD_SCHEDULE.DTFR               AS VALID_FROM,
          AUD2_PURSRVORD_SCHEDULE.DTTO               AS VALID_TO,
          AUD2_PURSRVORD_SCHEDULE.DUEDT              AS INVOICE_DATE,
          AUD2_PURSRVORD_SCHEDULE.ORDQTY             AS QUANTITY,
          AUD2_PURSRVORD_SCHEDULE.RATE               AS RATE,
          AUD2_PURSRVORD_SCHEDULE.ORDAMT             AS AMOUNT,
          AUD2_PURSRVORD_SCHEDULE.INVQTY             AS INVOICE_QUANTITY,
          AUD2_PURSRVORD_SCHEDULE.INVAMT             AS INVOICE_AMOUNT,
          AUD2_PURSRVORD_SCHEDULE.CNLQTY             AS CANCEL_QUANTITY,
          AUD2_PURSRVORD_SCHEDULE.CNLAMT             AS CANCEL_AMOUNT,
          AUD2_PURSRVORD_SCHEDULE.REMARKS            AS REMARKS,
          AUD2_PURSRVORD_SCHEDULE.CNL_ECODE          AS CANCEL_USER_CODE,
          HRDEMP.FNAME                               AS CANCEL_USER_NAME,
          AUD2_PURSRVORD_SCHEDULE.DESC1              AS DESCRIPTION1,
          AUD2_PURSRVORD_SCHEDULE.DESC2              AS DESCRIPTION2,
          AUD2_PURSRVORD_SCHEDULE.DESC3              AS DESCRIPTION3,
          AUD2_PURSRVORD_SCHEDULE.DESC4              AS DESCRIPTION4,
          AUD2_PURSRVORD_SCHEDULE.DESC5              AS DESCRIPTION5,
          AUD2_PURSRVORD_SCHEDULE.DESC6              AS DESCRIPTION6,
          AUD2_PURSRVORD_SCHEDULE.DESC7              AS DESCRIPTION7,
          AUD2_PURSRVORD_SCHEDULE.CNLREMARKS         AS CANCEL_REMARKS
     FROM AUD2_PURSRVORD_SCHEDULE INNER JOIN(SELECT A.*, 
											RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
											FROM AUD2_TRANSACTION A
											WHERE MODULE_SHORTCODE = ''ServiceOrder'') TRANS_DET
								  ON (AUD2_PURSRVORD_SCHEDULE.PURSRVORDMAIN_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
									  AND AUD2_PURSRVORD_SCHEDULE.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN PURSERVICE PURSERVICE ON AUD2_PURSRVORD_SCHEDULE.SERVICECODE = PURSERVICE.SERVICECODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PURSRVORD_SCHEDULE.ADMSITE_CODE = ADMSITE.CODE
LEFT OUTER JOIN HRDEMP HRDEMP ON AUD2_PURSRVORD_SCHEDULE.CNL_ECODE = HRDEMP.ECODE', 'PURSRVORDMAIN_CODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 5, 'CODE');
INSERT INTO main.aud2_table VALUES ('BillofMaterials', 'PRDBOMOPERATION', 'Operation Details', 1, 'BOMOperationDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdbomoperation 
AS 
SELECT TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_PRDBOMOPERATION.ACTION,
          AUD2_PRDBOMOPERATION.CODE            AS CODE,
          AUD2_PRDBOMOPERATION.BOMCODE         AS BOM_CODE,
          AUD2_PRDBOMOPERATION.PRCODE          AS PROCESS_CODE,
          PRDPR.PRNAME                         AS PROCESS_NAME,
          AUD2_PRDBOMOPERATION.OPERATION_SEQ   AS OPERATION_SEQUENCE,
          AUD2_PRDBOMOPERATION.ASS_SAITEM_CODE AS ASSEMBLY_SAITEM_CODE,
          PRD_SAITEM.SAINAME                   AS ASSEMBLY_SAITEM_NAME,
          CASE AUD2_PRDBOMOPERATION.ASSEMBLY_SUPPLY_TYPE
             WHEN ''P'' THEN ''PUSH''
             WHEN ''O'' THEN ''PULL-ON-ORDER''
             WHEN ''N'' THEN ''NONE''
             ELSE '' ''
          END
             AS ASSEMBLY_SUPPLY_TYPE,
          CASE AUD2_PRDBOMOPERATION.CONSIDER_IN_WIP
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS CONSIDER_IN_WIP,
          AUD2_PRDBOMOPERATION.ASSEMBLY_ICODE  AS ICODE,
          INVITEM.BARCODE                      AS ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDBOMOPERATION.BOMVER_CODE     AS BOM_VERSION_CODE,
          PRDBOMVER.BOM_VERSION_NO             AS BOM_VERSION_NUMBER
FROM AUD2_PRDBOMOPERATION
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''BillofMaterials'') TRANS_DET
             ON (AUD2_PRDBOMOPERATION.BOMCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDBOMOPERATION.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN PRDPR PRDPR ON AUD2_PRDBOMOPERATION.PRCODE = PRDPR.PRCODE
LEFT OUTER JOIN PRD_SAITEM PRD_SAITEM ON AUD2_PRDBOMOPERATION.ASS_SAITEM_CODE = PRD_SAITEM.CODE
LEFT OUTER JOIN INVITEM INVITEM ON AUD2_PRDBOMOPERATION.ASSEMBLY_ICODE = INVITEM.ICODE
LEFT OUTER JOIN PRDBOMVER PRDBOMVER ON AUD2_PRDBOMOPERATION.BOMVER_CODE = PRDBOMVER.CODE', 'BOMCODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('Sale Service Invoice', 'SALSRVDET', 'Details', 1, 'SalesServiceDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salsrvdet
 AS
 SELECT trans_det.version_seq,
    aud.action,
    trans_det.login_user,
    trans_det.transaction_date,
    aud.transaction_id,
    aud.srvcode AS module_key,
    aud.code,
    aud.srvcode AS service_invoice_code,
    aud.srvamt AS service_amount,
    gl1.glcode AS general_ledger_code,
    gl1.glname AS general_ledger_name,
    sl1.slcode AS sub_ledger_code,
    sl1.slname AS sub_ledger_name,
    p.servicecode AS service_code,
    p.servicename AS service_name,
    aud.code AS invoice_det_code,
    t.taxcode AS tax_code,
    t.taxname AS tax_group_name,
    aud.qty AS quantity,
    aud.rate AS service_rate,
    aud.hsn_sac_code,
    aud.gl_cc_appl AS item_gl_site_appl
   FROM aud2_salsrvdet aud
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''Sale Service Invoice''::text) trans_det ON aud.srvcode::character varying::text = trans_det.header_key_value::text AND aud.transaction_id::text = trans_det.transaction_id::text
     JOIN fingl gl1 ON aud.glcode = gl1.glcode
     LEFT JOIN finsl sl1 ON aud.slcode = sl1.slcode
     LEFT JOIN purservice p ON aud.servicecode = p.servicecode
     LEFT JOIN fintaxmain t ON aud.taxcode = t.taxcode', 'SRVCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('POS GRT', 'PSITE_GRTCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_psite_grtchg 
AS 
SELECT TRANS_DET.VERSION_SEQ            AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER             AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID         AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE       AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE       AS MODULE_KEY,
          AUD2_PSITE_GRTCHG.ACTION,
          AUD2_PSITE_GRTCHG.CODE           AS GRT_CHARGE_CODE,
          AUD2_PSITE_GRTCHG.PSITE_GRT_CODE AS RETAIL_GRT_CODE,
          AUD2_PSITE_GRTCHG.DISPLAYORDER   AS DISPLAY_ORDER,
          AUD2_PSITE_GRTCHG.CHARGE_CODE    AS CHARGE_CODE,
          SALCHG.SALCHGNAME                AS CHARGE_NAME,
          AUD2_PSITE_GRTCHG.FACTOR         AS CHARGE_FACTOR,
          CASE AUD2_PSITE_GRTCHG.BASIS
             WHEN ''P'' THEN ''Percentage A''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_PSITE_GRTCHG.SIGN           AS CHARGE_SIGN,
          AUD2_PSITE_GRTCHG.FORMULA        AS FORMULA,
          AUD2_PSITE_GRTCHG.ISTAX          AS IS_TAX,
          CASE AUD2_PSITE_GRTCHG.SOURCE
             WHEN ''F'' THEN ''Fixed''
             WHEN ''V'' THEN ''VAT''
             WHEN ''E'' THEN ''Excise''
             WHEN ''G'' THEN ''GST''
             ELSE '' ''
          END
             AS SOURCE,
          AUD2_PSITE_GRTCHG.CHARGEAMT      AS CHARGEAMT,
          AUD2_PSITE_GRTCHG.CHARGEAPPAMT   AS CHARGE_APPLICABLE_AMT,
          AUD2_PSITE_GRTCHG.GSTCOMPONENT   AS GST_COMPONENT
FROM AUD2_PSITE_GRTCHG
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''POS GRT'') TRANS_DET
             ON (AUD2_PSITE_GRTCHG.PSITE_GRT_CODE = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PSITE_GRTCHG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN SALCHG SALCHG ON AUD2_PSITE_GRTCHG.CHARGE_CODE = SALCHG.SALCHGCODE', 'PSITE_GRT_CODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('AuditEntry', 'INVSTKADJMAIN', 'Header', 1, 'AuditEntryHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invstkadjmain 
AS 
SELECT TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_INVSTKADJMAIN.ACTION,
             INVSTKPLANMAIN.DESCRIP
          || '' -> Adjustment No. : ''
          || AUD2_INVSTKADJMAIN.STKADJNO::TEXT
             AS MODULE_KEY_DISPLAY,
          AUD2_INVSTKADJMAIN.STKADJCODE        AS STOCK_ADJUSTMENT_CODE,
          AUD2_INVSTKADJMAIN.STKADJNO          AS STOCK_ADJUSTMENT_NUMBER,
          AUD2_INVSTKADJMAIN.STKADJDT          AS AUDIT_DATE,
          AUD2_INVSTKADJMAIN.LOCCODE           AS STOCK_POINT_CODE,
          INVLOC.LOCNAME                       AS STOCK_POINT_NAME,
          AUD2_INVSTKADJMAIN.REM               AS REMARKS,
          AUD2_INVSTKADJMAIN.STKPLANCODE       AS STOCK_PLAN_CODE,
          INVSTKPLANMAIN.DESCRIP               AS STOCK_PLAN_NAME,
          AUD2_INVSTKADJMAIN.ADMOU_CODE        AS OU_CODE,
          ADMOU.NAME                           AS OU_NAME,
          AUD2_INVSTKADJMAIN.ADMSITE_CODE      AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                         AS TRANSACTION_SITE_NAME,
          AUD2_INVSTKADJMAIN.ECODE             AS CREATED_USER_CODE,
          HRDEMP.FNAME                         AS CREATED_USER_NAME,
          AUD2_INVSTKADJMAIN.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                        AS LAST_MODIFIED_USER_NAME
FROM AUD2_INVSTKADJMAIN
          INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''AuditEntry'') TRANS_DET
             ON (AUD2_INVSTKADJMAIN.STKADJCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
                AND AUD2_INVSTKADJMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVLOC INVLOC ON AUD2_INVSTKADJMAIN.LOCCODE = INVLOC.LOCCODE
INNER JOIN INVSTKPLANMAIN INVSTKPLANMAIN ON AUD2_INVSTKADJMAIN.STKPLANCODE = INVSTKPLANMAIN.STKPLANCODE
INNER JOIN ADMOU ADMOU ON AUD2_INVSTKADJMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_INVSTKADJMAIN.ADMSITE_CODE = ADMSITE.CODE
LEFT OUTER JOIN HRDEMP ON AUD2_INVSTKADJMAIN.ECODE = HRDEMP.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP1 ON AUD2_INVSTKADJMAIN.LAST_ACCESS_ECODE = HRDEMP1.ECODE', 'STKADJCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'STKADJCODE');
INSERT INTO main.aud2_table VALUES ('PurchaseOrder', 'PURORDDET', 'Detail', 1, 'POItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purorddet 
AS 
SELECT    TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          AUD2_PURORDDET.TRANSACTION_ID     AS TRANSACTION_ID,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PURORDDET.ORDCODE            AS ORDER_CODE,
          AUD2_PURORDDET.ICODE              AS ICODE,
          INVITEM.BARCODE                   AS BARCODE,
          AUD2_PURORDDET.ORDQTY             AS ORDER_QTY,
          AUD2_PURORDDET.RATE               AS ITEM_RATE,
          AUD2_PURORDDET.REM                AS REMARKS,
          AUD2_PURORDDET.CODE               AS ORDER_DETAIL_CODE,
          AUD2_PURORDDET.NETAMT             AS ITEM_AMOUNT,
          AUD2_PURORDDET.EXCISEMAIN_CODE    AS EXCISE_CODE,
          EXCISEMAIN.TARIFFNO               AS EXCISE_TARIFF_NO,
          AUD2_PURORDDET.EX_BASIS           AS EXCISE_BASIS,
          AUD2_PURORDDET.EX_EFFRATE         AS EXCISE_EFFRATE,
          AUD2_PURORDDET.EX_ABTFACTOR       AS EXCISE_ABTFACTOR,
          AUD2_PURORDDET.EX_DUTYFACTOR      AS EXCISE_DUTYFACTOR,
          AUD2_PURORDDET.EX_CESSFACTOR      AS EXCISE_CESSFACTOR,
          AUD2_PURORDDET.EX_ROUNDOFF        AS EXCISE_ROUNDOFF,
          AUD2_PURORDDET.EX_APPAMT          AS EXCISE_APPAMT,
          AUD2_PURORDDET.EX_DUTYAMT         AS EXCISE_DUTYAMT,
          AUD2_PURORDDET.EX_CESSAMT         AS EXCISE_CESSAMT,
          AUD2_PURORDDET.INVSETMAIN_CODE    AS SET_CODE,
          AUD2_PURORDDET.EX_APPLICABLE_FROM AS EXCISE_APPLICABLE_FROM,
          AUD2_PURORDDET.TOLERANCE          AS TOLERENCE_QTY
     FROM AUD2_PURORDDET INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
									ORDER BY TRANSACTION_DATE)
									VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''PurchaseOrder'') TRANS_DET
						 ON (AUD2_PURORDDET.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
						     AND AUD2_PURORDDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVITEM INVITEM ON AUD2_PURORDDET.ICODE = INVITEM.ICODE
LEFT JOIN EXCISEMAIN EXCISEMAIN ON AUD2_PURORDDET.EXCISEMAIN_CODE = EXCISEMAIN.CODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('SecondaryRetailSales', 'SALSSDET', 'Details', 1, 'SecondaryRetailSaleDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salssdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ                    AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                     AS LOGIN_USER,
          AUD2_SALSSDET.ACTION,
          TRANS_DET.TRANSACTION_ID                 AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE               AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE               AS MODULE_KEY,
          AUD2_SALSSDET.SSCODE                     AS RETAIL_SALE_CODE,
          --SALSSMAIN.SCHEME_DOCNO                   AS RETAIL_SALE_NO,
          AUD2_SALSSDET.ICODE                      AS ICODE,
          AUD2_SALSSDET.QTY                        AS QUANTITY,
          AUD2_SALSSDET.MRP                        AS MRP,
          AUD2_SALSSDET.RATE                       AS RATE,
          AUD2_SALSSDET.GRSAMT                     AS GROSS_AMT,
          AUD2_SALSSDET.DISCOUNT                   AS ITEM_DISCOUNT,
          AUD2_SALSSDET.NETAMT                     AS ITEM_NET_AMT,
          AUD2_SALSSDET.TAXAMT                     AS ITEM_TAX_AMT,
          AUD2_SALSSDET.SITE_COSTRATE              AS SITE_COSTRATE,
          AUD2_SALSSDET.REMARKS                    AS REMARKS,
          AUD2_SALSSDET.CODE                       AS RETAIL_SALE_DET_CODE,
          AUD2_SALSSDET.TAXDETCODE                 AS TAX_DET_CODE,
          AUD2_SALSSDET.PSITE_STOCKPOINT_CODE      AS STOCKPOINT_CODE,
          PSITE_STOCKPOINT.NAME                    AS STOCKPOINT_NAME,
          AUD2_SALSSDET.PROMOAMT                   AS PROMO_AMT,
          AUD2_SALSSDET.IDISCOUNTAMT               AS ITEM_DISCOUNT_AMT,
          AUD2_SALSSDET.MDISCOUNTAMT               AS MANUAL_DISCOUNT_AMT,
          AUD2_SALSSDET.LPDISCOUNTAMT              AS LP_DISCOUNT_AMT,
          AUD2_SALSSDET.EXTAXAMT                   AS EXTRA_TAX_AMT,
          AUD2_SALSSDET.TAXDESCRIPTION             AS TAX_DESCRIPTION,
          AUD2_SALSSDET.TAXABLEAMT                 AS TAXABLE_AMT,
          AUD2_SALSSDET.TAXPERCENT                 AS TAX_PERCENT,
          CASE AUD2_SALSSDET.TAXREGIME
             WHEN ''V'' THEN ''VAT''
             WHEN ''G'' THEN ''GST''
             ELSE '' ''
          END
             AS TAX_REGIME,
          AUD2_SALSSDET.HSN_SAC_CODE               AS HSN_SAC_CODE,
          AUD2_SALSSDET.IGSTRATE                   AS IGSTRATE,
          AUD2_SALSSDET.IGSTAMT                    AS IGSTAMT,
          AUD2_SALSSDET.CGSTRATE                   AS CGSTRATE,
          AUD2_SALSSDET.CGSTAMT                    AS CGSTAMT,
          AUD2_SALSSDET.SGSTRATE                   AS SGSTRATE,
          AUD2_SALSSDET.SGSTAMT                    AS SGSTAMT,
          AUD2_SALSSDET.CESSRATE                   AS CESSRATE,
          AUD2_SALSSDET.CESSAMT                    AS CESSAMT,
          AUD2_SALSSDET.COSTRATE                   AS COST_RATE,
          AUD2_SALSSDET.PROMOCODE                  AS PROMO_CODE,
          AUD2_SALSSDET.PROMONO                    AS PROMO_NUMBER,
          AUD2_SALSSDET.PROMONAME                  AS PROMO_NAME,
          AUD2_SALSSDET.PROMOSTARTDATE             AS PROMO_START_DATE,
          AUD2_SALSSDET.PROMOENDDATE               AS PROMO_END_DATE,
          AUD2_SALSSDET.MEMODISCOUNTAMT            AS BILL_DISCOUNT_AMT,
          AUD2_SALSSDET.MEMODISCOUNTTYPE           AS BILL_DISCOUNT_TYPE,
          AUD2_SALSSDET.MEMOPROMOCODE              AS BILL_PROMO_CODE,
          AUD2_SALSSDET.MEMOPROMONO                AS BILL_PROMO_NUMBER,
          AUD2_SALSSDET.MEMOPROMONAME              AS BILL_PROMO_NAME,
          AUD2_SALSSDET.MEMOPROMOSTARTDATE         AS BILL_PROMO_START_DATE,
          AUD2_SALSSDET.MEMOPROMOENDDATE           AS BILL_PROMO_END_DATE,
          AUD2_SALSSDET.MEMOPROMOSLABFROM          AS BILL_PROMO_SLAB_FROM,
          AUD2_SALSSDET.MEMOPROMOSLABTO            AS BILL_PROMO_SLAB_TO,
          AUD2_SALSSDET.MEMODISCOUNTDESC           AS BILL_DISCOUNT_DESCRIPTION,
          AUD2_SALSSDET.MEMOCOUPONCODE             AS BILL_COUPON_CODE,
          AUD2_SALSSDET.MEMOCOUPONOFFERCODE        AS BILL_COUPON_OFFER_CODE,
          CASE AUD2_SALSSDET.ISDYNAMICTAX
             WHEN 0 THEN ''NO''
             WHEN 1 THEN ''YES''
             ELSE '' ''
          END
             AS DYNAMIC_TAX_APPL,
          AUD2_SALSSDET.RETAILORDERDET_CODE        AS RETAIL_ORD_DET_CODE,
          AUD2_SALSSDET.REF_SALSSDET_CODE          AS REF_RETAIL_ORD_DET_CODE,
          AUD2_SALSSDET.OTHERCHARGES               AS OTHER_CHARGES,
          CASE AUD2_SALSSDET.ISDAMAGED
             WHEN 0 THEN ''NO''
             WHEN 1 THEN ''YES''
             ELSE '' ''
          END
             AS DAMAGE_ITEM,
          CASE AUD2_SALSSDET.ISSECONDARYSUPPLY
             WHEN 1 THEN ''YES''
             WHEN 0 THEN ''1''
             WHEN NULL THEN ''0''
             ELSE '' ''
          END
             AS SECONDARY_SUPPLY_ITEM,
          AUD2_SALSSDET.SECONDARYSUPPLYPARENTICODE AS SECONDARY_PARENT_ICODE,
          CASE AUD2_SALSSDET.SECONDARYSUPPLYTAXPOLICY
             WHEN ''I'' THEN ''PARENT ITEM''
             WHEN ''P'' THEN ''MAX TAX''
             WHEN ''M'' THEN ''FROM MASTER''
             ELSE '' ''
          END
             AS SECONDARY_SUPPLY_TAX_TYPE,
          AUD2_SALSSDET.INVBATCH_SERIAL_CODE       AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO          AS BATCH_SERIAL_NO
     FROM AUD2_SALSSDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
				  FROM AUD2_TRANSACTION A
				  WHERE MODULE_SHORTCODE = ''SecondaryRetailSales'') TRANS_DET
          ON (AUD2_SALSSDET.SSCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE AND AUD2_SALSSDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          LEFT JOIN PSITE_STOCKPOINT PSITE_STOCKPOINT ON AUD2_SALSSDET.PSITE_STOCKPOINT_CODE = PSITE_STOCKPOINT.CODE
          LEFT JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_SALSSDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'SSCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('UserSiteAssignment', 'HRDEMP', 'User Detail', 1, 'User', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_hrdemp 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          E.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          E.TRANSACTION_ID,
          E.ECODE,
          E.ECODE                  MODULE_KEY,
          E.FNAME                  FULLNAME,
          E.FNAME                  MODULE_KEY_DISPLAY,
          E.ENO                    USER_NO,
          E.ABBRE                  LOGINNAME,
          E.DEPTCODE               USERGROUP_CODE,
          D.DEPTNAME               USERGROUP_NAME,
          E.RLCODE                 ROLE_CODE,
          R.NAME                   ROLE_NAME,
          E.PASS                   PASSWORD,
          E.LOCDAYS                LOCK_DAYS,
          E.REM                    REMARKS,
          E.EXT                    EXTINCT,
          E.PROFCODE               USERPROFILE_CODE,
          P.PROFNAME               USERPROFILE_NAME,
          E.USERTYPE               USER_TYPE,
          E.ALLOW_LAST_FY_DAY_MODE IGNORE_LOCKDAYS_LASTDY_FY,
          E.REPORTROLE             REPORT_ROLE,
          E.IS_APIUSER             IS_APIUSER,
          E.APIKEY                 APIKEY
     FROM aud2_hrdemp e INNER JOIN (SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
									ORDER BY TRANSACTION_DATE)
									VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''UserSiteAssignment'') trans_det
						ON E.ECODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND E.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID
INNER JOIN role r ON E.RLCODE = R.ID
LEFT OUTER JOIN hrddept d ON (E.DEPTCODE = D.DEPTCODE)
LEFT OUTER JOIN admprof p ON (E.PROFCODE = P.PROFCODE)', 'ECODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'ECODE');
INSERT INTO main.aud2_table VALUES ('PurchasePriceChart', 'PUR_PRICE_CHART', 'Price Chart', 1, 'PriceChart', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_pur_price_chart
 AS
 SELECT trans_det.version_seq,
    aud.action,
    aud.transaction_id,
    trans_det.login_user,
    trans_det.transaction_date,
    aud.code AS module_key,
    aud.pcode AS vendor_code,
    f.slname AS vendor_name,
    aud.icode,
    (f.slname::text || '' -> ''::text) || aud.icode::text AS module_key_display,
    i.barcode,
    aud.effective_date,
    aud.rate,
    aud.delivery_days,
        CASE
            WHEN aud.extinct = ''Y''::bpchar THEN ''Yes''::text
            WHEN aud.extinct = ''N''::bpchar THEN ''No''::text
            ELSE NULL::text
        END AS extinct,
    aud.ecode AS createdby_usercode,
    e1.fname AS createdby_user,
    aud.last_access_ecode AS lastmodifiedby_usercode,
    e2.fname AS lastmodifiedby_user
   FROM aud2_pur_price_chart aud
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''PurchasePriceChart''::text) trans_det ON aud.code::text = trans_det.header_key_value::text AND aud.transaction_id::text = trans_det.transaction_id::text
     JOIN invitem i ON aud.icode::text = i.icode::text
     JOIN finsl f ON aud.pcode = f.slcode
     JOIN hrdemp e1 ON aud.ecode = e1.ecode
     JOIN hrdemp e2 ON aud.last_access_ecode = e2.ecode', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('ServiceOrder', 'PURSRVORDCHG', 'Charge', 1, 'PurchaseServiceOrderCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvordchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ                  AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                   AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID               AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE             AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE             AS MODULE_KEY,
          AUD2_PURSRVORDCHG.ACTION,
          AUD2_PURSRVORDCHG.PURSRVORDMAIN_CODE   AS SERVICE_ORDER_CODE,
          AUD2_PURSRVORDCHG.CHGCODE              AS CHARGE_CODE,
          FINCHG.CHGNAME                         AS CHARGE_NAME,
          AUD2_PURSRVORDCHG.RATE                 AS RATE,
          AUD2_PURSRVORDCHG.SIGN                 AS SIGN,
          AUD2_PURSRVORDCHG.CODE                 AS CODE,
          AUD2_PURSRVORDCHG.SEQ                  AS SEQUENCE,
          CASE AUD2_PURSRVORDCHG.BASIS
             WHEN ''A'' THEN ''AMOUNT''
             WHEN ''P'' THEN ''PERCENTAGE''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_PURSRVORDCHG.APPAMT               AS APPLICABLE_AMOUNT,
          AUD2_PURSRVORDCHG.CHGAMT               AS CHARGE_AMOUNT,
          AUD2_PURSRVORDCHG.FORMULAE             AS FORMULA,
          CASE AUD2_PURSRVORDCHG.OPERATION_LEVEL
             WHEN ''H'' THEN ''HEADER''
             WHEN ''L'' THEN ''LINE LEVEL''
             ELSE '' ''
          END
             AS OPERATION_LEVEL,
          CASE AUD2_PURSRVORDCHG.ISTAX
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS ISTAX,
          AUD2_PURSRVORDCHG.SOURCE               AS FACTOR_SOURCE,
          AUD2_PURSRVORDCHG.WITHOUT_TERM_FORMULA AS WITHOUT_TERM_FORMULA,
          CASE AUD2_PURSRVORDCHG.INCLUDE_IN_TDS
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS INCLUDE_IN_TDS,
          CASE AUD2_PURSRVORDCHG.ISREVERSE
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS GST_REVERSE_CHARGE,
          AUD2_PURSRVORDCHG.GST_COMPONENT        AS GST_COMPONENT
     FROM AUD2_PURSRVORDCHG INNER JOIN(SELECT A.*, 
									   RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
									   FROM AUD2_TRANSACTION A
									   WHERE MODULE_SHORTCODE = ''ServiceOrder'') TRANS_DET
							ON (AUD2_PURSRVORDCHG.PURSRVORDMAIN_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
							    AND AUD2_PURSRVORDCHG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINCHG FINCHG ON AUD2_PURSRVORDCHG.CHGCODE = FINCHG.CHGCODE', 'PURSRVORDMAIN_CODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'PURSRVORDMAIN_CODE#CHGCODE#RATE#INCLUDE_IN_TDS');
INSERT INTO main.aud2_table VALUES ('AuditPlan', 'INVSTKPLANDET', 'Details', 1, 'AuditPlanDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invstkplandet 
AS 
SELECT TRANS_DET.VERSION_SEQ              AS VERSION_SEQ,
          AUD2_INVSTKPLANDET.ACTION,
          TRANS_DET.LOGIN_USER               AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID           AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE         AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE         AS MODULE_KEY,
          AUD2_INVSTKPLANDET.STKPLANCODE     AS AUDIT_PLAN_CODE,
          INVSTKPLANMAIN.DESCRIP             AS AUDIT_PLAN_NAME,
          CASE AUD2_INVSTKPLANDET.ENTRYTYPE
             WHEN ''I'' THEN ''ITEMWISE''
             WHEN ''G'' THEN ''ASSORTMENTWISE''
             ELSE '' ''
          END
             AS ENTRY_TYPE,
          AUD2_INVSTKPLANDET.GRPCODE         AS GROUP_CODE,
          INVGRP.GRPNAME                     AS GROUP_NAME,
          AUD2_INVSTKPLANDET.CCODE1          AS CATEGORY1_CODE,
          INVCAT1.CNAME                      AS CATEGORY1_NAME,
          AUD2_INVSTKPLANDET.CCODE2          AS CATEGORY2_CODE,
          INVCAT2.CNAME                      AS CATEGORY2_NAME,
          AUD2_INVSTKPLANDET.CCODE3          AS CATEGORY3_CODE,
          INVCAT3.CNAME                      AS CATEGORY3_NAME,
          AUD2_INVSTKPLANDET.CCODE4          AS CATEGORY4_CODE,
          INVCAT4.CNAME                      AS CATEGORY4_NAME,
          AUD2_INVSTKPLANDET.CCODE5          AS CATEGORY5_CODE,
          INVCAT5.CNAME                      AS CATEGORY5_NAME,
          AUD2_INVSTKPLANDET.CCODE6          AS CATEGORY6_CODE,
          INVCAT6.CNAME                      AS CATEGORY6_NAME,
          AUD2_INVSTKPLANDET.ICODE           AS ICODE,
          INVITEM.BARCODE                    AS ITEM_BARCODE,
          AUD2_INVSTKPLANDET.MRPFROM,
          AUD2_INVSTKPLANDET.MRPTO,
          AUD2_INVSTKPLANDET.CODE            AS CODE,
          AUD2_INVSTKPLANDET.INVARTICLE_CODE AS ARTICLE_CODE,
          INVARTICLE.NAME                    AS ARTICLE_NAME
FROM AUD2_INVSTKPLANDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''AuditPlan'') TRANS_DET
             ON (AUD2_INVSTKPLANDET.STKPLANCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVSTKPLANDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN INVSTKPLANMAIN INVSTKPLANMAIN ON AUD2_INVSTKPLANDET.STKPLANCODE = INVSTKPLANMAIN.STKPLANCODE
LEFT OUTER JOIN INVGRP INVGRP ON AUD2_INVSTKPLANDET.GRPCODE = INVGRP.GRPCODE
LEFT OUTER JOIN INVCAT1 INVCAT1 ON AUD2_INVSTKPLANDET.CCODE1 = INVCAT1.CCODE
LEFT OUTER JOIN INVCAT2 INVCAT2 ON AUD2_INVSTKPLANDET.CCODE2 = INVCAT2.CCODE
LEFT OUTER JOIN INVCAT3 INVCAT3 ON AUD2_INVSTKPLANDET.CCODE3 = INVCAT3.CCODE
LEFT OUTER JOIN INVCAT4 INVCAT4 ON AUD2_INVSTKPLANDET.CCODE4 = INVCAT4.CCODE
LEFT OUTER JOIN INVCAT5 INVCAT5 ON AUD2_INVSTKPLANDET.CCODE5 = INVCAT5.CCODE
LEFT OUTER JOIN INVCAT6 INVCAT6 ON AUD2_INVSTKPLANDET.CCODE6 = INVCAT6.CCODE
LEFT OUTER JOIN INVITEM INVITEM ON AUD2_INVSTKPLANDET.ICODE = INVITEM.ICODE
LEFT OUTER JOIN INVARTICLE INVARTICLE ON AUD2_INVSTKPLANDET.INVARTICLE_CODE = INVARTICLE.CODE', 'STKPLANCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('POS Journal', 'POSJOURNAL', 'Header', 1, 'POSJournalHeader', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_posjournal
 AS
 SELECT trans_det.version_seq,
    trans_det.login_user,
    trans_det.transaction_id,
    trans_det.transaction_date,
    trans_det.header_key_value AS module_key,
    aud2_posjournal.scheme_docno AS module_key_display,
    aud2_posjournal.action,
    aud2_posjournal.code AS pos_journal_code,
    aud2_posjournal.admsite_code AS owner_site_code,
    admsite.name AS owner_site_name,
    aud2_posjournal.scheme_docno AS docscheme_no,
    aud2_posjournal.docdate AS document_date,
    aud2_posjournal.doctype AS pos_journal_type,
    aud2_posjournal.admou_code AS ou_code,
    admou.name AS ou_name,
    aud2_posjournal.customer_slcode AS sub_ledger_code,
    finsl.slname AS sub_ledger_name,
    aud2_posjournal.debtor_glcode AS debtor_ledger_code,
    fingl.glname AS debtor_ledger_name,
    aud2_posjournal.psite_posstlm_code AS journal_settlement_code,
    psite_posstlm.settledon AS store_settlement_date,
    aud2_posjournal.createdby AS createdby_usercode,
    hrdemp1.fname AS createdby_user,
    aud2_posjournal.remarks,
        CASE aud2_posjournal.release_status
            WHEN ''U''::bpchar THEN ''UNPOSTED''::text
            WHEN ''P''::bpchar THEN ''POSTED''::text
            ELSE '' ''::text
        END AS status,
    aud2_posjournal.release_ecode AS released_usercode,
    hrdemp2.fname AS released_user,
    aud2_posjournal.retailordmain_ordcode AS retail_order_code,
    retailordmain.scheme_docno AS retail_order_no
   FROM aud2_posjournal
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''POS Journal''::text) trans_det ON aud2_posjournal.code::text = trans_det.header_key_value::text AND aud2_posjournal.transaction_id::text = trans_det.transaction_id::text
     JOIN admsite admsite ON aud2_posjournal.admsite_code = admsite.code
     JOIN admou admou ON aud2_posjournal.admou_code = admou.code
     LEFT JOIN finsl finsl ON aud2_posjournal.customer_slcode = finsl.slcode
     LEFT JOIN fingl fingl ON aud2_posjournal.debtor_glcode = fingl.glcode
     LEFT JOIN psite_posstlm psite_posstlm ON aud2_posjournal.psite_posstlm_code::text = psite_posstlm.code::text
     LEFT JOIN hrdemp hrdemp1 ON aud2_posjournal.createdby = hrdemp1.ecode
     LEFT JOIN hrdemp hrdemp2 ON aud2_posjournal.release_ecode = hrdemp2.ecode
     LEFT JOIN retailordmain retailordmain ON aud2_posjournal.retailordmain_ordcode = retailordmain.ordcode', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Sales Return', 'SALRTDET', 'Detail', 1, 'SalesReturnDetail', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_salrtdet
 AS
 SELECT trans_det.version_seq,
    trans_det.login_user,
    trans_det.transaction_date,
	aud2_salrtdet.transaction_id,
    trans_det.header_key_value AS module_key,
    aud2_salrtdet.action,
    aud2_salrtdet.rtcode AS return_code,
    return.scheme_docno AS return_number,
    aud2_salrtdet.icode,
    barcode.barcode,
    aud2_salrtdet.qty AS quantity,
    aud2_salrtdet.rate,
    aud2_salrtdet.rem AS remarks,
    aud2_salrtdet.mrp,
    aud2_salrtdet.dccode AS challan_code,
    challan.scheme_docno AS challan_number,
    aud2_salrtdet.code,
    aud2_salrtdet.costrate AS cost_rate,
    aud2_salrtdet.chgamt AS charge_amount,
    aud2_salrtdet.effamt AS effective_amount,
    aud2_salrtdet.salinvdet_code AS invoice_transfer_det_code,
    aud2_salrtdet.excisemain_code AS excise_tariff_code,
    excise.tariffno AS excise_tariff_no,
    aud2_salrtdet.ex_basis AS excise_basis,
    aud2_salrtdet.ex_effrate AS excise_effrate,
    aud2_salrtdet.ex_abtfactor AS excise_abtfactor,
    aud2_salrtdet.ex_dutyfactor AS excise_dutyfactor,
    aud2_salrtdet.ex_cessfactor AS excise_cessfactor,
    aud2_salrtdet.ex_appamt AS excise_appamt,
    aud2_salrtdet.ex_dutyamt AS excise_dutyamt,
    aud2_salrtdet.ex_cessamt AS excise_cessamt,
    aud2_salrtdet.ex_roundoff AS excise_roundoff,
    aud2_salrtdet.packetno AS packet_no,
    aud2_salrtdet.packetdocid AS packet_bar_code,
    aud2_salrtdet.invcode AS invoice_return_code,
    invoice_return.scheme_docno AS invoice_return_number,
    aud2_salrtdet.transferout_dccode AS transfer_out_dc_code,
    transfer_out.scheme_docno AS transfer_out_dc_no,
    aud2_salrtdet.transferout_salinvdet_code AS trans_out_sal_invdet_code,
    aud2_salrtdet.sendqty AS item_return_qty,
    aud2_salrtdet.shortexcessqty AS item_short_excess_qty,
    aud2_salrtdet.shortexcessamt AS item_short_excess_amt,
    aud2_salrtdet.ex_applicable_from AS excise_applicable_from,
    aud2_salrtdet.hsn_sac_code,
    aud2_salrtdet.glcode AS general_ledger_code,
    general_ledger.glname AS general_ledger_name,
    aud2_salrtdet.slcode AS sub_ledger_name,
    aud2_salrtdet.invbatch_serial_code AS batch_serial_code,
    invbatch_serial.batch_serial_no AS invbatch_serial_no
   FROM aud2_salrtdet
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''Sales Return''::text) trans_det ON aud2_salrtdet.rtcode::text = trans_det.header_key_value::text AND aud2_salrtdet.transaction_id::text = trans_det.transaction_id::text
     LEFT JOIN salrtmain return ON aud2_salrtdet.rtcode = return.rtcode
     JOIN invitem barcode ON aud2_salrtdet.icode::text = barcode.icode::text
     LEFT JOIN invdcmain challan ON aud2_salrtdet.dccode = challan.dccode
     LEFT JOIN excisemain excise ON aud2_salrtdet.excisemain_code = excise.code
     LEFT JOIN salinvmain invoice_return ON aud2_salrtdet.invcode = invoice_return.invcode
     LEFT JOIN invdcmain transfer_out ON aud2_salrtdet.transferout_dccode = transfer_out.dccode
     LEFT JOIN fingl general_ledger ON aud2_salrtdet.glcode = general_ledger.glcode
     LEFT JOIN invbatch_serial invbatch_serial ON aud2_salrtdet.invbatch_serial_code = invbatch_serial.code', 'RTCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('HSNSACMaster', 'INVHSNSACMAIN', 'Master', 1, 'HSN_SACMaster', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invhsnsacmain 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE            HSN_SAC_INTERNAL_CODE,
          AUD.CODE            MODULE_KEY,
          AUD.HSN_SAC_CODE    HSN_SAC_CODE,
          AUD.HSN_SAC_CODE    MODULE_KEY_DISPLAY,
          AUD.DESCRIPTION     DESCRIPTION,
          CASE
             WHEN AUD.EXTINCT = ''Y'' THEN ''YES''
             WHEN AUD.EXTINCT = ''N'' THEN ''NO''
          END
             EXTINCT,
          AUD.CREATEDBY       CREATEDBY_CODE,
          H1.FNAME            CREATEDBY_USER,
          AUD.LASTMODIFIEDBY  LASTMODIFIEDBY_CODE,
          H2.FNAME            LASTMODIFIEDBY_USER,
          CASE
             WHEN AUD.APPL = ''G'' THEN ''GOODS''
             WHEN AUD.APPL = ''S'' THEN ''SERVICES''
          END
             APPLICABILITY,
          CASE
             WHEN AUD.ISSYSTEM = ''Y'' THEN ''YES''
             WHEN AUD.ISSYSTEM = ''N'' THEN ''NO''
          END
             ISSYSTEM,
          AUD.GOVT_IDENTIFIER GOVT_IDENTIFIER
FROM aud2_invhsnsacmain aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''HSNSACMaster'') trans_det
			ON ((AUD.CODE)::TEXT = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN	hrdemp h1 ON AUD.CREATEDBY = H1.ECODE 
LEFT OUTER JOIN hrdemp h2 ON (AUD.LASTMODIFIEDBY = H2.ECODE)', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('OrganizationUnit', 'ADMOU', 'Organization Unit', 1, 'Organization Unit', NULL, NULL, 'CREATE OR REPLACE VIEW main.v_aud2_admou
 AS
 SELECT trans_det.version_seq,
    aud2_admou.action,
    trans_det.login_user,
    trans_det.transaction_date,
	aud2_admou.transaction_id,
    trans_det.header_key_value AS module_key,
    aud2_admou.name AS module_key_display,
    aud2_admou.code,
    aud2_admou.name AS ou_name,
    aud2_admou.shrtname AS abbreviation,
    aud2_admou.address,
    aud2_admou.ctname AS city,
    aud2_admou.oph1 AS office_phone1,
    aud2_admou.oph2 AS office_phone2,
    aud2_admou.oph3 AS office_phone3,
    aud2_admou.mobile,
    aud2_admou.fax,
    aud2_admou.email1 AS email_id,
    aud2_admou.email2 AS alternate_email_id,
    aud2_admou.website,
    aud2_admou.contact_person AS contact_person_name,
    aud2_admou.lstno,
    aud2_admou.cstno,
    aud2_admou.ext AS extinct,
    aud2_admou.pin,
    aud2_admou.consignmentsale_glcode,
    consignment_sale_ledger.glname AS consignment_sale_ledger,
    aud2_admou.consignmentsale_slcode,
    consignment_sale_subledger.slname AS consignment_sale_subledger,
    aud2_admou.cnname AS country,
    aud2_admou.created_by AS created_by_ecode,
    createdby_user.fname AS createdby_user,
    aud2_admou.creditnote_glcode,
    credit_note_ledger.glname AS credit_note_ledger,
    aud2_admou.debitnote_glcode,
    debit_note_control_ledger.glname AS debit_note_control_ledger,
    aud2_admou.default_ho_site AS default_ho_site_code,
    default_ho_site.name AS default_ho_site,
    aud2_admou.ext_by AS extinct_by_ecode,
    extinctby_user.fname AS extinctby_user,
    aud2_admou.gvcontrol_glcode,
    gift_voucher_control_ledger.glname AS gift_voucher_control_ledger,
    aud2_admou.gvdiscount_glcode,
    gift_voucher_discount_ledger.glname AS gift_voucher_discount_ledger,
    aud2_admou.lastmodified_by AS last_modified_by_ecode,
    last_modifiedby_user.fname AS last_modifiedby_user,
    aud2_admou.redemption_glcode,
    loyalty_redemption_ledger.glname AS loyalty_redemption_ledger,
    aud2_admou.roundoff_glcode,
    round_off_ledger.glname AS round_off_ledger,
    aud2_admou.stname AS state,
    aud2_admou.transferin_glcode,
    transfer_in_ledger.glname AS transfer_in_ledger,
    aud2_admou.transferin_slcode,
    transfer_in_subledger.slname AS transfer_in_subledger,
    aud2_admou.transferout_glcode,
    transfer_out_ledger.glname AS transfer_out_ledger,
    aud2_admou.transferout_slcode,
    transfer_out_subledger.slname AS transfer_out_subledger,
    aud2_admou.transit_glcode,
    transit_ledger.glname AS transit_ledger,
    aud2_admou.servicetaxdate AS service_tax_registration_date,
    aud2_admou.servicetaxno AS service_tax_registration_no,
    aud2_admou.cinno,
    aud2_admou.exc AS excise_no,
    aud2_admou.exp AS excise_license_no,
    aud2_admou.tlno AS trade_license_no,
    aud2_admou.tanward AS tds_ward_no,
    aud2_admou.tanno AS tds_account_no,
    aud2_admou.pan,
    aud2_admou.transit_slcode,
    transit_subledger.slname AS transit_subledger,
    aud2_admou.transitdiff_glcode,
    transit_diff_ledger.glname AS transit_diff_ledger,
    aud2_admou.transitdiff_slcode,
    transit_diff_subledger.slname AS transit_diff_subledger,
        CASE aud2_admou.allow_creator_to_authorize
            WHEN ''Y''::bpchar THEN ''Yes''::text
            WHEN ''N''::bpchar THEN ''No''::text
            ELSE '' ''::text
        END AS allow_releaseof_own_trans
   FROM aud2_admou
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''OrganizationUnit''::text) trans_det ON aud2_admou.code::text = trans_det.header_key_value::text AND aud2_admou.transaction_id::text = trans_det.transaction_id::text
     JOIN fingl consignment_sale_ledger ON aud2_admou.consignmentsale_glcode = consignment_sale_ledger.glcode
     LEFT JOIN finsl consignment_sale_subledger ON aud2_admou.consignmentsale_slcode = consignment_sale_subledger.slcode
     JOIN hrdemp createdby_user ON aud2_admou.created_by = createdby_user.ecode
     LEFT JOIN fingl credit_note_ledger ON aud2_admou.creditnote_glcode = credit_note_ledger.glcode
     LEFT JOIN fingl debit_note_control_ledger ON aud2_admou.debitnote_glcode = debit_note_control_ledger.glcode
     LEFT JOIN admsite default_ho_site ON aud2_admou.default_ho_site = default_ho_site.code
     LEFT JOIN hrdemp extinctby_user ON aud2_admou.ext_by = extinctby_user.ecode
     LEFT JOIN fingl gift_voucher_control_ledger ON aud2_admou.gvcontrol_glcode = gift_voucher_control_ledger.glcode
     LEFT JOIN fingl gift_voucher_discount_ledger ON aud2_admou.gvdiscount_glcode = gift_voucher_discount_ledger.glcode
     LEFT JOIN hrdemp last_modifiedby_user ON aud2_admou.lastmodified_by = last_modifiedby_user.ecode
     LEFT JOIN fingl loyalty_redemption_ledger ON aud2_admou.redemption_glcode = loyalty_redemption_ledger.glcode
     LEFT JOIN fingl round_off_ledger ON aud2_admou.roundoff_glcode = round_off_ledger.glcode
     LEFT JOIN fingl transfer_in_ledger ON aud2_admou.transferin_glcode = transfer_in_ledger.glcode
     LEFT JOIN finsl transfer_in_subledger ON aud2_admou.transferin_slcode = transfer_in_subledger.slcode
     LEFT JOIN fingl transfer_out_ledger ON aud2_admou.transferout_glcode = transfer_out_ledger.glcode
     LEFT JOIN finsl transfer_out_subledger ON aud2_admou.transferout_slcode = transfer_out_subledger.slcode
     LEFT JOIN fingl transit_ledger ON aud2_admou.transit_glcode = transit_ledger.glcode
     LEFT JOIN finsl transit_subledger ON aud2_admou.transit_slcode = transit_subledger.slcode
     LEFT JOIN fingl transit_diff_ledger ON aud2_admou.transitdiff_glcode = transit_diff_ledger.glcode
     LEFT JOIN finsl transit_diff_subledger ON aud2_admou.transitdiff_slcode = transit_diff_subledger.slcode', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Role', 'ROLE', 'Roles', 1, 'Roles', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_role 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          R.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          R.TRANSACTION_ID,
          R.ID             ROLE_CODE,
          R.ID             MODULE_KEY,
          R.NAME           ROLE_NAME,
          R.NAME           MODULE_KEY_DISPLAY,
          R.DESCRIPTION    DESCRIPTION,
          CASE
             WHEN R.ISEXTINCT = 1 THEN ''YES''
             WHEN R.ISEXTINCT = 0 THEN ''NO''
          END
             EXTINCT,
          R.PROFCODE       USER_PROFILE_CODE,
          P.PROFNAME       USER_PROFILE_NAME,
          CASE
             WHEN R.ROLETYPE = ''I'' THEN ''INTERNAL''
             WHEN R.ROLETYPE = ''E'' THEN ''EXTERNAL''
          END
             ROLE_TYPE,
          R.CREATEDBY      CREATEDBY_USERCODE,
          H1.FNAME         CREATEDBY_USER,
          R.LASTMODIFIEDBY LASTMODIFIEDBY_USERCODE,
          H2.FNAME         LASTMODIFIEDBY_USER
     FROM aud2_role r INNER JOIN (SELECT A.*,
								  RANK()
								  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
								  ORDER BY TRANSACTION_DATE)
								  VERSION_SEQ
								  FROM AUD2_TRANSACTION A
								  WHERE MODULE_SHORTCODE = ''Role'') trans_det 
					  ON (R.ID::varchar = TRANS_DET.HEADER_KEY_VALUE AND R.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN hrdemp h2 ON (R.LASTMODIFIEDBY = H2.ECODE)
INNER JOIN hrdemp h1 ON (R.CREATEDBY = H1.ECODE)
LEFT OUTER JOIN admprof p ON (R.PROFCODE = P.PROFCODE)', 'ID', 'AuditTriggerTemplateAllColumnsNew', 1, 'ID');
INSERT INTO main.aud2_table VALUES ('JobReceipts', 'PRDJRCMAIN', 'Header', 1, 'JobReceiptsHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdjrcmain 
AS 
SELECT TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PRDJRCMAIN.JRCNO             AS MODULE_KEY_DISPLAY,
          AUD2_PRDJRCMAIN.ACTION,
          AUD2_PRDJRCMAIN.CODE              AS CODE,
          AUD2_PRDJRCMAIN.JRCNO             AS JOB_RECEIPT_NUMBER,
          AUD2_PRDJRCMAIN.DOCCODE           AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME              AS DOCSCHEME_NAME,
          AUD2_PRDJRCMAIN.JRC_DATE          AS RECEIPT_DATE,
          AUD2_PRDJRCMAIN.REFNO             AS REFERENCE_NUMBER,
          AUD2_PRDJRCMAIN.REF_DATE          AS REFERENCE_DATE,
          AUD2_PRDJRCMAIN.PCODE             AS JOBBER_CODE,
          FINSL.SLNAME                      AS JOBBER_NAME,
          AUD2_PRDJRCMAIN.PRCODE            AS PROCESS_CODE,
          PRDPR.PRNAME                      AS PROCESS_NAME,
          AUD2_PRDJRCMAIN.REMARKS           AS REMARKS,
          AUD2_PRDJRCMAIN.ADMOU_CODE        AS OU_CODE,
          ADMOU.NAME                        AS OU_NAME,
          AUD2_PRDJRCMAIN.SRVCODE           AS SERVICE_INVOICE_CODE,
          PURSRVMAIN.SCHEME_DOCNO           AS SERVICE_INVOICE_NO,
          AUD2_PRDJRCMAIN.SRVAMT            AS SERVICE_AMOUNT,
          AUD2_PRDJRCMAIN.ECODE             AS CREATED_USER_CODE,
          HRDEMP.FNAME                      AS CREATED_USER_NAME,
          AUD2_PRDJRCMAIN.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                     AS LAST_MODIFIED_USER_NAME,
          AUD2_PRDJRCMAIN.ADMSITE_CODE      AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                      AS TRANSACTION_SITE_NAME,
          AUD2_PRDJRCMAIN.DOCNO             AS DOCUMENT_NUMBER,
          AUD2_PRDJRCMAIN.DOCDT             AS DOCUMENT_DATE,
          AUD2_PRDJRCMAIN.INVGATEIN_CODE    AS GATE_ENTRY_CODE,
          INVGATEIN.GATEINNO                AS GATE_ENTRY_NO,
          AUD2_PRDJRCMAIN.LGTCODE           AS LOGISTICS_CODE,
          INVLGTNOTE.LGTNO                  AS LR_NUMBER,
          AUD2_PRDJRCMAIN.LGTRECQTY         AS LR_QTY,
          AUD2_PRDJRCMAIN.PURSRVDET_CODE    AS SERVICE_INV_DET_CODE,
          CASE AUD2_PRDJRCMAIN.WHETHER_CHARGEABLE
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE ''NO''
          END
             AS WHETHER_CHARGEABLE,
          AUD2_PRDJRCMAIN.ENTRY_SOURCE      AS ENTRY_SOURCE,
          AUD2_PRDJRCMAIN.UDFSTRING01       AS UDFSTRING01,
          AUD2_PRDJRCMAIN.UDFSTRING02       AS UDFSTRING02,
          AUD2_PRDJRCMAIN.UDFSTRING03       AS UDFSTRING03,
          AUD2_PRDJRCMAIN.UDFSTRING04       AS UDFSTRING04,
          AUD2_PRDJRCMAIN.UDFSTRING05       AS UDFSTRING05,
          AUD2_PRDJRCMAIN.UDFSTRING06       AS UDFSTRING06,
          AUD2_PRDJRCMAIN.UDFSTRING07       AS UDFSTRING07,
          AUD2_PRDJRCMAIN.UDFSTRING08       AS UDFSTRING08,
          AUD2_PRDJRCMAIN.UDFSTRING09       AS UDFSTRING09,
          AUD2_PRDJRCMAIN.UDFSTRING10       AS UDFSTRING10,
          AUD2_PRDJRCMAIN.UDFNUM01          AS UDFNUM01,
          AUD2_PRDJRCMAIN.UDFNUM02          AS UDFNUM02,
          AUD2_PRDJRCMAIN.UDFNUM03          AS UDFNUM03,
          AUD2_PRDJRCMAIN.UDFNUM04          AS UDFNUM04,
          AUD2_PRDJRCMAIN.UDFNUM05          AS UDFNUM05,
          AUD2_PRDJRCMAIN.UDFDATE01         AS UDFDATE01,
          AUD2_PRDJRCMAIN.UDFDATE02         AS UDFDATE02,
          AUD2_PRDJRCMAIN.UDFDATE03         AS UDFDATE03,
          AUD2_PRDJRCMAIN.UDFDATE04         AS UDFDATE04,
          AUD2_PRDJRCMAIN.UDFDATE05         AS UDFDATE05
FROM AUD2_PRDJRCMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''JobReceipts'') TRANS_DET
             ON (AUD2_PRDJRCMAIN.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDJRCMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PRDJRCMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
INNER JOIN FINSL FINSL ON AUD2_PRDJRCMAIN.PCODE = FINSL.SLCODE
INNER JOIN PRDPR PRDPR ON AUD2_PRDJRCMAIN.PRCODE = PRDPR.PRCODE
LEFT OUTER JOIN ADMOU ADMOU ON AUD2_PRDJRCMAIN.ADMOU_CODE = ADMOU.CODE
LEFT OUTER JOIN PURSRVMAIN PURSRVMAIN ON AUD2_PRDJRCMAIN.SRVCODE = PURSRVMAIN.SRVCODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PRDJRCMAIN.ADMSITE_CODE = ADMSITE.CODE
LEFT OUTER JOIN INVGATEIN INVGATEIN ON AUD2_PRDJRCMAIN.INVGATEIN_CODE = INVGATEIN.CODE
LEFT OUTER JOIN INVLGTNOTE INVLGTNOTE ON AUD2_PRDJRCMAIN.LGTCODE = INVLGTNOTE.LGTCODE
INNER JOIN HRDEMP HRDEMP ON AUD2_PRDJRCMAIN.ECODE = HRDEMP.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP1 ON AUD2_PRDJRCMAIN.LAST_ACCESS_ECODE = HRDEMP1.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'Header', 1, 'SalesServiceHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salsrvmain
 AS
 SELECT trans_det.version_seq,
    aud.action,
    trans_det.login_user,
    trans_det.transaction_date,
    aud.transaction_id,
    aud.srvcode AS module_key,
    srv.scheme_docno AS module_key_display,
    aud.srvcode AS service_invoice_code,
    aud.srvdt AS service_invoice_date,
    sl.slcode AS customer_code,
    sl.slname AS customer_name,
    aud.grsamt AS gross_amt,
    aud.chgamt AS charge_amt,
    aud.netamt AS net_amt,
    aud.rem AS header_remarks,
    h1.ecode AS createdby_usercode,
    h1.fname AS createdby_user,
    h2.ecode AS lastmodifiedby_usercode,
    h2.fname AS lastmodifiedby_user,
    st.saltermcode AS term_code,
    st.saltermname AS term_name,
    f.code AS trade_group_code,
    f.name AS trade_group_name,
    aud.formapp AS form_appl,
    ff.formcode AS form_code,
    ff.formname AS form_name,
    aud.formno AS form_no,
    aud.formdt AS form_date,
    aud.formamt AS form_amount,
    doc.doccode AS docscheme_code,
    doc.docname AS docscheme_name,
    aud.scheme_docno AS docscheme_no,
    gl.glcode AS debtor_ledger_code,
    gl.glname AS debtor_ledger_name,
    s1.code AS destination_site_code,
    s1.name AS destination_site_name,
    ou.code AS ou_code,
    ou.name AS ou_name,
    s2.code AS transaction_site_code,
    s2.name AS transaction_site_name,
        CASE
            WHEN aud.release_status = ''U''::bpchar THEN ''Unposted''::text
            WHEN aud.release_status = ''P''::bpchar THEN ''Posted''::text
            ELSE NULL::text
        END AS release_status,
    h3.ecode AS released_usercode,
    h3.fname AS released_user,
    aud.owner_gstin_no AS transaction_gstin,
    g1.code AS transaction_gst_statecode,
    g1.name AS gst_state_name,
    aud.cp_gstin_no AS cp_gstin,
    g2.code AS cp_gst_statecode,
    g2.name AS cp_gst_state_name,
    aud.gstappl AS gst_applicability,
    aud.docno AS document_no,
    aud.docdt AS docuement_date,
    aud.entry_source,
    aud.duedt AS credit_due_date,
    aud.udfstring01,
    aud.udfstring02,
    aud.udfstring03,
    aud.udfstring04,
    aud.udfstring05,
    aud.udfstring06,
    aud.udfstring07,
    aud.udfstring08,
    aud.udfstring09,
    aud.udfstring10,
    aud.udfnum01,
    aud.udfnum02,
    aud.udfnum03,
    aud.udfnum04,
    aud.udfnum05,
    aud.udfdate01,
    aud.udfdate02,
    aud.udfdate03,
    aud.udfdate04,
    aud.udfdate05
   FROM aud2_salsrvmain aud
     JOIN ( SELECT a.transaction_id,
            a.transaction_date,
            a.login_user,
            a.module_type,
            a.module_shortcode,
            a.program,
            a.header_key_value,
            rank() OVER (PARTITION BY a.module_shortcode, a.header_key_value ORDER BY a.transaction_date) AS version_seq
           FROM aud2_transaction a
          WHERE a.module_shortcode::text = ''Sale Service Invoice''::text) trans_det ON aud.srvcode::character varying::text = trans_det.header_key_value::text AND aud.transaction_id::text = trans_det.transaction_id::text
     JOIN finsl sl ON aud.pcode = sl.slcode
     JOIN admsite s2 ON aud.admsite_code_owner = s2.code
     JOIN admsite s1 ON aud.admsite_code = s1.code
     JOIN admou ou ON aud.admou_code = ou.code
     JOIN hrdemp h1 ON aud.ecode = h1.ecode
     LEFT JOIN salsrvmain srv ON aud.srvcode = srv.srvcode
     LEFT JOIN fingl gl ON aud.pglcode = gl.glcode
     LEFT JOIN hrdemp h2 ON aud.last_access_ecode = h2.ecode
     LEFT JOIN saltermmain st ON aud.saltermcode = st.saltermcode
     LEFT JOIN fintradegrp f ON aud.saltradegrp_code = f.code
     LEFT JOIN finform ff ON aud.formcode = ff.formcode
     LEFT JOIN admdocscheme doc ON aud.doccode = doc.doccode
     LEFT JOIN hrdemp h3 ON aud.release_ecode = h3.ecode
     LEFT JOIN admgststate g1 ON aud.owner_gstin_state_code = g1.code
     LEFT JOIN admgststate g2 ON aud.cp_gstin_state_code = g2.code', 'SRVCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'SRVCODE');
INSERT INTO main.aud2_table VALUES ('SaleOrder', 'SALORDMAIN', 'Header', 1, 'OrderHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salordmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          AUD2_SALORDMAIN.ACTION              AS ACTION,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          AUD2_SALORDMAIN.TRANSACTION_ID      AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_SALORDMAIN.SCHEME_DOCNO        AS MODULE_KEY_DISPLAY,
          AUD2_SALORDMAIN.ORDCODE             AS ORDER_CODE,
          AUD2_SALORDMAIN.ORDDT               AS ORDER_DATE,
          AUD2_SALORDMAIN.PCODE               AS CUSTOMER_CODE,
          CUSTOMER.SLNAME                     AS CUSTOMER_NAME,
          AUD2_SALORDMAIN.DOCNO               AS DOCUMENT_NO,
          AUD2_SALORDMAIN.DOCDT               AS DOCUMENT_DATE,
          AUD2_SALORDMAIN.AGCODE              AS AGENT_CODE,
          AGENT.SLNAME                        AS AGENT_NAME,
          AUD2_SALORDMAIN.TRPCODE             AS TRANSPORTER_CODE,
          TRANSPORTER.SLNAME                  AS TRANSPORTER_NAME,
          AUD2_SALORDMAIN.DUEDT               AS DUE_DATE,
          AUD2_SALORDMAIN.AUTHORCODE          AS AUTHORIZEDBY_CODE,
          AUTHOR.FNAME                        AS AUTHORISEDBY_NAME,
          AUD2_SALORDMAIN.REM                 AS REMARKS,
          AUD2_SALORDMAIN.ECODE               AS CREATEDBY_USERCODE,
          CREATEDBY.FNAME                     AS CREATEDBY_USER,
          CASE AUD2_SALORDMAIN.SALETYPE
             WHEN ''O'' THEN ''Outright''
             WHEN ''C'' THEN ''Consignment''
             ELSE '' ''
          END
             AS ORDER_TYPE,
          AUD2_SALORDMAIN.DOCCODE             AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                AS DOCSCHEME_NAME,
          AUD2_SALORDMAIN.SCHEME_DOCNO        AS ORDER_NUMBER,
          AUD2_SALORDMAIN.ADMOU_CODE          AS OU_CODE,
          ADMOU.NAME                          AS OU_NAME,
          AUD2_SALORDMAIN.ADMSITE_CODE        AS DESTINATION_SITE_CODE,
          DESTINATION.NAME                    AS DESTINATION_SITE_NAME,
          AUD2_SALORDMAIN.PRICELISTCODE       AS PRICELIST_CODE,
          SALPRICELISTMAIN.PRICELISTNAME      AS PRICELIST_NAME,
          AUD2_SALORDMAIN.ADMSITE_CODE_OWNER  AS TRANSACTION_SITE_CODE,
          SITE.NAME                           AS TRANSACTION_SITE_NAME,
          AUD2_SALORDMAIN.SALTERMCODE         AS TERM_CODE,
          SALTERMMAIN.SALTERMNAME             AS TERM_NAME,
          AUD2_SALORDMAIN.GRSAMT              AS GROSS_AMOUNT,
          AUD2_SALORDMAIN.CHGAMT              AS CHARGE_AMOUNT,
          AUD2_SALORDMAIN.NETAMT              AS NET_AMOUNT,
          AUD2_SALORDMAIN.SALTRADEGRP_CODE    AS TRADE_GROUP_CODE,
          FINTRADEGRP.NAME                    AS TRADE_GROUP_NAME,
          AUD2_SALORDMAIN.FORMCODE            AS FORM_CODE,
          FINFORM.FORMNAME                    AS FORM_NAME,
          AUD2_SALORDMAIN.PSITE_POSORDER_CODE AS POS_ORDER_CODE,
          PSITE_POSORDER.ORDERNO              AS POS_ORDER_NO,
          AUD2_SALORDMAIN.POS_REMARKS         AS POS_REMARKS,
          AUD2_SALORDMAIN.LAST_ACCESS_ECODE   AS LASTMODIFIEDBY_USERCODE,
          LASTMODIFIED.FNAME                  AS LASTMODIFIEDBY_USER,
          AUD2_SALORDMAIN.ISHOLD              AS HOLD_ORDER,
          AUD2_SALORDMAIN.HELDBY              AS HELDBY_USERCODE,
          HELDBY.FNAME                        AS HELDBY_USER,
          AUD2_SALORDMAIN.HELDON              AS HELDON,
          AUD2_SALORDMAIN.RESERVE_INV         AS RESERVATION_REQUIRED
     FROM AUD2_SALORDMAIN INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										ORDER BY TRANSACTION_DATE)
									 VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''SaleOrder'') TRANS_DET
						 ON (AUD2_SALORDMAIN.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
							 AND AUD2_SALORDMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN FINSL CUSTOMER ON AUD2_SALORDMAIN.PCODE = CUSTOMER.SLCODE
LEFT JOIN FINSL AGENT ON AUD2_SALORDMAIN.AGCODE = AGENT.SLCODE
LEFT JOIN FINSL TRANSPORTER ON AUD2_SALORDMAIN.TRPCODE = TRANSPORTER.SLCODE
LEFT JOIN HRDEMP AUTHOR ON AUD2_SALORDMAIN.AUTHORCODE = AUTHOR.ECODE
INNER JOIN HRDEMP CREATEDBY ON AUD2_SALORDMAIN.ECODE = CREATEDBY.ECODE
LEFT JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_SALORDMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT JOIN ADMOU ADMOU ON AUD2_SALORDMAIN.ADMOU_CODE = ADMOU.CODE
LEFT JOIN ADMSITE DESTINATION ON AUD2_SALORDMAIN.ADMSITE_CODE = DESTINATION.CODE
LEFT JOIN SALPRICELISTMAIN SALPRICELISTMAIN ON AUD2_SALORDMAIN.PRICELISTCODE = SALPRICELISTMAIN.PRICELISTCODE
INNER JOIN ADMSITE SITE ON AUD2_SALORDMAIN.ADMSITE_CODE_OWNER = SITE.CODE
LEFT JOIN SALTERMMAIN SALTERMMAIN ON AUD2_SALORDMAIN.SALTERMCODE = SALTERMMAIN.SALTERMCODE
LEFT JOIN FINTRADEGRP FINTRADEGRP ON AUD2_SALORDMAIN.SALTRADEGRP_CODE = FINTRADEGRP.CODE
LEFT JOIN FINFORM FINFORM ON AUD2_SALORDMAIN.FORMCODE = FINFORM.FORMCODE
LEFT JOIN PSITE_POSORDER PSITE_POSORDER ON AUD2_SALORDMAIN.PSITE_POSORDER_CODE = PSITE_POSORDER.CODE
LEFT JOIN HRDEMP LASTMODIFIED  ON AUD2_SALORDMAIN.LAST_ACCESS_ECODE = LASTMODIFIED.ECODE
LEFT JOIN HRDEMP HELDBY ON AUD2_SALORDMAIN.HELDBY = HELDBY.ECODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'ORDCODE');
INSERT INTO main.aud2_table VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'Header', 1, 'GVIssueHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_gvissue_journal 
AS 
SELECT TRANS_DET.VERSION_SEQ                   AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                    AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE              AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE              AS MODULE_KEY,
          AUD2_GVISSUE_JOURNAL.ACTION             AS ACTION,
          AUD2_GVISSUE_JOURNAL.CODE               AS GV_SALES_CODE,
          AUD2_GVISSUE_JOURNAL.SCHEME_DOCNO       AS DOCSCHEME_NO,
          AUD2_GVISSUE_JOURNAL.DOCDATE            AS DOCUMENT_DATE,
          AUD2_GVISSUE_JOURNAL.ADMOU_CODE         AS OU_CODE,
          ou.NAME                                 AS OU_NAME,
          AUD2_GVISSUE_JOURNAL.ADMSITE_CODE       AS OWNER_SITE_CODE,
          OWNER_SITE.NAME                         AS OWNER_SITE_NAME,
          AUD2_GVISSUE_JOURNAL.CUSTOMER_SLCODE    AS SUB_LEDGER_CODE,
          SUB_LEDGER.SLNAME                       AS SUB_LEDGER_NAME,
          AUD2_GVISSUE_JOURNAL.DEBTOR_GLCODE      AS DEBTOR_LEDGER_CODE,
          DEBTOR_LEDGER.GLNAME                    AS DEBTOR_LEDGER_NAME,
          AUD2_GVISSUE_JOURNAL.GVCONTROL_GLCODE   AS CONTROL_LEDGER_CODE,
          CONTROL_LEDGER.GLNAME                   AS CONTROL_LEDGER_NAME,
          AUD2_GVISSUE_JOURNAL.GVDISCOUNT_GLCODE  AS DISCOUNT_LEDGER_CODE,
          DISCOUNT_LEDGER.GLNAME                  AS DISCOUNT_LEDGER_NAME,
          AUD2_GVISSUE_JOURNAL.GROSSAMT           AS GROSS_AMT,
          AUD2_GVISSUE_JOURNAL.DISCOUNTAMT        AS DISCOUNT_AMT,
          AUD2_GVISSUE_JOURNAL.NETAMT             AS NET_AMT,
          AUD2_GVISSUE_JOURNAL.REMARKS            AS REMARKS,
          AUD2_GVISSUE_JOURNAL.PSITE_POSSTLM_CODE AS STORE_SETTLEMENT_CODE,
          STORE_SETTLEMENT.SETTLEDON              AS STORE_SETTLEMENT_DATE,
          AUD2_GVISSUE_JOURNAL.CREATEDBY          AS CREATEDBY_USERCODE,
          CREATEDBY.FNAME                         AS CREATEDBY_USER,
          AUD2_GVISSUE_JOURNAL.LASTMODIFIEDBY     AS LASTMODIFIEDBY_USERCODE,
          LASTMODIFIEDBY.FNAME                    AS LASTMODIFIEDBY_USER,
          CASE AUD2_GVISSUE_JOURNAL.RELEASE_STATUS
             WHEN ''U'' THEN ''Unposted''
             WHEN ''P'' THEN ''Posted''
             ELSE '' ''
          END
             AS STATUS,
          AUD2_GVISSUE_JOURNAL.RELEASE_TIME       AS RELEASEDON,
          AUD2_GVISSUE_JOURNAL.RELEASE_ECODE      AS RELEASED_USERCODE,
          RELEASED.FNAME                          AS RELEASED_USER
FROM AUD2_GVISSUE_JOURNAL
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Gift Voucher Issue'') TRANS_DET
             ON (AUD2_GVISSUE_JOURNAL.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_GVISSUE_JOURNAL.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN ADMOU OU ON AUD2_GVISSUE_JOURNAL.ADMOU_CODE = OU.CODE
INNER JOIN ADMSITE OWNER_SITE ON AUD2_GVISSUE_JOURNAL.ADMSITE_CODE = OWNER_SITE.CODE
LEFT OUTER JOIN FINSL SUB_LEDGER ON AUD2_GVISSUE_JOURNAL.CUSTOMER_SLCODE = SUB_LEDGER.SLCODE
LEFT OUTER JOIN FINGL DEBTOR_LEDGER ON AUD2_GVISSUE_JOURNAL.DEBTOR_GLCODE = DEBTOR_LEDGER.GLCODE
LEFT OUTER JOIN FINGL CONTROL_LEDGER ON AUD2_GVISSUE_JOURNAL.GVCONTROL_GLCODE = CONTROL_LEDGER.GLCODE
LEFT OUTER JOIN FINGL DISCOUNT_LEDGER ON AUD2_GVISSUE_JOURNAL.GVDISCOUNT_GLCODE = DISCOUNT_LEDGER.GLCODE
LEFT OUTER JOIN PSITE_POSSTLM STORE_SETTLEMENT ON AUD2_GVISSUE_JOURNAL.PSITE_POSSTLM_CODE = STORE_SETTLEMENT.CODE
INNER JOIN HRDEMP CREATEDBY ON AUD2_GVISSUE_JOURNAL.CREATEDBY = CREATEDBY.ECODE
LEFT OUTER JOIN HRDEMP LASTMODIFIEDBY ON AUD2_GVISSUE_JOURNAL.LASTMODIFIEDBY = LASTMODIFIEDBY.ECODE
LEFT OUTER JOIN HRDEMP RELEASED ON AUD2_GVISSUE_JOURNAL.RELEASE_ECODE = RELEASED.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('SNDMovement', 'SALINVDET', 'Detail', 1, 'SalesInvoiceDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salinvdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ               AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                AS LOGIN_USER,
          AUD2_SALINVDET.ACTION               AS ACTION,
          AUD2_SALINVDET.TRANSACTION_ID       AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE          AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE          AS MODULE_KEY,
          AUD2_SALINVDET.INVCODE              AS INVOICE_TRANSFER_CODE,
          --SALINVMAIN.SCHEME_DOCNO             AS INVOICE_TRANSFER_NUMBER,
          AUD2_SALINVDET.DCCODE               AS CHALLAN_CODE,
          INVDCMAIN.SCHEME_DOCNO              AS CHALLAN_NUMBER,
          AUD2_SALINVDET.OUTLOCCODE           AS OUT_STOCKPOINT_CODE,
          INVLOC.LOCNAME                      AS OUT_STOCKPOINT_NAME,
          AUD2_SALINVDET.ICODE                AS ICODE,
          INVITEM.BARCODE                     AS ITEM_BARCODE,
          AUD2_SALINVDET.INVQTY               AS QUANTITY,
          AUD2_SALINVDET.RATE                 AS ITEM_RATE,
          AUD2_SALINVDET.REM                  AS REMARKS,
          AUD2_SALINVDET.INVAMT               AS ITEM_AMOUNT,
          AUD2_SALINVDET.CODE                 AS INVOICE_TRANSFER_DET_CODE,
          AUD2_SALINVDET.CHGAMT               AS CHARGE_AMOUNT,
          AUD2_SALINVDET.EFFAMT               AS EFFECTIVE_AMOUNT,
          AUD2_SALINVDET.INVDCDET_CODE        AS CHALLAN_DETAIL_CODE,
          AUD2_SALINVDET.EXCISEMAIN_CODE      AS EXCISE_CODE,
          EXCISEMAIN.TARIFFNO                 AS EXCISE_TARIFF_NO,
          AUD2_SALINVDET.EX_BASIS             AS EXCISE_BASIS,
          AUD2_SALINVDET.EX_EFFRATE           AS EXCISE_EFFRATE,
          AUD2_SALINVDET.EX_ABTFACTOR         AS EXCISE_ABTFACTOR,
          AUD2_SALINVDET.EX_DUTYFACTOR        AS EXCISE_DUTYFACTOR,
          AUD2_SALINVDET.EX_CESSFACTOR        AS EXCISE_CESSFACTOR,
          AUD2_SALINVDET.EX_APPAMT            AS EXCISE_APPAMT,
          AUD2_SALINVDET.EX_DUTYAMT           AS EXCISE_DUTYAMT,
          AUD2_SALINVDET.EX_CESSAMT           AS EXCISE_CESSAMT,
          AUD2_SALINVDET.EX_ROUNDOFF          AS EXCISE_ROUNDOFF,
          AUD2_SALINVDET.TAXAMT               AS ITEM_CHARGETAX_AMOUNT,
          AUD2_SALINVDET.FACTOR               AS DISCOUNT_FACTOR,
          AUD2_SALINVDET.DISCOUNT             AS DISCOUNT_AMT,
          AUD2_SALINVDET.BASIC_RATE           AS BASIC_RATE,
          AUD2_SALINVDET.ROUNDOFF             AS ROUNDOFF_AMT,
          AUD2_SALINVDET.EX_APPLICABLE_FROM   AS EXCISE_APPLICABLE_FROM,
          AUD2_SALINVDET.HSN_SAC_CODE         AS HSN_SAC_CODE,
          AUD2_SALINVDET.GST_ITC_APPL         AS GST_ITC_APPL,
          AUD2_SALINVDET.GLCODE               AS ITEM_GL_CODE,
          FINGL.GLNAME                        AS ITEM_GL_NAME,
          AUD2_SALINVDET.SLCODE               AS ITEM_SL_CODE,
          FINSL.SLNAME                        AS ITEM_SL_NAME,
          AUD2_SALINVDET.GL_CC_APPL           AS ITEM_GL_SITE_APPL,
          AUD2_SALINVDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO     AS BATCH_SERIAL_NO
     FROM AUD2_SALINVDET INNER JOIN(SELECT A.*,
									RANK()
									OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
									ORDER BY TRANSACTION_DATE)
									VERSION_SEQ
									FROM AUD2_TRANSACTION A
									WHERE MODULE_SHORTCODE = ''SNDMovement'') TRANS_DET
						 ON (AUD2_SALINVDET.INVCODE::text = TRANS_DET.HEADER_KEY_VALUE 
						     AND AUD2_SALINVDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          --LEFT JOIN SALINVMAIN SALINVMAIN
          --ON AUD2_SALINVDET.INVCODE = SALINVMAIN.INVCODE
LEFT JOIN INVDCMAIN INVDCMAIN ON AUD2_SALINVDET.DCCODE = INVDCMAIN.DCCODE
INNER JOIN INVLOC INVLOC ON AUD2_SALINVDET.OUTLOCCODE = INVLOC.LOCCODE
INNER JOIN INVITEM INVITEM ON AUD2_SALINVDET.ICODE = INVITEM.ICODE
LEFT JOIN EXCISEMAIN EXCISEMAIN ON AUD2_SALINVDET.EXCISEMAIN_CODE = EXCISEMAIN.CODE
LEFT JOIN FINGL FINGL ON AUD2_SALINVDET.GLCODE = FINGL.GLCODE
LEFT JOIN FINSL FINSL ON AUD2_SALINVDET.SLCODE = FINSL.SLCODE
LEFT JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_SALINVDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'INVCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('MarginRule', 'INVMMRULE_DATE', 'Effective Date', 1, 'RuleApplicability', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invmmrule_date 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          AUD.TRANSACTION_ID,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.CODE,
          AUD.INVMMRULE_CODE MARGINRULE_CODE,
          AUD.INVMMRULE_CODE MODULE_KEY,
          R.NAME             MARGINRULE_NAME,
          R.NAME             MODULE_KEY_DISPLAY,
          AUD.EFF_DTFR       EFFECTIVE_DATE_FROM,
          AUD.EFF_DTTO       EFFECTIVE_DATE_TO,
          AUD.REMARKS        REMARKS
FROM aud2_invmmrule_date aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''MarginRule'') trans_det
			ON ((AUD.INVMMRULE_CODE)::TEXT = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN invmmrule r ON (AUD.INVMMRULE_CODE = R.CODE)', 'INVMMRULE_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('SNDMovement', 'SALINVMAIN', 'Header', 1, 'SalesInvoiceHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salinvmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ                  AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                   AS LOGIN_USER,
          AUD2_SALINVMAIN.TRANSACTION_ID         AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE             AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE             AS MODULE_KEY,
          AUD2_SALINVMAIN.SCHEME_DOCNO           AS MODULE_KEY_DISPLAY,
          AUD2_SALINVMAIN.SCHEME_DOCNO           AS SCHEME_DOCNO,
          AUD2_SALINVMAIN.ACTION                 AS ACTION,
          AUD2_SALINVMAIN.INVCODE                AS INVOICE_TRANSFER_CODE,
          AUD2_SALINVMAIN.INVDT                  AS INVOICE_TRANSFER_DATE,
          AUD2_SALINVMAIN.PCODE                  AS CUSTOMER_CODE,
          FINSL.SLNAME                           AS CUSTOMER_NAME,
          AUD2_SALINVMAIN.DOCNO                  AS DOCUMENT_NO,
          AUD2_SALINVMAIN.DUEDT                  AS CREDIT_DUE_DATE,
          AUD2_SALINVMAIN.AGCODE                 AS AGENT_CODE,
          FINSL1.SLNAME                          AS AGENT_NAME,
          AUD2_SALINVMAIN.AGRATE                 AS AGENT_RATE,
          AUD2_SALINVMAIN.GRSAMT                 AS GROSS_AMT,
          AUD2_SALINVMAIN.CHGAMT                 AS CHARGE_AMT,
          AUD2_SALINVMAIN.NETAMT                 AS NET_AMT,
          AUD2_SALINVMAIN.GLCODE                 AS SALES_GL_CODE,
          FINGL.GLNAME                           AS SALES_GL_NAME,
          AUD2_SALINVMAIN.REM                    AS REMARKS,
          AUD2_SALINVMAIN.ECODE                  AS CREATEDBY_USERCODE,
          HRDEMP.FNAME                           AS CREATEDBY_USER,
          AUD2_SALINVMAIN.SALTERMCODE            AS TERM_CODE,
          SALTERMMAIN.SALTERMNAME                AS TERM_NAME,
          AUD2_SALINVMAIN.LAST_ACCESS_ECODE      AS LASTMODIFIEDBY_USERCODE,
          HRDEMP1.FNAME                          AS LASTMODIFIEDBY_USER,
          AUD2_SALINVMAIN.LGTCODE                AS LOGISTICS_CODE,
          INVLGTNOTE.LGTNO                       AS LOGISTICS_NUMBER,
          AUD2_SALINVMAIN.DOCDT                  AS DOCUMENT_DATE,
          AUD2_SALINVMAIN.DOCCODE                AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                   AS DOCSCHEME_NAME,
          AUD2_SALINVMAIN.SCHEME_DOCNO           AS INVOICE_TRANSFER_NUMBER,
          AUD2_SALINVMAIN.TRPCODE                AS TRANSPORTER_CODE,
          FINSL3.SLNAME                          AS TRANSPORTER_NAME,
          CASE AUD2_SALINVMAIN.SALETYPE
             WHEN ''O'' THEN ''Sales Invoice''
             WHEN ''C'' THEN ''Transfer Out''
             ELSE '' ''
          END
             AS INVOICE_TRANSFER_TYPE,
          AUD2_SALINVMAIN.PGLCODE                AS DEBTOR_LEDGER_CODE,
          FINGL1.GLNAME                          AS DEBTOR_LEDGER_NAME,
          AUD2_SALINVMAIN.SLCODE                 AS SALES_SL_CODE,
          FINSL4.SLNAME                          AS SALES_SL_NAME,
          AUD2_SALINVMAIN.INLOCCODE              AS IN_STOCKPOINT_CODE,
          INVLOC.LOCNAME                         AS IN_STOCKPOINT_NAME,
          AUD2_SALINVMAIN.TRANSITDAYS            AS TRANSIT_DAYS,
          AUD2_SALINVMAIN.ISSECONDARY            AS SECONDARY_STOCK,
          AUD2_SALINVMAIN.GL_CC_APPL             AS SALES_GL_SITE_APPL,
          AUD2_SALINVMAIN.ADMOU_CODE             AS OU_CODE,
          ADMOU.NAME                             AS OU_NAME,
          AUD2_SALINVMAIN.ADMSITE_CODE           AS DESTINATION_SITE_CODE,
          ADMSITE.NAME                           AS DESTINATION_SITE_NAME,
          AUD2_SALINVMAIN.AUTHORIZE_ECODE        AS AUTHORIZEDBY_CODE,
          HRDEMP2.FNAME                          AS AUTHORISEDBY_NAME,
          AUD2_SALINVMAIN.TRANSIT_DUE_DATE       AS TRANSIT_DUE_DATE,
          AUD2_SALINVMAIN.ADMSITE_CODE_OWNER     AS TRANSACTION_SITE_CODE,
          ADMSITE1.NAME                          AS TRANSACTION_SITE_NAME,
          AUD2_SALINVMAIN.FORMAPP                AS FORM_APPL,
          AUD2_SALINVMAIN.FORMNO                 AS FORM_NO,
          AUD2_SALINVMAIN.FORMDT                 AS FORM_DATE,
          AUD2_SALINVMAIN.UDFSTRING01            AS UDFSTRING01,
          AUD2_SALINVMAIN.UDFNUM01               AS UDFNUM01,
          AUD2_SALINVMAIN.UDFNUM02               AS UDFNUM02,
          CASE AUD2_SALINVMAIN.RELEASE_STATUS
             WHEN ''U'' THEN ''Unposted''
             WHEN ''P'' THEN ''Posted''
             ELSE '' ''
          END
             AS RELEASE_STATUS,
          AUD2_SALINVMAIN.RELEASE_ECODE          AS RELEASED_USERCODE,
          HRDEMP3.FNAME                          AS RELEASED_USER,
          AUD2_SALINVMAIN.SALTRADEGRP_CODE       AS TRADE_GROUP_CODE,
          FINTRADEGRP.NAME                       AS TRADE_GROUP_NAME,
          AUD2_SALINVMAIN.FORMCODE               AS FORM_CODE,
          FINFORM.FORMNAME                       AS FORM_NAME,
          AUD2_SALINVMAIN.FORMAMT                AS FORM_AMOUNT,
          AUD2_SALINVMAIN.PRICELISTCODE          AS PRICE_LIST_CODE,
          SALPRICELISTMAIN.PRICELISTNAME         AS PRICE_LIST_NAME,
          AUD2_SALINVMAIN.UDFSTRING02            AS UDFSTRING02,
          AUD2_SALINVMAIN.UDFSTRING03            AS UDFSTRING03,
          AUD2_SALINVMAIN.UDFSTRING04            AS UDFSTRING04,
          AUD2_SALINVMAIN.UDFSTRING05            AS UDFSTRING05,
          AUD2_SALINVMAIN.UDFSTRING06            AS UDFSTRING06,
          AUD2_SALINVMAIN.UDFSTRING07            AS UDFSTRING07,
          AUD2_SALINVMAIN.UDFSTRING08            AS UDFSTRING08,
          AUD2_SALINVMAIN.UDFSTRING09            AS UDFSTRING09,
          AUD2_SALINVMAIN.UDFSTRING10            AS UDFSTRING10,
          AUD2_SALINVMAIN.UDFNUM03               AS UDFNUM03,
          AUD2_SALINVMAIN.UDFNUM04               AS UDFNUM04,
          AUD2_SALINVMAIN.UDFNUM05               AS UDFNUM05,
          AUD2_SALINVMAIN.UDFDATE01              AS UDFDATE01,
          AUD2_SALINVMAIN.UDFDATE02              AS UDFDATE02,
          AUD2_SALINVMAIN.UDFDATE03              AS UDFDATE03,
          AUD2_SALINVMAIN.UDFDATE04              AS UDFDATE04,
          AUD2_SALINVMAIN.UDFDATE05              AS UDFDATE05,
          AUD2_SALINVMAIN.OWNER_GSTIN_NO         AS TRANSACTION_GSTIN,
          AUD2_SALINVMAIN.OWNER_GSTIN_STATE_CODE AS TRANSACTION_GST_STATECODE,
          AUD2_SALINVMAIN.CP_GSTIN_NO            AS CP_GSTIN,
          AUD2_SALINVMAIN.CP_GSTIN_STATE_CODE    AS CP_GST_STATECODE,
          CASE AUD2_SALINVMAIN.GSTAPPL
             WHEN ''Y'' THEN ''GST Tax Invoice''
             WHEN ''N'' THEN ''Non-GST Invoice''
             ELSE '' ''
          END
             AS GST_APPLICABILITY,
          AUD2_SALINVMAIN.SOURCE_INV             AS TRANSACTION_SOURCE,
          AUD2_SALINVMAIN.EWAYBILLNO             AS EWAYBILLNO,
          AUD2_SALINVMAIN.EWAYBILLGENERATEDON    AS EWAYBILLGENERATEDON,
          AUD2_SALINVMAIN.EWAYBILLVALIDUPTO      AS EWAYBILLVALIDUPTO,
          AUD2_SALINVMAIN.MAIN_GL_AMT            AS SALES_GL_AMOUNT
     FROM AUD2_SALINVMAIN INNER JOIN(SELECT A.*,
									 RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
									 FROM AUD2_TRANSACTION A
									 WHERE MODULE_SHORTCODE = ''SNDMovement'') TRANS_DET
						  ON (AUD2_SALINVMAIN.INVCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
						      AND AUD2_SALINVMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN FINSL FINSL ON AUD2_SALINVMAIN.PCODE = FINSL.SLCODE
LEFT JOIN FINSL FINSL1 ON AUD2_SALINVMAIN.AGCODE = FINSL1.SLCODE
LEFT JOIN FINGL FINGL ON AUD2_SALINVMAIN.GLCODE = FINGL.GLCODE
LEFT JOIN HRDEMP HRDEMP ON AUD2_SALINVMAIN.ECODE = HRDEMP.ECODE
LEFT JOIN SALTERMMAIN SALTERMMAIN ON AUD2_SALINVMAIN.SALTERMCODE = SALTERMMAIN.SALTERMCODE
LEFT JOIN HRDEMP HRDEMP1 ON AUD2_SALINVMAIN.LAST_ACCESS_ECODE = HRDEMP1.ECODE
LEFT JOIN INVLGTNOTE INVLGTNOTE ON AUD2_SALINVMAIN.LGTCODE = INVLGTNOTE.LGTCODE
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_SALINVMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT JOIN FINSL FINSL3 ON AUD2_SALINVMAIN.TRPCODE = FINSL3.SLCODE
LEFT JOIN FINGL FINGL1 ON AUD2_SALINVMAIN.PGLCODE = FINGL1.GLCODE
LEFT JOIN FINSL FINSL4 ON AUD2_SALINVMAIN.SLCODE = FINSL4.SLCODE
LEFT JOIN INVLOC INVLOC ON AUD2_SALINVMAIN.INLOCCODE = INVLOC.LOCCODE
INNER JOIN ADMOU ADMOU ON AUD2_SALINVMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_SALINVMAIN.ADMSITE_CODE = ADMSITE.CODE
LEFT JOIN HRDEMP HRDEMP2 ON AUD2_SALINVMAIN.AUTHORIZE_ECODE = HRDEMP2.ECODE
INNER JOIN ADMSITE ADMSITE1 ON AUD2_SALINVMAIN.ADMSITE_CODE_OWNER = ADMSITE1.CODE
LEFT JOIN HRDEMP HRDEMP3 ON AUD2_SALINVMAIN.RELEASE_ECODE = HRDEMP3.ECODE
INNER JOIN FINTRADEGRP FINTRADEGRP ON AUD2_SALINVMAIN.SALTRADEGRP_CODE = FINTRADEGRP.CODE
LEFT JOIN FINFORM FINFORM ON AUD2_SALINVMAIN.FORMCODE = FINFORM.FORMCODE
LEFT JOIN SALPRICELISTMAIN SALPRICELISTMAIN ON AUD2_SALINVMAIN.PRICELISTCODE = SALPRICELISTMAIN.PRICELISTCODE', 'INVCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'INVCODE');
INSERT INTO main.aud2_table VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purinvjrnchg_item 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE                                                      CODE,
          AUD.JRNCODE                                                   MODULE_KEY,
          AUD.CODE                                                      DETAIL_CHARGE_CODE,
          AUD.JRNCODE                                                   DEBIT_CREDIT_NOTE_CODE,
          AUD.PURINVJRNDET_CODE                                         INV_JRN_DET_CODE,
          AUD.SEQ                                                       SEQUENCE,
          AUD.CHGCODE                                                   CHARGE_CODE,
          CHG.CHGNAME                                                   CHARGE_NAME,
          AUD.GLCODE                                                    LEDGER_CODE,
          GL.GLNAME                                                     GENERAL_LEDGER_NAME,
          AUD.SLCODE                                                    SUBLEDGER_CODE,
          SL.SLNAME                                                     SUBLEDGER_NAME,
          AUD.RATE                                                      RATE,
          CASE WHEN AUD.BASIS = ''A'' THEN ''Amount'' ELSE ''Percentage'' END BASIS,
          AUD.SIGN                                                      SIGN,
          AUD.CHGAMT
             CHARGE_AMOUNT,
          AUD.APPAMT
             APPLICABLE_AMOUNT,
          AUD.FORMULAE
             FORMULA,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          CASE
             WHEN AUD.SOURCE = ''F'' THEN ''Fixed''
             WHEN AUD.SOURCE = ''V'' THEN ''VAT''
             WHEN AUD.SOURCE = ''G'' THEN ''GST''
             WHEN AUD.SOURCE = ''E'' THEN ''Excise''
          END
             AS FACTOR_SOURCE,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''I'' THEN ''Item Level''
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line Level''
          END
             AS OPERATION_LEVEL,
          AUD.GST_COMPONENT
             GST_COMPONENT,
          AUD.ROUNDOFF_ADJ_AMT
             ROUNDOFF_ADJUSTED_AMT,
          AUD.ISREVERSE
             GST_REVERSE_CHARGE
FROM aud2_purinvjrnchg_item aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Purchase DN/CN'') trans_det
			ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finchg chg ON AUD.CHGCODE = CHG.CHGCODE  
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'PURINVJRNDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('Production', 'PRDORD', 'Header', 1, 'ProductionHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdord 
AS 
SELECT TRANS_DET.VERSION_SEQ         AS VERSION_SEQ,
          AUD2_PRDORD.ACTION,
          TRANS_DET.LOGIN_USER          AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID      AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE    AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE    AS MODULE_KEY,
          AUD2_PRDORD.SCHEME_DOCNO      AS MODULE_KEY_DISPLAY,
          AUD2_PRDORD.ORDCODE           AS ORDER_CODE,
          AUD2_PRDORD.ORDDT             AS ORDER_DATE,
          AUD2_PRDORD.PCODE             AS JOBBER_CODE,
          FINSL.SLNAME                  AS JOBBER_NAME,
          AUD2_PRDORD.PRCODE            AS PROCESS_CODE,
          PRDPR.PRNAME                  AS PROCESS_NAME,
          AUD2_PRDORD.PRVORDCODE        AS PREVIOUS_ORDER_CODE,
          PRDORD.SCHEME_DOCNO           AS PREVIOUS_ORDER_NUMBER,
          AUD2_PRDORD.DOCNO             AS REFERENCE_NUMBER,
          AUD2_PRDORD.SRVAMT            AS SERVICE_AMOUNT,
          AUD2_PRDORD.REM               AS REMARKS,
          AUD2_PRDORD.ADMOU_CODE        AS OU_CODE,
          ADMOU.NAME                    AS OU_NAME,
          AUD2_PRDORD.ADMSITE_CODE      AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                  AS TRANSACTION_SITE_NAME,
          AUD2_PRDORD.DOCCODE           AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME          AS DOCSCHEME_NAME,
          AUD2_PRDORD.SCHEME_DOCNO      AS DOCUMENT_NUMBER,
          AUD2_PRDORD.AUTH_ECODE        AS AUTHORIZATION_USERCODE,
          AUTHORIZEDBY.FNAME            AS AUTHORIZATION_USER_NAME,
          AUD2_PRDORD.UDFSTRING01       AS UDFSTRING01,
          AUD2_PRDORD.UDFSTRING02       AS UDFSTRING02,
          AUD2_PRDORD.UDFSTRING03       AS UDFSTRING03,
          AUD2_PRDORD.UDFSTRING04       AS UDFSTRING04,
          AUD2_PRDORD.UDFSTRING05       AS UDFSTRING05,
          AUD2_PRDORD.UDFSTRING06       AS UDFSTRING06,
          AUD2_PRDORD.UDFSTRING07       AS UDFSTRING07,
          AUD2_PRDORD.UDFSTRING08       AS UDFSTRING08,
          AUD2_PRDORD.UDFSTRING09       AS UDFSTRING09,
          AUD2_PRDORD.UDFSTRING10       AS UDFSTRING10,
          AUD2_PRDORD.UDFNUM01          AS UDFNUM01,
          AUD2_PRDORD.UDFNUM02          AS UDFNUM02,
          AUD2_PRDORD.UDFNUM03          AS UDFNUM03,
          AUD2_PRDORD.UDFNUM04          AS UDFNUM04,
          AUD2_PRDORD.UDFNUM05          AS UDFNUM05,
          AUD2_PRDORD.UDFDATE01         AS UDFDATE01,
          AUD2_PRDORD.UDFDATE02         AS UDFDATE02,
          AUD2_PRDORD.UDFDATE03         AS UDFDATE03,
          AUD2_PRDORD.UDFDATE04         AS UDFDATE04,
          AUD2_PRDORD.UDFDATE05         AS UDFDATE05,
          AUD2_PRDORD.ENTRY_SOURCE      AS ENTRY_SOURCE,
          AUD2_PRDORD.ECODE             AS CREATED_USER_CODE,
          CREATEDBY.FNAME               AS CREATED_USER_NAME,
          AUD2_PRDORD.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          LAST_MODIFIEDBY.FNAME         AS LAST_MODIFIED_USER_NAME
FROM AUD2_PRDORD
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Production'') TRANS_DET
             ON (AUD2_PRDORD.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDORD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN FINSL FINSL ON AUD2_PRDORD.PCODE = FINSL.SLCODE
INNER JOIN PRDPR PRDPR ON AUD2_PRDORD.PRCODE = PRDPR.PRCODE
LEFT OUTER JOIN PRDORD PRDORD ON AUD2_PRDORD.PRVORDCODE = PRDORD.ORDCODE
LEFT OUTER JOIN ADMOU ADMOU ON AUD2_PRDORD.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PRDORD.ADMSITE_CODE = ADMSITE.CODE
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PRDORD.DOCCODE = ADMDOCSCHEME.DOCCODE
LEFT OUTER JOIN HRDEMP AUTHORIZEDBY ON AUD2_PRDORD.AUTH_ECODE = AUTHORIZEDBY.ECODE
INNER JOIN HRDEMP CREATEDBY ON AUD2_PRDORD.ECODE = CREATEDBY.ECODE
LEFT OUTER JOIN HRDEMP LAST_MODIFIEDBY ON AUD2_PRDORD.LAST_ACCESS_ECODE = LAST_MODIFIEDBY.ECODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'ORDCODE');
INSERT INTO main.aud2_table VALUES ('TaxGroup', 'FINTAXMAIN', 'Tax Group Name', 1, 'TaxGroupName', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fintaxmain 
AS  
SELECT    TRANS_DET.VERSION_SEQ      AS VERSION_SEQ,
          AUD2_FINTAXMAIN.ACTION,
          TRANS_DET.LOGIN_USER       AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID   AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE AS MODULE_KEY,
          AUD2_FINTAXMAIN.TAXNAME    AS MODULE_KEY_DISPLAY,
          AUD2_FINTAXMAIN.TAXCODE    AS TAX_GROUP_CODE,
          AUD2_FINTAXMAIN.TAXNAME    AS TAX_NAME,
          AUD2_FINTAXMAIN.EXT        AS EXTINCT,
          AUD2_FINTAXMAIN.REMARKS    AS REMARKS
     FROM AUD2_FINTAXMAIN
          INNER JOIN(SELECT A.*,
					RANK()
					OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
					FROM AUD2_TRANSACTION A
					WHERE MODULE_SHORTCODE = ''TaxGroup'') TRANS_DET
          ON (AUD2_FINTAXMAIN.TAXCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
		  AND AUD2_FINTAXMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)', 'TAXCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'TAXCODE');
INSERT INTO main.aud2_table VALUES ('JobOrder', 'PRDJOBDET', 'Details', 1, 'JobOrderDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdjobdet 
AS 
SELECT TRANS_DET.VERSION_SEQ             AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER              AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID          AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE        AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE        AS MODULE_KEY,
          AUD2_PRDJOBDET.ACTION,
          AUD2_PRDJOBDET.JOBCODE            AS JOB_CODE,
          AUD2_PRDJOBDET.ASSEMBLY_ICODE     AS ICODE,
          INVITEM.BARCODE                   AS ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDJOBDET.LOTCODE            AS WORKING_PLAN_CODE,
          PRDLOTMAIN.LOTNO                  AS WORKING_PLAN_NUMBER,
          AUD2_PRDJOBDET.OPERATION_SEQ      AS OPERATION_SEQUENCE,
          CASE AUD2_PRDJOBDET.CONSIDER_IN_WIP
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS CONSIDER_IN_WIP,
          AUD2_PRDJOBDET.QTY                AS QUANTITY,
          AUD2_PRDJOBDET.JOB_RATE           AS JOB_RATE,
          AUD2_PRDJOBDET.P_QTY              AS PENDING_QUANTITY,
          AUD2_PRDJOBDET.O_QTY              AS ORDER_QUANTITY,
          AUD2_PRDJOBDET.COMPLETED_QTY      AS COMPLETE_QUANTITY,
          AUD2_PRDJOBDET.CNL_QTY            AS CANCEL_QUANTITY,
          AUD2_PRDJOBDET.REMARKS            AS REMARKS,
          AUD2_PRDJOBDET.CODE               AS CODE,
          AUD2_PRDJOBDET.DUEDT              AS DUE_DATE,
          AUD2_PRDJOBDET.PREV_PRCODE        AS PREVIOUS_PROCESS_CODE,
          AUD2_PRDJOBDET.PREV_OPERATION_SEQ AS PREVIOUS_PROCESS_SEQ,
          AUD2_PRDJOBDET.ASS_SAITEM_CODE    AS ASSEMBLY_SAITEM_CODE,
          PRD_SAITEM.SAINAME                AS ASSEMBLY_SAITEM_NAME,
          AUD2_PRDJOBDET.ALTERNATE_QTY      AS ALTERNATE_QTY
FROM AUD2_PRDJOBDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''JobOrder'') TRANS_DET
             ON (AUD2_PRDJOBDET.JOBCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDJOBDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVITEM INVITEM ON AUD2_PRDJOBDET.ASSEMBLY_ICODE = INVITEM.ICODE
LEFT OUTER JOIN PRDLOTMAIN PRDLOTMAIN ON AUD2_PRDJOBDET.LOTCODE = PRDLOTMAIN.CODE
LEFT OUTER JOIN PRD_SAITEM PRD_SAITEM ON AUD2_PRDJOBDET.ASS_SAITEM_CODE = PRD_SAITEM.CODE', 'JOBCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('POSGRC', 'PSITE_GRCCHGITEM', 'Item Charge', 1, 'PurchaseGRTChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_psite_grcchgitem 
AS 
SELECT TRANS_DET.VERSION_SEQ                    AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                     AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                 AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE               AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE               AS MODULE_KEY,
          AUD2_PSITE_GRCCHGITEM.ACTION,
          AUD2_PSITE_GRCCHGITEM.CODE               AS CODE,
          AUD2_PSITE_GRCCHGITEM.PSITE_GRC_CODE     AS RETAIL_GRC_CODE,
          AUD2_PSITE_GRCCHGITEM.PSITE_GRCITEM_CODE AS GRC_ITEM_CODE,
          AUD2_PSITE_GRCCHGITEM.CHARGE_CODE        AS CHARGE_CODE,
          SALCHG.SALCHGNAME                        AS CHARGE_NAME,
          AUD2_PSITE_GRCCHGITEM.FACTOR             AS CHARGE_FACTOR,
          CASE AUD2_PSITE_GRCCHGITEM.BASIS
             WHEN ''P'' THEN ''PERCENTAGE A''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_PSITE_GRCCHGITEM.SIGN               AS CHARGE_SIGN,
          CASE AUD2_PSITE_GRCCHGITEM.ISTAX
             WHEN 1 THEN ''YES''
             WHEN 0 THEN ''NO''
             ELSE '' ''
          END
             AS IS_TAX,
          CASE AUD2_PSITE_GRCCHGITEM.SOURCE
             WHEN ''F'' THEN ''FIXED''
             WHEN ''V'' THEN ''VAT''
             WHEN ''E'' THEN ''EXCISE''
             WHEN ''G'' THEN ''GST''
             ELSE '' ''
          END
             AS SOURCE,
          AUD2_PSITE_GRCCHGITEM.CHARGEAMT          AS CHARGE_AMOUNT,
          AUD2_PSITE_GRCCHGITEM.CHARGEAPPAMT       AS CHARGE_APPLICABLE_AMT,
          AUD2_PSITE_GRCCHGITEM.ADMSITE_CODE       AS OWNER_SITE_CODE,
          ADMSITE.NAME                             AS OWNER_SITE_NAME,
          AUD2_PSITE_GRCCHGITEM.FORMULA            AS FORMULA,
          AUD2_PSITE_GRCCHGITEM.GSTCOMPONENT       AS GST_COMPONENT
FROM AUD2_PSITE_GRCCHGITEM
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''POSGRC'') TRANS_DET
             ON (AUD2_PSITE_GRCCHGITEM.PSITE_GRC_CODE = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PSITE_GRCCHGITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN SALCHG SALCHG ON AUD2_PSITE_GRCCHGITEM.CHARGE_CODE = SALCHG.SALCHGCODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PSITE_GRCCHGITEM.ADMSITE_CODE = ADMSITE.CODE', 'PSITE_GRC_CODE', 'AuditTriggerTemplateAllColumnsNew', 4, 'CODE');
INSERT INTO main.aud2_table VALUES ('Gift Voucher Issue', 'GVISSUEPAYMENT_JOURNAL', 'Detail', 1, 'GVIssueDetail', 'GVISSUEPAYMENT_JRNL', NULL, 'CREATE OR REPLACE VIEW v_aud2_gvissuepayment_journal 
AS 
SELECT TRANS_DET.VERSION_SEQ                            AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                             AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                         AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE                       AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE                       AS MODULE_KEY,
          AUD2_GVISSUEPAYMENT_JOURNAL.ACTION               AS ACTION,
          AUD2_GVISSUEPAYMENT_JOURNAL.CODE                 AS GV_SALES_PAYMENT_CODE,
          AUD2_GVISSUEPAYMENT_JOURNAL.GVISSUE_JOURNAL_CODE AS GV_SALES_CODE,
          -- GV_SALES.SCHEME_DOCNO                            AS GV_SALES_NO,
          AUD2_GVISSUEPAYMENT_JOURNAL.GLCODE               AS LEDGER_CODE,
          LEDGER.GLNAME                                    AS LEDGER_NAME,
          AUD2_GVISSUEPAYMENT_JOURNAL.SLCODE               AS SUB_LEDGER_CODE,
          SUB_LEDGER.SLNAME                                AS SUB_LEDGER_NAME,
          AUD2_GVISSUEPAYMENT_JOURNAL.AMOUNT               AS AMOUNT,
          AUD2_GVISSUEPAYMENT_JOURNAL.TENDER_MASTER_CODE   AS TENDER_CODE,
          AUD2_GVISSUEPAYMENT_JOURNAL.REFNO                AS MOP_REF_NO,
          AUD2_GVISSUEPAYMENT_JOURNAL.REFDATETIME          AS MOP_REF_DATE,
          AUD2_GVISSUEPAYMENT_JOURNAL.REMARKS              AS REMARKS,
          AUD2_GVISSUEPAYMENT_JOURNAL.ADDITIONALDETAILS1
             AS ADDITIONAL_DETAILS_1,
          AUD2_GVISSUEPAYMENT_JOURNAL.ADDITIONALDETAILS2
             AS ADDITIONAL_DETAILS_2,
          AUD2_GVISSUEPAYMENT_JOURNAL.ADDITIONALDETAILS3
             AS ADDITIONAL_DETAILS_3,
          AUD2_GVISSUEPAYMENT_JOURNAL.ADDITIONALDETAILS4
             AS ADDITIONAL_DETAILS_4
FROM AUD2_GVISSUEPAYMENT_JOURNAL
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Gift Voucher Issue'') TRANS_DET
             ON (AUD2_GVISSUEPAYMENT_JOURNAL.GVISSUE_JOURNAL_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_GVISSUEPAYMENT_JOURNAL.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          --LEFT OUTER JOIN GVISSUE_JOURNAL GV_SALES
          --ON AUD2_GVISSUEPAYMENT_JOURNAL.GVISSUE_JOURNAL_CODE =
          --GV_SALES.CODE
LEFT OUTER JOIN FINGL LEDGER ON AUD2_GVISSUEPAYMENT_JOURNAL.GLCODE = LEDGER.GLCODE
LEFT OUTER JOIN FINSL SUB_LEDGER ON AUD2_GVISSUEPAYMENT_JOURNAL.SLCODE = SUB_LEDGER.SLCODE', 'GVISSUE_JOURNAL_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('SaleOrder', 'SALORDCHG_ITEM', 'Charge Item', 1, 'SODetailCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salordchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ              AS VERSION_SEQ,
          AUD2_SALORDCHG_ITEM.ACTION         AS ACTION,
          TRANS_DET.LOGIN_USER               AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE         AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE         AS MODULE_KEY,
          AUD2_SALORDCHG_ITEM.CODE           AS ORDER_CHARGE_ITEM_CODE,
          AUD2_SALORDCHG_ITEM.ORDCODE        AS ORDER_CODE,
          --SALORDMAIN.SCHEME_DOCNO             AS ORDER_NUMBER,
          AUD2_SALORDCHG_ITEM.SALORDDET_CODE AS ORDER_DETAIL_CODE,
          AUD2_SALORDCHG_ITEM.SEQ            AS SEQUENCE,
          AUD2_SALORDCHG_ITEM.SALCHGCODE     AS CHARGE_CODE,
          SALCHG.SALCHGNAME                  AS CHARGE_NAME,
          AUD2_SALORDCHG_ITEM.GLCODE         AS GENERAL_LEDGER_CODE,
          FINGL.GLNAME                       AS GENERAL_LEDGER_NAME,
          AUD2_SALORDCHG_ITEM.SLCODE         AS SUB_LEDGER_CODE,
          SUBLEDGER.SLNAME                   AS SUB_LEDGER_NAME,
          AUD2_SALORDCHG_ITEM.RATE           AS FACTOR,
          --SALORDDET.ICODE                     AS ICODE,
          --SALORDDET.ORDQTY                 AS ORDER_QTY,
          --SALORDDET.RATE                 AS ITEM_RATE,
          CASE AUD2_SALORDCHG_ITEM.BASIS
             WHEN ''A'' THEN ''Amount''
             WHEN ''P'' THEN ''Percentage''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_SALORDCHG_ITEM.SIGN           AS SIGN,
          AUD2_SALORDCHG_ITEM.CHGAMT         AS CHARGE_AMOUNT,
          AUD2_SALORDCHG_ITEM.APPAMT         AS APPLICABLE_AMOUNT,
          AUD2_SALORDCHG_ITEM.FORMULAE       AS FORMULA,
          AUD2_SALORDCHG_ITEM.ISTAX          AS ISTAX,
          AUD2_SALORDCHG_ITEM.SOURCE         AS FACTOR_SOURCE,
          CASE
             WHEN AUD2_SALORDCHG_ITEM.OPERATION_LEVEL = ''I'' THEN ''Item''
             WHEN AUD2_SALORDCHG_ITEM.OPERATION_LEVEL = ''L'' THEN ''Line''
          END
             AS OPERATION_LEVEL,
          AUD2_SALORDCHG_ITEM.GST_COMPONENT  AS GST_COMPONENT,
          AUD2_SALORDCHG_ITEM.TRANSACTION_ID AS TRANSACTION_ID
     FROM AUD2_SALORDCHG_ITEM INNER JOIN(SELECT A.*,
										 RANK()
										 OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
											ORDER BY TRANSACTION_DATE)
										 VERSION_SEQ
										 FROM AUD2_TRANSACTION A
										 WHERE MODULE_SHORTCODE = ''SaleOrder'') TRANS_DET
							  ON (AUD2_SALORDCHG_ITEM.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
								  AND AUD2_SALORDCHG_ITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
--LEFT JOIN SALORDMAIN SALORDMAIN --ON AUD2_SALORDCHG_ITEM.ORDCODE = SALORDMAIN.ORDCODE
--LEFT JOIN SALORDDET SALORDDET --ON AUD2_SALORDCHG_ITEM.SALORDDET_CODE = SALORDDET.CODE
INNER JOIN SALCHG SALCHG ON AUD2_SALORDCHG_ITEM.SALCHGCODE = SALCHG.SALCHGCODE
LEFT JOIN FINGL FINGL ON AUD2_SALORDCHG_ITEM.GLCODE = FINGL.GLCODE
LEFT JOIN FINSL SUBLEDGER ON AUD2_SALORDCHG_ITEM.SLCODE = SUBLEDGER.SLCODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'SALORDDET_CODE#SALCHGCODE');
INSERT INTO main.aud2_table VALUES ('POSGRC', 'PSITE_GRCITEM', 'Item Details', 1, 'POSGRCDetail', NULL, NULL, 'CREATE OR REPLACE VIEW V_AUD2_PSITE_GRCITEM
 AS
 SELECT TRANS_DET.VERSION_SEQ,
    TRANS_DET.LOGIN_USER,
    TRANS_DET.TRANSACTION_ID,
    TRANS_DET.TRANSACTION_DATE,
    TRANS_DET.HEADER_KEY_VALUE AS MODULE_KEY,
    AUD2_PSITE_GRCITEM.ACTION,
    AUD2_PSITE_GRCITEM.CODE,
    AUD2_PSITE_GRCITEM.PSITE_GRC_CODE AS RETAIL_GRC_CODE,
    AUD2_PSITE_GRCITEM.DCCODE AS CHALLAN_CODE,
    INVDCMAIN.SCHEME_DOCNO AS CHALLAN_NUMBER,
    AUD2_PSITE_GRCITEM.SALINVDET_CODE AS INVOICE_DET_CODE,
    AUD2_PSITE_GRCITEM.ICODE,
    INVITEM.BARCODE AS ITEM_BARCODE,
    AUD2_PSITE_GRCITEM.RECEIVEQTY AS ITEM_RECEIVE_QUANTITY,
    AUD2_PSITE_GRCITEM.DAMAGEQTY AS ITEM_DAMAGE_QUANTITY,
    AUD2_PSITE_GRCITEM.SHORTEXCESSQTY AS ITEM_SHORT_EXCESS_QTY,
    AUD2_PSITE_GRCITEM.RATE,
    AUD2_PSITE_GRCITEM.RECEIVEAMT AS RECEIVE_AMOUNT,
    AUD2_PSITE_GRCITEM.DAMAGEAMT AS DAMAGE_AMOUNT,
    AUD2_PSITE_GRCITEM.SHORTEXCESSAMT AS SHORT_EXCESS_AMOUNT,
    AUD2_PSITE_GRCITEM.LINEREMARKS AS REMARKS,
    AUD2_PSITE_GRCITEM.ADMSITE_CODE AS OWNER_SITE_CODE,
    ADMSITE.NAME AS OWNER_SITE_NAME,
    AUD2_PSITE_GRCITEM.PSITE_PACKET_CODE AS POS_PACKET_NUMBER,
    AUD2_PSITE_GRCITEM.PSITE_GRTITEM_CODE AS POS_GRT_ITEM_NUMBER,
    AUD2_PSITE_GRCITEM.COSTRATE AS COST_RATE,
    AUD2_PSITE_GRCITEM.SITE_COSTRATE,
    AUD2_PSITE_GRCITEM.GLCODE AS LEDGER_CODE,
    FINGL.GLNAME AS LEDGER_NAME,
    AUD2_PSITE_GRCITEM.SLCODE AS SUBLEDGER_CODE,
    FINSL.SLNAME AS SUBLEDGER_NAME,
    AUD2_PSITE_GRCITEM.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
    INVBATCH_SERIAL.BATCH_SERIAL_NO AS BATCH_SERIAL_NUMBER
   FROM AUD2_PSITE_GRCITEM
     JOIN ( SELECT A.TRANSACTION_ID,
            A.TRANSACTION_DATE,
            A.LOGIN_USER,
            A.MODULE_TYPE,
            A.MODULE_SHORTCODE,
            A.PROGRAM,
            A.HEADER_KEY_VALUE,
            RANK() OVER (PARTITION BY A.MODULE_SHORTCODE, A.HEADER_KEY_VALUE ORDER BY A.TRANSACTION_DATE) AS VERSION_SEQ
           FROM AUD2_TRANSACTION A
          WHERE A.MODULE_SHORTCODE::TEXT = ''POSGRC''::TEXT) TRANS_DET ON AUD2_PSITE_GRCITEM.PSITE_GRC_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE::TEXT AND AUD2_PSITE_GRCITEM.TRANSACTION_ID::TEXT = TRANS_DET.TRANSACTION_ID::TEXT
     JOIN INVDCMAIN INVDCMAIN ON AUD2_PSITE_GRCITEM.DCCODE = INVDCMAIN.DCCODE
     JOIN INVITEM INVITEM ON AUD2_PSITE_GRCITEM.ICODE::TEXT = INVITEM.ICODE::TEXT
     LEFT JOIN ADMSITE ADMSITE ON AUD2_PSITE_GRCITEM.ADMSITE_CODE = ADMSITE.CODE
     LEFT JOIN FINGL FINGL ON AUD2_PSITE_GRCITEM.GLCODE = FINGL.GLCODE
     LEFT JOIN FINSL FINSL ON AUD2_PSITE_GRCITEM.SLCODE = FINSL.SLCODE
     LEFT JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_PSITE_GRCITEM.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'PSITE_GRC_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Sale Service Invoice', 'SALSRVCHG_ITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salsrvchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.SRVCODE          MODULE_KEY,
          AUD.CODE             CODE,
          AUD.SRVCODE          SERVICE_INVOICE_CODE,
          AUD.SEQ              SEQUENCE,
          S.SALCHGCODE         CHARGE_CODE,
          S.SALCHGNAME         CHARGE_NAME,
          AUD.RATE             FACTOR,
          CASE
             WHEN AUD.BASIS = ''A'' THEN ''AMOUNT''
             WHEN AUD.BASIS = ''P'' THEN ''PERCENTAGE''
          END
             BASIS,
          AUD.SIGN             SIGN,
          AUD.CHGAMT           CHARGE_AMOUNT,
          AUD.APPAMT           APPLICABLE_AMOUNT,
          AUD.FORMULAE         FORMULA,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line''
             WHEN AUD.OPERATION_LEVEL = ''I'' THEN ''Item''
          END
             OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          CASE
             WHEN AUD.SOURCE = ''G'' THEN ''GST''
             WHEN AUD.SOURCE = ''F'' THEN ''Fixed''
             WHEN AUD.SOURCE = ''E'' THEN ''Excise''
          END
             FACTOR_SOURCE,
          AUD.CODE             DETAIL_CHARGE_CODE,
          GL.GLCODE            GENERAL_LEDGER_CODE,
          GL.GLNAME            GENERAL_LEDGER_NAME,
          SL.SLCODE            SUB_LEDGER_CODE,
          SL.SLNAME            SUB_LEDGER_NAME,
          AUD.GST_COMPONENT    GST_COMPONENT,
          AUD.ROUNDOFF_ADJ_AMT ROUNDOFF_ADJUSTED_AMT
     FROM aud2_salsrvchg_item aud INNER JOIN (SELECT A.*,
												RANK()
												OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
												ORDER BY TRANSACTION_DATE)
												VERSION_SEQ
												FROM AUD2_TRANSACTION A
												WHERE MODULE_SHORTCODE = ''Sale Service Invoice'') trans_det 
								  ON (AUD.SRVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE
									  AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN salchg s ON (AUD.CHGCODE = S.SALCHGCODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'SRVCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'SALSRVDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('Purchase Service Debit Note', 'PURSRVJRNDET', 'Details', 1, 'PurchaseServiceDNDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvjrndet 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID TRANSACTION_ID,
          AUD.JRNCODE        SRV_DEBIT_NOTE_CODE,
          AUD.JRNCODE        MODULE_KEY,
          AUD.JRNDT          SRV_DEBIT_NOTE_DATE,
          AUD.SRVAMT         SERVICE_AMOUNT,
          GL.GLCODE          LEDGER_CODE,
          GL.GLNAME          LEDGER_NAME,
          SL.SLCODE          SUBLEDGER_CODE,
          SL.SLNAME          SUBLEDGER_NAME,
          SER.SERVICECODE    SERVICE_CODE,
          SER.SERVICENAME    SERVICE_NAME,
          AUD.CODE           CODE,
          AUD.QTY            QUANTITY,
          AUD.RATE           RATE,
          AUD.HSN_SAC_CODE   HSN_SAC_CODE,
          SRV.CODE           SERVICE_INV_DET_CODE,
          SRV.CODE           SERVICE_INV_DET_CODE_NO,
          AUD.GST_ITC_APPL   GST_ITC_APPL,
          F.TAXNAME          TAX_GROUP_NAME
     FROM aud2_pursrvjrndet aud INNER JOIN (SELECT A.*, 
											RANK() 
											OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE 
											ORDER BY TRANSACTION_DATE) VERSION_SEQ
											FROM AUD2_TRANSACTION A
											WHERE MODULE_SHORTCODE = ''Purchase Service Debit Note'') trans_det 
											ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN pursrvdet srv ON AUD.PURSRVDET_CODE = SRV.CODE
INNER JOIN purservice ser ON AUD.SERVICECODE = SER.SERVICECODE
INNER JOIN fingl gl ON AUD.GLCODE = GL.GLCODE
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN fintaxmain f ON (AUD.TAXCODE = F.TAXCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvjrnchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID       TRANSACTION_ID,
          AUD.CODE                 CODE,
          AUD.JRNCODE              MODULE_KEY,
          JRN.SCHEME_DOCNO         MODULE_KEY_DISPLAY,
          AUD.JRNCODE              SRV_DEBIT_NOTE_CODE,
          AUD.JRNDT                SRV_DEBIT_NOTE_DATE,
          FIN.CHGCODE              CHARGE_CODE,
          FIN.CHGNAME              CHARGE_NAME,
          AUD.RATE                 FACTOR,
          AUD.SIGN                 SIGN,
          AUD.CHGAMT               CHARGE_AMOUNT,
          GL.GLCODE                LEDGER_CODE,
          GL.GLNAME                LEDGER_NAME,
          FF.FORMCODE              FORM_CODE,
          FF.FORMNAME              FORM_NAME,
          SL.SLCODE                SUB_LEDGER_CODE,
          SL.SLNAME                SUBLEDGER_NAME,
          AUD.SEQ                  SEQUENCE,
          AUD.APPAMT               APPLICABLE_AMOUNT,
          AUD.FORMULAE             FORMULA,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line Level''
             WHEN AUD.OPERATION_LEVEL = ''H'' THEN ''Header Level''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          CASE
             WHEN AUD.SOURCE = ''G'' THEN ''GST''
             WHEN AUD.SOURCE = ''F'' THEN ''Fixed''
             WHEN AUD.SOURCE = ''E'' THEN ''Excise''
          END
             FACTOR_SOURCE,
          CASE
             WHEN AUD.BASIS = ''P'' THEN ''Percentage''
             WHEN AUD.BASIS = ''A'' THEN ''Amount''
          END
             BASIS,
          AUD.WITHOUT_TERM_FORMULA WITHOUT_TERM_FORMULA,
          AUD.GST_COMPONENT        GST_COMPONENT,
          AUD.ISREVERSE            GST_REVERSE_CHARGE
     FROM aud2_pursrvjrnchg aud INNER JOIN (SELECT A.*, 
											RANK() 
											OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
											FROM AUD2_TRANSACTION A 
											WHERE MODULE_SHORTCODE = ''Purchase Service Debit Note'') trans_det 
											ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finchg fin ON AUD.CHGCODE = FIN.CHGCODE 
LEFT OUTER JOIN pursrvjrnmain jrn ON (AUD.JRNCODE = JRN.JRNCODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN finform ff ON (AUD.FORMCODE = FF.FORMCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'JRNCODE#CHGCODE#RATE#GLCODE#COALESCE(SLCODE,0)#FORMULAE#ISTAX#SOURCE#BASIS');
INSERT INTO main.aud2_table VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'Header', 1, 'PurchaseOrderCancelHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purordcnlmain 
AS 
SELECT TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          AUD2_PURORDCNLMAIN.ACTION,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_PURORDCNLMAIN.SCHEME_DOCNO      AS MODULE_KEY_DISPLAY,
          AUD2_PURORDCNLMAIN.CNLCODE           AS CANCEL_ORDER_CODE,
          AUD2_PURORDCNLMAIN.CNLDT             AS CANCEL_DATE,
          AUD2_PURORDCNLMAIN.DOCNO             AS DOCUMENT_NUMBER,
          AUD2_PURORDCNLMAIN.REM               AS REMARKS,
          AUD2_PURORDCNLMAIN.ECODE             AS CREATED_USER_CODE,
          HRDEMP.FNAME                         AS CREATED_USER_NAME,
          AUD2_PURORDCNLMAIN.ADMOU_CODE        AS OU_CODE,
          ADMOU.NAME                           AS OU_NAME,
          AUD2_PURORDCNLMAIN.DOCCODE           AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                 AS DOCSCHEME_NAME,
          AUD2_PURORDCNLMAIN.SCHEME_DOCNO      AS CANCELLATION_NUMBER,
          AUD2_PURORDCNLMAIN.ADMSITE_CODE      AS TRANSACTION_SITE_CODE,
          ADMSITE.NAME                         AS TRANSACTION_SITE_NAME,
          AUD2_PURORDCNLMAIN.LAST_ACCESS_ECODE AS LASTMODIFIEDBY_USERCODE,
          LASTMODIFIEDBY.FNAME                 AS LASTMODIFIEDBY_USER,
          CASE AUD2_PURORDCNLMAIN.SET_APPLICABLE
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS SET_APPLICABLE,
          AUD2_PURORDCNLMAIN.UDFSTRING01       AS UDFSTRING01,
          AUD2_PURORDCNLMAIN.UDFSTRING02       AS UDFSTRING02,
          AUD2_PURORDCNLMAIN.UDFSTRING03       AS UDFSTRING03,
          AUD2_PURORDCNLMAIN.UDFSTRING04       AS UDFSTRING04,
          AUD2_PURORDCNLMAIN.UDFSTRING05       AS UDFSTRING05,
          AUD2_PURORDCNLMAIN.UDFSTRING06       AS UDFSTRING06,
          AUD2_PURORDCNLMAIN.UDFSTRING07       AS UDFSTRING07,
          AUD2_PURORDCNLMAIN.UDFSTRING08       AS UDFSTRING08,
          AUD2_PURORDCNLMAIN.UDFSTRING09       AS UDFSTRING09,
          AUD2_PURORDCNLMAIN.UDFSTRING10       AS UDFSTRING10,
          AUD2_PURORDCNLMAIN.UDFNUM01          AS UDFNUM01,
          AUD2_PURORDCNLMAIN.UDFNUM02          AS UDFNUM02,
          AUD2_PURORDCNLMAIN.UDFNUM03          AS UDFNUM03,
          AUD2_PURORDCNLMAIN.UDFNUM04          AS UDFNUM04,
          AUD2_PURORDCNLMAIN.UDFNUM05          AS UDFNUM05,
          AUD2_PURORDCNLMAIN.UDFDATE01         AS UDFDATE01,
          AUD2_PURORDCNLMAIN.UDFDATE02         AS UDFDATE02,
          AUD2_PURORDCNLMAIN.UDFDATE03         AS UDFDATE03,
          AUD2_PURORDCNLMAIN.UDFDATE04         AS UDFDATE04,
          AUD2_PURORDCNLMAIN.UDFDATE05         AS UDFDATE05,
          AUD2_PURORDCNLMAIN.ENTRY_SOURCE      AS ENTRY_SOURCE
FROM AUD2_PURORDCNLMAIN
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''CancelPurchaseOrder'') TRANS_DET
             ON (AUD2_PURORDCNLMAIN.CNLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PURORDCNLMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN ADMOU ADMOU ON AUD2_PURORDCNLMAIN.ADMOU_CODE = ADMOU.CODE
INNER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PURORDCNLMAIN.DOCCODE = ADMDOCSCHEME.DOCCODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PURORDCNLMAIN.ADMSITE_CODE = ADMSITE.CODE
INNER JOIN HRDEMP HRDEMP ON AUD2_PURORDCNLMAIN.ECODE = HRDEMP.ECODE
LEFT OUTER JOIN HRDEMP LASTMODIFIEDBY ON AUD2_PURORDCNLMAIN.LAST_ACCESS_ECODE = LASTMODIFIEDBY.ECODE', 'CNLCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CNLCODE');
INSERT INTO main.aud2_table VALUES ('PurchaseOrder', 'PURORDCHG_ITEM', 'Charge Item', 1, 'PODetailCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purordchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ              AS VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER               AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE         AS TRANSACTION_DATE,
          AUD2_PURORDCHG_ITEM.TRANSACTION_ID AS TRANSACTION_ID,
          TRANS_DET.HEADER_KEY_VALUE         AS MODULE_KEY,
          AUD2_PURORDCHG_ITEM.ORDCODE        AS ORDER_CODE,
          AUD2_PURORDCHG_ITEM.PURORDDET_CODE AS ORDER_DETAIL_CODE,
          AUD2_PURORDCHG_ITEM.SEQ            AS SEQUENCE,
          AUD2_PURORDCHG_ITEM.CHGCODE        AS CHARGE_CODE,
          FINCHG.CHGNAME                     AS CHARGE_NAME,
          AUD2_PURORDCHG_ITEM.RATE           AS FACTOR,
          CASE AUD2_PURORDCHG_ITEM.BASIS
             WHEN ''A'' THEN ''Amount''
             WHEN ''P'' THEN ''Percentage''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_PURORDCHG_ITEM.SIGN           AS SIGN,
          AUD2_PURORDCHG_ITEM.CHGAMT         AS CHARGE_AMOUNT,
          AUD2_PURORDCHG_ITEM.APPAMT         AS APPLICABLE_AMOUNT,
          AUD2_PURORDCHG_ITEM.FORMULAE       AS FORMULA,
          CASE AUD2_PURORDCHG_ITEM.OPERATION_LEVEL
             WHEN ''L'' THEN ''Line''
             WHEN ''I'' THEN ''Item''
             ELSE '' ''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD2_PURORDCHG_ITEM.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD2_PURORDCHG_ITEM.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          CASE AUD2_PURORDCHG_ITEM.SOURCE
             WHEN ''F'' THEN ''Fixed''
             WHEN ''V'' THEN ''VAT''
             WHEN ''E'' THEN ''Excise''
             WHEN ''G'' THEN ''GST''
             ELSE '' ''
          END
             FACTOR_SOURCE,
          AUD2_PURORDCHG_ITEM.CODE           AS ORDER_CHARGE_ITEM_CODE,
          AUD2_PURORDCHG_ITEM.GST_COMPONENT  AS GST_COMPONENT,
          CASE
             WHEN AUD2_PURORDCHG_ITEM.ISREVERSE = ''Y'' THEN ''YES''
             WHEN AUD2_PURORDCHG_ITEM.ISREVERSE = ''N'' THEN ''NO''
          END
             GST_REVERSE_CHARGE
     FROM AUD2_PURORDCHG_ITEM INNER JOIN(SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE 
										      ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''PurchaseOrder'') TRANS_DET
							  ON (AUD2_PURORDCHG_ITEM.ORDCODE::text = TRANS_DET.HEADER_KEY_VALUE 
							      AND AUD2_PURORDCHG_ITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINCHG FINCHG ON AUD2_PURORDCHG_ITEM.CHGCODE = FINCHG.CHGCODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'PURORDDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('HSNSACMaster', 'INVHSNSACSLAB', 'Slab Details', 1, 'SlabDefinition', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invhsnsacslab 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE               HSN_SAC_SLAB_CODE,
          AUD.INVHSNSACMAIN_CODE HSN_SAC_INTERNAL_CODE,
          AUD.INVHSNSACMAIN_CODE MODULE_KEY,
          H.CODE                 HSN_SAC_CODE,
          AUD.INVHSNSACDET_CODE  HSN_SAC_DETAIL_CODE,
          D.EFFECTIVE_DATE       EFFECTIVE_DATE,
          AUD.AMOUNT_FROM        AMOUNT_FROM,
          AUD.INVGSTRATE_CODE    GST_RATE_CODE,
          G.TAX_NAME             GST_RATE_NAME,
          AUD.REMARKS            REMARKS
FROM aud2_invhsnsacslab aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''HSNSACMaster'') trans_det
			ON ((AUD.INVHSNSACMAIN_CODE)::TEXT = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN	invhsnsacdet d ON AUD.INVHSNSACDET_CODE = D.CODE
INNER JOIN	invgstrate g ON AUD.INVGSTRATE_CODE = G.CODE
LEFT OUTER JOIN invhsnsacmain h ON (AUD.INVHSNSACMAIN_CODE = H.CODE)', 'INVHSNSACMAIN_CODE', 'AuditTriggerTemplateAllColumnsNew', 3, 'CODE');
INSERT INTO main.aud2_table VALUES ('Production', 'PRDIS', 'Issue Details', 1, 'ProductionIssueDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdis 
AS 
SELECT TRANS_DET.VERSION_SEQ            AS VERSION_SEQ,
          AUD2_PRDIS.ACTION,
          TRANS_DET.LOGIN_USER             AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID         AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE       AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE       AS MODULE_KEY,
          AUD2_PRDIS.ORDCODE               AS ORDER_CODE,
          AUD2_PRDIS.ORDDT                 AS ORDER_DATE,
          AUD2_PRDIS.LOCCODE               AS STOCK_POINT_CODE,
          STOCK_POINT.LOCNAME              AS STOCK_POINT_NAME,
          AUD2_PRDIS.ICODE                 AS ICODE,
          INVITEM.BARCODE                  AS ITEM_BARCODE,
          AUD2_PRDIS.QTY                   AS QUANTITY,
          AUD2_PRDIS.REM                   AS REMARKS,
          AUD2_PRDIS.SEQ                   AS SEQUENCE_NO,
          AUD2_PRDIS.CODE                  AS CODE,
          AUD2_PRDIS.COSTRATE              AS COST_RATE,
          AUD2_PRDIS.PSITE_STOCKPOINT_CODE AS POS_STOCKPOINT_CODE,
          POS_STOCK_POINT.NAME             AS POS_STOCKPOINT_NAME,
          AUD2_PRDIS.INVBATCH_SERIAL_CODE  AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO  AS BATCH_SERIAL_NUMBER
FROM AUD2_PRDIS
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Production'') TRANS_DET
             ON (AUD2_PRDIS.ORDCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDIS.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVLOC STOCK_POINT ON AUD2_PRDIS.LOCCODE = STOCK_POINT.LOCCODE
INNER JOIN INVITEM INVITEM ON AUD2_PRDIS.ICODE = INVITEM.ICODE
LEFT OUTER JOIN PSITE_STOCKPOINT POS_STOCK_POINT ON AUD2_PRDIS.PSITE_STOCKPOINT_CODE = POS_STOCK_POINT.CODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_PRDIS.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'ORDCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('ServiceOrder', 'PURSRVORDCHG_ITEM', 'Charge Item', 1, 'PurchaseServiceOrderChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvordchg_item 
AS 
SELECT    TRANS_DET.VERSION_SEQ                     AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                      AS LOGIN_USER,
          AUD2_PURSRVORDCHG_ITEM.ACTION,
          TRANS_DET.TRANSACTION_ID                  AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE                AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE                AS MODULE_KEY,
          AUD2_PURSRVORDCHG_ITEM.PURSRVORDMAIN_CODE AS SERVICE_ORDER_CODE,
          AUD2_PURSRVORDCHG_ITEM.PURSRVORDDET_CODE  AS ORDER_DET_CODE,
          AUD2_PURSRVORDCHG_ITEM.SEQ                AS SEQUENCE,
          AUD2_PURSRVORDCHG_ITEM.CHGCODE            AS CHARGE_CODE,
          FINCHG.CHGNAME                            AS CHARGE_NAME,
          AUD2_PURSRVORDCHG_ITEM.RATE               AS RATE,
          CASE AUD2_PURSRVORDCHG_ITEM.BASIS
             WHEN ''A'' THEN ''AMOUNT''
             WHEN ''P'' THEN ''PERCENTAGE''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_PURSRVORDCHG_ITEM.SIGN               AS SIGN,
          AUD2_PURSRVORDCHG_ITEM.CHGAMT             AS CHARGE_AMOUNT,
          AUD2_PURSRVORDCHG_ITEM.APPAMT             AS APPLICABLE_AMOUNT,
          AUD2_PURSRVORDCHG_ITEM.FORMULAE           AS FORMULA,
          CASE AUD2_PURSRVORDCHG_ITEM.OPERATION_LEVEL
             WHEN ''L'' THEN ''LINE LEVEL''
             WHEN ''I'' THEN ''ITEM LEVEL''
             ELSE '' ''
          END
             AS OPERATION_LEVEL,
          CASE AUD2_PURSRVORDCHG_ITEM.ISTAX
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS ISTAX,
          CASE AUD2_PURSRVORDCHG_ITEM.SOURCE
             WHEN ''F'' THEN ''FIXED''
             WHEN ''V'' THEN ''VAT''
             WHEN ''E'' THEN ''EXCISE''
             WHEN ''G'' THEN ''GST''
             ELSE '' ''
          END
             AS FACTOR_SOURCE,
          AUD2_PURSRVORDCHG_ITEM.CODE               AS CODE,
          CASE AUD2_PURSRVORDCHG_ITEM.INCLUDE_IN_TDS
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS INCLUDE_IN_TDS,
          AUD2_PURSRVORDCHG_ITEM.GST_COMPONENT      AS GST_COMPONENT,
          CASE AUD2_PURSRVORDCHG_ITEM.ISREVERSE
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS GST_REVERSE_CHARGE,
          AUD2_PURSRVORDCHG_ITEM.ROUNDOFF_ADJ_AMT   AS ROUNDOFF_ADJUST_AMOUNT
     FROM AUD2_PURSRVORDCHG_ITEM INNER JOIN(SELECT A.*, 
											RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
											FROM AUD2_TRANSACTION A
											WHERE MODULE_SHORTCODE = ''ServiceOrder'') TRANS_DET
								 ON (AUD2_PURSRVORDCHG_ITEM.PURSRVORDMAIN_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
								     AND AUD2_PURSRVORDCHG_ITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINCHG FINCHG ON AUD2_PURSRVORDCHG_ITEM.CHGCODE = FINCHG.CHGCODE', 'PURSRVORDMAIN_CODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'PURSRVORDDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('ServiceOrder', 'PURSRVORDDET', 'Details', 1, 'PurchaseServiceOrderDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_pursrvorddet 
AS 
SELECT TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          AUD2_PURSRVORDDET.ACTION,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_PURSRVORDDET.CODE               AS CODE,
          AUD2_PURSRVORDDET.PURSRVORDMAIN_CODE AS SERVICE_ORDER_CODE,
          AUD2_PURSRVORDDET.SERVICECODE        AS SERVICE_CODE,
          PURSERVICE.SERVICENAME               AS SERVICE_NAME,
          AUD2_PURSRVORDDET.AMOUNT             AS AMOUNT,
          AUD2_PURSRVORDDET.GLCODE             AS LEDGER_CODE,
          FINGL.GLNAME                         AS LEDGER_NAME,
          AUD2_PURSRVORDDET.SLCODE             AS SUBLEDGER_CODE,
          FINSL.SLNAME                         AS SUBLEDGER_NAME,
          CASE AUD2_PURSRVORDDET.SERVICE_TYPE
             WHEN ''J'' THEN ''JOB RECEIPT''
             WHEN ''L'' THEN ''LOGISTICS''
             WHEN ''C'' THEN ''CONVERSION''
             WHEN ''O'' THEN ''ORDER''
             WHEN ''N'' THEN ''NONE''
             ELSE '' ''
          END
             AS SERVICE_TYPE,
          CASE AUD2_PURSRVORDDET.TRACK_QTY
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS TRACK_QUANTITY,
          AUD2_PURSRVORDDET.TAXCODE            AS TAXCODE,
          AUD2_PURSRVORDDET.TDSTYPECODE        AS TDSTYPECODE,
          FINTDSTYPE.TDSNAME                   AS TDS_NAME,
          AUD2_PURSRVORDDET.TDSSECTION         AS TDS_Section
     FROM AUD2_PURSRVORDDET INNER JOIN (SELECT A.*,
									    RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''ServiceOrder'') TRANS_DET
							ON (AUD2_PURSRVORDDET.PURSRVORDMAIN_CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
							    AND AUD2_PURSRVORDDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN PURSERVICE PURSERVICE ON AUD2_PURSRVORDDET.SERVICECODE = PURSERVICE.SERVICECODE
LEFT JOIN FINGL FINGL ON AUD2_PURSRVORDDET.GLCODE = FINGL.GLCODE
LEFT JOIN FINSL FINSL ON AUD2_PURSRVORDDET.SLCODE = FINSL.SLCODE
LEFT JOIN FINTDSTYPE FINTDSTYPE ON AUD2_PURSRVORDDET.TDSTYPECODE = FINTDSTYPE.TDSTYPECODE', 'PURSRVORDMAIN_CODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Sales DN/CN', 'SALINVJRNCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salinvjrnchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE                 CODE,
          AUD.JRNCODE              MODULE_KEY,
          AUD.JRNCODE              DEBIT_CREDIT_CODE,
          AUD.SEQ                  SEQUENCE,
          AUD.SALCHGCODE           CHARGE_CODE,
          CHG.SALCHGNAME           CHARGE_NAME,
          AUD.RATE                 FACTOR,
          AUD.SIGN                 SIGN,
          AUD.CHGAMT               CHARGE_AMOUNT,
          AUD.GLCODE               GENERAL_LEDGER_CODE,
          GL.GLNAME                GENERAL_LEDGER_NAME,
          SL.SLCODE                SUB_LEDGER_CODE,
          SL.SLNAME                SUBLEDGER_NAME,
          AUD.WITHOUT_TERM_FORMULA WITHOUT_TERM_FORMULA,
          CASE
             WHEN AUD.BASIS = ''A'' THEN ''AMOUNT''
             WHEN AUD.BASIS = ''P'' THEN ''PERCENTAGE''
          END
             BASIS,
          AUD.APPAMT               APPLICABLE_AMOUNT,
          AUD.FORMULAE             EXPRESSION,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line Level''
             WHEN AUD.OPERATION_LEVEL = ''H'' THEN ''Header Level''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          AUD.SOURCE               FACTOR_SOURCE,
          AUD.GST_COMPONENT        GST_COMPONENT,
          AUD.FORMDT               FORM_DATE,
          AUD.FORMNO               FORM_NO,
          AUD.FORMCODE             FORM_CODE,
          F.FORMNAME               FORM_NAME
     FROM aud2_salinvjrnchg aud INNER JOIN (SELECT A.*,
											  RANK()
											  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
													ORDER BY TRANSACTION_DATE)
												 VERSION_SEQ
											  FROM AUD2_TRANSACTION A
											  WHERE MODULE_SHORTCODE = ''Sales DN/CN'') trans_det 
								ON (AUD.JRNCODE::varchar = TRANS_DET.HEADER_KEY_VALUE  
								    AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN fingl gl ON AUD.GLCODE = GL.GLCODE 
LEFT OUTER JOIN salchg chg ON (AUD.SALCHGCODE = CHG.SALCHGCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN finform f ON (AUD.FORMCODE = F.FORMCODE)', 'JRNCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'JRNCODE#SALCHGCODE#RATE#COALESCE(SIGN,''X'')#GLCODE#GL_CC_APPL#COALESCE(SLCODE,0)#BASIS#ISTAX#SOURCE#FORMULAE');
INSERT INTO main.aud2_table VALUES ('AccountsLedger', 'FINGL_SITE', 'Ledger Site Details', 1, 'LedgerSiteAssignment', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fingl_site 
AS 
SELECT TRANS_DET.VERSION_SEQ        AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER         AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE   AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE   AS MODULE_KEY,
          AUD2_FINGL_SITE.TRANSACTION_ID,
          AUD2_FINGL_SITE.ACTION       AS ACTION,
          AUD2_FINGL_SITE.GLCODE       AS GLCODE,
          --GENERAL_LEDGER.GLNAME        AS GLNAME,
          AUD2_FINGL_SITE.ADMSITE_CODE AS SITE_CODE,
          SITE.NAME                    AS SITE_NAME
FROM AUD2_FINGL_SITE
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''AccountsLedger'') TRANS_DET
             ON (AUD2_FINGL_SITE.GLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_FINGL_SITE.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          --JOIN FINGL GENERAL_LEDGER
          --ON AUD2_FINGL_SITE.GLCODE = GENERAL_LEDGER.GLCODE
INNER JOIN ADMSITE SITE ON AUD2_FINGL_SITE.ADMSITE_CODE = SITE.CODE', 'GLCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 2, 'ADMSITE_CODE#GLCODE');
INSERT INTO main.aud2_table VALUES ('GRT', 'INVGRTCHG_ITEM', 'Charge Item', 1, 'PurchaseGRTChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrtchg_item 
AS 
SELECT TRANS_DET.VERSION_SEQ                AS VERSION_SEQ,
          AUD2_INVGRTCHG_ITEM.ACTION,
          TRANS_DET.LOGIN_USER                 AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID             AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE           AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE           AS MODULE_KEY,
          AUD2_INVGRTCHG_ITEM.GRTCODE          AS GOOD_RETURN_CODE,
          AUD2_INVGRTCHG_ITEM.INVGRTDET_CODE   AS GOOD_RETURN_DET_CODE,
          AUD2_INVGRTCHG_ITEM.SEQ              AS SEQUENCE,
          AUD2_INVGRTCHG_ITEM.CHGCODE          AS CHARGE_CODE,
          FINCHG.CHGNAME                       AS CHARGE_NAME,
          AUD2_INVGRTCHG_ITEM.RATE             AS RATE,
          CASE AUD2_INVGRTCHG_ITEM.BASIS
             WHEN ''A'' THEN ''AMOUNT''
             WHEN ''P'' THEN ''PERCENTAGE''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_INVGRTCHG_ITEM.SIGN             AS SIGN,
          AUD2_INVGRTCHG_ITEM.CHGAMT           AS CHARGE_AMOUNT,
          AUD2_INVGRTCHG_ITEM.APPAMT           AS APPLICABLE_AMOUNT,
          AUD2_INVGRTCHG_ITEM.FORMULAE         AS FORMULA,
          CASE AUD2_INVGRTCHG_ITEM.OPERATION_LEVEL
             WHEN ''L'' THEN ''LINE LEVEL''
             WHEN ''I'' THEN ''ITEM LEVEL''
             ELSE '' ''
          END
             AS OPERATION_LEVEL,
          CASE AUD2_INVGRTCHG_ITEM.ISTAX
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS ISTAX,
          CASE AUD2_INVGRTCHG_ITEM.SOURCE
             WHEN ''F'' THEN ''Fixed''
             WHEN ''V'' THEN ''VAT''
             WHEN ''G'' THEN ''GST''
             WHEN ''E'' THEN ''Excise''
          END
             AS FACTOR_SOURCE,
          AUD2_INVGRTCHG_ITEM.CODE             AS CODE,
          AUD2_INVGRTCHG_ITEM.GST_COMPONENT    AS GST_COMPONENT,
          CASE AUD2_INVGRTCHG_ITEM.ISREVERSE
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS GST_REVERSE_CHARGE,
          AUD2_INVGRTCHG_ITEM.ROUNDOFF_ADJ_AMT AS ROUNDOFF_ADJ_AMT
FROM AUD2_INVGRTCHG_ITEM
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GRT'') TRANS_DET
             ON (AUD2_INVGRTCHG_ITEM.GRTCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGRTCHG_ITEM.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINCHG FINCHG ON AUD2_INVGRTCHG_ITEM.CHGCODE = FINCHG.CHGCODE', 'GRTCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'INVGRTDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'Site Allocation', 1, 'FinanceSiteAllocation', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fincosttag 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.POSTCODE         MODULE_KEY,
          ENT.ENTNAME || '' : '' || F.SCHEME_DOCNO || '' : '' || GL.GLNAME
             MODULE_KEY_DISPLAY,
          AUD.CODE             CODE,
          AUD.ENTCODE          ENT_CODE,
          AUD.ENTNO            ENT_NUMBER,
          AUD.ENTDT            ENTRY_DATE,
          AUD.ENTTYPE          ENTRY_TYPE,
          ENT.ENTNAME          ENTNAME,
          AUD.GLCODE           LEDGER_CODE,
          GL.GLNAME            LEDGER_NAME,
          AUD.SLCODE           SUBLEDGER_CODE,
          SL.SLNAME            SUBLEDGER_NAME,
          AUD.DAMOUNT          DEBIT_AMOUNT,
          AUD.CAMOUNT          CREDIT_AMOUNT,
          AUD.POSTCODE         POST_CODE,
          F.SCHEME_DOCNO       DOCUMENT_NUMBER,
          AUD.ADMSITE_CODE     SITE_CODE,
          S1.NAME              TRANSACTION_SITE_NAME,
          AUD.REF_ADMSITE_CODE REFERENCE_SITE_CODE,
          S2.NAME              REF_SITE_NAME,
          AUD.ADMOU_CODE       OU_CODE,
          OU.NAME              OU_NAME
FROM aud2_fincosttag aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Finance Site Allocation'') trans_det
			ON AUD.POSTCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID
INNER JOIN finenttype ent ON AUD.ENTTYPE = ENT.ENTTYPE
INNER JOIN fingl gl ON AUD.GLCODE = GL.GLCODE
INNER JOIN admsite s1 ON AUD.ADMSITE_CODE = S1.CODE
INNER JOIN admsite s2 ON AUD.REF_ADMSITE_CODE = S2.CODE 
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN finpost f ON (AUD.POSTCODE = F.POSTCODE)
LEFT OUTER JOIN admou ou ON (AUD.ADMOU_CODE = OU.CODE)', 'POSTCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 1, 'CODE#ENTCODE#GLCODE#COALESCE(ADMSITE_CODE,0)#COALESCE(SLCODE,0)#POSTCODE#COALESCE(REF_ADMSITE_CODE,0)');
INSERT INTO main.aud2_table VALUES ('BatchSerialMaster', 'INVBATCH_SERIAL', 'Master', 1, 'Batch Serial', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invbatch_serial 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          AUD.TRANSACTION_ID,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.CODE                                 CODE,
          AUD.CODE                                 MODULE_KEY,
          AUD.ICODE                                ICODE,
          I.BARCODE,
          AUD.BATCH_SERIAL_NO                      BATCH_SERIAL_NUMBER,
          AUD.BATCH_SERIAL_NO || '' -> '' || I.ICODE MODULE_KEY_DISPLAY,
          AUD.MFG_DATE                             MANUFACTURING_DATE,
          AUD.EXP_DATE                             EXPIRY_DATE,
          AUD.LISTED_MRP                           MRP,
          AUD.WSP                                  WSP,
          AUD.MRP                                  RSP,
          AUD.COSTRATE                             COST_RATE,
          CASE
             WHEN BATCH_SERIAL_MODE = ''B'' THEN ''BATCH''
             WHEN BATCH_SERIAL_MODE = ''S'' THEN ''SERIAL''
          END
             BATCH_SERIAL_MODE,
          AUD.LASTMODIFIEDBY                       LAST_MODIFIED_USER_CODE,
          H.FNAME                                  LAST_MODIFIED_USER_NAME
FROM AUD2_INVBATCH_SERIAL AUD
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''BatchSerialMaster'') TRANS_DET
             ON (AUD.CODE::varchar = TRANS_DET.HEADER_KEY_VALUE
                AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVITEM I ON AUD.ICODE = I.ICODE
LEFT OUTER JOIN HRDEMP H ON AUD.LASTMODIFIEDBY = H.ECODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('BillofMaterials', 'PRDBOMDET', 'Details', 1, 'BOMDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_prdbomdet 
AS 
SELECT TRANS_DET.VERSION_SEQ            AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER             AS LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE       AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE       AS MODULE_KEY,
          AUD2_PRDBOMDET.ACTION,
          AUD2_PRDBOMDET.BOMCODE           AS BOM_CODE,
          AUD2_PRDBOMDET.OPERATION_SEQ     AS OPERATION_SEQUENCE,
          AUD2_PRDBOMDET.PRCODE            AS PROCESS_CODE,
          PRDPR.PRNAME                     AS PROCESS_NAME,
          AUD2_PRDBOMDET.COMPONENT_ICODE   AS COMPONENT_ITEM_ICODE,
          INVITEM.BARCODE                  AS COMPONENT_ITEM_BARCODE,
          AUD2_PRDBOMDET.ALT_GRPCODE       AS ALTERNATIVE_GROUP_CODE,
          INVGRP.GRPNAME                   AS ALTERNATIVE_GROUP_NAME,
          CASE AUD2_PRDBOMDET.SUPPLY_TYPE
             WHEN ''P'' THEN ''PUSH''
             WHEN ''O'' THEN ''PULL-ON-ORDER''
             WHEN ''C'' THEN ''PULL-ON-COMPLETION''
             ELSE '' ''
          END
             AS SUPPLY_TYPE,
          CASE AUD2_PRDBOMDET.ISMANDATORY
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS ISMANDATORY,
          AUD2_PRDBOMDET.QTY               AS QUANTITY,
          AUD2_PRDBOMDET.TOLERANCE         AS TOLERANCE,
          AUD2_PRDBOMDET.CODE              AS CODE,
          AUD2_PRDBOMDET.SHRINKAGE         AS SHRINKAGE,
          CASE AUD2_PRDBOMDET.ISSUE_ASSEMBLY_ITEM
             WHEN ''O'' THEN ''ON ORDER''
             WHEN ''P'' THEN ''PUSH/MANUAL''
             WHEN ''N'' THEN ''NONE''
             ELSE '' ''
          END
             AS ISSUE_ASSEMBLY_ITEM,
          CASE AUD2_PRDBOMDET.IS_ASS_ITEM
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS IS_ASSEMBLY_ITEM,
          AUD2_PRDBOMDET.COM_SAITEM_CODE   AS COMPONENT_SAITEM_CODE,
          PRD_SAITEM.SAINAME               AS COMPONENT_SAITEM_NAME,
          AUD2_PRDBOMDET.BOMOPERATION_CODE AS BOM_OPERATION_CODE,
          AUD2_PRDBOMDET.BOMVER_CODE       AS BOM_VERSION_CODE,
          PRDBOMVER.BOM_VERSION_NO         AS BOM_VERSION_NUMBER,
          AUD2_PRDBOMDET.ASSEMBLY_ICODE    AS ICODE,
          INVITEM1.BARCODE                 AS ASSEMBLY_ITEM_BARCODE,
          AUD2_PRDBOMDET.ASS_SAITEM_CODE   AS ASSEMBLY_SAITEM_CODE,
          PRD_SAITEM1.SAINAME              AS ASSEMBLY_SAITEM_NAME
FROM AUD2_PRDBOMDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''BillofMaterials'') TRANS_DET
             ON (AUD2_PRDBOMDET.BOMCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PRDBOMDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN PRDPR PRDPR ON AUD2_PRDBOMDET.PRCODE = PRDPR.PRCODE
INNER JOIN INVITEM INVITEM ON AUD2_PRDBOMDET.COMPONENT_ICODE = INVITEM.ICODE
LEFT OUTER JOIN INVGRP INVGRP ON AUD2_PRDBOMDET.ALT_GRPCODE = INVGRP.GRPCODE
LEFT OUTER JOIN PRD_SAITEM PRD_SAITEM ON AUD2_PRDBOMDET.COM_SAITEM_CODE = PRD_SAITEM.CODE
LEFT OUTER JOIN PRDBOMVER PRDBOMVER ON AUD2_PRDBOMDET.BOMVER_CODE = PRDBOMVER.CODE
INNER JOIN INVITEM INVITEM1 ON AUD2_PRDBOMDET.ASSEMBLY_ICODE = INVITEM1.ICODE
LEFT OUTER JOIN PRD_SAITEM PRD_SAITEM1 ON AUD2_PRDBOMDET.ASS_SAITEM_CODE = PRD_SAITEM1.CODE', 'BOMCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('AUDCONFIG', 'AUD2_MODULE', 'Audit Module', 0, 'AuditModule', NULL, NULL, 'CREATE OR REPLACE VIEW V_AUD2_AUD2_MODULE AS
SELECT
    TRANS_DET.VERSION_SEQ,
    aud.ACTION,
    TRANS_DET.LOGIN_USER,
    TRANS_DET.TRANSACTION_DATE,
    aud.TRANSACTION_ID,
    aud.SHORTCODE AS MODULE_KEY,
    am.name AS MODULE_KEY_DISPLAY,
    am.area AS MODULE_AREA,
    CASE WHEN am.ismandatory = ''Y'' THEN ''Yes'' ELSE ''No'' END AS IS_MANDATORY
FROM
    AUD2_AUD2_MODULE aud
    JOIN AUD2_MODULE am ON aud.SHORTCODE = am.SHORTCODE
    JOIN (
        SELECT
            A.*,
            RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) AS VERSION_SEQ
        FROM
            AUD2_TRANSACTION A
        WHERE
            MODULE_SHORTCODE = ''AUDCONFIG''
    ) TRANS_DET ON aud.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID AND aud.SHORTCODE = TRANS_DET.HEADER_KEY_VALUE;', 'SHORTCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'NA');
INSERT INTO main.aud2_table VALUES ('UserSiteAssignment', 'HRDEMP_OU', 'Assign Sites', 1, 'SiteAssignment', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_hrdemp_ou 
AS
SELECT    TRANS_DET.VERSION_SEQ,
          H.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          H.TRANSACTION_ID,
          H.HRDEMP_CODE  HRDEMP_CODE,
          H.HRDEMP_CODE  MODULE_KEY,
          E.FNAME        USER_FULLNAME,
          E.FNAME        MODULE_KEY_DISPLAY,
          H.CODE,
          H.ADMSITE_CODE SITE_CODE,
          S.NAME         SIITE_NAME,
          H.DEFAULT_SITE IS_DEFAULT
     FROM aud2_hrdemp_ou h  INNER JOIN (SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										ORDER BY TRANSACTION_DATE)
										VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''UserSiteAssignment'') trans_det
							ON H.HRDEMP_CODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND H.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID
INNER JOIN admsite s ON H.ADMSITE_CODE = S.CODE 
LEFT OUTER JOIN hrdemp e ON (H.HRDEMP_CODE = E.ECODE)', 'HRDEMP_CODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 2, 'HRDEMP_CODE#ADMSITE_CODE');
INSERT INTO main.aud2_table VALUES ('Site', 'ADMSITE', 'Site', 1, 'SiteMaster', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_admsite 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          AUD.TRANSACTION_ID,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.CODE                     SITECODE,
          AUD.CODE                     MODULE_KEY,
          AUD.NAME                     SITENAME,
          AUD.NAME                     MODULE_KEY_DISPLAY,
          AUD.SLCODE                   CUSTOMER_CODE,
          S1.SLNAME                    CUSTOMER_NAME,
          AUD.SHRTNAME                 SHORT_NAME,
          AUD.ADDRESS                  ADDRESS,
          AUD.CTNAME                   CITY,
          AUD.PIN                      PIN,
          AUD.OPH1                     PHONE1,
          AUD.OPH2                     PHONE2,
          AUD.OPH3                     PHONE3,
          AUD.RPH1                     RECIDENCE_PHONE,
          AUD.MOBILE                   MOBILE,
          AUD.FAX                      FAX,
          AUD.EMAIL1                   EMAIL1,
          AUD.EMAIL2                   EMAIL2,
          AUD.WEBSITE                  WEBSITE,
          AUD.CONTACT_PERSON           COTACT_PERSON,
          AUD.LSTNO                    LST_REG_NO,
          AUD.LSTDATE                  LST_REG_DATE,
          AUD.CSTNO                    CST_REG_NO,
          AUD.CSTDATE                  CST_REG_DATE,
          AUD.TERMCODE                 SALES_TERM_CODE,
          ST.SALTERMNAME               SALES_TERM_NAME,
          CASE
             WHEN AUD.ISSECONDARY = ''Y'' THEN ''YES''
             WHEN AUD.ISSECONDARY = ''N'' THEN ''NO''
          END
             ISSECONDARY_SITE,
          AUD.TRPCODE                  TRANSPORTER_CODE,
          S2.SLNAME                    TRANSPORTER_NAME,
          CASE
             WHEN AUD.LGT_APPL = ''Y'' THEN ''YES''
             WHEN AUD.LGT_APPL = ''N'' THEN ''NO''
          END
             LGT_IN_APPL,
          CASE
             WHEN AUD.PERMIT_APPL = ''Y'' THEN ''YES''
             WHEN AUD.PERMIT_APPL = ''N'' THEN ''NO''
          END
             LGT_IN_PERMIT_APPL,
          AUD.TRANSIT_DAYS             TRANSIT_DAYS,
          AUD.STORE_TARGET_SALES       TARGET_SALE,
          AUD.STORE_SIZE               STORE_SIZE,
          AUD.STORE_STARTDT            STORE_STARTDATE,
          AUD.STORE_CLOSEDT            STORE_CLOSEDATE,
          CASE
             WHEN AUD.ISPOS = ''Y'' THEN ''YES''
             WHEN AUD.ISPOS = ''N'' THEN ''NO''
          END
             IS_MANAGED_SITE,
          AUD.PSITE_TRANSIT_LOCCODE    TRANSIT_LOC_CODE,
          L1.LOCNAME                   TRANSIT_LOC_NAME,
          AUD.PSITE_INITIAL            CUID,
          AUD.PSITE_ADMCMPTAX_CODE     TAX_REGION_CODE,
          CMP.NAME                     TAX_REGION_NAME,
          CASE 
			WHEN AUD.EXT = ''Y'' THEN ''YES'' 
			WHEN AUD.EXT = ''N'' THEN ''NO'' 
		  END
             EXTINCT,
          AUD.PSITE_LOCALPOLICY_CODE   SITE_POLICY_CODE,
          PL.NAME                      SITE_POLICY_NAME,
          AUD.PSITE_ALLOCATION_CODE    MASTER_ALLOCATION_CODE,
          PA.NAME                      MASTER_ALLOCATION_NAME,
          CASE
             WHEN AUD.PSITE_ISPUBLISHED = ''Y'' THEN ''YES''
             WHEN AUD.PSITE_ISPUBLISHED = ''N'' THEN ''NO''
          END
             ISPUBLISHED,
          AUD.PSITE_KEY                SITE_KEY,
          CASE
             WHEN AUD.PSITE_STOPSYNC = ''Y'' THEN ''YES''
             WHEN AUD.PSITE_STOPSYNC = ''N'' THEN ''NO''
          END
             STOP_DATASYNC,
          CASE
             WHEN AUD.ISPROMOSEND_BLOCKED = ''Y'' THEN ''YES''
             WHEN AUD.ISPROMOSEND_BLOCKED = ''N'' THEN ''NO''
          END
             PROMOSEND_BLOCKED,
          CASE
             WHEN AUD.PRICETYPE = ''M'' THEN ''MRP''
             WHEN AUD.PRICETYPE = ''R'' THEN ''RSP''
          END
             DEFAULT_RETURN_PRICETYPE,
          AUD.PRICEFACTOR              DEFAULT_RETURN_MARKDOWN,
          AUD.OPERATIONSTARTDATE       OPERATION_START_DATE,
          AUD.PSITE_TIMEZONE           TIMEZONE,
          AUD.SITETYPE                 SITETYPE,
          AUD.ADMOU_CODE               ORGANIZATION_UNIT_CODE,
          A.NAME                       ORGANIZATION_UNIT_NAME,
          AUD.PRICELIST_CODE           PRICE_LIST_CODE,
          SP.PRICELISTNAME             PRICE_LIST_NAME,
          CASE
             WHEN AUD.OUT_LGT_APPL = ''Y'' THEN ''YES''
             WHEN AUD.OUT_LGT_APPL = ''N'' THEN ''NO''
          END
             LGT_OUT_APPL,
          CASE
             WHEN AUD.OUT_PERMIT_APPL = ''Y'' THEN ''YES''
             WHEN AUD.OUT_PERMIT_APPL = ''N'' THEN ''NO''
          END
             LGT_OUT_PERMIT_APPL,
          CASE
             WHEN AUD.GATEIN_APPL = ''Y'' THEN ''YES''
             WHEN AUD.GATEIN_APPL = ''N'' THEN ''NO''
          END
             GATEIN_APPL,
          AUD.INLOCCODE                RECEIVE_STOCK_POINT_CODE,
          L2.LOCNAME                   RECEIVE_STOCK_POINT_NAME,
          AUD.OUTLOCCODE               ISSUE_STOCK_POINT_CODE,
          L3.LOCNAME                   ISSUE_STOCK_POINT_NAME,
          AUD.PSITE_SI_ALLOCATION_CODE SMAN_INCENTIVE_ALLOC_CODE,
          SI.NAME                      SMAN_INCENTIVE_ALLOC_NAME,
          AUD.SALTRADEGRP_CODE         TRADE_GROUP_CODE,
          T.NAME                       TRADE_GROUP_NAME,
          AUD.SALFORMCODE              FORM_NAME_CODE,
          FN.FORMNAME                  FORM_NAME,
          CASE WHEN AUD.ISCENTRALLYMANAGED = 1 THEN ''YES'' ELSE ''NO'' END
             CENTRALIZED_USER_MGMT,
          CASE WHEN AUD.ISSALESPERSONMANAGED = 1 THEN ''YES'' ELSE ''NO'' END
             CENTRALIZED_SALESPERSON,
          AUD.UDFSTRING01              UDFSTRING01,
          AUD.UDFSTRING02              UDFSTRING02,
          AUD.UDFSTRING03              UDFSTRING03,
          AUD.UDFSTRING04              UDFSTRING04,
          AUD.UDFSTRING05              UDFSTRING05,
          AUD.UDFSTRING06              UDFSTRING06,
          AUD.UDFSTRING07              UDFSTRING07,
          AUD.UDFSTRING08              UDFSTRING08,
          AUD.UDFSTRING09              UDFSTRING09,
          AUD.UDFSTRING10              UDFSTRING10,
          AUD.UDFSTRING11              UDFSTRING11,
          AUD.UDFSTRING12              UDFSTRING12,
          AUD.UDFSTRING13              UDFSTRING13,
          AUD.UDFSTRING14              UDFSTRING14,
          AUD.UDFSTRING15              UDFSTRING15,
          AUD.REPORTNAME               REPORTNAME,
          CASE
             WHEN AUD.RESERVE_INV = ''M'' THEN ''Mandatory''
             WHEN AUD.RESERVE_INV = ''O'' THEN ''Optional''
             WHEN AUD.RESERVE_INV = ''N'' THEN ''Not required''
          END
             STOCK_RESERVATION_METHOD,
          AUD.DEFAULT_PICKLIST_RULE    DEFAULT_PICKLIST_RULE_CODE,
          PR.RULE_NAME                 DEFAULT_PICKLIST_RULE_NAME,
          AUD.CP_GSTIN_DATE            CP_GST_REG_DATE,
          AUD.ADMGSTIN_CODE            OWNERSITE_GSTIN_CODE,
          GSTIN.GSTIN_NO               OWNERSITE_GST_NO,
          AUD.CP_GSTIN_NO              CP_GST_REG_NO,
          AUD.CP_GSTIN_STATE_CODE      CP_GST_REG_STATE_CODE,
          GSTS.NAME                    CP_GST_REG_STATE_CODE_NAME,
          AUD.SITEDOCIN                DOC_IDENTIFICATION_NO,
          CASE
             WHEN AUD.ISBILLINGSHIPPINGSAME = ''Y'' THEN ''YES''
             WHEN AUD.ISBILLINGSHIPPINGSAME = ''N'' THEN ''NO''
          END
             BILLING_SHIPPING_SAME,
          AUD.SHIP_LEGAL_NAME          SHIP_LEGAL_NAME,
          AUD.SHIP_CINNO               SHIP_CINNO,
          AUD.SHIP_ADDRESS             SHIP_ADDRESS,
          AUD.SHIP_CTNAME              SHIP_CITY,
          AUD.SHIP_PIN                 SHIP_PIN,
          AUD.SHIP_OPH1                SHIP_PHONE1,
          AUD.SHIP_OPH2                SHIP_PHONE2,
          AUD.SHIP_OPH3                SHIP_PHONE3,
          AUD.SHIP_RPH1                SHIP_RECIDENCE_PHONE,
          AUD.SHIP_MOBILE              SHIP_MOBILENO,
          AUD.SHIP_FAX                 SHIP_FAX,
          AUD.SHIP_EMAIL1              SHIP_EMAIL1,
          AUD.SHIP_EMAIL2              SHIP_EMAIL2,
          AUD.SHIP_WEBSITE             SHIP_WEBSITE,
          AUD.SHIP_CONTACT_PERSON      SHIP_CONTACT_PERSON,
          AUD.SHIP_CP_CATEGORY_CODE    SHIP_CP_GST_CATEGORY_CODE,
          GSTC.NAME                    SHIP_CP_GST_CATEGORY_NAME,
          AUD.SHIP_CP_GSTIN_NO         SHIP_CP_GST_REG_NO,
          AUD.SHIP_CP_GSTIN_STATE_CODE SHIP_CP_GST_REG_STATECODE,
          GSTG.NAME                    SHIP_CP_GST_REG_STATENAME,
          AUD.SHIP_CP_GSTIN_DATE       SHIP_CP_GST_REG_DATE,
          AUD.ADMISD_CODE              ISD_INTERNAL_CODE,
          ISD.ISDCODE                  ISD_CODE,
          CASE
             WHEN AUD.ISGLOBALPOSRETURNALLOWED = ''1'' THEN ''YES''
             WHEN AUD.ISGLOBALPOSRETURNALLOWED = ''0'' THEN ''NO''
          END
             GLOBAL_POSRETURN_ALLOWED,
          AUD.FLOORLOCCODE             FLOOR_STOCK_POINT_CODE,
          L4.LOCNAME                   FLOOR_STOCK_POINT_NAME,
          CASE
             WHEN AUD.DATASYNCMODE = ''W'' THEN ''WEB''
             WHEN AUD.DATASYNCMODE = ''A'' THEN ''APPLICATION''
          END
             DATA_SYNC_MODE,
          CASE
             WHEN AUD.LICENSE_REFRESH = ''1'' THEN ''YES''
             WHEN AUD.LICENSE_REFRESH = ''0'' THEN ''NO''
          END
             LICENSE_REFRESH,
          AUD.BATCH_SELECTION_PROCESS  BATCH_SELECTION_PROCESS,
          AUD.UDFNUM01                 UDFNUM01,
          AUD.UDFNUM02                 UDFNUM02,
          AUD.UDFNUM03                 UDFNUM03,
          AUD.UDFNUM04                 UDFNUM04,
          AUD.UDFNUM05                 UDFNUM05,
          AUD.UDFDATE01                UDFDATE01,
          AUD.UDFDATE02                UDFDATE02,
          AUD.UDFDATE03                UDFDATE03,
          AUD.UDFDATE04                UDFDATE04,
          AUD.UDFDATE05                UDFDATE05,
          CASE
             WHEN AUD.ISREADYFORLIVESYNC = ''1'' THEN ''YES''
             WHEN AUD.ISREADYFORLIVESYNC = ''0'' THEN ''NO''
          END
             IS_READY_FOR_LIVE_SYNC
     FROM aud2_admsite aud  INNER JOIN (SELECT A.*,
										RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''Site'') trans_det 
							ON ((AUD.CODE::TEXT) = TRANS_DET.HEADER_KEY_VALUE 
							     AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN finsl s1 ON (AUD.SLCODE = S1.SLCODE)
LEFT OUTER JOIN saltermmain st ON (AUD.TERMCODE = ST.SALTERMCODE)
LEFT OUTER JOIN finsl s2 ON (AUD.TRPCODE = S2.SLCODE)
LEFT OUTER JOIN invloc l1 ON (AUD.PSITE_TRANSIT_LOCCODE = L1.LOCCODE)
LEFT OUTER JOIN admcmptax cmp ON (AUD.PSITE_ADMCMPTAX_CODE = CMP.CODE)
LEFT OUTER JOIN psite_localpolicy pl ON (AUD.PSITE_LOCALPOLICY_CODE = PL.CODE)
LEFT OUTER JOIN psite_allocation pa ON (AUD.PSITE_ALLOCATION_CODE = PA.CODE)
LEFT OUTER JOIN admou a ON (AUD.ADMOU_CODE = A.CODE)
LEFT OUTER JOIN salpricelistmain sp ON (AUD.PRICELIST_CODE = SP.PRICELISTCODE)
LEFT OUTER JOIN invloc l2 ON (AUD.INLOCCODE = L2.LOCCODE)
LEFT OUTER JOIN invloc l3 ON (AUD.OUTLOCCODE = L3.LOCCODE)
LEFT OUTER JOIN invloc l4 ON (AUD.FLOORLOCCODE = L4.LOCCODE)
LEFT OUTER JOIN si_allocation si ON (AUD.PSITE_SI_ALLOCATION_CODE = SI.CODE)
LEFT OUTER JOIN fintradegrp t ON (AUD.SALTRADEGRP_CODE = T.CODE)
LEFT OUTER JOIN finform fn ON (AUD.SALFORMCODE = FN.FORMCODE)
LEFT OUTER JOIN picklist_rule pr ON (AUD.DEFAULT_PICKLIST_RULE = PR.CODE)
LEFT OUTER JOIN admgstin gstin ON (AUD.ADMGSTIN_CODE = GSTIN.CODE)
LEFT OUTER JOIN admgststate gsts ON (AUD.CP_GSTIN_STATE_CODE = GSTS.CODE)
LEFT OUTER JOIN admgstcategory gstc ON (AUD.SHIP_CP_CATEGORY_CODE = GSTC.CODE)
LEFT OUTER JOIN admgststate gstg ON (AUD.SHIP_CP_GSTIN_STATE_CODE = GSTG.CODE)
LEFT OUTER JOIN admisd isd ON (AUD.ADMISD_CODE = ISD.CODE)', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Sales Return', 'SALRTMAIN', 'Header', 1, 'SalesReturnHeader', NULL, NULL, 'CREATE OR REPLACE VIEW V_AUD2_SALRTMAIN
AS
   SELECT TRANS_DET.VERSION_SEQ                 AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                  AS LOGIN_USER,
          AUD2_SALRTMAIN.TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE            AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE            AS MODULE_KEY,
          AUD2_SALRTMAIN.ACTION                 AS ACTION,
          AUD2_SALRTMAIN.RTCODE                 AS RETURN_CODE,
          AUD2_SALRTMAIN.RTDT                   AS RETURN_DATE,
          AUD2_SALRTMAIN.PCODE                  AS CUSTOMER_CODE,
          CUSTOMER.SLNAME                       AS CUSTOMER_NAME,
          AUD2_SALRTMAIN.DOCNO                  AS DOCUMENT_NUMBER,
          AUD2_SALRTMAIN.DOCDT                  AS DOCUMENT_DATE,
          AUD2_SALRTMAIN.AGCODE                 AS SALES_AGENT_CODE,
          AGENT.SLNAME                          AS AGENT_NAME,
          AUD2_SALRTMAIN.AGRATE                 AS SALES_AGENT_COMMSN_RATE,
          AUD2_SALRTMAIN.GRSAMT                 AS GROSS_AMOUNT,
          AUD2_SALRTMAIN.CHGAMT                 AS CHARGE_AMOUNT,
          AUD2_SALRTMAIN.NETAMT                 AS NET_AMOUNT,
          AUD2_SALRTMAIN.GLCODE                 AS RETURN_LEDGER_CODE,
          RETURN_LEDGER.GLNAME                  AS RETURN_LEDGER_NAME,
          AUD2_SALRTMAIN.REM                    AS REMARKS,
          AUD2_SALRTMAIN.ECODE                  AS CREATED_USER_CODE,
          CREATED_USER.FNAME                    AS CREATED_USER_NAME,
          AUD2_SALRTMAIN.SALTERMCODE            AS SAL_SALES_TERM_CODE,
          TERM.SALTERMNAME                      AS TERM_NAME,
          AUD2_SALRTMAIN.INLOCCODE              AS IN_STOCKPOINT_CODE,
          IN_STOCKPOINT.LOCNAME                 AS IN_STOCKPOINT_NAME,
          AUD2_SALRTMAIN.INVCODE                AS INVOICE_CODE,
          INVOICE.SCHEME_DOCNO                  AS INVOICE_NUMBER,
          AUD2_SALRTMAIN.LGTCODE                AS LOGISTICS_CODE,
          LOGISTICS.LGTNO                       AS LOGISTICS_NUMBER,
          AUD2_SALRTMAIN.DOCCODE                AS DOCSCHEME_CODE,
          DOCSCHEME.DOCNAME                     AS DOCSCHEME_NAME,
          AUD2_SALRTMAIN.SCHEME_DOCNO           AS DOCSCHEME_NO,
          AUD2_SALRTMAIN.LGTRECQTY              AS GATE_ENTRY_QUANTITY,
          CASE AUD2_SALRTMAIN.SALETYPE
             WHEN ''O'' THEN ''Outright''
             WHEN ''C'' THEN ''Consignment''
             ELSE '' ''
          END
             AS MODE_OF_OPERATION,
          AUD2_SALRTMAIN.PGLCODE                AS DEBTOR_LEDGER_CODE,
          DEBTOR_LEDGER.GLNAME                  AS DEBTOR_LEDGER_NAME,
          AUD2_SALRTMAIN.SLCODE                 AS SUB_LEDGER_CODE,
          RETURN_SUB_LEDGER.SLNAME              AS RETURN_SUB_LEDGER_NAME,
          AUD2_SALRTMAIN.OUTLOCCODE             AS OUT_STOCKPOINT_CODE,
          OUT_STOCKPOINT.LOCNAME                AS OUT_STOCKPOINT_NAME,
          CASE AUD2_SALRTMAIN.ISSECONDARY
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS ISSECONDARY_SITE,
          AUD2_SALRTMAIN.ADMOU_CODE             AS OU_CODE,
          OU.NAME                               AS OU_NAME,
          AUD2_SALRTMAIN.ADMSITE_CODE           AS SITE_CODE,
          DESTINATION_SITE.NAME                 AS DESTINATION_SITE_NAME,
          AUD2_SALRTMAIN.INVGATEIN_CODE         AS INV_GATE_IN_CODE,
          AUD2_SALRTMAIN.ADMOU_CODE_IN          AS TRANSFER_IN_OU_CODE,
          TRANSFER_IN_OU.NAME                   AS TRANSFER_IN_OU_NAME,
          AUD2_SALRTMAIN.ADMSITE_CODE_OWNER     AS TRANSACTION_SITE_CODE,
          TRANSACTION_SITE.NAME                 AS TRANSACTION_SITE_NAME,
          CASE AUD2_SALRTMAIN.AGNST_MNG_SITE_DOCUMENT
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS AGAINST_MANAGED_SITE_DOC,
          AUD2_SALRTMAIN.PSITE_GRT_CODE         AS PSITE_GOODS_RETURN_CODE,
          GRT_DOC.DOCNO                         AS GRT_DOC_NO,
          AUD2_SALRTMAIN.TRANSFEROUT_INVCODE    AS TRANSFEROUT_INV_CODE,
          TRANSFEROUT_INV.SCHEME_DOCNO          AS TRANSFEROUT_INV_NO,
          AUD2_SALRTMAIN.TRANSITDIFF_GLCODE     AS SAL_TRANSITDIFF_GL_CODE,
          SAL_TRANSITDIFF_GL.GLNAME             AS SAL_TRANSITDIFF_GL_NAME,
          AUD2_SALRTMAIN.TRANSITDIFF_SLCODE     AS SAL_TRANSITDIFF_SL_CODE,
          SAL_TRANSITDIFF_SL.SLNAME             AS SAL_TRANSITDIFF_SL_NAME,
          AUD2_SALRTMAIN.SHORTEXCESSAMT         AS SHORT_EXCESS_AMOUNT,
          CASE AUD2_SALRTMAIN.RELEASE_STATUS
             WHEN ''U'' THEN ''Unposted''
             WHEN ''P'' THEN ''Posted''
             ELSE '' ''
          END
             AS RELEASE_STATUS,
          AUD2_SALRTMAIN.RELEASE_ECODE          AS RELEASED_USERCODE,
          RELEASED.FNAME                        AS RELEASED_USER,
          AUD2_SALRTMAIN.SALTRADEGRP_CODE       AS SAL_TRADE_GROUP_CODE,
          TRADE_GROUP.NAME                      AS TRADE_GROUP_NAME,
          AUD2_SALRTMAIN.FORMCODE               AS FORM_CODE,
          FORM.FORMNAME                         AS FORM_NAME,
          AUD2_SALRTMAIN.FORMNO                 AS FORM_NO,
          AUD2_SALRTMAIN.FORMDT                 AS FORM_DATE,
          AUD2_SALRTMAIN.UDFSTRING01            AS UDFSTRING01,
          AUD2_SALRTMAIN.UDFSTRING02            AS UDFSTRING02,
          AUD2_SALRTMAIN.UDFSTRING03            AS UDFSTRING03,
          AUD2_SALRTMAIN.UDFSTRING04            AS UDFSTRING04,
          AUD2_SALRTMAIN.UDFSTRING05            AS UDFSTRING05,
          AUD2_SALRTMAIN.UDFSTRING06            AS UDFSTRING06,
          AUD2_SALRTMAIN.UDFSTRING07            AS UDFSTRING07,
          AUD2_SALRTMAIN.UDFSTRING08            AS UDFSTRING08,
          AUD2_SALRTMAIN.UDFSTRING09            AS UDFSTRING09,
          AUD2_SALRTMAIN.UDFSTRING10            AS UDFSTRING10,
          AUD2_SALRTMAIN.UDFNUM01               AS UDFNUM01,
          AUD2_SALRTMAIN.UDFNUM02               AS UDFNUM02,
          AUD2_SALRTMAIN.UDFNUM03               AS UDFNUM03,
          AUD2_SALRTMAIN.UDFNUM04               AS UDFNUM04,
          AUD2_SALRTMAIN.UDFNUM05               AS UDFNUM05,
          AUD2_SALRTMAIN.UDFDATE01              AS UDFDATE01,
          AUD2_SALRTMAIN.UDFDATE02              AS UDFDATE02,
          AUD2_SALRTMAIN.UDFDATE03              AS UDFDATE03,
          AUD2_SALRTMAIN.UDFDATE04              AS UDFDATE04,
          AUD2_SALRTMAIN.UDFDATE05              AS UDFDATE05,
          AUD2_SALRTMAIN.OWNER_GSTIN_NO         AS TRANSACTION_SITE_GSTIN,
          AUD2_SALRTMAIN.OWNER_GSTIN_STATE_CODE AS TRANSACTION_SITE_GST_CODE,
          TRANSACTION_SITE_GST.NAME             AS TRANSACTION_SITE_GST_NAME,
          AUD2_SALRTMAIN.CP_GSTIN_NO            AS CP_GSTIN,
          AUD2_SALRTMAIN.CP_GSTIN_STATE_CODE    AS CP_GST_STATECODE,
          CP_GST_REG_STATE.NAME                 AS CP_GST_REG_STATE_NAME,
          CASE AUD2_SALRTMAIN.GSTAPPL
             WHEN ''C'' THEN ''CREDIT NOTE''
             WHEN ''N'' THEN ''NOT APPLICABLE''
             ELSE '' ''
          END
             AS GST_APPLICABILITY,
          AUD2_SALRTMAIN.ENTRY_SOURCE           AS ENTRY_SOURCE,
          AUD2_SALRTMAIN.LAST_ACCESS_ECODE      AS LASTMODIFIEDBY_USERCODE,
          LASTMODIFIEDBY.FNAME                  AS LASTMODIFIEDBY_USER,
          AUD2_SALRTMAIN.PRICELISTCODE          AS PRICE_LIST_CODE,
          PRICE_LIST.PRICELISTNAME              AS PRICE_LIST_NAME
	FROM AUD2_SALRTMAIN INNER JOIN (SELECT A.*,
								    RANK ()
								    OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										ORDER BY TRANSACTION_DATE)
									 VERSION_SEQ
								    FROM AUD2_TRANSACTION A
								    WHERE MODULE_SHORTCODE = ''Sales Return'') TRANS_DET
						 ON (AUD2_SALRTMAIN.RTCODE::text = TRANS_DET.HEADER_KEY_VALUE 
						     AND AUD2_SALRTMAIN.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN FINSL CUSTOMER ON AUD2_SALRTMAIN.PCODE = CUSTOMER.SLCODE
LEFT JOIN FINSL AGENT ON AUD2_SALRTMAIN.AGCODE = AGENT.SLCODE
INNER JOIN FINGL RETURN_LEDGER ON AUD2_SALRTMAIN.GLCODE = RETURN_LEDGER.GLCODE
INNER JOIN HRDEMP CREATED_USER ON AUD2_SALRTMAIN.ECODE = CREATED_USER.ECODE
LEFT JOIN SALTERMMAIN TERM ON AUD2_SALRTMAIN.SALTERMCODE = TERM.SALTERMCODE
INNER JOIN INVLOC IN_STOCKPOINT ON AUD2_SALRTMAIN.INLOCCODE = IN_STOCKPOINT.LOCCODE
LEFT JOIN SALINVMAIN INVOICE ON AUD2_SALRTMAIN.INVCODE = INVOICE.INVCODE
LEFT JOIN INVLGTNOTE LOGISTICS ON AUD2_SALRTMAIN.LGTCODE = LOGISTICS.LGTCODE
LEFT JOIN ADMDOCSCHEME DOCSCHEME ON AUD2_SALRTMAIN.DOCCODE = DOCSCHEME.DOCCODE
INNER JOIN FINGL DEBTOR_LEDGER ON AUD2_SALRTMAIN.PGLCODE = DEBTOR_LEDGER.GLCODE
LEFT JOIN FINSL RETURN_SUB_LEDGER ON AUD2_SALRTMAIN.SLCODE = RETURN_SUB_LEDGER.SLCODE
LEFT JOIN INVLOC OUT_STOCKPOINT ON AUD2_SALRTMAIN.OUTLOCCODE = OUT_STOCKPOINT.LOCCODE
INNER JOIN ADMOU OU ON AUD2_SALRTMAIN.ADMOU_CODE = OU.CODE
LEFT JOIN ADMSITE DESTINATION_SITE ON AUD2_SALRTMAIN.ADMSITE_CODE = DESTINATION_SITE.CODE
LEFT JOIN ADMOU TRANSFER_IN_OU ON AUD2_SALRTMAIN.ADMOU_CODE_IN = TRANSFER_IN_OU.CODE
INNER JOIN ADMSITE TRANSACTION_SITE ON AUD2_SALRTMAIN.ADMSITE_CODE_OWNER = TRANSACTION_SITE.CODE
LEFT JOIN PSITE_GRT GRT_DOC ON AUD2_SALRTMAIN.PSITE_GRT_CODE = GRT_DOC.CODE
LEFT JOIN SALINVMAIN TRANSFEROUT_INV ON AUD2_SALRTMAIN.TRANSFEROUT_INVCODE = TRANSFEROUT_INV.INVCODE
LEFT JOIN FINGL SAL_TRANSITDIFF_GL ON AUD2_SALRTMAIN.TRANSITDIFF_GLCODE = SAL_TRANSITDIFF_GL.GLCODE
LEFT JOIN FINSL SAL_TRANSITDIFF_SL ON AUD2_SALRTMAIN.TRANSITDIFF_SLCODE = SAL_TRANSITDIFF_SL.SLCODE
LEFT JOIN HRDEMP RELEASED ON AUD2_SALRTMAIN.RELEASE_ECODE = RELEASED.ECODE
LEFT JOIN FINTRADEGRP TRADE_GROUP ON AUD2_SALRTMAIN.SALTRADEGRP_CODE = TRADE_GROUP.CODE
LEFT JOIN FINFORM FORM ON AUD2_SALRTMAIN.FORMCODE = FORM.FORMCODE
LEFT JOIN ADMGSTSTATE TRANSACTION_SITE_GST ON AUD2_SALRTMAIN.OWNER_GSTIN_STATE_CODE =  TRANSACTION_SITE_GST.CODE
LEFT JOIN ADMGSTSTATE CP_GST_REG_STATE ON AUD2_SALRTMAIN.CP_GSTIN_STATE_CODE = CP_GST_REG_STATE.CODE
LEFT JOIN HRDEMP LASTMODIFIEDBY ON AUD2_SALRTMAIN.LAST_ACCESS_ECODE = LASTMODIFIEDBY.ECODE
LEFT JOIN SALPRICELISTMAIN PRICE_LIST ON AUD2_SALRTMAIN.PRICELISTCODE = PRICE_LIST.PRICELISTCODE', 'RTCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'RTCODE');
INSERT INTO main.aud2_table VALUES ('LedgerOpeningBalance', 'FINCOSTOP', 'Ledger Opening Sitewise', 1, 'FinanceOpeningSitewiseDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fincostop 
AS 
SELECT TRANS_DET.VERSION_SEQ       AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER        AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID    AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE  AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE  AS MODULE_KEY,
          AUD2_FINCOSTOP.ACTION,
          AUD2_FINCOSTOP.GLCODE       AS LEDGER_CODE,
          LEDGER.GLNAME               AS LEDGER_NAME,
          AUD2_FINCOSTOP.SLCODE       AS SUBLEDGER_CODE,
          SUBLEDGER.SLNAME            AS SUBLEDGER_NAME,
          AUD2_FINCOSTOP.DAMOUNT      AS DEBIT_AMOUNT,
          AUD2_FINCOSTOP.CAMOUNT      AS CREDIT_AMOUNT,
          AUD2_FINCOSTOP.YCODE        AS YCODE,
          YEAR.YNAME                  AS FINANCIAL_YEAR,
          AUD2_FINCOSTOP.CODE         AS CODE,
          AUD2_FINCOSTOP.ADMSITE_CODE AS SITE_CODE,
          SITE.NAME                   AS SITE_NAME,
          AUD2_FINCOSTOP.ADMOU_CODE   AS OU_CODE,
          OU.NAME                     AS OU_NAME
FROM AUD2_FINCOSTOP
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''LedgerOpeningBalance'') TRANS_DET
             ON (AUD2_FINCOSTOP.GLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_FINCOSTOP.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN FINGL LEDGER ON AUD2_FINCOSTOP.GLCODE = LEDGER.GLCODE
LEFT OUTER JOIN FINSL SUBLEDGER ON AUD2_FINCOSTOP.SLCODE = SUBLEDGER.SLCODE
INNER JOIN ADMYEAR YEAR ON AUD2_FINCOSTOP.YCODE = YEAR.YCODE
INNER JOIN ADMSITE SITE ON AUD2_FINCOSTOP.ADMSITE_CODE = SITE.CODE
INNER JOIN ADMOU OU ON AUD2_FINCOSTOP.ADMOU_CODE = OU.CODE', 'GLCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'GLCODE#YCODE#ADMSITE_CODE');
INSERT INTO main.aud2_table VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'Adjustment Details', 1, 'DocumentAdjustment', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fintag 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          aud.TRANSACTION_ID,
          aud.POSTCODE1::TEXT || ''#'' || aud.POSTCODE2::TEXT       MODULE_KEY,
          p1.SCHEME_DOCNO || '' : '' || p2.SCHEME_DOCNO MODULE_KEY_DISPLAY,
          s.SLNAME                                    SUBLEGER_NAME,
          aud.POSTCODE1                               MAINDOC_POSTING_CODE,
          p1.SCHEME_DOCNO                             MAINDOC_POSTING_NUMBER,
          aud.ENTCODE1                                MAINDOC_CODE,
          aud.ENTTYPE1                                MAINDOC_TYPE,
          f1.ENTNAME                                  MAINDOC_TYPE_NAME,
          aud.POSTCODE2                               ADJDOC_POSTING_CODE,
          p2.SCHEME_DOCNO                             ADJDOC_NUMBER,
          aud.ENTCODE2                                ADJDOC_CODE,
          f2.ENTNAME                                  ADJDOC_TYPE_NAME,
          aud.ENTTYPE2                                ADJDOC_TYPE,
          aud.SLCODE                                  SUBLEDGER_CODE,
          s.SLNAME                                    SUBLEDGER_NAME,
          aud.AMOUNT                                  ADJUSTMENT_AMOUNT,
          aud.ECODE                                   FIRSTADJ_USERCODE,
          h.FNAME                                     FIRSTADJ_USER,
          aud.TIME                                    FIRSTADJON,
          aud.CODE                                    TAGGING_CODE
FROM  aud2_fintag aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''FinanceDocumentAdjustment'') trans_det
			ON (aud.POSTCODE1::TEXT || ''#'' || aud.POSTCODE2::TEXT =
                 TRANS_DET.HEADER_KEY_VALUE AND aud.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN hrdemp h ON aud.ECODE = h.ECODE 
INNER JOIN finenttype f1 ON aud.ENTTYPE1 = f1.ENTTYPE
INNER JOIN finenttype f2 ON aud.ENTTYPE2 = f2.ENTTYPE
INNER JOIN finsl s ON aud.SLCODE = s.SLCODE  
LEFT OUTER JOIN finpost p1 ON (aud.POSTCODE1 = p1.POSTCODE)
LEFT OUTER JOIN finpost p2 ON (aud.POSTCODE2 = p2.POSTCODE)', 'POSTCODE1#POSTCODE2', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 1, 'POSTCODE1#POSTCODE2');
INSERT INTO main.aud2_table VALUES ('TaxRates', 'FINTAX_RANGE', 'Tax Range Details', 1, 'TaxRangeDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fintax_range 
AS 
SELECT    TRANS_DET.VERSION_SEQ           AS VERSION_SEQ,
          AUD2_FINTAX_RANGE.ACTION,
          TRANS_DET.LOGIN_USER            AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID        AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE      AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE      AS MODULE_KEY,
          AUD2_FINTAX_RANGE.CODE          AS CODE,
          AUD2_FINTAX_RANGE.TAXDETCODE    AS TAX_NAME_CODE,
          FINTAXDET.TAXDESC               AS TAX_NAME,
          AUD2_FINTAX_RANGE.RANGE_DESC    AS RANGE_DESCRIPTION,
          AUD2_FINTAX_RANGE.RANGEFROM     AS AMOUNT_FROM,
          AUD2_FINTAX_RANGE.RANGETO       AS AMOUNT_TO,
          AUD2_FINTAX_RANGE.RATE          AS RATE,
          AUD2_FINTAX_RANGE.SALTAX_GLCODE AS SALE_LEDGER_CODE,
          FINGL.GLNAME                    AS SALE_TAX_LEDGER_NAME,
          AUD2_FINTAX_RANGE.SALTAX_SLCODE AS SALE_SUB_LEDGER_CODE,
          FINSL.SLNAME                    AS SALE_TAX_SL_NAME,
          AUD2_FINTAX_RANGE.PURTAX_GLCODE AS PURCHASE_LDGER_CODE,
          FINGL1.GLNAME                    AS PUR_TAX_LEDGER_NAME,
          AUD2_FINTAX_RANGE.PURTAX_SLCODE AS PURCHASE_SUB_LDGER_CODE,
          FINSL1.SLNAME                    AS PUR_TAX_SL_NAME
     FROM AUD2_FINTAX_RANGE
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
						FROM AUD2_TRANSACTION A
						WHERE MODULE_SHORTCODE = ''TaxRates'') TRANS_DET
             ON (AUD2_FINTAX_RANGE.TAXDETCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE 
				AND AUD2_FINTAX_RANGE.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
          LEFT JOIN FINTAXDET FINTAXDET ON AUD2_FINTAX_RANGE.TAXDETCODE = FINTAXDET.TAXDETCODE
          LEFT JOIN FINGL FINGL ON AUD2_FINTAX_RANGE.SALTAX_GLCODE = FINGL.GLCODE
          LEFT JOIN FINSL FINSL ON AUD2_FINTAX_RANGE.SALTAX_SLCODE = FINSL.SLCODE
          LEFT JOIN FINGL FINGL1 ON AUD2_FINTAX_RANGE.PURTAX_GLCODE = FINGL1.GLCODE
          LEFT JOIN FINSL FINSL1 ON AUD2_FINTAX_RANGE.PURTAX_SLCODE = FINSL1.SLCODE', 'TAXDETCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 2, 'TAXDETCODE#RANGEFROM');
INSERT INTO main.aud2_table VALUES ('DeliveryChallan', 'INVDCDET', 'Detail', 1, 'ChallanDetail', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invdcdet 
AS 
SELECT TRANS_DET.VERSION_SEQ                 AS VERSION_SEQ,
          AUD2_INVDCDET.ACTION                  AS ACTION,
          TRANS_DET.LOGIN_USER                  AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID              AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE            AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE            AS MODULE_KEY,
          AUD2_INVDCDET.DCCODE                  AS CHALLAN_CODE,
          AUD2_INVDCDET.ORDCODE                 AS ORDER_CODE,
          AUD2_INVDCDET.ICODE                   AS ICODE,
          BARCODE.BARCODE                       AS BARCODE,
          AUD2_INVDCDET.SOICODE                 AS ORDER_ORIGINAL_ICODE,
          AUD2_INVDCDET.ISQTY                   AS QTY,
          AUD2_INVDCDET.RATE                    AS ITEM_RATE,
          AUD2_INVDCDET.REMARKS                 AS REMARKS,
          AUD2_INVDCDET.CODE                    AS CHALLAN_DETAIL_CODE,
          AUD2_INVDCDET.SALORDDET_CODE          AS ORDER_DETAIL_CODE,
          AUD2_INVDCDET.SALORDMAIN_SCHEME_DOCNO AS ORDER_NUMBER,
          AUD2_INVDCDET.SALORDMAIN_ORDDT        AS ORDER_DATE,
          AUD2_INVDCDET.FACTOR                  AS DISCOUNT_FACTOR,
          AUD2_INVDCDET.DISCOUNT                AS DISCOUNT_AMT,
          AUD2_INVDCDET.BASIC_RATE              AS BASIC_RATE,
          AUD2_INVDCDET.ROUNDOFF                AS ROUNDOFF_AMT,
          AUD2_INVDCDET.INVPICKLISTDET_CODE     AS PICKLIST_DETAIL_CODE,
          PICKLIST.INVPICKLISTMAIN_CODE         AS PICKLIST_NUMBER,
          AUD2_INVDCDET.INVBIN_CODE             AS BIN_CODE,
          BIN.BINNO                             AS BIN_NUMBER,
          AUD2_INVDCDET.WSP                     AS WSP,
          AUD2_INVDCDET.LISTEP_MRP              AS MRP,
          AUD2_INVDCDET.INVBATCH_SERIAL_CODE    AS BATCH_SERIAL_CODE,
          BATCH_SERIAL.BATCH_SERIAL_NO          AS BATCH_SERIAL_NO
FROM AUD2_INVDCDET
         INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''DeliveryChallan'') TRANS_DET
             ON (AUD2_INVDCDET.DCCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVDCDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN INVITEM BARCODE ON AUD2_INVDCDET.ICODE = BARCODE.ICODE
LEFT OUTER JOIN INVPICKLISTDET PICKLIST ON AUD2_INVDCDET.INVPICKLISTDET_CODE = PICKLIST.CODE
LEFT OUTER JOIN INVBIN BIN ON AUD2_INVDCDET.INVBIN_CODE = BIN.CODE
LEFT OUTER JOIN INVBATCH_SERIAL BATCH_SERIAL ON AUD2_INVDCDET.INVBATCH_SERIAL_CODE = BATCH_SERIAL.CODE', 'DCCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'Charge Item', 1, 'ChargeItem', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purinvchg_item 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.INVCODE          INVOICE_TRANSFER_CODE,
          AUD.INVCODE          MODULE_KEY,
          AUD.PURINVDET_CODE   PUR_INV_DET_CODE,
          AUD.CODE,
          AUD.SEQ              SEQUENCE,
          AUD.CHGCODE          CHARGE_CODE,
          CHG.CHGNAME          CHARGE_NAME,
          AUD.GLCODE           LEDGER_CODE,
          GL.GLNAME            LEDGER_NAME,
          AUD.SLCODE           SUBLEDGER_CODE,
          SL.SLNAME            SUBLEDGER_NAME,
          AUD.RATE             FACTOR,
          CASE
             WHEN AUD.BASIS = ''P'' THEN ''Percentage''
             WHEN AUD.BASIS = ''A'' THEN ''Amount''
          END
             BASIS,
          AUD.SIGN             SIGN,
          AUD.CHGAMT           CHARGE_AMOUNT,
          AUD.APPAMT           APPLICABLE_AMOUNT,
          AUD.FORMULAE         FORMULA,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          AUD.SOURCE           FACTOR_SOURCE,
          AUD.CODE             ROLE_MENU_ASSIGNMENT_CODE,
          AUD.GST_COMPONENT    GST_COMPONENT,
          AUD.ISREVERSE        GST_REVERSE_CHARGE,
          AUD.ROUNDOFF_ADJ_AMT ROUNDOFF_ADJUSTED_AMT
FROM aud2_purinvchg_item aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Purchase Invoice'') trans_det
			ON (AUD.INVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finchg chg ON AUD.CHGCODE = CHG.CHGCODE 
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'INVCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 4, 'PURINVDET_CODE#CHGCODE');
INSERT INTO main.aud2_table VALUES ('TaxRates', 'FINTAXDET', 'Tax Rate Details', 1, 'TaxRateDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fintaxdet 
AS 
SELECT    TRANS_DET.VERSION_SEQ           AS VERSION_SEQ,
          AUD2_FINTAXDET.ACTION,
          TRANS_DET.LOGIN_USER            AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID        AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE      AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE      AS MODULE_KEY,
          FINTAXMAIN.TAXNAME              AS MODULE_KEY_DISPLAY,
          AUD2_FINTAXDET.TAXCODE          AS TAX_GROUP_CODE,
          FINTAXMAIN.TAXNAME              AS TAX_GROUP_NAME,
          AUD2_FINTAXDET.TAXDESC          AS TAX_NAME,
          AUD2_FINTAXDET.DTFR             AS EFFECTIVE_DATE,
          AUD2_FINTAXDET.RATE             AS TAX_RATE,
          AUD2_FINTAXDET.INPUTRATE        AS INPUT_RATE,
          AUD2_FINTAXDET.TAXDETCODE       AS CODE,
          AUD2_FINTAXDET.ADMCMPTAX_CODE   AS TAX_REGION_CODE,
          ADMCMPTAX.NAME                  AS TAX_REGION_NAME,
          AUD2_FINTAXDET.SALTAX_GLCODE    AS SALE_TAX_LEDGER_CODE,
          SALE_TAX_LEDGER.GLNAME          AS SALE_TAX_LEDGER_NAME,
          AUD2_FINTAXDET.SALTAX_SLCODE    AS SALE_TAX_SUBLEDGER_CODE,
          SALE_TAX_SL.SLNAME              AS SALE_TAX_SL_NAME,
          AUD2_FINTAXDET.PURTAX_GLCODE    AS PURCHASE_TAX_LEDGER_CODE,
          PUR_TAX_LEDGER.GLNAME           AS PUR_TAX_LEDGER_NAME,
          AUD2_FINTAXDET.PURTAX_SLCODE    AS PURCHASE_SUB_LEDGER_CODE,
          PUR_TAX_SL.SLNAME               AS PUR_TAX_SL_NAME,
          CASE AUD2_FINTAXDET.RANGE_APPL
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS TAX_RANGE_APPLICABLE,
          CASE AUD2_FINTAXDET.TAX_BASIS
             WHEN ''N'' THEN ''NET PRICE''
             WHEN ''M'' THEN ''RSP''
             ELSE '' ''
          END
             AS TAX_BASIS,
          AUD2_FINTAXDET.FINTRADEGRP_CODE AS TRADE_GROUP_CODE,
          FINTRADEGRP.NAME                AS TRADE_GROUP_NAME,
          AUD2_FINTAXDET.FORMCODE         AS FORM_CODE,
          FINFORM.FORMNAME                AS FORM_NAME
     FROM AUD2_FINTAXDET
          INNER JOIN(SELECT A.*,
					RANK()
					OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
					FROM AUD2_TRANSACTION A
					WHERE MODULE_SHORTCODE = ''TaxRates'') TRANS_DET
             ON (AUD2_FINTAXDET.TAXDETCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE AND AUD2_FINTAXDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT JOIN FINTAXMAIN FINTAXMAIN ON AUD2_FINTAXDET.TAXCODE = FINTAXMAIN.TAXCODE
INNER JOIN ADMCMPTAX ADMCMPTAX ON AUD2_FINTAXDET.ADMCMPTAX_CODE = ADMCMPTAX.CODE
LEFT JOIN FINGL SALE_TAX_LEDGER ON AUD2_FINTAXDET.SALTAX_GLCODE = SALE_TAX_LEDGER.GLCODE
LEFT JOIN FINSL SALE_TAX_SL ON AUD2_FINTAXDET.SALTAX_SLCODE = SALE_TAX_SL.SLCODE
LEFT JOIN FINGL PUR_TAX_LEDGER ON AUD2_FINTAXDET.PURTAX_GLCODE = PUR_TAX_LEDGER.GLCODE
LEFT JOIN FINSL PUR_TAX_SL ON AUD2_FINTAXDET.PURTAX_SLCODE = PUR_TAX_SL.SLCODE
INNER JOIN FINTRADEGRP FINTRADEGRP ON AUD2_FINTAXDET.FINTRADEGRP_CODE = FINTRADEGRP.CODE
LEFT JOIN FINFORM FINFORM ON AUD2_FINTAXDET.FORMCODE = FINFORM.FORMCODE', 'TAXDETCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'TAXDETCODE');
INSERT INTO main.aud2_table VALUES ('CancelOrder', 'SALORDCNLDET', 'Details', 1, 'SalesCancelOrderDetails', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salordcnldet 
AS 
SELECT TRANS_DET.VERSION_SEQ                  AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                   AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID               AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE             AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE             AS MODULE_KEY,
          AUD2_SALORDCNLDET.ACTION,
          AUD2_SALORDCNLDET.CNLCODE              AS CANCELLATION_CODE,
          AUD2_SALORDCNLDET.ORDCODE              AS ORDER_CODE,
          SALORDMAIN.SCHEME_DOCNO                AS ORDER_NUMBER,
          AUD2_SALORDCNLDET.ICODE                AS ICODE,
          INVITEM.BARCODE                        AS ITEM_BARCODE,
          AUD2_SALORDCNLDET.RATE                 AS RATE,
          AUD2_SALORDCNLDET.CNLQTY               AS CANCEL_QTY,
          AUD2_SALORDCNLDET.CODE                 AS CODE,
          AUD2_SALORDCNLDET.SALORDDET_CODE       AS ORDER_DET_CODE,
          AUD2_SALORDCNLDET.INVBATCH_SERIAL_CODE AS BATCH_SERIAL_CODE,
          INVBATCH_SERIAL.BATCH_SERIAL_NO        AS BATCH_SERIAL_NUMBER
FROM AUD2_SALORDCNLDET
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''CancelOrder'') TRANS_DET
             ON (AUD2_SALORDCNLDET.CNLCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_SALORDCNLDET.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN SALORDMAIN SALORDMAIN ON AUD2_SALORDCNLDET.ORDCODE = SALORDMAIN.ORDCODE
INNER JOIN INVITEM INVITEM ON AUD2_SALORDCNLDET.ICODE = INVITEM.ICODE
LEFT OUTER JOIN INVBATCH_SERIAL INVBATCH_SERIAL ON AUD2_SALORDCNLDET.INVBATCH_SERIAL_CODE = INVBATCH_SERIAL.CODE', 'CNLCODE', 'AuditTriggerTemplateAllColumnsNew', 2, 'CODE');
INSERT INTO main.aud2_table VALUES ('SalePriceList', 'SALPRICELISTMAIN', 'Master', 1, 'PriceListHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salpricelistmain 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          AUD.TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE,
          AUD.PRICELISTCODE           PRICE_LIST_CODE,
          AUD.PRICELISTCODE           MODULE_KEY,
          AUD.PRICELISTNAME           PRICE_LIST_NAME,
          AUD.PRICELISTNAME           MODULE_KEY_DISPLAY,
          AUD.REM                     REMARKS,
          AUD.ECODE                   CREATEDBY_USERCODE,
          E1.FNAME                    CREATEDBY_USER,
          AUD.LAST_ACCESS_ECODE       LASTMODIFIEDBY_USERCODE,
          E2.FNAME                    LASTMODIFIEDBY_USER,
          AUD.PRICE_TYPE              PRICE_TYPE,
          AUD.DISCOUNT_MODE           MARKUP_OR_MARKDOWN,
          AUD.INCLUDE_VAT_IN_DISCOUNT INCLUDE_TAX_IN_DISCOUNT,
          CASE AUD.DISCOUNT_BASIS
             WHEN ''B'' THEN ''Before Markdown''
             WHEN ''N'' THEN ''After Markdown''
          END
             TAX_DISC_CALC_MODE,
          CASE AUD.CMPTAX_CODE_BASIS
             WHEN ''S'' THEN ''Net price''
             WHEN ''D'' THEN ''Selected Price Type''
          END
             TAX_PICKUP_BASIS,
          AUD.DISCOUNT_FACTOR         FACTOR,
          CASE AUD.CMPTAX_CODE_BASIS
             WHEN ''U'' THEN ''Upper''
             WHEN ''L'' THEN ''Lower''
             WHEN ''R'' THEN ''Round''
             WHEN ''N'' THEN ''Do not Round''
          END
             ROUND_OFF_BASIS,
          AUD.NET_PRICE_MULTIPLES_OF  ROUND_OFF_MULTIPLES
     FROM AUD2_SALPRICELISTMAIN AUD INNER JOIN (SELECT A.*,
												RANK()
												OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
												ORDER BY TRANSACTION_DATE) VERSION_SEQ
												FROM AUD2_TRANSACTION A
												WHERE MODULE_SHORTCODE = ''SalePriceList'') TRANS_DET 
									ON ((AUD.PRICELISTCODE::TEXT) = TRANS_DET.HEADER_KEY_VALUE
									     AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN HRDEMP E1 ON AUD.ECODE = E1.ECODE
INNER JOIN HRDEMP E2 ON AUD.ECODE = E2.ECODE', 'PRICELISTCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'PRICELISTCODE');
INSERT INTO main.aud2_table VALUES ('Purchase Return', 'PURRTCHG', 'Charge', 1, 'Charge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purrtchg 
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CODE,
          AUD.RTCODE               RETURN_CODE,
          AUD.RTCODE               MODULE_KEY,
          AUD.RTDT                 RETURN_DATE,
          AUD.CHGCODE              CHARGE_CODE,
          CHG.CHGNAME              CHARGE_NAME,
          AUD.RATE                 FACTOR,
          AUD.SIGN                 SIGN,
          AUD.CHGAMT               CHARGE_AMOUNT,
          AUD.GLCODE               LEDGER_CODE,
          GL.GLNAME                LEDGER_NAME,
          AUD.FORMCODE             FORM_CODE,
          F.FORMNAME               FORM_NAME,
          AUD.FORMNO               FORM_NO,
          AUD.FORMDT               FORM_DATE,
          AUD.SLCODE               SUBLEDGER_CODE,
          SL.SLNAME                SUBLEDGER_NAME,
          AUD.GL_CC_APPL           GL_SITE_APPL,
          AUD.SEQ                  SEQUENCE,
          AUD.WITHOUT_TERM_FORMULA WITHOUT_TERM_FORMULA,
          CASE
             WHEN AUD.BASIS = ''P'' THEN ''Percentage''
             WHEN AUD.BASIS = ''A'' THEN ''Amount''
          END
             BASIS,
          AUD.APPAMT               APPLICABLE_AMOUNT,
          AUD.FORMULAE             FORMULA,
          CASE
             WHEN AUD.OPERATION_LEVEL = ''L'' THEN ''Line Level''
             WHEN AUD.OPERATION_LEVEL = ''H'' THEN ''Header Level''
          END
             AS OPERATION_LEVEL,
          CASE
             WHEN AUD.ISTAX = ''Y'' THEN ''YES''
             WHEN AUD.ISTAX = ''N'' THEN ''NO''
          END
             ISTAX,
          CASE
             WHEN AUD.SOURCE = ''G'' THEN ''GST''
             WHEN AUD.SOURCE = ''F'' THEN ''Fixed''
             WHEN AUD.SOURCE = ''E'' THEN ''Excise''
          END
             FACTOR_SOURCE,
          AUD.GST_COMPONENT        GST_COMPONENT,
          AUD.ISREVERSE            GST_REVERSE_CHARGE
     FROM aud2_purrtchg aud INNER JOIN (SELECT A.*,
										RANK()
										OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										ORDER BY TRANSACTION_DATE)
										VERSION_SEQ
										FROM AUD2_TRANSACTION A
										WHERE MODULE_SHORTCODE = ''Purchase Return'') trans_det 
	 ON (AUD.RTCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finchg chg ON (AUD.CHGCODE = CHG.CHGCODE) 
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finform f ON (AUD.FORMCODE = F.FORMCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)', 'RTCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'RTCODE#CHGCODE#RATE#GLCODE#COALESCE(SLCODE,0)#FORMULAE#COALESCE(SIGN,''X'')#ISTAX#SOURCE#BASIS');
INSERT INTO main.aud2_table VALUES ('GRT', 'INVGRTCHG', 'Charge', 1, 'PurchaseGRTCharge', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgrtchg 
AS 
SELECT TRANS_DET.VERSION_SEQ        AS VERSION_SEQ,
          AUD2_INVGRTCHG.ACTION,
          TRANS_DET.LOGIN_USER         AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID     AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE   AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE   AS MODULE_KEY,
          AUD2_INVGRTCHG.GRTCODE       AS GOOD_RETURN_CODE,
          AUD2_INVGRTCHG.SEQ           AS SEQUENCE,
          AUD2_INVGRTCHG.CHGCODE       AS CHARGE_CODE,
          FINCHG.CHGNAME               AS CHARGE_NAME,
          AUD2_INVGRTCHG.RATE          AS RATE,
          AUD2_INVGRTCHG.SIGN          AS SIGN,
          AUD2_INVGRTCHG.CHGAMT        AS CHARGE_AMOUNT,
          CASE AUD2_INVGRTCHG.BASIS
             WHEN ''A'' THEN ''AMOUNT''
             WHEN ''P'' THEN ''PERCENTAGE''
             ELSE '' ''
          END
             AS BASIS,
          AUD2_INVGRTCHG.APPAMT        AS APPLICABLE_AMOUNT,
          AUD2_INVGRTCHG.FORMULAE      AS FORMULA,
          CASE AUD2_INVGRTCHG.OPERATION_LEVEL
             WHEN ''H'' THEN ''HEADER''
             WHEN ''L'' THEN ''LINE LEVEL''
             ELSE '' ''
          END
             AS OPERATION_LEVEL,
          CASE AUD2_INVGRTCHG.ISTAX
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS ISTAX,
          CASE AUD2_INVGRTCHG.SOURCE
             WHEN ''F'' THEN ''Fixed''
             WHEN ''V'' THEN ''VAT''
             WHEN ''G'' THEN ''GST''
             WHEN ''E'' THEN ''Excise''
          END
             AS FACTOR_SOURCE,
          AUD2_INVGRTCHG.CODE          AS CODE,
          AUD2_INVGRTCHG.GST_COMPONENT AS GST_COMPONENT,
          CASE AUD2_INVGRTCHG.ISREVERSE
             WHEN ''Y'' THEN ''YES''
             WHEN ''N'' THEN ''NO''
             ELSE '' ''
          END
             AS GST_REVERSE_CHARGE
FROM AUD2_INVGRTCHG
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GRT'') TRANS_DET
             ON (AUD2_INVGRTCHG.GRTCODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGRTCHG.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINCHG FINCHG ON AUD2_INVGRTCHG.CHGCODE = FINCHG.CHGCODE', 'GRTCODE', 'AuditTriggerTemplateAllColumnsDeleteInsertNew', 3, 'GRTCODE#CHGCODE#RATE#FORMULAE#COALESCE(SIGN,''X'')');
INSERT INTO main.aud2_table VALUES ('GSTAdditionalCess', 'INVGSTADDCESSRATE', 'Gst Additional Cess', 1, 'GSTAdditionalCess', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invgstaddcessrate 
AS 
SELECT TRANS_DET.VERSION_SEQ                    AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                     AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID                 AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE               AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE               AS MODULE_KEY,
          INVGSTRATE.TAX_NAME                      AS MODULE_KEY_DISPLAY,
          AUD2_INVGSTADDCESSRATE.ACTION,
          AUD2_INVGSTADDCESSRATE.CODE              AS CODE,
          AUD2_INVGSTADDCESSRATE.EFFECTIVE_DATE    AS EFFECTIVE_DATE,
          AUD2_INVGSTADDCESSRATE.GSTSTATECODE      AS GSTSTATECODE,
          ADMGSTSTATE.NAME                         AS GST_STATE_NAME,
          AUD2_INVGSTADDCESSRATE.INVGSTRATE_CODE   AS TAX_RATE_CODE,
          INVGSTRATE.TAX_NAME                      AS TAX_RATE_NAME,
          AUD2_INVGSTADDCESSRATE.ADDCESSRATE       AS ADDITIONAL_CESS_RATE,
          AUD2_INVGSTADDCESSRATE.ECODE             AS CREATED_USER_CODE,
          HRDEMP.FNAME                             AS CREATED_USER_NAME,
          AUD2_INVGSTADDCESSRATE.LAST_ACCESS_ECODE AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                            AS LAST_MODIFIED_USER_NAME
FROM AUD2_INVGSTADDCESSRATE
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''GSTAdditionalCess'') TRANS_DET
             ON (AUD2_INVGSTADDCESSRATE.CODE::TEXT = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_INVGSTADDCESSRATE.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN ADMGSTSTATE ADMGSTSTATE ON AUD2_INVGSTADDCESSRATE.GSTSTATECODE = ADMGSTSTATE.CODE
LEFT OUTER JOIN INVGSTRATE INVGSTRATE ON AUD2_INVGSTADDCESSRATE.INVGSTRATE_CODE = INVGSTRATE.CODE
INNER JOIN HRDEMP ON AUD2_INVGSTADDCESSRATE.ECODE = HRDEMP.ECODE
LEFT OUTER JOIN HRDEMP HRDEMP1 ON AUD2_INVGSTADDCESSRATE.LAST_ACCESS_ECODE = HRDEMP1.ECODE
INNER JOIN INVGSTRATE INVGSTRATE1 ON AUD2_INVGSTADDCESSRATE.INVGSTRATE_CODE = INVGSTRATE1.CODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('TDSSection', 'FINTDSTYPE', 'Tds Section Header', 1, 'TDSSectionHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_fintdstype 
AS 
SELECT    TRANS_DET.VERSION_SEQ            AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER             AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID         AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE       AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE       AS MODULE_KEY,
          AUD2_FINTDSTYPE.ACTION,
          AUD2_FINTDSTYPE.TDSTYPECODE      AS TDS_SECTION_CODE,
          AUD2_FINTDSTYPE.TDSNAME          AS TDS_NAME,
          AUD2_FINTDSTYPE.SECTION          AS TDS_SECTION,
          AUD2_FINTDSTYPE.TDSGLCODE        AS LEDGER_CODE,
          LEDGER.GLNAME                    AS LEDGER_NAME,
          AUD2_FINTDSTYPE.TDSSLCODE        AS TDS_AGENCY_CODE,
          AGENCY.SLNAME                    AS TDS_AGENCY_NAME,
          AUD2_FINTDSTYPE.EXT              AS EXTINCT,
          CASE AUD2_FINTDSTYPE.TDSTYPE
             WHEN ''S'' THEN ''SERVICES''
             WHEN ''G'' THEN ''GOODS''
             ELSE '' ''
          END
             AS TDS_TYPE,
          AUD2_FINTDSTYPE.CREATED_BY       AS CREATED_USER_CODE,
          HRDEMP.FNAME                     AS CREATED_USER_NAME,
          AUD2_FINTDSTYPE.LAST_MODIFIED_BY AS LAST_MODIFIED_USER_CODE,
          HRDEMP1.FNAME                    AS LAST_MODIFIED_USER_NAME
     FROM AUD2_FINTDSTYPE
          INNER JOIN(SELECT A.*,
					RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
					FROM AUD2_TRANSACTION A
					WHERE MODULE_SHORTCODE = ''TDSSection'') TRANS_DET
          ON (AUD2_FINTDSTYPE.TDSTYPECODE::TEXT = TRANS_DET.HEADER_KEY_VALUE AND AUD2_FINTDSTYPE.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN FINGL LEDGER ON AUD2_FINTDSTYPE.TDSGLCODE = LEDGER.GLCODE
LEFT JOIN FINSL AGENCY ON AUD2_FINTDSTYPE.TDSSLCODE = AGENCY.SLCODE
INNER JOIN HRDEMP ON AUD2_FINTDSTYPE.CREATED_BY = HRDEMP.ECODE
LEFT JOIN HRDEMP HRDEMP1 ON AUD2_FINTDSTYPE.LAST_MODIFIED_BY = HRDEMP1.ECODE', 'TDSTYPECODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'TDSTYPECODE');
INSERT INTO main.aud2_table VALUES ('POS GRT', 'PSITE_GRT', 'Header', 1, 'POSGRTHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_psite_grt 
AS 
SELECT TRANS_DET.VERSION_SEQ                  AS VERSION_SEQ,
          TRANS_DET.LOGIN_USER                   AS LOGIN_USER,
          TRANS_DET.TRANSACTION_ID               AS TRANSACTION_ID,
          TRANS_DET.TRANSACTION_DATE             AS TRANSACTION_DATE,
          TRANS_DET.HEADER_KEY_VALUE             AS MODULE_KEY,
          AUD2_PSITE_GRT.DOCNO                   AS MODULE_KEY_DISPLAY,
          AUD2_PSITE_GRT.ACTION,
          AUD2_PSITE_GRT.CODE                    AS RETAIL_GRT_CODE,
          AUD2_PSITE_GRT.SLCODE                  AS CUSTOMER_SL_CODE,
          FINSL.SLNAME                           AS CUSTOMER_NAME,
          AUD2_PSITE_GRT.ADMSITE_CODE            AS OWNER_SITE_CODE,
          ADMSITE.NAME                           AS OWNER_SITE_NAME,
          AUD2_PSITE_GRT.ADMOU_CODE              AS OU_CODE,
          OU.NAME                                AS OU_NAME,
          AUD2_PSITE_GRT.ADMOU_CODE              AS GRT_DOC_NO,
          AUD2_PSITE_GRT.DOCDT                   AS GRT_DOC_DATE,
          AUD2_PSITE_GRT.STORE_LOCCODE           AS STORE_LOCATION_CODE,
          STORE_LOCATION.LOCNAME                 AS STORE_LOCATION_NAME,
          AUD2_PSITE_GRT.PSITE_INTRANSIT_LOCCODE AS TRANSIT_LOCATION_CODE,
          TRANSIT_LOCATION.LOCNAME               AS TRANSIT_LOCATION_NAME,
          AUD2_PSITE_GRT.REASON                  AS GRT_REASON,
          AUD2_PSITE_GRT.REMARKS                 AS REMARKS,
          AUD2_PSITE_GRT.BASICAMT                AS BASIC_AMT,
          AUD2_PSITE_GRT.GRSAMT                  AS GROSS_AMT,
          AUD2_PSITE_GRT.NETAMT                  AS NET_AMOUNT,
          CASE AUD2_PSITE_GRT.ISSECONDARY
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS IS_OWNER_SITE_SECONDARY,
          AUD2_PSITE_GRT.DOC                     AS GRT_DOC_DATE_TIME,
          CASE AUD2_PSITE_GRT.ISINCLUDED
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
             ELSE '' ''
          END
             AS IS_INCLUDED,
          AUD2_PSITE_GRT.REPLN_ADMOU_CODE        AS REPLENISHMENT_OU_CODE,
          REPLENISHMENT_OU.NAME                  AS REPLENISHMENT_OU_NAME,
          AUD2_PSITE_GRT.TRANSFEROUT_GLCODE      AS TRANSFEROUT_LEDGER_CODE,
          TRANSFEROUT_LEDGER.GLNAME              AS TRANSFEROUT_LEDGER_NAME,
          AUD2_PSITE_GRT.TRANSFEROUT_SLCODE      AS TRANSFEROUT_SL_CODE,
          TRANSFEROUT_SL.SLNAME                  AS TRANSFEROUT_SL_NAME,
          AUD2_PSITE_GRT.TRANSIT_GLCODE          AS TRANSIT_LEDGER_CODE,
          TRANSIT_LEDGER.GLNAME                  AS TRANSIT_LEDGER_NAME,
          AUD2_PSITE_GRT.TRANSIT_SLCODE          AS TRANSIT_SUB_LEDGER_CODE,
          TRANSIT_SUB_LEDGER.SLNAME              AS TRANSIT_SUB_LEDGER_NAME,
          AUD2_PSITE_GRT.REPLN_ADMSITE_CODE      AS REPLENISHMENT_SITE_CODE,
          REPLENISHMENT_SITE.NAME                AS REPLENISHMENT_SITE_NAME,
          AUD2_PSITE_GRT.PSITE_STOCKPOINT_CODE   AS OWNER_STOCKPOINT_CODE,
          OWNER_STOCKPOINT.NAME                  AS OWNER_STOCKPOINT_NAME,
          CASE AUD2_PSITE_GRT.FORMAPPLICABLE
             WHEN 1 THEN ''YES''
             WHEN 0 THEN ''NO''
          END
             AS FORM_APPLICABLE,
          AUD2_PSITE_GRT.FINTRADEGRP_CODE        AS TRADEGROUP_CODE,
          FINTRADEGRP.NAME                       AS TRADEGROUP_NAME,
          CASE AUD2_PSITE_GRT.RETURN_RATE_BASIS
             WHEN ''L'' THEN ''As per Last Received Price''
             WHEN ''P'' THEN ''As per Price List''
             ELSE '' ''
          END
             AS GRT_RATE_BASIS,
          AUD2_PSITE_GRT.RETURN_PRICELIST_CODE   AS GRT_PRICELIST_CODE,
          SALPRICELISTMAIN.PRICELISTNAME         AS GRT_PRICELIST_NAME,
          CASE AUD2_PSITE_GRT.DISCOUNTMODE
             WHEN ''U'' THEN ''MARK UP''
             WHEN ''D'' THEN ''MARK DOWN''
             ELSE '' ''
          END
             AS DISCOUNT_MODE,
          CASE AUD2_PSITE_GRT.INCLUDETAXINDISCOUNT
             WHEN ''1'' THEN ''YES''
             WHEN ''0'' THEN ''NO''
             ELSE '' ''
          END
             AS INCLUDE_TAX_IN_DISCOUNT,
          CASE AUD2_PSITE_GRT.DISCOUNTBASIS
             WHEN ''G'' THEN ''GROSS''
             WHEN ''N'' THEN ''NET''
             ELSE '' ''
          END
             AS DISCOUNTBASIS,
          AUD2_PSITE_GRT.DISCOUNTFACTOR          AS DISCOUNT_FACTOR,
          AUD2_PSITE_GRT.MULTIPLESOF             AS MULTIPLES_OF,
          CASE AUD2_PSITE_GRT.ROUNDLIMIT
             WHEN ''U'' THEN ''Upper''
             WHEN ''L'' THEN ''Lower''
             WHEN ''R'' THEN ''Round''
             WHEN ''N'' THEN ''None''
             ELSE '' ''
          END
             AS ROUND_OFF_LIMIT,
          AUD2_PSITE_GRT.TAX_RATE_BASIS          AS TAX_RATE_BASIS,
          CASE AUD2_PSITE_GRT.OWNER_GSTIN_NO
             WHEN ''S'' THEN ''Source''
             WHEN ''D'' THEN ''Destination''
             ELSE '' ''
          END
             AS TRANSACTION_GSTIN,
          AUD2_PSITE_GRT.OWNER_GSTIN_STATE_CODE  AS TRANSACTION_GST_STATECODE,
          TRANSACTION_GST.NAME                   AS TRANSACTION_GST_STATENAME,
          AUD2_PSITE_GRT.CP_GSTIN_NO             AS CP_GSTIN,
          AUD2_PSITE_GRT.CP_GSTIN_STATE_CODE     AS CP_GST_STATECODE,
          CP_GST.NAME                            AS CP_GST_STATENAME,
          AUD2_PSITE_GRT.GSTDOCNO                AS GST_DOC_NO,
          AUD2_PSITE_GRT.GSTDOCSEQ               AS GST_DOC_NO_SEQUENCE,
          AUD2_PSITE_GRT.PSITE_DOCSCHEME_CODE    AS DOCSCHEME_CODE,
          ADMDOCSCHEME.DOCNAME                   AS DOCSCHEME_NAME,
          AUD2_PSITE_GRT.TERMINALID              AS STORE_TERMINAL_ID,
          AUD2_PSITE_GRT.EWAYBILLNO              AS GRT_EWAY_BILL_NO,
          AUD2_PSITE_GRT.EWAYBILLGENERATEDON     AS GRT_EWAY_BILL_CREATED_ON,
          AUD2_PSITE_GRT.EWAYBILLVALIDUPTO       AS GRT_EWAY_BILL_VALID_UPTO,
          AUD2_PSITE_GRT.UDFSTRING1              AS UDFSTRING1,
          AUD2_PSITE_GRT.UDFSTRING2              AS UDFSTRING2,
          AUD2_PSITE_GRT.UDFSTRING3              AS UDFSTRING3,
          AUD2_PSITE_GRT.UDFSTRING4              AS UDFSTRING4,
          AUD2_PSITE_GRT.UDFSTRING5              AS UDFSTRING5,
          AUD2_PSITE_GRT.UDFSTRING6              AS UDFSTRING6,
          AUD2_PSITE_GRT.UDFSTRING7              AS UDFSTRING7,
          AUD2_PSITE_GRT.UDFSTRING8              AS UDFSTRING8,
          AUD2_PSITE_GRT.UDFSTRING9              AS UDFSTRING9,
          AUD2_PSITE_GRT.UDFSTRING10             AS UDFSTRING10,
          AUD2_PSITE_GRT.UDFNUM01                AS UDFNUM01,
          AUD2_PSITE_GRT.UDFNUM02                AS UDFNUM02,
          AUD2_PSITE_GRT.UDFNUM03                AS UDFNUM03,
          AUD2_PSITE_GRT.UDFNUM04                AS UDFNUM04,
          AUD2_PSITE_GRT.UDFNUM05                AS UDFNUM05,
          AUD2_PSITE_GRT.UDFDATE01               AS UDFDATE01,
          AUD2_PSITE_GRT.UDFDATE02               AS UDFDATE02,
          AUD2_PSITE_GRT.UDFDATE03               AS UDFDATE03,
          AUD2_PSITE_GRT.UDFDATE04               AS UDFDATE04,
          AUD2_PSITE_GRT.UDFDATE05               AS UDFDATE05,
          AUD2_PSITE_GRT.CREATEDBY               AS CREATEDBY_USERNAME,
          AUD2_PSITE_GRT.LASTMODIFIEDBY          AS LASTMODIFIEDBY_USERNAME,
          AUD2_PSITE_GRT.CLOSEDBY                AS CLOSEDBY_USERNAME
FROM AUD2_PSITE_GRT
          INNER JOIN(SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''POS GRT'') TRANS_DET
             ON (AUD2_PSITE_GRT.CODE = TRANS_DET.HEADER_KEY_VALUE
                AND AUD2_PSITE_GRT.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
LEFT OUTER JOIN FINSL FINSL ON AUD2_PSITE_GRT.SLCODE = FINSL.SLCODE
INNER JOIN ADMSITE ADMSITE ON AUD2_PSITE_GRT.ADMSITE_CODE = ADMSITE.CODE
LEFT OUTER JOIN ADMOU OU ON AUD2_PSITE_GRT.ADMOU_CODE = OU.CODE
INNER JOIN INVLOC STORE_LOCATION ON AUD2_PSITE_GRT.STORE_LOCCODE = STORE_LOCATION.LOCCODE
LEFT OUTER JOIN INVLOC TRANSIT_LOCATION ON AUD2_PSITE_GRT.PSITE_INTRANSIT_LOCCODE = TRANSIT_LOCATION.LOCCODE
LEFT OUTER JOIN ADMOU REPLENISHMENT_OU ON AUD2_PSITE_GRT.REPLN_ADMOU_CODE = REPLENISHMENT_OU.CODE
LEFT OUTER JOIN FINGL TRANSFEROUT_LEDGER ON AUD2_PSITE_GRT.TRANSFEROUT_GLCODE = TRANSFEROUT_LEDGER.GLCODE
LEFT OUTER JOIN FINSL TRANSFEROUT_SL ON AUD2_PSITE_GRT.TRANSFEROUT_SLCODE = TRANSFEROUT_SL.SLCODE
LEFT OUTER JOIN FINGL TRANSIT_LEDGER ON AUD2_PSITE_GRT.TRANSIT_GLCODE = TRANSIT_LEDGER.GLCODE
LEFT OUTER JOIN FINSL TRANSIT_SUB_LEDGER ON AUD2_PSITE_GRT.TRANSIT_SLCODE = TRANSIT_SUB_LEDGER.SLCODE
LEFT OUTER JOIN ADMSITE REPLENISHMENT_SITE ON AUD2_PSITE_GRT.REPLN_ADMSITE_CODE = REPLENISHMENT_SITE.CODE
LEFT OUTER JOIN PSITE_STOCKPOINT OWNER_STOCKPOINT ON AUD2_PSITE_GRT.PSITE_STOCKPOINT_CODE = OWNER_STOCKPOINT.CODE
LEFT OUTER JOIN FINTRADEGRP FINTRADEGRP ON AUD2_PSITE_GRT.FINTRADEGRP_CODE = FINTRADEGRP.CODE
LEFT OUTER JOIN SALPRICELISTMAIN SALPRICELISTMAIN ON AUD2_PSITE_GRT.RETURN_PRICELIST_CODE = SALPRICELISTMAIN.PRICELISTCODE
LEFT OUTER JOIN ADMGSTSTATE TRANSACTION_GST ON AUD2_PSITE_GRT.OWNER_GSTIN_STATE_CODE = TRANSACTION_GST.CODE
LEFT OUTER JOIN ADMGSTSTATE CP_GST ON AUD2_PSITE_GRT.CP_GSTIN_STATE_CODE = CP_GST.CODE
LEFT OUTER JOIN ADMDOCSCHEME ADMDOCSCHEME ON AUD2_PSITE_GRT.PSITE_DOCSCHEME_CODE = ADMDOCSCHEME.DOCCODE', 'CODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CODE');
INSERT INTO main.aud2_table VALUES ('Retail Sales', 'SALCSMAIN', 'Header', 1, 'RetailSaleHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_salcsmain 
AS
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.CSCODE                    RETAIL_SALE_CODE,
          AUD.CSCODE                    MODULE_KEY,
          CS.SCHEME_DOCNO               MODULE_KEY_DISPLAY,
          AUD.CSDATE                    RETAIL_SALE_DATE,
          AUD.DOCCODE                   SCHEME_DOC_CODE,
          DOC.DOCNAME                   DOCUMENT_SCHEME_NAME,
          AUD.SCHEME_DOCNO              DOCSCHEME_NO,
          AUD.PCODE                     CHANNEL_NAME,
          SL1.SLNAME                    CUSTOMER_NAME,
          AUD.DEBTORS_GLCODE            DEBTORS_GLCODE,
          GL1.GLNAME                    DEBTORS_GLNAME,
          AUD.CONSIGNMENT_GLCODE        CONSIGNMENT_GLCODE,
          GL2.GLNAME                    CONSIGNMENT_GLNAME,
          AUD.CONSIGNMENT_TRNSFR_GLCODE CONSIGNMENT_TRNSFR_GLCODE,
          GL3.GLNAME                    CONSIGNMENT_TRNSFR_GLNAME,
          AUD.CONSIGNMENT_TRNSFR_SLCODE CONSIGNMENT_TRNSFR_SLCODE,
          SL2.SLNAME                    CONSIGNMENT_TRNSFR_SLNAME,
          AUD.CONSIGNMENT_SALES_GLCODE  CONSIGNMENT_SALES_GLCODE,
          GL4.GLNAME                    CONSIGNMENT_SALES_GLNAME,
          AUD.CONSIGNMENT_SALES_SLCODE  CONSIGNMENT_SALES_SLCODE,
          SL3.SLNAME                    CONSIGNMENT_SALES_SLNAME,
          AUD.ADMOU_CODE                OU_CODE,
          OU.NAME                       OU_NAME,
          S1.NAME                       SITE_NAME,
          AUD.OUTLOCCODE                SALE_STOCKPOINT_CODE,
          I1.LOCNAME                    SALE_STOCKPOINT_NAME,
          AUD.GRSAMT                    GROSS_AMT,
          AUD.DISCOUNT                  BILL_DISCOUNT,
          AUD.NETAMT                    NET_AMT,
          AUD.SITE_COSTAMT              SITE_COSTAMT,
          AUD.REMARKS                   REMARKS,
          AUD.ECODE                     CREATED_BY,
          H1.FNAME                      CREATED_BY_USER,
          AUD.LAST_ACCESS_ECODE         LAST_ACCESS_USER_CODE,
          H2.FNAME                      LAST_ACCESSED_BY_USER,
          AUD.ROUNDOFF_GLCODE           ROUNDOFF_LEDGER_CODE,
          GL5.GLNAME                    ROUNDOFF_LEDGER_NAME,
          AUD.ROUNDOFF                  ROUNDOFF_AMT,
          AUD.NETPAYABLE                NET_PAYABLE,
          AUD.ADMSITE_CODE_OWNER        OWNER_SITE_CODE,
          S2.NAME                       OWNER_SITE_NAME,
          CASE
             WHEN AUD.RELEASE_STATUS = ''U'' THEN ''Unposted''
             WHEN AUD.RELEASE_STATUS = ''P'' THEN ''Posted''
             WHEN AUD.RELEASE_STATUS = ''R'' THEN ''Revert Posting''
          END
             RELEASE_STATUS,
          AUD.RELEASE_ECODE             RELEASED_BY_USER_CODE,
          H3.FNAME                      RELEASED_BY_USER,
          CASE
             WHEN AUD.CHANNELTYPE = ''ETL'' THEN ''OMS''
             WHEN AUD.CHANNELTYPE = ''RTL'' THEN ''RETAIL''
          END
             CHANNEL_TYPE,
          AUD.FINTRADEGRP_CODE          TRADEGRP_CODE,
          F.NAME                        TRADEGROUP_NAME,
          AUD.PSITE_CUSTOMER_CODE       RETAIL_CUSTOMER_CODE,
          CUS.FNAME                     RETAIL_CUSTOMER,
          AUD.REFNO                     REF_NO,
          AUD.SHIPCHG                   SHIPPING_CHARGE,
          AUD.GWCHG                     GIFT_WRAP_CHARGE,
          AUD.CODCHG                    COD_CHARGE,
          AUD.EXTAXAMT                  EXTRA_TAX,
          AUD.QTY                       TOTAL_QUANTITY,
          AUD.UDFSTRING01               UDFSTRING01,
          AUD.UDFSTRING02               UDFSTRING02,
          AUD.UDFSTRING03               UDFSTRING03,
          AUD.UDFSTRING04               UDFSTRING04,
          AUD.UDFSTRING05               UDFSTRING05,
          AUD.UDFSTRING06               UDFSTRING06,
          AUD.UDFSTRING07               UDFSTRING07,
          AUD.UDFSTRING08               UDFSTRING08,
          AUD.UDFSTRING09               UDFSTRING09,
          AUD.UDFSTRING10               UDFSTRING10,
          AUD.UDFNUM01                  UDFNUM01,
          AUD.UDFNUM02                  UDFNUM02,
          AUD.UDFNUM03                  UDFNUM03,
          AUD.UDFNUM04                  UDFNUM04,
          AUD.UDFNUM05                  UDFNUM05,
          AUD.UDFDATE01                 UDFDATE01,
          AUD.UDFDATE02                 UDFDATE02,
          AUD.UDFDATE03                 UDFDATE03,
          AUD.UDFDATE04                 UDFDATE04,
          AUD.UDFDATE05                 UDFDATE05,
          AUD.OWNER_GSTIN_NO            TRANSACTION_SITE_GSTIN,
          AUD.OWNER_GSTIN_STATE_CODE    TRANSACTION_SITE_GSTIN_STATE,
          AUD.CP_GSTIN_NO               CP_GSTIN_NO,
          AUD.CP_GSTIN_STATE_CODE       CP_GSTIN_STATE_CODE,
          AUD.ECOM_GSTIN_NO             CHANNEL_GSTIN_NO,
          AUD.ECOM_GSTIN_STATE_CODE     CHANNEL_GSTIN_STATE_CODE,
          CASE
             WHEN AUD.GSTAPPL = ''Y'' THEN ''Yes''
             WHEN AUD.GSTAPPL = ''N'' THEN ''No''
          END
             GST_APPLICABILITY,
          AUD.MAIN_GL_AMT               MAIN_GL_AMT,
          AUD.ORDER_ADMSITE_CODE        RETAIL_ORDER_SITE_CODE,
          S3.NAME                       RETAIL_ORDER_SITE_NAME,
          AUD.TEMP_DOCCODE              TEMP_DOCCODE,
          AUD.GST_DOC_NO                GST_DOC_NO,
          AUD.BILL_FNAME                BILL_CUSTOMER_FNAME,
          AUD.BILL_MNAME                BILL_CUSTOMER_MNAME,
          AUD.BILL_LNAME                BILL_CUSTOMER_LNAME,
          AUD.BILL_SALUTATION           BILL_CUSTOMER_SALUTATION,
          AUD.BILL_GENDER               BILL_CUSTOMER_GENDER,
          AUD.BILL_PROFESSION           BILL_CUSTOMER_PROFESSION,
          AUD.BILL_SPOUSENAME           BILL_CUSTOMER_SPOUSE,
          AUD.BILL_DOB                  BILL_CUSTOMER_DOB,
          AUD.BILL_DOA                  BILL_CUSTOMER_DOA,
          AUD.BILL_ISEMPLOYEE           BILL_CUSTOMER_IS_EMPLOYEE,
          AUD.BILL_ADMISD_CODE          BILL_CUSTOMER_ISD_CODE,
          AUD.BILL_MOBILE               BILL_CUSTOMER_MOBILE,
          AUD.BILL_EMAIL                BILL_CUSTOMER_EMAIL,
          AUD.BILL_ADDRESSLINE1         BILL_CUSTOMER_ADDRESS_1,
          AUD.BILL_ADDRESSLINE2         BILL_CUSTOMER_ADDRESS_2,
          AUD.BILL_ADDRESSLINE3         BILL_CUSTOMER_ADDRESS_3,
          AUD.BILL_CITY                 BILL_CUSTOMER_CITY,
          AUD.BILL_STATE                BILL_CUSTOMER_STATE,
          AUD.BILL_COUNTRY              BILL_CUSTOMER_COUNTRY,
          AUD.BILL_PIN                  BILL_CUSTOMER_PIN,
          AUD.BILL_PANNO                BILL_CUSTOMER_PAN,
          AUD.BILL_GSTIN_NO             BILL_CUSTOMER_GSTIN,
          AUD.BILL_GST_STATE_CODE       BILL_CUSTOMER_GSTIN_STATE,
          AUD.BILL_GST_DATE             BILL_CUSTOMER_GSTIN_DATE,
          AUD.BILL_REMARKS              BILL_CUSTOMER_REMARKS,
          AUD.SHIP_FNAME                SHIP_CUSTOMER_FNAME,
          AUD.SHIP_MNAME                SHIP_CUSTOMER_MNAME,
          AUD.SHIP_LNAME                SHIP_CUSTOMER_LNAME,
          AUD.SHIP_SALUTATION           SHIP_CUSTOMER_SALUTATION,
          AUD.SHIP_GENDER               SHIP_CUSTOMER_GENDER,
          AUD.SHIP_PROFESSION           SHIP_CUSTOMER_PROFESSION,
          AUD.SHIP_SPOUSENAME           SHIP_CUSTOMER_SPOUSE,
          AUD.SHIP_DOB                  SHIP_CUSTOMER_DOB,
          AUD.SHIP_DOA                  SHIP_CUSTOMER_DOA,
          AUD.SHIP_ISEMPLOYEE           SHIP_CUSTOMER_IS_EMPLOYEE,
          AUD.SHIP_ADMISD_CODE          SHIP_CUSTOMER_ISD_CODE,
          AUD.SHIP_MOBILE               SHIP_CUSTOMER_MOBILE,
          AUD.SHIP_EMAIL                SHIP_CUSTOMER_EMAIL,
          AUD.SHIP_ADDRESSLINE1         SHIP_CUSTOMER_ADDRESS_1,
          AUD.SHIP_ADDRESSLINE2         SHIP_CUSTOMER_ADDRESS_2,
          AUD.SHIP_ADDRESSLINE3         SHIP_CUSTOMER_ADDRESS_3,
          AUD.SHIP_CITY                 SHIP_CUSTOMER_CITY,
          AUD.SHIP_STATE                SHIP_CUSTOMER_STATE,
          AUD.SHIP_COUNTRY              SHIP_CUSTOMER_COUNTRY,
          AUD.SHIP_PIN                  SHIP_CUSTOMER_PIN,
          AUD.SHIP_PANNO                SHIP_CUSTOMER_PAN,
          AUD.SHIP_GSTIN_NO             SHIP_CUSTOMER_GSTIN,
          AUD.SHIP_GST_STATE_CODE       SHIP_CUSTOMER_GSTIN_STATE,
          AUD.SHIP_GST_DATE             SHIP_CUSTOMER_GSTIN_DATE,
          AUD.SHIP_REMARKS              SHIP_CUSTOMER_REMARKS,
          AUD.TPCODE                    TP_CODE,
          AUD.CODAMT                    COD_AMOUNT,
          AUD.AWBNO                     AWB_NO,
          AUD.AWBDATE                   AWB_DATE,
          AUD.DELIVERYDATE              DELIVERY_DATE,
          AUD.SHIPDATE                  SHIP_DATE,
          AUD.RETAILORDER_CODE          RETAIL_ORDER_CODE,
          AUD.REF_SALCSMAIN_CODE        REF_RETAIL_INVOICE_CODE,
          AUD.CHANNELINVOICEID          CHANNEL_INVOICE_ID,
          AUD.CHANNELINVOICEDATE        CHANNEL_INVOICE_DATE,
          AUD.ISBILLINGSHIPPINGSAME     IS_BILLING_SHIPPING_SAME,
          AUD.RETURN_LOCCODE            RETURN_STOCKPOINT,
          I2.LOCNAME                    RETURN_STOCKPOINT_NAME,
          AUD.DAMAGED_LOCCODE           DAMAGE_STOCKPOINT,
          I3.LOCNAME                    DAMAGE_STOCKPOINT_NAME,
          AUD.SHIPFROM_ADMSITE_CODE     SHIP_FROM_SITE_CODE,
          S4.NAME                       SHIP_FROM_SITE_NAME
     FROM aud2_salcsmain aud INNER JOIN (SELECT A.*, 
										 RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
										 FROM AUD2_TRANSACTION A
										 WHERE MODULE_SHORTCODE = ''Retail Sales'') trans_det 
							 ON (AUD.CSCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN finsl sl1 ON AUD.PCODE = SL1.SLCODE
INNER JOIN admsite s1 ON AUD.ADMSITE_CODE = S1.CODE
INNER JOIN admou ou ON AUD.ADMOU_CODE = OU.CODE
INNER JOIN hrdemp h1 ON AUD.ECODE = H1.ECODE
INNER JOIN fingl gl4 ON AUD.CONSIGNMENT_SALES_GLCODE = GL4.GLCODE
INNER JOIN fintradegrp f ON AUD.FINTRADEGRP_CODE = F.CODE
INNER JOIN admdocscheme doc ON AUD.DOCCODE = DOC.DOCCODE
LEFT OUTER JOIN salcsmain cs ON (AUD.CSCODE = CS.CSCODE)
LEFT OUTER JOIN fingl gl1 ON (AUD.DEBTORS_GLCODE = GL1.GLCODE)
LEFT OUTER JOIN fingl gl2 ON (AUD.CONSIGNMENT_GLCODE = GL2.GLCODE)
LEFT OUTER JOIN fingl gl3 ON (AUD.CONSIGNMENT_TRNSFR_GLCODE = GL3.GLCODE)
LEFT OUTER JOIN fingl gl5 ON (AUD.ROUNDOFF_GLCODE = GL5.GLCODE)
LEFT OUTER JOIN finsl sl2 ON (AUD.CONSIGNMENT_TRNSFR_SLCODE = SL2.SLCODE)
LEFT OUTER JOIN finsl sl3 ON (AUD.CONSIGNMENT_SALES_SLCODE = SL3.SLCODE)
LEFT OUTER JOIN admsite s2 ON (AUD.ADMSITE_CODE_OWNER = S2.CODE)
LEFT OUTER JOIN admsite s3 ON (AUD.ORDER_ADMSITE_CODE = S3.CODE)
LEFT OUTER JOIN admsite s4 ON (AUD.SHIPFROM_ADMSITE_CODE = S4.CODE)
LEFT OUTER JOIN invloc i1 ON (AUD.OUTLOCCODE = I1.LOCCODE)
LEFT OUTER JOIN invloc i2 ON (AUD.RETURN_LOCCODE = I2.LOCCODE)
LEFT OUTER JOIN invloc i3 ON (AUD.DAMAGED_LOCCODE = I3.LOCCODE)
LEFT OUTER JOIN hrdemp h2 ON (AUD.LAST_ACCESS_ECODE = H2.ECODE)
LEFT OUTER JOIN hrdemp h3 ON (AUD.RELEASE_ECODE = H3.ECODE)
LEFT OUTER JOIN psite_customer cus ON (AUD.PSITE_CUSTOMER_CODE = CUS.CODE)', 'CSCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'CSCODE');
INSERT INTO main.aud2_table VALUES ('Purchase Return', 'PURRTMAIN', 'Header', 1, 'PurchaseReturnHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purrtmain
AS 
SELECT    TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.RTCODE                 MODULE_KEY,
          RT.SCHEME_DOCNO            MODULE_KEY_DISPLAY,
          AUD.RTCODE                 RETURN_CODE,
          AUD.RTDT                   RETURN_DATE,
          AUD.PCODE                  VENDOR_CODE,
          SL1.SLNAME                 VENDOR_NAME,
          AUD.DOCNO                  DOCUMENT_NUMBER,
          AUD.AGCODE                 AGENT_CODE,
          SL2.SLNAME                 AGENT_NAME,
          AUD.AGRATE                 AGENT_RATE,
          AUD.GRSAMT                 GROSS_AMT,
          AUD.CHGAMT                 CHARGE_AMOUNT,
          AUD.NETAMT                 NET_AMOUNT,
          AUD.GLCODE                 LEDGER_CODE,
          GL1.GLNAME                 LEDGER_NAME,
          AUD.REM                    REMARKS,
          AUD.ECODE                  USER_CODE,
          H1.FNAME                   CREATEDBY_USER,
          AUD.TIME                   CREATEDON,
          AUD.LAST_ACCESS_TIME       LASTMODIFIEDON,
          AUD.LAST_ACCESS_ECODE      LASTMODIFIEDBY_USERCODE,
          AUD.LGTCODE                LOGISTICS_CODE,
          L.LGTNO                    LOGISTICS_NUMBER,
          H2.FNAME                   LASTMODIFIEDBY_USER,
          AUD.SLCODE                 SUBLEDGER_CODE,
          SL3.SLNAME                 SUBLEDGER_NAME,
          AUD.ADMOU_CODE             OU_CODE,
          OU.NAME                    OU_NAME,
          AUD.PGLCODE                DEBTOR_LEDGER_CODE,
          GL2.GLNAME                 DEBTOR_LEDGER_NAME,
          AUD.FINTRADEGRP_CODE       TRADEGROUP_CODE,
          T.NAME                     TRADEGROUP_NAME,
          AUD.DOCCODE                DOCSCHEME_CODE,
          DOC.DOCNAME                DOCSCHEME_NAME,
          AUD.SCHEME_DOCNO           DOCSCHEME_NO,
          AUD.ADMCURRENCY_CODE       CURRENCY_CODE,
          CUR.NAME                   CURRENCY_NAME,
          AUD.EXRATE                 EXCHANGE_RATE,
          AUD.ADMSITE_CODE           SITE_CODE,
          S1.NAME                    TRANSACTION_SITE_NAME,
          AUD.FORMCODE               FORM_CODE,
          F.FORMNAME                 FORM_NAME,
          AUD.FORMNO                 FORM_NO,
          AUD.FORMDT                 FORM_DATE,
          CASE
             WHEN AUD.RELEASE_STATUS = ''U'' THEN ''Unposted''
             WHEN AUD.RELEASE_STATUS = ''P'' THEN ''Posted''
          END
             RELEASE_STATUS,
          -- AUD.RELEASE_TIME           RELEASEDON,
          AUD.RELEASE_ECODE          RELEASED_USERCODE,
          H3.FNAME                   RELEASED_USER,
          AUD.REF_ADMSITE_CODE       REFERENCE_SITE_CODE,
          S2.NAME                    REFERENCE_SITE_NAME,
          AUD.PURTERMCODE            TERM_CODE,
          TERM.NAME                  TERM_NAME,
          AUD.FORMAMT                FORM_AMOUNT,
          AUD.OWNER_GSTIN_NO         TRANSACTION_GSTIN,
          AUD.OWNER_GSTIN_STATE_CODE TRANSACTION_GST_STATECODE,
          G1.NAME                    TRANSACTION_GST_NUMBER,
          AUD.CP_GSTIN_NO            CP_GSTIN,
          AUD.CP_GSTIN_STATE_CODE    CP_GST_STATECODE,
          G2.NAME                    FIN_GST_STATE_NAME,
          AUD.GSTAPPL                GST_APPLICABILITY,
          AUD.DOCDT                  DOCUMENT_DATE,
          AUD.ENTRY_SOURCE           ENTRY_SOURCE,
          AUD.UDFSTRING01            UDFSTRING01,
          AUD.UDFSTRING02            UDFSTRING02,
          AUD.UDFSTRING03            UDFSTRING03,
          AUD.UDFSTRING04            UDFSTRING04,
          AUD.UDFSTRING05            UDFSTRING05,
          AUD.UDFSTRING06            UDFSTRING06,
          AUD.UDFSTRING07            UDFSTRING07,
          AUD.UDFSTRING08            UDFSTRING08,
          AUD.UDFSTRING09            UDFSTRING09,
          AUD.UDFSTRING10            UDFSTRING10,
          AUD.UDFNUM01               UDFNUM01,
          AUD.UDFNUM02               UDFNUM02,
          AUD.UDFNUM03               UDFNUM03,
          AUD.UDFNUM04               UDFNUM04,
          AUD.UDFNUM05               UDFNUM05,
          AUD.UDFDATE01              UDFDATE01,
          AUD.UDFDATE02              UDFDATE02,
          AUD.UDFDATE03              UDFDATE03,
          AUD.UDFDATE04              UDFDATE04,
          AUD.UDFDATE05              UDFDATE05
     FROM aud2_purrtmain aud INNER JOIN (SELECT A.*,
										 RANK()
										 OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
										 ORDER BY TRANSACTION_DATE) VERSION_SEQ
										 FROM AUD2_TRANSACTION A
										 WHERE MODULE_SHORTCODE = ''Purchase Return'') trans_det 
							 ON (AUD.RTCODE::varchar = TRANS_DET.HEADER_KEY_VALUE AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN fintradegrp t ON AUD.FINTRADEGRP_CODE = T.CODE
INNER JOIN finsl sl1 ON AUD.PCODE = SL1.SLCODE
INNER JOIN admsite s1 ON AUD.ADMSITE_CODE = S1.CODE
INNER JOIN admou ou ON AUD.ADMOU_CODE = OU.CODE
INNER JOIN hrdemp h1 ON AUD.ECODE = H1.ECODE
INNER JOIN fingl gl2 ON AUD.PGLCODE = GL2.GLCODE
INNER JOIN fingl gl1 ON AUD.GLCODE = GL1.GLCODE
LEFT OUTER JOIN purrtmain rt ON (AUD.RTCODE = RT.RTCODE)
LEFT OUTER JOIN finsl sl2 ON (AUD.AGCODE = SL2.SLCODE)
LEFT OUTER JOIN hrdemp h2 ON (AUD.LAST_ACCESS_ECODE = H2.ECODE)
LEFT OUTER JOIN invlgtnote l ON (AUD.LGTCODE = L.LGTCODE)
LEFT OUTER JOIN finsl sl3 ON (AUD.SLCODE = SL3.SLCODE)
LEFT OUTER JOIN admdocscheme doc ON (AUD.DOCCODE = DOC.DOCCODE)
LEFT OUTER JOIN admcurrency cur ON (AUD.ADMCURRENCY_CODE = CUR.CODE)
LEFT OUTER JOIN finform f ON (AUD.FORMCODE = F.FORMCODE)
LEFT OUTER JOIN hrdemp h3 ON (AUD.RELEASE_ECODE = H3.ECODE)
LEFT OUTER JOIN admsite s2 ON (AUD.REF_ADMSITE_CODE = S2.CODE)
LEFT OUTER JOIN purtermmain term ON (AUD.PURTERMCODE = TERM.CODE)
LEFT OUTER JOIN admgststate g1 ON (AUD.OWNER_GSTIN_STATE_CODE = G1.CODE)
LEFT OUTER JOIN admgststate g2 ON (AUD.CP_GSTIN_STATE_CODE = G2.CODE)', 'RTCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'RTCODE');
INSERT INTO main.aud2_table VALUES ('Item', 'INVITEM', 'Item', 1, 'ItemMaster', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_invitem 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.ICODE              ICODE,
          AUD.ICODE              MODULE_KEY,
          AUD.ICODE              MODULE_KEY_DISPLAY,
          AUD.GRPCODE            DEPARTMENT_CODE,
          G.GRPNAME              DEPARTMENT_NAME,
          AUD.CCODE1             CATEGORY1_CODE,
          AUD.CNAME1             CATEGORY1_NAME,
          AUD.CCODE2             CATEGORY2_CODE,
          AUD.CNAME2             CATEGORY2_NAME,
          AUD.CCODE3             CATEGORY3_CODE,
          AUD.CNAME3             CATEGORY3_NAME,
          AUD.CCODE4             CATEGORY4_CODE,
          AUD.CNAME4             CATEGORY4_NAME,
          AUD.CCODE5             CATEGORY5_CODE,
          AUD.CNAME5             CATEGORY5_NAME,
          AUD.CCODE6             CATEGORY6_CODE,
          AUD.CNAME6             CATEGORY6_NAME,
          AUD.MRP                RSP,
          AUD.BARUNIT            SCAN_UNIT,
          AUD.REM                REMARKS,
          AUD.EXT                EXTINCT,
          AUD.TAXCODE            TAX_GROUP_CODE,
          F.TAXNAME              TAX_GROUP_NAME,
          AUD.PARTYCODE          VENDOR_CODE,
          AUD.PARTYNAME          VENDOR_NAME,
          AUD.UNITNAME           UOM,
          AUD.BARCODE            BARCODE,
          AUD.LISTED_MRP         MRP,
          AUD.EXPIRY_DATE        EXPIRY_DATE,
          AUD.PARTYALIAS         VENDOR_ALIAS,
          AUD.SHRTNAME           SHORT_NAME,
          AUD.NONINVENTORY       NON_INVENTORY_ITEM,
          AUD.COSTRATE           STANDARD_RATE,
          AUD.WSP                WSP,
          AUD.INVARTICLE_CODE    ARTICLE_CODE,
          I.NAME                 ARTICLE_NAME,
          CASE AUD.ALLOW_PRICE_MODIFICATION
             WHEN ''Y'' THEN ''Yes''
             WHEN ''N'' THEN ''No''
          END
             POS_ALLOW_PRICE_CHANGE,
          CASE AUD.POS_MULTIPRICE_ACTION
             WHEN ''P'' THEN ''Popup Price List''
             WHEN ''L'' THEN ''Apply Last Price From List''
             WHEN ''N'' THEN ''Apply Price From Master''
          END
             POS_MULTIPRICE_ACTION,
          CASE AUD.NEGATIVE_STOCK_ALERT
             WHEN ''I'' THEN ''Ignore''
             WHEN ''W'' THEN ''Warning''
             WHEN ''S'' THEN ''Stop''
             WHEN ''P'' THEN ''Profile''
          END
             NEGATIVE_STOCK_ALERT,
          CASE
             WHEN AUD.ITEM_NAME IS NOT NULL
             THEN
                ITEM_NAME
             ELSE
                SUBSTR(
                      AUD.CNAME1
                   || '' ''
                   || AUD.CNAME2
                   || '' ''
                   || AUD.CNAME3
                   || '' ''
                   || AUD.CNAME4
                   || '' ''
                   || AUD.CNAME5
                   || '' ''
                   || AUD.CNAME6,
                   1,
                   500)
          END
             ITEM_NAME,
          CASE AUD.MATERIAL_TYPE
             WHEN ''R'' THEN ''Raw Materials''
             WHEN ''S'' THEN ''Semi Finished Goods''
             WHEN ''F'' THEN ''Finished Goods''
          END
             MATERIAL_TYPE,
          AUD.DESC1              DESCRIPTION1,
          AUD.DESC2              DESCRIPTION2,
          AUD.DESC3              DESCRIPTION3,
          AUD.DESC4              DESCRIPTION4,
          AUD.DESC5              DESCRIPTION5,
          AUD.DESC6              DESCRIPTION6,
          AUD.NUM1               NUMBER1,
          AUD.NUM2               NUMBER2,
          AUD.NUM3               NUMBER3,
          CASE AUD.ISPRICE_EXCLUDES_TAX
             WHEN 1 THEN ''Yes''
             WHEN 0 THEN ''No''
          END
             POS_CHARGE_EXTRA_TAX,
          CASE AUD.AUTOQTYPOPUP WHEN ''Y'' THEN ''Yes'' WHEN ''N'' THEN ''No'' END
             POS_EDIT_QTY_PRICE,
          CASE AUD.POS_RETURN_BEHAVIOR
             WHEN ''R'' THEN ''Only against bill''
             WHEN ''P'' THEN ''Based on user policy''
             WHEN ''A'' THEN ''Always''
             WHEN ''N'' THEN ''Do not allow''
          END
             POS_RETURN_BEHAVIOUR,
          AUD.PRICE_CHANGE_LIMIT POS_PRICE_CHANGE_LIMIT,
          AUD.UDFSTRING01        UDFSTRING01,
          AUD.UDFSTRING02        UDFSTRING02,
          AUD.UDFSTRING03        UDFSTRING03,
          AUD.UDFSTRING04        UDFSTRING04,
          AUD.UDFSTRING05        UDFSTRING05,
          AUD.UDFSTRING06        UDFSTRING06,
          AUD.UDFSTRING07        UDFSTRING07,
          AUD.UDFSTRING08        UDFSTRING08,
          AUD.UDFSTRING09        UDFSTRING09,
          AUD.UDFSTRING10        UDFSTRING10,
          AUD.UDFNUM01           UDFNUM01,
          AUD.UDFNUM02           UDFNUM02,
          AUD.UDFNUM03           UDFNUM03,
          AUD.UDFNUM04           UDFNUM04,
          AUD.UDFNUM05           UDFNUM05,
          AUD.UDFDATE01          UDFDATE01,
          AUD.UDFDATE02          UDFDATE02,
          AUD.UDFDATE03          UDFDATE03,
          AUD.UDFDATE04          UDFDATE04,
          AUD.UDFDATE05          UDFDATE05,
          AUD.INVHSNSACMAIN_CODE HSN_INTERNAL_CODE,
          H.HSN_SAC_CODE         HSN_CODE,
          CASE
             WHEN AUD.GST_ITC_APPL = ''IP'' THEN ''Input Applicable''
             WHEN AUD.GST_ITC_APPL = ''CP'' THEN ''Capital Goods''
             WHEN AUD.GST_ITC_APPL = ''NO'' THEN ''Not Applicable''
          END
             ITC_ELIGIBILITY,
          AUD.GLCODE             LEDGER_CODE,
          GL.GLNAME              LEDGER_NAME,
          AUD.SLCODE             SUBLEDGER_CODE,
          S.SLNAME               SUBLEDGER_NAME,
          CASE
             WHEN AUD.ITEM_MANAGEMENT_MODE = ''I'' THEN ''Item''
             WHEN AUD.ITEM_MANAGEMENT_MODE = ''B'' THEN ''Batch''
             WHEN AUD.ITEM_MANAGEMENT_MODE = ''S'' THEN ''Serial''
          END
             ITEM_MANAGEMENT_MODE,
          CASE
             WHEN AUD.PRICE_MANAGEMENT = ''I'' THEN ''Item''
             WHEN AUD.PRICE_MANAGEMENT = ''B'' THEN ''Batch''
             WHEN AUD.PRICE_MANAGEMENT = ''S'' THEN ''Serial''
          END
             PRICE_MANAGEMENT,
          CASE
             WHEN AUD.MANAGE_EXPIRY = ''Y'' THEN ''Yes''
             WHEN AUD.MANAGE_EXPIRY = ''N'' THEN ''No''
          END
             MANAGE_EXPIRY,
          CASE
             WHEN AUD.VALIDITY_MODE = ''D'' THEN ''Days''
             WHEN AUD.VALIDITY_MODE = ''M'' THEN ''Months''
             WHEN AUD.VALIDITY_MODE = ''Y'' THEN ''Years''
             WHEN AUD.VALIDITY_MODE = ''N'' THEN ''None''
          END
             VALIDITY_MODE,
          AUD.VALIDITY_PERIOD,
          CASE
             WHEN AUD.POS_BATCH_SELECTION_MODE = ''M''
             THEN
                ''Popup list of Batch/Serial''
          END
             POS_BATCH_SELECTION_MODE
FROM aud2_invitem aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Item'') trans_det 
			ON (AUD.ICODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN invgrp g ON AUD.GRPCODE = G.GRPCODE 
INNER JOIN invarticle i ON AUD.INVARTICLE_CODE = I.CODE 
INNER JOIN invhsnsacmain h ON AUD.INVHSNSACMAIN_CODE = H.CODE 
LEFT OUTER JOIN fintaxmain f ON (AUD.TAXCODE = F.TAXCODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN finsl s ON (AUD.SLCODE = S.SLCODE)', 'ICODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'ICODE');
INSERT INTO main.aud2_table VALUES ('Purchase Invoice', 'PURINVMAIN', 'Header', 1, 'PurchaseInvoiceHeader', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_purinvmain 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          AUD.ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.INVCODE                  INVOICE_TRANSFER_CODE,
          AUD.INVCODE                  MODULE_KEY,
          AUD.INVDT                    INVOICE_TRANSFER_DATE,
          AUD.PCODE                    VENDOR_CODE,
          SLV.SLNAME                   VENDOR_NAME,
          AUD.DOCNO                    DOCUMENT_NUMBER,
          AUD.DOCDT                    DOCUMENT_DATE,
          AUD.DUEDT                    DUE_DATE,
          AUD.AGCODE                   AGENT_CODE,
          SLA.SLNAME                   AGENT_NAME,
          AUD.AGRATE                   AGENT_RATE,
          AUD.GRSAMT                   BASIC_VALUE,
          AUD.CHGAMT                   CHARGE_AMOUNT,
          AUD.NETAMT                   NET_AMOUNT,
          AUD.GLCODE                   LEDGER_CODE,
          GL.GLNAME                    LEDGER_NAME,
          AUD.REM                      REMARKS,
          AUD.ECODE                    CREATEDBY_USERCODE,
          E1.FNAME                     CREATEDBY_USER,
          AUD.LAST_ACCESS_ECODE        LASTMODIFIEDBY_USERCODE,
          E2.FNAME                     LASTMODIFIEDBY_USER,
          AUD.SLCODE                   SUBLEDGER_CODE,
          SL.SLNAME                    SUBLEDGER_NAME,
          AUD.SCHEME_DOCNO             DOCSCHEME_NO,
          PI.SCHEME_DOCNO              MODULE_KEY_DISPLAY,
          AUD.DOCCODE                  DOCSCHEME_CODE,
          DOC.DOCNAME                  DOCSCHEME_NAME,
          CASE
             WHEN AUD.WHETHER_CONSIGNMENT = ''Y'' THEN ''Yes''
             WHEN AUD.WHETHER_CONSIGNMENT = ''N'' THEN ''No''
          END
             IS_CONSIGNMENT,
          AUD.ADMOU_CODE               OU_CODE,
          OU.NAME                      OU_NAME,
          AUD.PGLCODE                  DEBTOR_LEDGER_CODE,
          DGL.GLNAME                   DEBTOR_LEDGER_NAME,
          AUD.FINTRADEGRP_CODE         TRADEGROUP_CODE,
          TG.NAME                      TRADEGROUP_NAME,
          AUD.ADMCURRENCY_CODE         CURRENCY_CODE,
          CUR.NAME                     CURRENCY_NAME,
          AUD.EXRATE                   EXCHANGE_RATE,
          AUD.ADMSITE_CODE             OWNER_SITE_CODE,
          S1.NAME                      TRANSACTION_SITE_NAME,
          AUD.FORMCODE                 FORM_CODE,
          FF.FORMNAME                  FORM_NAME,
          AUD.FORMNO                   FORM_NO,
          AUD.FORMDT                   FORM_DATE,
          CASE
             WHEN AUD.RELEASE_STATUS = ''U'' THEN ''Unposted''
             WHEN AUD.RELEASE_STATUS = ''P'' THEN ''Posted''
          END
             RELEASE_STATUS,
          AUD.RELEASE_ECODE            RELEASED_USERCODE,
          E3.FNAME                     RELEASED_USER,
          AUD.REF_ADMSITE_CODE         REFERENCE_SITE_CODE,
          S2.NAME                      REFERENCE_SITE_NAME,
          AUD.CASH_DISCOUNT_APPLICABLE CONSIDER_IN_CASHDISCOUNT,
          AUD.CASH_DISCOUNT_PERCENTAGE PUR_CD_PERCENTAGE,
          AUD.PURTERMCODE              TERM_CODE,
          TERM.NAME                    TERM_NAME,
          AUD.FORMAMT                  FORM_AMOUNT,
          AUD.OWNER_GSTIN_NO           TRANSACTION_GSTIN,
          AUD.OWNER_GSTIN_STATE_CODE   TRANSACTION_GST_STATECODE,
          GS1.NAME                     TRANSACTION_GST_STATENAME,
          AUD.CP_GSTIN_NO              CP_GSTIN,
          AUD.CP_GSTIN_STATE_CODE      CP_GST_STATECODE,
          GS2.NAME                     CP_GST_STATENAME,
          AUD.GSTAPPL                  GST_APPLICABILITY,
          AUD.UDFSTRING01              UDFSTRING01,
          AUD.UDFSTRING02              UDFSTRING02,
          AUD.UDFSTRING03              UDFSTRING03,
          AUD.UDFSTRING04              UDFSTRING04,
          AUD.UDFSTRING05              UDFSTRING05,
          AUD.UDFSTRING06              UDFSTRING06,
          AUD.UDFSTRING07              UDFSTRING07,
          AUD.UDFSTRING08              UDFSTRING08,
          AUD.UDFSTRING09              UDFSTRING09,
          AUD.UDFSTRING10              UDFSTRING10,
          AUD.UDFNUM01                 UDFNUM01,
          AUD.UDFNUM02                 UDFNUM02,
          AUD.UDFNUM03                 UDFNUM03,
          AUD.UDFNUM04                 UDFNUM04,
          AUD.UDFNUM05                 UDFNUM05,
          AUD.UDFDATE01                UDFDATE01,
          AUD.UDFDATE02                UDFDATE02,
          AUD.UDFDATE03                UDFDATE03,
          AUD.UDFDATE04                UDFDATE04,
          AUD.UDFDATE05                UDFDATE05,
          AUD.TDS_APP                  TDS_APPL,
          AUD.TDSSRCCODE               TDS_SOURCE_CODE,
          TS.TDSSRCNAME                TDS_SOURCE_NAME,
          AUD.TDSTYPECODE              TDS_TYPE_CODE,
          TT.TDSNAME                   TDSNAME,
          AUD.TDSSECTION               TDS_SECTION,
          AUD.TDSGLCODE                TDS_GL_CODE,
          TDS_GL.GLNAME                TDS_LEDGER_NAME,
          AUD.TDSSLCODE                TDS_SL_CODE,
          TDS_SL.SLNAME                TDS_AGENCY_NAME,
          AUD.CERTIFICATENO            TDS_CERTIFICATE_NO,
          AUD.TDS_APPAMT               TDS_APPLICABLE_AMT,
          AUD.TDSRATE                  TDS_RATE,
          AUD.TDS_GROSSAMT             TDS_GROSS_AMT,
          AUD.TDS_ROUNDOFF_AMT         TDS_ROUNDOFF_AMT,
          AUD.TDSAMT                   TDS_NET_AMT
FROM aud2_purinvmain aud 
		INNER JOIN (SELECT A.*,
                  RANK()
                  OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE
                        ORDER BY TRANSACTION_DATE)
                     VERSION_SEQ
             FROM AUD2_TRANSACTION A
            WHERE MODULE_SHORTCODE = ''Purchase Invoice'') trans_det
			ON (AUD.INVCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
			AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN hrdemp e1 ON AUD.ECODE = E1.ECODE
INNER JOIN admdocscheme doc ON AUD.DOCCODE = DOC.DOCCODE
INNER JOIN admou ou ON AUD.ADMOU_CODE = OU.CODE 			
INNER JOIN admsite s1 ON AUD.ADMSITE_CODE = S1.CODE
LEFT OUTER JOIN purinvmain pi ON (AUD.INVCODE = PI.INVCODE)
LEFT OUTER JOIN finsl slv ON (AUD.PCODE = SLV.SLCODE)
LEFT OUTER JOIN finsl sla ON (AUD.AGCODE = SLA.SLCODE)
LEFT OUTER JOIN fingl gl ON (AUD.GLCODE = GL.GLCODE)
LEFT OUTER JOIN hrdemp e2 ON (AUD.LAST_ACCESS_ECODE = E2.ECODE)
LEFT OUTER JOIN invlgtnote lgt ON (AUD.LGTCODE = LGT.LGTCODE)
LEFT OUTER JOIN finsl sl ON (AUD.SLCODE = SL.SLCODE)
LEFT OUTER JOIN fingl dgl ON (AUD.PGLCODE = DGL.GLCODE)
LEFT OUTER JOIN fintradegrp tg ON (AUD.FINTRADEGRP_CODE = TG.CODE)
LEFT OUTER JOIN admcurrency cur ON (AUD.ADMCURRENCY_CODE = CUR.CODE)
LEFT OUTER JOIN finform ff ON (AUD.FORMCODE = FF.FORMCODE)
LEFT OUTER JOIN hrdemp e3 ON (AUD.RELEASE_ECODE = E3.ECODE)
LEFT OUTER JOIN admsite s2 ON (AUD.REF_ADMSITE_CODE = S2.CODE)
LEFT OUTER JOIN purtermmain term ON (AUD.PURTERMCODE = TERM.CODE)
LEFT OUTER JOIN admgststate gs1 ON (AUD.OWNER_GSTIN_STATE_CODE = GS1.CODE)
LEFT OUTER JOIN admgststate gs2 ON (AUD.CP_GSTIN_STATE_CODE = GS2.CODE)
LEFT OUTER JOIN fintdssrc ts ON (AUD.TDSSRCCODE = TS.TDSSRCCODE)
LEFT OUTER JOIN fintdstype tt ON (AUD.TDSTYPECODE = TT.TDSTYPECODE)
LEFT OUTER JOIN fingl tds_gl ON (AUD.TDSGLCODE = TDS_GL.GLCODE)
LEFT OUTER JOIN finsl tds_sl ON (AUD.TDSSLCODE = TDS_SL.SLCODE)', 'INVCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'INVCODE');
INSERT INTO main.aud2_table VALUES ('SubLedger', 'FINSL', 'Sub-Ledger', 1, 'SubLedger', NULL, NULL, 'CREATE OR REPLACE VIEW v_aud2_finsl 
AS 
SELECT TRANS_DET.VERSION_SEQ,
          ACTION,
          TRANS_DET.LOGIN_USER,
          TRANS_DET.TRANSACTION_DATE,
          AUD.TRANSACTION_ID,
          AUD.SLCODE,
          AUD.SLCODE                    MODULE_KEY,
          AUD.SLNAME                    SUBLEDGER_NAME,
          AUD.SLNAME                    MODULE_KEY_DISPLAY,
          AUD.ABBRE                     SUBLEDGER_ALIAS,
          AUD.BADDR                     BILLING_ADDRESS,
          AUD.BDIST                     BILLING_DISTRICT,
          AUD.BCTNAME                   BILLING_CITY,
          AUD.BPIN                      BILLING_PINCODE,
          AUD.BPH1                      BILLING_PHONE1,
          AUD.BPH2                      BILLING_PHONE2,
          AUD.BPH3                      BILLING_PHONE3,
          AUD.BPH4                      BILLING_RESIDENCENO,
          AUD.BFX1                      BILLING_FAXNO,
          AUD.BFX2                      BILLING_CONTACT_MOBILENO,
          AUD.BEMAIL                    BILLING_EMAIL,
          AUD.BWEBSITE                  BILLING_WEBSITE,
          AUD.BCP                       BILLING_CONTACT_PERSON,
          AUD.LSTNO                     FIN_VAT_REG_NUMBER,
          AUD.CSTNO                     FIN_CST_REG_NUMBER,
          AUD.CLSCODE                   CLASS_CODE,
          A.CLSNAME                     CLASS_NAME,
          A.CLSTYPE                     CLASS_TYPE,
          AUD.GLCODE                    ARAP_GL_CODE,
          FG1.GLNAME                    AR_GL_NAME,
          AUD.TRPCODE                   TRANSPORTER_CODE,
          FS1.SLNAME                    TRANSPORTER_NAME,
          AUD.AGCODE                    SALES_AGENT_CODE,
          FS2.SLNAME                    AGENT_NAME,
          AUD.AGRATE                    SALES_AGENT_COMMSN_RATE,
          AUD.INTRATE                   SALES_INT_DELAY_PAYMENT,
          AUD.CRDAYS                    SALES_CREDIT_DAYS_ALLOWED,
          AUD.PAN                       FIN_PAN_NUMBER,
          AUD.REM                       REMARKS,
          AUD.EXT                       EXTINCT,
          AUD.DEFAULT_MARKUP            PUR_RSP_MARKUP_FACTOR,
          AUD.ROUND_OFF_MARKUP          PUR_RSP_MARKUP_ROFFIN,
          AUD.LIMIT                     PUR_RSP_MARKUP_RO_BASIS,
          AUD.TDSSRCCODE                FIN_TDS_SOURCE_CODE,
          TD.TDSSRCNAME                 FIN_TDS_SOURCE_NAME,
          AUD.CHQLABEL                  FIN_CHEQUE_LABEL,
          AUD.WHETHER_CONSIGNMENT       PUR_ALLOW_CONSIGNMENT,
          AUD.PRICELISTCODE             SAL_PRICE_LIST_CODE,
          SP.PRICELISTNAME              SAL_PRICE_LIST_NAME,
          CASE 
			WHEN AUD.PRICETYPE=''L'' THEN  ''MRP'' 
			WHEN AUD.PRICETYPE=''M'' THEN  ''RSP'' 
			WHEN AUD.PRICETYPE=''W'' THEN  ''WSP'' 
			WHEN AUD.PRICETYPE=''B'' THEN  ''Basic Rate'' 
			WHEN AUD.PRICETYPE=''R'' THEN  ''Standard Rate'' 
			WHEN AUD.PRICETYPE=''C'' THEN  ''Effective Rate'' 
		  END 							PUR_RATE_PRICE_TYPE,
          AUD.SALTERMCODE               SAL_SALES_TERM_CODE,
          T.SALTERMNAME                 SAL_SALES_TERM_NAME,
          AUD.CRCODE                    SAL_CREDIT_RATING_CODE,
          CR.CRNAME                     SAL_CREDIT_RATING_NAME,
          AUD.CRAMT                     SAL_CREDIT_LIMIT_AMT,
          AUD.LGT_APPL                  IN_LGT_APPL,
          AUD.DEFAULT_MARKUP_WSP        PUR_WSP_MARKUP_FACTOR,
          AUD.ROUND_OFF_MARKUP_WSP      PUR_WSP_MARKUP_ROFFIN,
          AUD.LIMIT_WSP                 PUR_WSP_MARKUP_RO_BASIS,
          AUD.SADDR                     SHIPPING_ADDRESS,
          AUD.SDIST                     SHIPPING_DISTRICT,
          AUD.SCTNAME                   SHIPPING_CITY,
          AUD.SPIN                      SHIPPING_PIN,
          AUD.SPH1                      SHIPPING_PHONE1,
          AUD.SPH2                      SHIPPING_PHONE2,
          AUD.SPH3                      SHIPPING_PHONE3,
          AUD.SPH4                      SHIPPING_RESIDENCENO,
          AUD.SFX1                      SHIPPING_FAXNO,
          AUD.SFX2                      SHIPPING_CONTACT_MOBILENO,
          AUD.SEMAIL                    SHIPPING_EMAIL,
          AUD.SWEBSITE                  SHIPPING_WEBSITE,
          AUD.SCP                       SHIPPING_CONTACT_PERSON,
          CASE 
			WHEN AUD.DUE_DATE_BASIS=''E'' THEN  ''Entry Date'' 
			WHEN AUD.DUE_DATE_BASIS=''D'' THEN  ''Document Date'' 
		  END 							PUR_DUE_DATE_BASIS,
          AUD.CASH_DISCOUNT_APPLICABLE  PUR_CD_APPLICABLE,
          AUD.CASH_DISCOUNT_PERCENTAGE  PUR_CD_PERCENTAGE,
          AUD.CASH_DISCOUNT_PERIOD      PUR_CD_PERIOD_DAYS,
          AUD.SLOWNER                   DIRECTOR_OWNER_NAME,
          AUD.BRAND                     BRAND_NAME,
          AUD.PRODUCT                   PRODUCT_TYPE,
          AUD.COMPANYTYPE               COMPANY_TYPE,
          AUD.INDUSTRYTYPE              INDUSTRY_TYPE,
          AUD.CSTDATE                   FIN_CST_REG_DATE,
          AUD.LSTDATE                   FIN_LST_REG_DATE,
          AUD.EXCISENO                  FIN_EXCISE_REG_NUMBER,
          AUD.EXCISE_DATE               FIN_EXCISE_REG_DATE,
          AUD.SERVICETAXNO              FIN_SERVICETAX_REG_NUMBER,
          AUD.SERVICETAXDATE            FIN_SERVICETAX_REG_DATE,
          AUD.SERVICETAXCATEGOR         FIN_SERVICETAX_CATEGORY,
          AUD.SSINO                     FIN_SSI_NUMBER,
          AUD.MICRONO                   FIN_MICRO_SMALL_ESTD_NO,
          AUD.BANKNAME                  FIN_BANK_NAME,
          AUD.BANKACCOUNTNO             FIN_BANK_ACCOUNT_NUMBER,
          AUD.BANKMICRCODE              FIN_MICR_CODE,
          AUD.BANKIFCCODE               FIN_IFSC_CODE,
          AUD.BANKRTGSCODE              FIN_RTGS_CODE,
          AUD.BEMAIL2                   BILLING_ALTERNATE_EMAIL,
          AUD.SEMAIL2                   SHIPPING_ALTERNATE_EMAIL,
          AUD.SLID                      SUBLEDGER_ID,
          AUD.PERMIT_APPL               IN_PERMIT_APPL,
          AUD.PURCHASE_GLCODE           PUR_PURCHASE_GL_CODE,
          FG2.GLNAME                    PUR_PURCHASE_GL_NAME,
          AUD.PURCHASE_SLCODE           PUR_PURCHASE_SL_CODE,
          FS3.SLNAME                    PUR_PURCHASE_SL_NAME,
          AUD.PURCHASE_RETURN_GLCODE    PUR_RETURN_GL_CODE,
          FG3.GLNAME                    PUR_RETURN_GL_NAME,
          AUD.PURCHASE_RETURN_SLCODE    PUR_RETURN_SL_CODE,
          FS4.SLNAME                    PUR_RETURN_SL_NAME,
          AUD.MARKUP_SELLING_PRICE      PUR_RATE_MARKDOWN_FACTOR,
          AUD.MARKUP_SELLING_ROUND_OFF  PUR_RATE_ROFFIN,
          AUD.MARKUP_SELLING_LIMIT      PUR_RATE_ROFF_LIMIT,
          CASE 
			WHEN AUD.SALETYPE=''O'' THEN  ''Outright'' 
			WHEN AUD.SALETYPE=''C'' THEN  ''Consignment'' 
		  END							MODE_OF_OPERATION,
          AUD.CONSIGNMENT_GLCODE        SAL_TRFIN_GL_CODE,
          FG4.GLNAME                    SAL_TRFIN_GL_NAME,
          AUD.SALES_GLCODE              SAL_SALES_GL_CODE,
          FG5.GLNAME                    SAL_SALES_GL_NAME,
          AUD.SALES_SLCODE              SAL_SALES_SL_CODE,
          FS5.SLNAME                    SAL_SALES_SL_NAME,
          AUD.SALES_RETURN_GLCODE       SAL_RETURN_GL_CODE,
          FG6.GLNAME                    SAL_RETURN_GL_NAME,
          AUD.SALES_RETURN_SLCODE       SAL_RETURN_SL_CODE,
          FS6.SLNAME                    SAL_RETURN_SL_NAME,
          AUD.CONSIGNMENT_SALES_GLCODE  SAL_CONSALE_GL_CODE,
          FG7.GLNAME                    SAL_CONSALE_GL_NAME,
          AUD.CONSIGNMENT_SALES_SLCODE  SAL_CONSALE_SL_CODE,
          FS7.SLNAME                    SAL_CONSALE_SL_NAME,
          AUD.CONSIGNMENT_TRNSFR_GLCODE SAL_TRFOUT_GL_CODE,
          FG8.GLNAME                    SAL_TRFOUT_GL_NAME,
          AUD.CONSIGNMENT_TRNSFR_SLCODE SAL_TRFOUT_SL_CODE,
          FS8.SLNAME                    SAL_TRFOUT_SL_NAME,
          AUD.OUT_LGT_APPL              OUT_LGT_APPL,
          AUD.OUT_PERMIT_APPL           OUT_PERMIT_APPL,
          AUD.GATEIN_APPL               GATEIN_APP,
          AUD.FINTRADEGRP_CODE          PUR_TRADE_GROUP_CODE,
          TG1.NAME                      PUR_TRADE_GROUP_NAME,
          AUD.PURTERMMAIN_CODE          PUR_TERM_CODE,
          P.NAME                        PUR_TERM_NAME,
          AUD.ADMCURRENCY_CODE          PUR_CURRENCY_CODE,
          C.NAME                        PUR_CURRENCY_NAME,
          AUD.SALE_POST_METHOD          SALE_POST_METHOD,
          AUD.VATEXP_GLCODE             SAL_VATEXP_GL_CODE,
          FG9.GLNAME                    SAL_VATEXP_GL_NAME,
          AUD.VATEXP_SLCODE             SAL_VATEXP_SL_CODE,
          FS9.SLNAME                    SAL_VATEXP_SL_NAME,
          AUD.CONSIGNMENT_SLCODE        SAL_TRFIN_SL_CODE,
          FS10.SLNAME                   SAL_TRFIN_SL_NAME,
          AUD.TRANSIT_GLCODE            SAL_TRANSIT_GL_CODE,
          FG10.GLNAME                   SAL_TRANSIT_GL_NAME,
          FS11.SLNAME                   SAL_TRANSIT_SL_NAME,
          AUD.TRANSIT_SLCODE            SAL_TRANSIT_SL_CODE,
          AUD.TRANSITDIFF_GLCODE        SAL_TRANSITDIFF_GL_CODE,
          FG11.GLNAME                   SAL_TRANSITDIFF_GL_NAME,
          AUD.TRANSITDIFF_SLCODE        SAL_TRANSITDIFF_SL_CODE,
          FS12.SLNAME                   SAL_TRANSITDIFF_SL_NAME,
          AUD.TDS_APP                   FIN_TDS_APPL,
          AUD.ALLOW_JOBBER_STOCKPOINT   PRD_JOBBER_STOCKPOINT_APP,
          AUD.PRD_MAX_DAYS              PRD_MAX_OVERDUE_DAYS,
          CASE 
			WHEN AUD.PRD_OVERDUE_ACTION=''O'' THEN  ''Restrict Order'' 
			WHEN AUD.PRD_OVERDUE_ACTION=''N'' THEN  ''No Restriction'' 
		  END 							PRD_MAX_OVERDUE_ACTION,
          AUD.ADMCMPTAX_CODE            PUR_TAX_REGION_CODE,
          CMP.NAME                      PUR_TAX_REGION_NAME,
          AUD.PURFORMCODE               PUR_FORM_CODE,
          F1.FORMNAME                   PUR_FORM_NAME,
          AUD.SALTRADEGRP_CODE          SAL_TRADE_GROUP_CODE,
          TG2.NAME                      SAL_TRADE_GROUP_NAME,
          AUD.SALFORMCODE               SAL_SALES_FORM_CODE,
          F2.FORMNAME                   SAL_SALES_FORM_NAME,
          AUD.PUR_PRICE_CHART_APPL      PUR_PRICECHART_APPL,
          AUD.PUR_DELIVERY_BUFFER_DAYS  PUR_ORD_BUFFER_DAYS,
          AUD.SHIPMENT_TRACKING_APPL    IN_LGT_SHIPTRACK_APPL,
          AUD.BALE_WISE_LRQTY           IN_LGT_BALETRACK_APPL,
          AUD.PUR_DUEDAYS               PUR_ORD_DELIVERY_DUEDAYS,
          AUD.CINNO                     FIN_CIN_NUMBER,
          AUD.CVRULE                    SAL_CREDITVERIFY_RULE,
          AUD.CRTOLERANCE               SAL_CREDIT_LIMIT_TOL,
          AUD.CROVERDUEDAYS             SAL_OVERDUE_DAYS,
          AUD.CROVERDUEAMT              SAL_OVERDUE_AMOUNT,
          AUD.CP_CATEGORY_CODE          FIN_GST_CATEGORY_CODE,
          G.NAME                        FIN_GST_CATEGORY_NAME,
          AUD.CP_GSTIN_NO               FIN_GST_REG_NUMBER,
          AUD.CP_GSTIN_DATE             FIN_GST_REG_DATE,
          AUD.CP_GSTIN_STATE_CODE       FIN_GST_STATE_CODE,
          S.NAME                        FIN_GST_STATE_NAME,
          AUD.PO_ORDER_LIMIT            PUR_ORD_LIMIT,
          AUD.ECOMCHNLCODE              MARKETPLACE_CHANNELCODE,
          AUD.APPL_INV_NUM_FOR_GST      APPL_INV_NUM_FOR_GST,
          AUD.IS_MARKETPLACE            IS_MARKETPLACE,
          AUD.RECALCULATE_TAX           RECALCULATE_TAX
     FROM aud2_finsl aud INNER JOIN (SELECT A.*,
									 RANK() OVER (PARTITION BY MODULE_SHORTCODE, HEADER_KEY_VALUE ORDER BY TRANSACTION_DATE) VERSION_SEQ
									 FROM AUD2_TRANSACTION A
									 WHERE MODULE_SHORTCODE = ''SubLedger'') trans_det
						 ON (AUD.SLCODE::varchar = TRANS_DET.HEADER_KEY_VALUE 
						     AND AUD.TRANSACTION_ID = TRANS_DET.TRANSACTION_ID)
INNER JOIN admgstcategory g ON AUD.CP_CATEGORY_CODE = G.CODE
INNER JOIN admcls a ON AUD.CLSCODE = A.CLSCODE 
LEFT OUTER JOIN fintdssrc td ON (AUD.TDSSRCCODE = TD.TDSSRCCODE)
LEFT OUTER JOIN salpricelistmain sp ON (AUD.PRICELISTCODE = SP.PRICELISTCODE)
LEFT OUTER JOIN saltermmain t ON (AUD.SALTERMCODE = T.SALTERMCODE)
LEFT OUTER JOIN salcreditrating cr ON (AUD.CRCODE = CR.CRCODE)
LEFT OUTER JOIN fintradegrp tg1 ON (AUD.FINTRADEGRP_CODE = TG1.CODE)
LEFT OUTER JOIN purtermmain p ON (AUD.PURTERMMAIN_CODE = P.CODE)
LEFT OUTER JOIN admcurrency c ON (AUD.ADMCURRENCY_CODE = C.CODE)
LEFT OUTER JOIN admcmptax cmp ON (AUD.ADMCMPTAX_CODE = CMP.CODE)
LEFT OUTER JOIN finform f1 ON (AUD.PURFORMCODE = F1.FORMCODE)
LEFT OUTER JOIN fintradegrp tg2 ON (AUD.SALTRADEGRP_CODE = TG2.CODE)
LEFT OUTER JOIN finform f2 ON (AUD.SALFORMCODE = F2.FORMCODE)
LEFT OUTER JOIN admgststate s ON (AUD.CP_GSTIN_STATE_CODE = S.CODE)
LEFT OUTER JOIN fingl fg1 ON (AUD.GLCODE = FG1.GLCODE)
LEFT OUTER JOIN fingl fg2 ON (AUD.PURCHASE_GLCODE = FG2.GLCODE)
LEFT OUTER JOIN fingl fg3 ON (AUD.PURCHASE_RETURN_GLCODE = FG3.GLCODE)
LEFT OUTER JOIN fingl fg4 ON (AUD.CONSIGNMENT_GLCODE = FG4.GLCODE)
LEFT OUTER JOIN fingl fg5 ON (AUD.SALES_GLCODE = FG5.GLCODE)
LEFT OUTER JOIN fingl fg6 ON (AUD.SALES_RETURN_GLCODE = FG6.GLCODE)
LEFT OUTER JOIN fingl fg7 ON (AUD.CONSIGNMENT_SALES_GLCODE = FG7.GLCODE)
LEFT OUTER JOIN fingl fg8 ON (AUD.CONSIGNMENT_TRNSFR_GLCODE = FG8.GLCODE)
LEFT OUTER JOIN fingl fg9 ON (AUD.VATEXP_GLCODE = FG9.GLCODE)
LEFT OUTER JOIN fingl fg10 ON (AUD.TRANSIT_GLCODE = FG10.GLCODE)
LEFT OUTER JOIN fingl fg11 ON (AUD.TRANSITDIFF_GLCODE = FG11.GLCODE)
LEFT OUTER JOIN finsl fs1 ON (AUD.TRPCODE = FS1.SLCODE)
LEFT OUTER JOIN finsl fs2 ON (AUD.AGCODE = FS2.SLCODE)
LEFT OUTER JOIN finsl fs3 ON (AUD.PURCHASE_SLCODE = FS3.SLCODE)
LEFT OUTER JOIN finsl fs4 ON (AUD.PURCHASE_RETURN_SLCODE = FS4.SLCODE)
LEFT OUTER JOIN finsl fs5 ON (AUD.SALES_SLCODE = FS5.SLCODE)
LEFT OUTER JOIN finsl fs6 ON (AUD.SALES_RETURN_SLCODE = FS6.SLCODE)
LEFT OUTER JOIN finsl fs7 ON (AUD.CONSIGNMENT_SALES_SLCODE = FS7.SLCODE)
LEFT OUTER JOIN finsl fs8 ON (AUD.CONSIGNMENT_TRNSFR_SLCODE = FS8.SLCODE)
LEFT OUTER JOIN finsl fs9 ON (AUD.VATEXP_SLCODE = FS9.SLCODE)
LEFT OUTER JOIN finsl fs10 ON (AUD.CONSIGNMENT_SLCODE = FS10.SLCODE)
LEFT OUTER JOIN finsl fs11 ON (AUD.TRANSIT_SLCODE = FS11.SLCODE)
LEFT OUTER JOIN finsl fs12 ON (AUD.TRANSITDIFF_SLCODE = FS12.SLCODE)', 'SLCODE', 'AuditTriggerTemplateAllColumnsNew', 1, 'SLCODE');

UPDATE AUD2_TABLE SET UNIQUE_INDEX_COLUMNS = 'CODE', TRIGGER_TEMPLATE = 'AuditTriggerTemplateAllColumnsNew' WHERE TABLE_NAME  = 'SALCSMOP';
UPDATE AUD2_TABLE SET UNIQUE_INDEX_COLUMNS = 'ADMSITE_CODE#GLCODE#YCODE#COALESCE(SLCODE,0)', TRIGGER_TEMPLATE = 'AuditTriggerTemplateAllColumnsDeleteInsertNew' WHERE TABLE_NAME = 'FINCOSTOP';
UPDATE AUD2_TABLE SET UNIQUE_INDEX_COLUMNS = 'GLCODE#YCODE#ADMOU_CODE', TRIGGER_TEMPLATE = 'AuditTriggerTemplateAllColumnsDeleteInsertNew' WHERE TABLE_NAME = 'FINGLOP';

--Aud2_Tab_Col
TRUNCATE TABLE aud2_tab_col;
INSERT INTO main.aud2_tab_col VALUES ('AccountsLedger', 'FINGL', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('AccountsLedger', 'FINGL', 'GLCODE');
INSERT INTO main.aud2_tab_col VALUES ('AccountsLedger', 'FINGL_SITE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('AccountsLedgerGroup', 'FINGRP', 'GRPCODE');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'ALTERNATE_MRP_APPLICABLE');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'DOC');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'DOM');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'INVATTR1_NAME');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'INVATTR2_NAME');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'INVATTR3_NAME');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'INVATTR4_NAME');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'INVATTR5_NAME');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'INVATTR6_NAME');
INSERT INTO main.aud2_tab_col VALUES ('Article', 'INVARTICLE', 'VENDORNAME');
INSERT INTO main.aud2_tab_col VALUES ('AuditEntry', 'INVSTKADJDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditEntry', 'INVSTKADJDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('AuditEntry', 'INVSTKADJDET', 'SITE_COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('AuditEntry', 'INVSTKADJDET', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditEntry', 'INVSTKADJMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('AuditEntry', 'INVSTKADJMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('AuditEntry', 'INVSTKADJMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('AuditEntry', 'INVSTKADJMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANDET', 'MRPFROM');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANDET', 'MRPTO');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANDET', 'STKPLANCODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'CCODE1');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'CCODE2');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'CCODE3');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'CCODE4');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'CCODE5');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'CCODE6');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'GRPCODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'INVARTICLE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'LEV1GRPCODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'LEV2GRPCODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANITEM', 'PARTYCODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANMAIN', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANMAIN', 'STKPLANCODE');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('AuditPlan', 'INVSTKPLANMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('BatchSerialMaster', 'INVBATCH_SERIAL', 'CREATEDON');
INSERT INTO main.aud2_tab_col VALUES ('BatchSerialMaster', 'INVBATCH_SERIAL', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('BatchSerialMaster', 'INVBATCH_SERIAL', 'ENTCODE');
INSERT INTO main.aud2_tab_col VALUES ('BatchSerialMaster', 'INVBATCH_SERIAL', 'ENTTYPE');
INSERT INTO main.aud2_tab_col VALUES ('BatchSerialMaster', 'INVBATCH_SERIAL', 'LASTMODIFIEDON');
INSERT INTO main.aud2_tab_col VALUES ('BatchSerialMaster', 'INVBATCH_SERIAL', 'LAST_IN_DATE');
INSERT INTO main.aud2_tab_col VALUES ('BatchSerialMaster', 'INVBATCH_SERIAL', 'PCODE');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMMAIN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMMAIN', 'IS_SELECTED');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMMAIN', 'REMARKS');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMOPERATION', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMOPERATION', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMVER', 'APPROV_TIME');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMVER', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMVER', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMVER', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('BillofMaterials', 'PRDBOMVER', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLMAIN', 'CNLCODE');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLMAIN', 'CNLNO');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('CancelOrder', 'SALORDCNLMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'CNLCODE');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'CNLNO');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'ENTRY_SOURCE_OLD');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('CancelPurchaseOrder', 'PURORDCNLMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCDET', 'COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCDET', 'DCCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCDET', 'INVDCMAIN_STATUS');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'AGAINST_RESERVE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'AGAINST_SO');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'CMPTAX_CODE_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'DCBARCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'DCCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'DCNO');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'DISCOUNT_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'DISCOUNT_FACTOR');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'DISCOUNT_MODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'INCL_VAT_IN_DIST');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'INLOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'INTGCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'LINKED_DCCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'LINKED_PSITE_PACKET_ID');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'ORDCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'PRICELISTCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'PRICETYPE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'PRICE_ROUNDOFF');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'ROUNDOFF_LIMIT');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'SALETYPE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'TEMP_DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'TRANSFERIN_ISRECEIVED');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'TRANSFERIN_RTCODE');
INSERT INTO main.aud2_tab_col VALUES ('DeliveryChallan', 'INVDCMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDET', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDET', 'VCHCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDET', 'VCHNO');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDET', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDN', 'FINJRNMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDN', 'FINOPDOC_CODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDN', 'FINVCHMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHDN', 'PURINVMAIN_INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'CREATION_DT');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'TEMP_DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'VCHCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'VCHNO');
INSERT INTO main.aud2_tab_col VALUES ('FinVoucher', 'FINVCHMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'COSTCODE');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'ENTDT');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'ENTNO');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'ENTTYPE');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'POSTCODE');
INSERT INTO main.aud2_tab_col VALUES ('Finance Site Allocation', 'FINCOSTTAG', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'ENTCODE1');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'ENTCODE2');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'ENTTYPE1');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'ENTTYPE2');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'SLCODE');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('FinanceDocumentAdjustment', 'FINTAG', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'DISCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'GRCNO');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'POICODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'PO_CODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'RCINVQTY');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'RTINVQTY');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'TAXCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCDET', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'AUTH_TIME');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'DISCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'GRCCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'GRCNO');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'INTGCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'ORDCMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'ORDER_TAGGED');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'RCINVQTY');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'RTINVQTY');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'TAXCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'TEMP_DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('GRC', 'INVGRCMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTCHG', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTCHG', 'WITHOUT_TERM_FORMULA');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'DISCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'GRTNO');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'RTINVQTY');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'TAXCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'XDISCOUNT');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'XGRSAMT');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'XNETAMT');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'XTAXAMT');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTDET', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'AUTH_TIME');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'DISCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'GENO');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'GRTCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'GRTNO');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'INTGCODE');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'TAXCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('GRT', 'INVGRTMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('GSTAdditionalCess', 'INVGSTADDCESSRATE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('GSTAdditionalCess', 'INVGSTADDCESSRATE', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('GSTAdditionalCess', 'INVGSTADDCESSRATE', 'SALTERMCODE');
INSERT INTO main.aud2_tab_col VALUES ('GSTAdditionalCess', 'INVGSTADDCESSRATE', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('GSTRate', 'INVGSTRATE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('GSTRate', 'INVGSTRATE', 'CREATEDON');
INSERT INTO main.aud2_tab_col VALUES ('GSTRate', 'INVGSTRATE', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('GSTRate', 'INVGSTRATE', 'LASTMODIFIEDON');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUEPAYMENT_JOURNAL', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'CREATEDON');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'INTGREFID');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'LASTMODIFIEDON');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'PSITE_POSSTLM_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'STATUS');
INSERT INTO main.aud2_tab_col VALUES ('Gift Voucher Issue', 'GVISSUE_JOURNAL', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACDET', 'INVHSNSACMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACMAIN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACMAIN', 'CREATEDON');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACMAIN', 'ISSYSTEM');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACMAIN', 'LASTMODIFIEDON');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACSLAB', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACSLAB', 'INVHSNSACDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('HSNSACMaster', 'INVHSNSACSLAB', 'INVHSNSACMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT1INFAMILY');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT1PROMPT');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT2INFAMILY');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT2PROMPT');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT3INFAMILY');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT3PROMPT');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT4INFAMILY');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT4PROMPT');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT5INFAMILY');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT5PROMPT');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT6INFAMILY');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'CAT6PROMPT');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'GRPCODE');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'GRPCOMM');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'IND');
INSERT INTO main.aud2_tab_col VALUES ('InventoryItemGroup', 'INVGRP', 'ROUTECODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'ALT_LISTED_MRP');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'ALT_MRP');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'BARRQ');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'BLOCK_SALE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'BLOCK_SALE_AFTER');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'BLOCK_SALE_BEFORE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'BLOCK_SALE_REASON');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'CERTIFICATE_NO');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'CHARGE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'COGS_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'CONSIDERASFREE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'CONSIDERINORDER');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'COSTSHEET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'C_COUNT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'C_DESC');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'C_VALUE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'C_WEIGHT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'D_COUNT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'D_DESC');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'D_SIZE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'D_VALUE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'D_WEIGHT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'GENERATED');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'GRCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'GRS_WEIGHT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'ICODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'INVMETAL_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'ISMETAL');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'ISSERVICE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'JOB_COST_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'JOB_COST_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'LAST_CHANGED');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'NET_WEIGHT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'OTHER_CHG');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'O_COUNT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'O_DESC');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'O_VALUE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'O_WEIGHT');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'PART_QTY');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'PRICE_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'PRICE_TERMS');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'RATE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'ROUTECODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'SEARCH_STRING');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'SERVICE_DAYS');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'STKPLANCODE');
INSERT INTO main.aud2_tab_col VALUES ('Item', 'INVITEM', 'STOCKINDATE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBBOM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBBOM', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBBOM', 'JOBCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBBOM', 'PRDJOBDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBDET', 'JOBCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'AUTH_TIME');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'ENTNO');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'PCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'PRCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'PRD_WIPTRACK_CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('JobOrder', 'PRDJOBMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrderCancel', 'PRDJOBCNLDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrderCancel', 'PRDJOBCNLDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('JobOrderCancel', 'PRDJOBCNLMAIN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrderCancel', 'PRDJOBCNLMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('JobOrderCancel', 'PRDJOBCNLMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobOrderCancel', 'PRDJOBCNLMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('JobOrderCancel', 'PRDJOBCNLMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('JobOrderCancel', 'PRDJOBCNLMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCBOM', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCMAIN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCMAIN', 'ENTNO');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCMAIN', 'PRD_WIPTRACK_CODE');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('JobReceipts', 'PRDJRCMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'CERTIFICATENO');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'FINVCHDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'JRNDT');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'JRNNO');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'JRNTYPE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'TDS_JOURNAL_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNDET', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'ADV_VOUCHER_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'GLCODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'IS_INTERPARTY');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'JRNDT');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'JRNNO');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'JRNTYPE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'REFNO');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'TEMP_DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Journal', 'FINJRNMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('LedgerOpeningBalance', 'FINCOSTOP', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('LedgerOpeningBalance', 'FINCOSTOP', 'COSTCODE');
INSERT INTO main.aud2_tab_col VALUES ('LedgerOpeningBalance', 'FINCOSTOP', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('LedgerOpeningBalance', 'FINGLOP', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('LedgerOpeningBalance', 'FINGLOP', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('MarginRule', 'INVMMRULE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('MarginRule', 'INVMMRULE_DATE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('MarginRule', 'INVMMRULE_DATE', 'INVMMRULE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('MarginRule', 'INVMMRULE_DET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('MarginRule', 'INVMMRULE_DET', 'INVMMRULE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('MarginRule', 'INVMMRULE_DET', 'INVMMRULE_DATE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('MarginRule', 'INVMMRULE_EXCEPTION', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCDET', 'MISCDETCODE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCDET', 'REQCODE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCDET', 'REQDETCODE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCDET', 'SITE_COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'AUTH_TIME');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'CREATION_TIME');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'DEPTCODE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'INTGCODE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'LAST_MODIFIED_TIME');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'MISCCODE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'MISCNO');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'REQCODE');
INSERT INTO main.aud2_tab_col VALUES ('MiscellaneousEntry', 'INVMISCMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'ADMCMPTAX_CODE');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'CREATED_ON');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'EXT_ON');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'INLOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'LASTMODIFIED_ON');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'LOGO_NAME');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'OUTLOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'PKGLOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('OrganizationUnit', 'ADMOU', 'RPH1');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'CLOSEDBY');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'CLOSEDON');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'CP_GSTIN_NO');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'CP_GSTIN_STATE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'CREATEDON');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'DISCOUNTBASIS');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'DISCOUNTFACTOR');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'DISCOUNTMODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'DOC');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'DOCDT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'DOCNO');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'EWAYBILLGENERATEDON');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'EWAYBILLNO');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'EWAYBILLVALIDUPTO');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'FINTRADEGRP_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'FORMAPPLICABLE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'GSTDOCNO');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'GSTDOCSEQ');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'INCLUDETAXINDISCOUNT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'INTGREFID');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'INTG_DOCSCHEME_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'ISINCLUDED');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'ISSECONDARY');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'LASTMODIFIEDON');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'MAIN_GL_AMT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'MULTIPLESOF');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'OWNER_GSTIN_NO');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'OWNER_GSTIN_STATE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'PRICETYPE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'PSITE_DOCSCHEME_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'PSITE_INTRANSIT_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'REPLN_ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'REPLN_ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'RETURN_PRICELIST_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'RETURN_RATE_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'ROUNDLIMIT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'SLCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'STORE_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'TAX_RATE_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'TERMINALID');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFDATE01');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFDATE02');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFDATE03');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFDATE04');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFDATE05');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFNUM01');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFNUM02');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFNUM03');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFNUM04');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFNUM05');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING1');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING10');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING2');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING3');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING4');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING5');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING6');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING7');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING8');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'UDFSTRING9');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRT', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHG', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHG', 'CHARGEMODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHG', 'PSITE_GRT_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHGITEM', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHGITEM', 'CHARGEMODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHGITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHGITEM', 'PSITE_GRTITEM_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHGITEM', 'PSITE_GRT_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTCHGITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'BASICAMT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'BASICPRICE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'DISCOUNTAMT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'DISCOUNTFACTOR');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'DUP_PACKETDOCID');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'DUP_PACKETITEMID');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'GLCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'GRSAMT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'HSN_SAC_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'ICODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'INTGREFDETID');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'INVBATCH_SERIAL_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'ITEMRATESOURCE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'LCHGAMT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'LREMARKS');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'LTAXAMT');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'PACKETDATE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'PACKETDOCID');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'PACKETITEMID');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'PACKETNO');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'PSITE_GRT_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'REF_FAMILY_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'ROUNDOFF');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'RTQTY');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'RTRATE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'SALORDDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'SITE_COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('POS GRT', 'PSITE_GRTITEM', 'SLCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'CREATEDON');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'CUSTOMER_SLCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'DEBTOR_GLCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'DOCDATE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'DOCTYPE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'INTGREFID');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'PSITE_POSSTLM_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'RETAILORDMAIN_ORDCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'STATUS');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'ADDITIONALDETAILS1');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'ADDITIONALDETAILS2');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'ADDITIONALDETAILS3');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'ADDITIONALDETAILS4');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'EXPENSEMODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'EXPENSE_MASTER_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'GLCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'POSJOURNAL_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'PSITE_MOP_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'PSITE_PTCHEAD_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'REFDATETIME');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'REFNO');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'REMARKS');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'SLCODE');
INSERT INTO main.aud2_tab_col VALUES ('POS Journal', 'POSJOURNAL_DETAIL', 'TENDER_MASTER_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'CLOSEDON');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'CREATEDON');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'LASTMODIFIEDON');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'PSITE_TRANSIT_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'REPLN_ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'SLCODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'STORE_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRC', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCCHG', 'PSITE_GRC_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCCHGITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCCHGITEM', 'PSITE_GRC_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCITEM', 'DCCODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCITEM', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCITEM', 'INVBATCH_SERIAL_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCITEM', 'PSITE_GRC_CODE');
INSERT INTO main.aud2_tab_col VALUES ('POSGRC', 'PSITE_GRCITEM', 'REF_FAMILY_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDIS', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDIS', 'ORDNO');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDIS', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDIS', 'SITE_COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDIS', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'AUTH_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'ORDNO');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'PURSRVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDORD', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDRC', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDRC', 'ORDCODE');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDRC', 'ORDNO');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDRC', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('Production', 'PRDRC', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'PURINVJRNDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNCHG_ITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNDET', 'GST_ITC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNDET', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNDET', 'PURINVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNDET', 'RSP');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'AUTO_GEN');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'JRNNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'JRNTYPE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'LAST_MODIFIED_BY');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'LAST_MODIFIED_ON');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'MAIN_GL_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'PURINVMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'PURTERMCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'REF_ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase DN/CN', 'PURINVJRNMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'INCLUDE_IN_TDS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'INVNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'INCLUDE_IN_TDS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'PURINVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVCHG_ITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVDET', 'GST_ITC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVDET', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVDET', 'INVGRCDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVDET', 'RSP');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'CASH_DISCOUNT_PERIOD');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'INVNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'LGTRECQTY');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'MAIN_GL_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Invoice', 'PURINVMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'RTCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'RTNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'PURRTDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'RTCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTCHG_ITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTDET', 'ALLOWTAXREVERSAL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTDET', 'GRTCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTDET', 'GST_ITC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTDET', 'INVGRTDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTDET', 'RSP');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTDET', 'RTCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'EWAYBILLGENERATEDON');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'EWAYBILLGENERATEDON_DUMMY');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'EWAYBILLNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'EWAYBILLVALIDUPTO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'EWAYBILLVALIDUPTO_DUMMY');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'EWAYBILL_DOCUMENT_DATA');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'EWAYBILL_DOCUMENT_URL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'RTCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'RTNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Return', 'PURRTMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'JRNNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'PURSRVJRNDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNCHG_ITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNDET', 'GST_ITC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNDET', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNDET', 'JRNNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNDET', 'PURSRVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'JRNNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'JRNTYPE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'LAST_MODIFIED_ON');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'PURSRVMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'REF_ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Debit Note', 'PURSRVJRNMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'SRVNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'PURSRVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVCHG_ITEM', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVDET', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVDET', 'SRVNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVDET', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'ADMCURRENCY_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'PCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'SRVNO');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRVMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRV_SCHEDULE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRV_SCHEDULE', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRV_SCHEDULE', 'PURSRVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Purchase Service Invoice', 'PURSRV_SCHEDULE', 'PURSRVMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseChargeMaster', 'FINCHG', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseChargeMaster', 'FINCHG', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseChargeMaster', 'FINCHG', 'FORMCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseChargeMaster', 'FINCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseChargeMaster', 'FINCHG', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseChargeMaster', 'FINCHG', 'ISSYSTEM');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseChargeMaster', 'FINCHG', 'TAXABLE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'CNLQTY');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'DISCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'DISCOUNT');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'INTGCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'INTG_STG_ID');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'OQTY');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'RCQTY');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'RSP');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'TAXAMT');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDDET', 'TAXCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'CREATORCMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'DESCCMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'DISCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'ENABLE_LGT_TRACK');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'INTGCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'INTG_STG_ID');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'ORDCMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'ORDCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'ORDNO');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'PRINT_LABEL');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'REFORDNO');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'REFSCHEME_DOCNO');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'SET_APPLICABLE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'SHIPSTATUS');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'SOURCE_ORD');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'STAT');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'TAXCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'TEMPLATE_FLG');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'TEMP_DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'TXNCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseOrder', 'PURORDMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchasePriceChart', 'PUR_PRICE_CHART', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchasePriceChart', 'PUR_PRICE_CHART', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchasePriceChart', 'PUR_PRICE_CHART', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('PurchasePriceChart', 'PUR_PRICE_CHART', 'PCODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchasePriceChart', 'PUR_PRICE_CHART', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseTermMaster', 'PURTERMDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseTermMaster', 'PURTERMDET', 'PURTERMMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('PurchaseTermMaster', 'PURTERMMAIN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'CSCODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'INTGREF1');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'INTGREF2');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'INTGREF3');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'INTGREF4');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'INTG_INVOICEDETID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'INTG_ORDERDETID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'INTG_REFINVOICEDETID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'REF_SALCSDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'RETAILORDERDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSDET', 'TAXPERCENT_OLD');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'CHANNELINVOICEDATE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'CHANNELINVOICEID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'CHANNELTYPE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'CSCODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'CSNO');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'DAMAGED_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'FORMCODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'GDS_ENTITY_DOCUMENTID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'GDS_ENTITY_ID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'GST_DOC_NO');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'INTG_DOCSCHEME_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'INTG_INVOICEID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'INTG_ORDERID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'INTG_PARENTINVOICEDATE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'INTG_PARENTINVOICENO');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'INTG_REFINVOICEID');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'ORDER_ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'OWNER_GSTIN_NO');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'OWNER_GSTIN_STATE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'PSITE_POSSTLM_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'REF_SALCSMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'RETAILORDER_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'RETURN_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'SHIPFROM_ADMSITE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMOP', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMOP', 'CSCODE');
INSERT INTO main.aud2_tab_col VALUES ('Retail Sales', 'SALCSMOP', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'INT$CLASS_ROLE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLE', 'CREATEDON');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLE', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLE', 'ID');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLE', 'LASTMODIFIEDON');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLE', 'LOCALPOLICYID');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLEMENU', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLEMENU', 'ID');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLEMENU', 'MDMENUID');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLEMENU', 'MDMENUSHORTCODE');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLEMENU', 'ROLEID');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLEMENUOPERATION', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Role', 'ROLEMENUOPERATION', 'ID');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'FORMAMT');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'FORMCODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'FORMDT');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'FORMNO');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'ISREVERSE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'SALINVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVCHG_ITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVDET', 'COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVDET', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVDET', 'MRP');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVDET', 'REF_FAMILY_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVDET', 'RTQTY');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVDET', 'SITE_COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'ADMOU_CODE_IN');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'DATASENDON');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'DISCOUNT_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'DISCOUNT_FACTOR');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'DISCOUNT_MODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'EWAYBILLGENERATEDON_DUMMY');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'EWAYBILLVALIDUPTO_DUMMY');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'EWAYBILL_DOCUMENT_DATA');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'EWAYBILL_DOCUMENT_URL');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'INCL_VAT_IN_DIST');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'INTGCODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'INVNO');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'MAIN_GL_AMT');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'PRICETYPE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'PRICE_ROUNDOFF');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'PSLCODE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'ROUNDOFF_LIMIT');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'SALETYPE');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'SOURCE_INV');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('SNDMovement', 'SALINVMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG', 'WITHOUT_TERM_FORMULA');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG_ITEM', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG_ITEM', 'SALSRVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG_ITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVCHG_ITEM', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVDET', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'OWNER_GSTIN_NO');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'OWNER_GSTIN_STATE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'SRVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'SRVNO');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Sale Service Invoice', 'SALSRVMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleChargeMaster', 'SALCHG', 'CD');
INSERT INTO main.aud2_tab_col VALUES ('SaleChargeMaster', 'SALCHG', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleChargeMaster', 'SALCHG', 'FORMCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleChargeMaster', 'SALCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('SaleChargeMaster', 'SALCHG', 'ISSYSTEM');
INSERT INTO main.aud2_tab_col VALUES ('SaleChargeMaster', 'SALCHG', 'SALCHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleChargeMaster', 'SALCHG', 'TAXABLE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG_ITEM', 'BASIS');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG_ITEM', 'ISTAX');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG_ITEM', 'OPERATION_LEVEL');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG_ITEM', 'SALORDDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDCHG_ITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'CHANNEL_B2C_ORDERDETID');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'CHL_MASTER_CHLCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'CHL_ORDER_DETAILID');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'CNLQTY');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'DQTY');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'INTGORDERDETID');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'INVQTY');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'OQTY');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'ORDCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'POS_CANCELLATIONREMARKS');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'POS_CNLQTY');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'POS_REMARKS');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'PSITE_POSORDERITEM_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'RESERVE_QTY');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDDET', 'RSP');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'ADMSITE_CODE_OWNER');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'AGRATE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'ALLOWPARTIALRESERVATION');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'AUTHORCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'CHANNEL_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'CHL_MASTER_CHLCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'CHL_ORDERID');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'CMPTAX_CODE_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'DISCOUNT_BASIS');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'DISCOUNT_FACTOR');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'DISCOUNT_MODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'EXT');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'HELDBY');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'HELDON');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'INCL_VAT_IN_DIST');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'INTGORDERID');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'ORDCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'PRICETYPE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'PRICE_ROUNDOFF');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'ROUNDOFF_LIMIT');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'SALETYPE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'STAT');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'TRPCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleOrder', 'SALORDMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTDET', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTDET', 'EFFDT');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTDET', 'PRICE');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTDET', 'PRICELISTCODE');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTMAIN', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTMAIN', 'PRICELISTCODE');
INSERT INTO main.aud2_tab_col VALUES ('SalePriceList', 'SALPRICELISTMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('SaleTermMaster', 'SALTERMDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleTermMaster', 'SALTERMDET', 'SALTERMCODE');
INSERT INTO main.aud2_tab_col VALUES ('SaleTermMaster', 'SALTERMMAIN', 'SALTERMCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG', 'SALCHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'SALINVJRNDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNCHG_ITEM', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNDET', 'ICODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNDET', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNDET', 'RSP');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNDET', 'SALINVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'JRNCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'JRNNO');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'JRNTYPE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'LAST_MODIFIED_ON');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'MAIN_GL_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'PCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Sales DN/CN', 'SALINVJRNMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG', 'SALCHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG_ITEM', 'CHGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG_ITEM', 'GST_COMPONENT');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG_ITEM', 'ROUNDOFF_ADJ_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG_ITEM', 'SALRTDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG_ITEM', 'SEQ');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTCHG_ITEM', 'SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'ALLOWTAXREVERSAL');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'DCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'ICODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'INVBATCH_SERIAL_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'REF_FAMILY_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'SALINVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'SITE_COSTAMT');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'SITE_COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'TRANSFEROUT_DCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTDET', 'TRANSFEROUT_SALINVDET_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'ADMOU_CODE_IN');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'ENTRY_SOURCE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'FORMAMT');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'GL_CC_APPL');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'GSTAPPL');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'INLOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'INTGCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'INVCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'MAIN_GL_AMT');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'OWNER_GSTIN_NO');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'OWNER_GSTIN_STATE_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'PSLCODE');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'RELEASE_TIME');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'RTNO');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('Sales Return', 'SALRTMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'COSTRATE');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'INTGREF1');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'INTGREF2');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'INTGREF3');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'INTGREF4');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'INTG_INVOICEDETID');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'INTG_ORDERDETID');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'INTG_REFINVOICEDETID');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSDET', 'TAXPERCENT_OLD');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'GDS_ENTITY_DOCUMENTID');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'GDS_ENTITY_ID');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'INTG_DOCSCHEME_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'INTG_INVOICEID');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'INTG_ORDERID');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'INTG_PARENTINVOICEDATE');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'INTG_PARENTINVOICENO');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'INTG_REFINVOICEID');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'PSITE_POSSTLM_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'SSCODE');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'SSNO');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('SecondaryRetailSales', 'SALSSMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDCHG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDCHG', 'PURSRVORDMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDCHG_ITEM', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDCHG_ITEM', 'PURSRVORDMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDDET', 'PURSRVORDMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'AUTHORIZATIONTIME');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'ORDCODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'ORDNO');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORDMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORD_SCHEDULE', 'CNL_TIME');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORD_SCHEDULE', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('ServiceOrder', 'PURSRVORD_SCHEDULE', 'PURSRVORDMAIN_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'CP');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'INSTALLATION_TYPE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'ISREADYFORLIVESYNC');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'LASTDIFFBACKUPENDTIME');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'LASTFULLBACKUPENDTIME');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'LASTSYNCENDTIME');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'PSITE_GROUP_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'PSITE_INTRANSIT_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'PSITE_PROMO_ALLOCATION_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'PSITE_STOCKPOINT_CODE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'STORE_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFDATE01');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFDATE02');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFDATE03');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFDATE04');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFDATE05');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFNUM01');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFNUM02');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFNUM03');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFNUM04');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'UDFNUM05');
INSERT INTO main.aud2_tab_col VALUES ('Site', 'ADMSITE', 'VERSION');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'DISCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'INLOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'OUTLOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'SLCODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'TAXAPP');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'TAXCHGPER');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'TAXCODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'TDSCATEGORY');
INSERT INTO main.aud2_tab_col VALUES ('SubLedger', 'FINSL', 'TRACK_SECONDARY_INVENTORY');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerOpeningBalance', 'FINOPDOC', 'ADJAMT');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerOpeningBalance', 'FINOPDOC', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerOpeningBalance', 'FINOPDOC', 'ENTCODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerOpeningBalance', 'FINOPDOC', 'ENTNO');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerOpeningBalance', 'FINOPDOC', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerOpeningBalance', 'FINOPDOC', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerOpeningBalance', 'FINSLOP', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerOpeningBalance', 'FINSLOP', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerSiteAssignment', 'FINSL_OU', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerSiteAssignment', 'FINSL_OU', 'CHALLAN_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerSiteAssignment', 'FINSL_OU', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerSiteAssignment', 'FINSL_OU', 'INVOICE_LOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerSiteAssignment', 'FINSL_OU_SITE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('SubLedgerSiteAssignment', 'FINSL_OU_SITE', 'FINSL_OU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('TDSSection', 'FINTDSTAG', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('TDSSection', 'FINTDSTAG', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('TDSSection', 'FINTDSTYPE', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('TDSSection', 'FINTDSTYPE', 'CREATED_ON');
INSERT INTO main.aud2_tab_col VALUES ('TDSSection', 'FINTDSTYPE', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('TDSSection', 'FINTDSTYPE', 'LAST_MODIFIED_ON');
INSERT INTO main.aud2_tab_col VALUES ('TDSSection', 'FINTDSTYPE', 'TDSTYPECODE');
INSERT INTO main.aud2_tab_col VALUES ('TDSSource', 'FINTDSSRC', 'CMPCODE');
INSERT INTO main.aud2_tab_col VALUES ('TDSSource', 'FINTDSSRC', 'CREATED_ON');
INSERT INTO main.aud2_tab_col VALUES ('TDSSource', 'FINTDSSRC', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('TDSSource', 'FINTDSSRC', 'LAST_MODIFIED_ON');
INSERT INTO main.aud2_tab_col VALUES ('TDSSource', 'FINTDSSRC', 'TDSSRCCODE');
INSERT INTO main.aud2_tab_col VALUES ('TaxGroup', 'FINTAXMAIN', 'TAXCODE');
INSERT INTO main.aud2_tab_col VALUES ('TaxRates', 'FINTAXDET', 'DTTO');
INSERT INTO main.aud2_tab_col VALUES ('TaxRates', 'FINTAXDET', 'TAXDETCODE');
INSERT INTO main.aud2_tab_col VALUES ('TaxRates', 'FINTAX_RANGE', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('TaxRegion', 'ADMCMPTAX', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('TaxRegion', 'ADMCMPTAX', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('TaxRegion', 'ADMCMPTAX', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP', 'ECODE');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP', 'FLEX_FIELD_KEY');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP', 'SALESMAN');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP', 'USERTYPE');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP_OU', 'ADMOU_CODE');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP_OU', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP_OU', 'DEFAULT_OU');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP_OU', 'EXT');
INSERT INTO main.aud2_tab_col VALUES ('UserSiteAssignment', 'HRDEMP_OU', 'HRDEMP_CODE');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRMAIN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRMAIN', 'DOCCODE');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRMAIN', 'ENTNO');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('WIPClearence', 'PRDWIPCLRMAIN', 'YCODE');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPDET', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPDET', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPDET', 'REF_FAMILY_CODE');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPMAIN', 'CODE');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPMAIN', 'DATAVERSION');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPMAIN', 'ENTNO');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPMAIN', 'EWAYBILL_DOCUMENT_DATA');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPMAIN', 'LAST_ACCESS_TIME');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPMAIN', 'TIME');
INSERT INTO main.aud2_tab_col VALUES ('WIPMaterialTransaction', 'PRDWIPMAIN', 'YCODE');

--Sequence Population

DO $$
DECLARE 
I RECORD;
BEGIN
FOR I IN 
SELECT S.SEQUENCENAME, O.LAST_NUMBER
FROM PG_SEQUENCES S, ORACLE_SEQUENCE O
WHERE S.SEQUENCENAME = O.SEQUENCE_NAME
LOOP
    EXECUTE 'ALTER SEQUENCE IF EXISTS ' || I.SEQUENCENAME ||' START '||I.LAST_NUMBER::TEXT||' RESTART '||I.LAST_NUMBER::TEXT;
END LOOP;
END $$;

--MDConnectedEvent
DO $$
BEGIN
    IF (SELECT shrtname FROM admou WHERE shrtname IN ('HEMB','SPPL','AEXP','SAML','AMHO','RFGL','RDVC','MFSE','AFPL','PWPL')) IS NOT NULL THEN
		DELETE FROM MDCONNECTED_EVENT;

Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'admin.gstin.added', 'ADMGSTIN_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'admin.gstin.added', 'ADMGSTIN_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'admin.gstin.refresh', 'ADMGSTIN_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'admin.gstin.refresh', 'ADMGSTIN_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'admin.gstin.updated', 'ADMGSTIN_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'admin.gstin.updated', 'ADMGSTIN_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.channel.added', 'CHANNEL_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.channel.added', 'CHANNEL_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.item.added', 'ITEM_03', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.item.added', 'ITEM_03', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.site.added', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.site.added', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.site.configuration.added', 'APPALLOCATION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.site.configuration.added', 'APPALLOCATION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.site.configuration.updated', 'APPALLOCATION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.site.configuration.updated', 'APPALLOCATION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.transporter.added', 'TRANSPORTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.allocation.transporter.added', 'TRANSPORTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.communication.test', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.communication.test', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.registration.added', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS2_VERSION)
 Values
   ('OMS', 'app.registration.added', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'article.added', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'article.deleted', 'ARTICLE_DELETE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'article.extinct.marked', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'article.extinct.unmarked', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'article.refresh', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'article.updated', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vat.added', 'VATTAXMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vat.added', 'VATTAXMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vat.refresh', 'VATTAXMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vat.refresh', 'VATTAXMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vat.updated', 'VATTAXMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vat.updated', 'VATTAXMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.added', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.added', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.extinct.marked', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.extinct.marked', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.extinct.unmarked', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.extinct.unmarked', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.refresh', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.refresh', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.updated', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'finance.vatregion.updated', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'integration.channel.added', 'CHANNEL_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'integration.channel.added', 'CHANNEL_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'integration.channel.extinct.marked', 'CHANNEL_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'integration.channel.extinct.marked', 'CHANNEL_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'integration.channel.extinct.unmarked', 'CHANNEL_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'integration.channel.extinct.unmarked', 'CHANNEL_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'integration.channel.updated', 'CHANNEL_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'integration.channel.updated', 'CHANNEL_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.added', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.added', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.extinct.marked', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.extinct.marked', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.extinct.unmarked', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.extinct.unmarked', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.refresh', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.refresh', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.updated', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.gstrate.updated', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.added', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.added', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.extinct.marked', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.extinct.marked', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.extinct.unmarked', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.extinct.unmarked', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.refresh', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.refresh', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.updated', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventory.hsnsac.updated', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventorygroup.added', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventorygroup.deleted', 'INVGROUP_DELETE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventorygroup.extinct.marked', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventorygroup.extinct.unmarked', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventorygroup.refresh', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'inventorygroup.updated', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'item.extinct.marked', 'ITEM_03', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'item.extinct.marked', 'ITEM_03', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'item.extinct.unmarked', 'ITEM_03', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'item.extinct.unmarked', 'ITEM_03', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'item.updated', 'ITEM_03', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'item.updated', 'ITEM_03', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.added', 'MOP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.added', 'MOP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.extinct.marked', 'MOP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.extinct.marked', 'MOP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.extinct.unmarked', 'MOP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.extinct.unmarked', 'MOP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.refresh', 'MOP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.refresh', 'MOP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.updated', 'MOP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'retail.mop.updated', 'MOP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.added', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.added', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.bininventory.allitem.reconcile', 'BININVENTORY_SITE_DAILY_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.bininventory.allitem.reconcile', 'BININVENTORY_SITE_DAILY_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.bininventory.allitem.refresh', 'BININVENTORY_SITE_FULL_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.bininventory.allitem.refresh', 'BININVENTORY_SITE_FULL_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.bininventory.item.updated', 'INVENTORY_BIN_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.bininventory.item.updated', 'INVENTORY_BIN_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.extinct.marked', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.extinct.marked', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.extinct.unmarked', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.extinct.unmarked', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.inventory.allitem.reconcile', 'INVENTORY_SITE_DAILY_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.inventory.allitem.reconcile', 'INVENTORY_SITE_DAILY_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.inventory.allitem.refresh', 'INVENTORY_SITE_FULL_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.inventory.allitem.refresh', 'INVENTORY_SITE_FULL_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.inventory.item.updated', 'INVENTORY_SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.inventory.item.updated', 'INVENTORY_SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.updated', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'site.updated', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'transporter.added', 'TRANSPORTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'transporter.added', 'TRANSPORTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'transporter.extinct.marked', 'TRANSPORTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'transporter.extinct.marked', 'TRANSPORTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'transporter.extinct.unmarked', 'TRANSPORTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'transporter.extinct.unmarked', 'TRANSPORTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'transporter.updated', 'TRANSPORTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'transporter.updated', 'TRANSPORTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'wms.retail.pick.confirmed', 'PICKCONFIRM_02', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('OMS', 'wms.retail.pick.confirmed', 'PICKCONFIRM_02', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'admin.gstin.added', 'ADMGSTIN_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'admin.gstin.added', 'ADMGSTIN_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'admin.gstin.refresh', 'ADMGSTIN_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'admin.gstin.refresh', 'ADMGSTIN_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'admin.gstin.updated', 'ADMGSTIN_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'admin.gstin.updated', 'ADMGSTIN_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.customer.added', 'CUSTOMER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.customer.added', 'CUSTOMER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.expense.added', 'EXPENSE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.expense.added', 'EXPENSE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.item.added', 'ITEM_03', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.item.added', 'ITEM_03', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.site.added', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.site.added', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.site.configuration.updated', 'APPALLOCATION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.site.configuration.updated', 'APPALLOCATION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.tender.added', 'TENDER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'app.allocation.tender.added', 'TENDER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS2_VERSION)
 Values
   ('POS', 'app.communication.test', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS2_VERSION)
 Values
   ('POS', 'app.communication.test', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS2_VERSION)
 Values
   ('POS', 'app.registration.added', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS2_VERSION)
 Values
   ('POS', 'app.registration.added', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.added', 'ARTICLE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.added', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.deleted', 'ARTICLE_DELETE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.deleted', 'ARTICLE_DELETE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.extinct.marked', 'ARTICLE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.extinct.marked', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.extinct.unmarked', 'ARTICLE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.extinct.unmarked', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.refresh', 'ARTICLE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.refresh', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.updated', 'ARTICLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'article.updated', 'ARTICLE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'company.profile.updated', 'COMPANY_PROFILE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'expense.extinct.marked', 'EXPENSE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'expense.extinct.marked', 'EXPENSE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'expense.extinct.unmarked', 'EXPENSE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'expense.extinct.unmarked', 'EXPENSE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'expense.updated', 'EXPENSE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'expense.updated', 'EXPENSE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vat.added', 'VATTAXMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vat.added', 'VATTAXMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vat.refresh', 'VATTAXMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vat.refresh', 'VATTAXMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vat.updated', 'VATTAXMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vat.updated', 'VATTAXMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.added', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.added', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.extinct.marked', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.extinct.marked', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.extinct.unmarked', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.extinct.unmarked', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.refresh', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.refresh', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.updated', 'VATTAXREGION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'finance.vatregion.updated', 'VATTAXREGION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.batchserial.updated', 'BATCHSERIALMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.conversion.bundle.released', 'CONVERSION_BUNDLE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.conversion.bundle.released', 'CONVERSION_BUNDLE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.conversion.production.released', 'CONVERSION_PRODUCTION_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.conversion.production.released', 'CONVERSION_PRODUCTION_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.conversion.split.released', 'CONVERSION_SPLIT_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.conversion.split.released', 'CONVERSION_SPLIT_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.added', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.added', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.extinct.marked', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.extinct.marked', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.extinct.unmarked', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.extinct.unmarked', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.refresh', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.refresh', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.updated', 'GSTRATEMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.gstrate.updated', 'GSTRATEMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.added', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.added', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.extinct.marked', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.extinct.marked', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.extinct.unmarked', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.extinct.unmarked', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.refresh', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.refresh', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.updated', 'HSNSACMASTER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.hsnsac.updated', 'HSNSACMASTER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventory.opening.updated', 'INVENTORY_OPENING_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.added', 'INVENTORYGROUP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.added', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.deleted', 'INVGROUP_DELETE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.deleted', 'INVGROUP_DELETE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.extinct.marked', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.extinct.marked', 'INVENTORYGROUP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.extinct.unmarked', 'INVENTORYGROUP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.extinct.unmarked', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.refresh', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.refresh', 'INVENTORYGROUP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.updated', 'INVENTORYGROUP_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'inventorygroup.updated', 'INVENTORYGROUP_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'item.extinct.marked', 'ITEM_03', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'item.extinct.marked', 'ITEM_03', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'item.extinct.unmarked', 'ITEM_03', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'item.extinct.unmarked', 'ITEM_03', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'item.updated', 'ITEM_03', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'item.updated', 'ITEM_03', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'pos.goodsreturn.added', 'SITETOSITETRANSFER_02', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'pos.goodsreturn.added', 'SITETOSITETRANSFER_02', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'procurement.grc.released', 'HOGRC_02', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'procurement.grc.released', 'HOGRC_02', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'procurement.grc.updated_after_release', 'HOGRC_02', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'procurement.grc.updated_after_release', 'HOGRC_02', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'procurement.grt.released', 'HOGRT_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'procurement.grt.released', 'HOGRT_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'procurement.grt.updated_after_release', 'HOGRT_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'procurement.grt.updated_after_release', 'HOGRT_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'retail.invoice.consignment.added', 'INVOICE_CONSIGNMENT_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'retail.invoice.consignment.added', 'INVOICE_CONSIGNMENT_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'retail.invoice.outright.added', 'INVOICE_OUTRIGHT_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'retail.invoice.outright.added', 'INVOICE_OUTRIGHT_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'site.extinct.marked', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'site.extinct.marked', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'site.extinct.unmarked', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'site.extinct.unmarked', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'site.replnsource.tagging.updated', 'SITEREPLNSOURCE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'site.replnsource.tagging.updated', 'SITEREPLNSOURCE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'site.updated', 'SITE_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'site.updated', 'SITE_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.customer.updated', 'CUSTOMER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.customer.updated', 'CUSTOMER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.invoice.added', 'SNDINVOICE_02', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.invoice.added', 'SNDINVOICE_02', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.pricelist.added', 'PRICELIST_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.pricelist.added', 'PRICELIST_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.pricelist.refresh', 'PRICELIST_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.pricelist.refresh', 'PRICELIST_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.pricelist.updated', 'PRICELIST_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.pricelist.updated', 'PRICELIST_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.transferorder.released', 'SNDORDER_02', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'snd.transferorder.released', 'SNDORDER_02', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'tender.extinct.marked', 'TENDER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'tender.extinct.marked', 'TENDER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'tender.extinct.unmarked', 'TENDER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'tender.extinct.unmarked', 'TENDER_01', '2023-10');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'tender.updated', 'TENDER_01', '2024-01');
Insert into MAIN.MDCONNECTED_EVENT
   (CONNECTED_APP_TYPE, GDS_EVENT_ID, GDS_TEMPLATE_ID, GDS2_VERSION)
 Values
   ('POS', 'tender.updated', 'TENDER_01', '2023-10');

	END IF;
END $$;

--Gds2_Event_Template
DELETE FROM gds2_event_template_md;

INSERT INTO gds2_event_template_md VALUES ('INVENTORY_BIN_01', 'INVENTORY_BIN', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE SITECODE, DOC_HEADER.ICODE, SUM (COALESCE (DOC_HEADER.STOCK_ON_HAND, 0)) ONHAND_STOCK, SUM (COALESCE (DOC_HEADER.RESERVED_STOCK, 0)) RESERVE_STOCK, SUM (COALESCE (DOC_HEADER.EFFECTIVE_STOCK, 0)) ACTUAL_STOCK, MAX (DOC_HEADER.LASTMODIFIEDON) LASTMODIFIEDON, MIN (BATCHSERIAL.EXP_DATE) MINEXPDATE, MAX (BATCHSERIAL.EXP_DATE) MAXEXPDATE FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN  INVBINSTOCK_ONHAND DOC_HEADER ON EVENTS.REFCODE = DOC_HEADER.ICODE || ''~'' || DOC_HEADER.ADMSITE_CODE::TEXT INNER JOIN ADMSITE OWNER_SITE ON DOC_HEADER.ADMSITE_CODE = OWNER_SITE.CODE INNER JOIN INVBIN BIN ON DOC_HEADER.INVBIN_CODE = BIN.CODE LEFT JOIN INVBINGRP BINGRP ON BIN.INVBINGRP_GRPCODE = BINGRP.GRPCODE INNER JOIN INVITEM ITEM ON DOC_HEADER.ICODE = ITEM.ICODE INNER JOIN V_GDS2_INVGRP ITEMGROUP ON ITEM.INVARTICLE_CODE = ITEMGROUP.ARTICLE_CODE LEFT JOIN INVBATCH_SERIAL BATCHSERIAL ON DOC_HEADER.INVBATCH_SERIAL_CODE = BATCHSERIAL.CODE WHERE (DOC_HEADER.INVBATCH_SERIAL_CODE IS NULL OR ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NOT NULL AND BATCHSERIAL.EXP_DATE >= CURRENT_DATE))GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE, DOC_HEADER.ICODE');
INSERT INTO gds2_event_template_md VALUES ('COMPANY_PROFILE_01', 'company.profile.updated', NULL, 'SELECT distinct EVENTS.ID,EVENTS.SUBSCR_ID,EVENTS.EVENT_ID,EVENTS.REFCODE,EVENTS.REFCODE BO_REFCODE,EVENTS.RETRY_COUNT,EVENTS.EVENT_TIME,EVENTS.SESSION_ID,EVENTS.CUSTOM_ORDER_SEQ,EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS,ADMCMPPROF DOC_HEADERWHERE EVENTS.REFCODE = TO_CHAR(DOC_HEADER.CMPCODE)');
INSERT INTO gds2_event_template_md VALUES ('BATCHSERIALMASTER_01', 'inventory.batchserial.updated', NULL, 'SELECT distinct EVENTS.ID,EVENTS.SUBSCR_ID,EVENTS.EVENT_ID,EVENTS.REFCODE,EVENTS.REFCODE BO_REFCODE,EVENTS.RETRY_COUNT,EVENTS.EVENT_TIME,EVENTS.SESSION_ID,EVENTS.CUSTOM_ORDER_SEQ,EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS,INVBATCH_SERIAL DOC_HEADERWHERE EVENTS.REFCODE = TO_CHAR(DOC_HEADER.CODE)');
INSERT INTO gds2_event_template_md VALUES ('INVENTORY_OPENING_01', 'inventory.opening.updated', NULL, 'SELECT DISTINCT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, INVITEMOP DOC_HEADER, ADMSITE SITEWHERE EVENTS.REFCODE = TO_CHAR(DOC_HEADER.ADMSITE_CODE)AND DOC_HEADER.ADMSITE_CODE = SITE.CODE');
INSERT INTO gds2_event_template_md VALUES ('INVENTORY_SITE_01', 'INVENTORY_SITE', '', 'SELECT DET.ID, DET.SUBSCR_ID, DET.EVENT_ID, DET.REFCODE, DET.BO_REFCODE, DET.RETRY_COUNT, DET.EVENT_TIME, DET.SESSION_ID, DET.CUSTOM_ORDER_SEQ, DET.GDS2_EVENT_TRACK_ID, DET.FETCH_SEQ, DET.SITECODE, DET.ICODE, SUM(DET.CLOSINGSTOCKQTY ) CLOSINGSTOCKQTY, SUM(DET.CLOSINGSTOCKAMOUNT) CLOSINGSTOCKAMOUNT, SUM(UNSETTLESALEQTY) UNSETTLESALEQTY, MAX(LASTMODIFIEDON) LASTMODIFIEDON, MIN (DET.MINEXPDATE) MINEXPDATE, MAX (DET.MINEXPDATE) MAXEXPDATE  FROM (SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE SITECODE, DOC_HEADER.ICODE, SUM(DOC_HEADER.QTY ) CLOSINGSTOCKQTY, SUM(DOC_HEADER.AMOUNT) CLOSINGSTOCKAMOUNT, 0 AS UNSETTLESALEQTY, MAX(LASTSTKUPDTIME) LASTMODIFIEDON, MIN (BATCHSERIAL.EXP_DATE) MINEXPDATE, MAX (BATCHSERIAL.EXP_DATE) MAXEXPDATE FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN  INVSTOCK_ONHAND_STOCKPOINT_AGG DOC_HEADER ON EVENTS.REFCODE = DOC_HEADER.GDS_REFCODE_SITE INNER JOIN INVITEM ITEM ON DOC_HEADER.ICODE = ITEM.ICODE INNER JOIN ADMSITE SITE ON DOC_HEADER.ADMSITE_CODE = SITE.CODE INNER JOIN V_GDS2_INVGRP ITEMGROUP ON ITEM.INVARTICLE_CODE = ITEMGROUP.ARTICLE_CODE INNER JOIN INVLOC STOCKPOINT ON DOC_HEADER.LOCCODE = STOCKPOINT.LOCCODE LEFT JOIN PSITE_STOCKPOINT SITESTOCKPOINT ON DOC_HEADER.PSITE_STOCKPOINT_CODE = SITESTOCKPOINT.CODE LEFT JOIN INVBATCH_SERIAL BATCHSERIAL ON DOC_HEADER.INVBATCH_SERIAL_CODE = BATCHSERIAL.CODE WHERE ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NULL OR DOC_HEADER.INVBATCH_SERIAL_CODE = ''-99999'' OR ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NOT NULL AND BATCHSERIAL.EXP_DATE >= CURRENT_DATE)) <FILTER>GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE, DOC_HEADER.ICODE, LASTSTKUPDTIME UNION ALL SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE SITECODE, DOC_HEADER.ICODE, SUM(DOC_HEADER.QTY) CLOSINGSTOCKQTY, SUM(DOC_HEADER.AMOUNT) CLOSINGSTOCKAMOUNT, 0 UNSETTLESALEQTY, MAX(DOC_HEADER.TIME) LASTMODIFIEDON, MIN (BATCHSERIAL.EXP_DATE) MINEXPDATE, MAX (BATCHSERIAL.EXP_DATE) MAXEXPDATE FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN INVSTOCK_LOG DOC_HEADER ON EVENTS.REFCODE = (DOC_HEADER.ICODE || ''~'' || DOC_HEADER.ADMSITE_CODE::text) INNER JOIN INVITEM ITEM ON DOC_HEADER.ICODE = ITEM.ICODE INNER JOIN ADMSITE SITE ON DOC_HEADER.ADMSITE_CODE = SITE.CODE INNER JOIN V_GDS2_INVGRP ITEMGROUP ON ITEM.INVARTICLE_CODE = ITEMGROUP.ARTICLE_CODE INNER JOIN INVLOC STOCKPOINT ON DOC_HEADER.LOCCODE = STOCKPOINT.LOCCODE LEFT JOIN PSITE_STOCKPOINT SITESTOCKPOINT ON DOC_HEADER.PSITE_STOCKPOINT_CODE = SITESTOCKPOINT.CODE LEFT JOIN INVBATCH_SERIAL BATCHSERIAL ON DOC_HEADER.INVBATCH_SERIAL_CODE = BATCHSERIAL.CODE WHERE ( COALESCE (LOGSEQ, 0) > (SELECT COALESCE (LOGSEQ, 0) FROM LOG_TAG_AGG WHERE CONSUMER = ''INVSTOCK_ONHAND_STOCKPOINT_AGG'' AND LOGNAME = ''INVSTOCK_LOG'') OR LOGSEQ IS NULL) AND ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NULL OR DOC_HEADER.INVBATCH_SERIAL_CODE = ''-99999'' OR ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NOT NULL AND BATCHSERIAL.EXP_DATE >= CURRENT_DATE)) <FILTER>GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE, DOC_HEADER.ICODE, TIME UNION ALL SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE SITECODE, DOC_HEADER.ICODE ICODE, SUM(DOC_HEADER.QTY) CLOSINGSTOCKQTY, SUM(DOC_HEADER.AMOUNT) CLOSINGSTOCKAMOUNT, 0 UNSETTLESALEQTY, MAX(LASTSTKUPDTIME) LASTMODIFIEDON, MIN (BATCHSERIAL.EXP_DATE) MINEXPDATE, MAX (BATCHSERIAL.EXP_DATE) MAXEXPDATE FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN INVSTOCK_ONHAND_INTRA_AGG DOC_HEADER ON EVENTS.REFCODE = DOC_HEADER.GDS_REFCODE_SITE INNER JOIN INVITEM ITEM ON DOC_HEADER.ICODE = ITEM.ICODE INNER JOIN ADMSITE SITE ON DOC_HEADER.ADMSITE_CODE = SITE.CODE INNER JOIN V_GDS2_INVGRP ITEMGROUP ON ITEM.INVARTICLE_CODE = ITEMGROUP.ARTICLE_CODE INNER JOIN INVLOC STOCKPOINT ON DOC_HEADER.LOCCODE = STOCKPOINT.LOCCODE LEFT JOIN PSITE_STOCKPOINT SITESTOCKPOINT ON DOC_HEADER.STOCKPOINTCODE = SITESTOCKPOINT.CODE LEFT JOIN INVBATCH_SERIAL BATCHSERIAL ON DOC_HEADER.INVBATCH_SERIAL_CODE = BATCHSERIAL.CODE WHERE ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NULL OR DOC_HEADER.INVBATCH_SERIAL_CODE = ''-99999'' OR ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NOT NULL AND BATCHSERIAL.EXP_DATE >= CURRENT_DATE)) <FILTER>GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE, DOC_HEADER.ICODE UNION ALL SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE SITECODE, DOC_HEADER.ICODE, SUM (DOC_HEADER.QTY) CLOSINGSTOCKQTY, 0 UNSETTLESALEQTY, SUM (DOC_HEADER.AMOUNT) CLOSINGSTOCKAMOUNT, MAX (TIME) LASTMODIFIEDON, MIN (BATCHSERIAL.EXP_DATE) MINEXPDATE, MAX (BATCHSERIAL.EXP_DATE) MAXEXPDATE FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN INVSTOCK_INTRA_LOG DOC_HEADER ON EVENTS.REFCODE = (DOC_HEADER.ICODE || ''~'' || DOC_HEADER.ADMSITE_CODE::text) INNER JOIN PSITE_STOCKPOINT P ON DOC_HEADER.PSITE_STOCKPOINT_CODE = P.CODE INNER JOIN INVITEM ITEM ON DOC_HEADER.ICODE = ITEM.ICODE INNER JOIN ADMSITE SITE ON DOC_HEADER.ADMSITE_CODE = SITE.CODE INNER JOIN V_GDS2_INVGRP ITEMGROUP ON ITEM.INVARTICLE_CODE = ITEMGROUP.ARTICLE_CODE INNER JOIN INVLOC STOCKPOINT ON DOC_HEADER.LOCCODE = STOCKPOINT.LOCCODE	LEFT JOIN PSITE_STOCKPOINT SITESTOCKPOINT ON DOC_HEADER.PSITE_STOCKPOINT_CODE = SITESTOCKPOINT.CODE LEFT JOIN INVBATCH_SERIAL BATCHSERIAL ON DOC_HEADER.INVBATCH_SERIAL_CODE = BATCHSERIAL.CODE WHERE ( COALESCE (DOC_HEADER.LOGSEQ, 0) > (SELECT COALESCE (LOGSEQ, 0) FROM LOG_TAG_AGG WHERE CONSUMER = ''INVSTOCK_ONHAND_INTRA_AGG'' AND LOGNAME = ''INVSTOCK_INTRA_LOG'') OR LOGSEQ IS NULL) AND ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NULL OR DOC_HEADER.INVBATCH_SERIAL_CODE = ''-99999'' OR ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NOT NULL AND BATCHSERIAL.EXP_DATE >= CURRENT_DATE)) <FILTER>GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE, DOC_HEADER.ICODE UNION ALL SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE SITECODE, DOC_HEADER.ICODE, 0 CLOSINGSTOCKQTY, 0 CLOSINGSTOCKAMOUNT, SUM (DOC_HEADER.QTY) UNSETTLESALEQTY, MAX (P.BILLDATE) LASTMODIFIEDON, MIN (BATCHSERIAL.EXP_DATE) MINEXPDATE, MAX (BATCHSERIAL.EXP_DATE) MAXEXPDATE FROM GDS2_EVENT_QUEUE EVENTS  INNER JOIN PSITE_POSBILLITEM_PARK DOC_HEADER ON EVENTS.REFCODE = DOC_HEADER.ICODE || ''~'' || DOC_HEADER.ADMSITE_CODE::text INNER JOIN PSITE_POSBILL_PARK P ON DOC_HEADER.PSITE_POSBILL_CODE = P.CODE INNER JOIN INVITEM ITEM ON DOC_HEADER.ICODE = ITEM.ICODE INNER JOIN ADMSITE SITE ON DOC_HEADER.ADMSITE_CODE = SITE.CODE INNER JOIN V_GDS2_INVGRP ITEMGROUP ON ITEM.INVARTICLE_CODE = ITEMGROUP.ARTICLE_CODE INNER JOIN INVLOC STOCKPOINT ON P.STORE_LOCCODE = STOCKPOINT.LOCCODE  LEFT JOIN PSITE_STOCKPOINT SITESTOCKPOINT ON P.PSITE_STOCKPOINT_CODE = SITESTOCKPOINT.CODE LEFT JOIN INVBATCH_SERIAL BATCHSERIAL ON DOC_HEADER.INVBATCH_SERIAL_CODE = BATCHSERIAL.CODE WHERE ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NULL OR DOC_HEADER.INVBATCH_SERIAL_CODE = ''-99999'' OR ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NOT NULL AND BATCHSERIAL.EXP_DATE >= CURRENT_DATE)) <FILTER>GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE, DOC_HEADER.ICODE, P.PSITE_STOCKPOINT_CODE, DOC_HEADER.ICODE, DOC_HEADER.INVBATCH_SERIAL_CODE, P.BILLDATE) DET GROUP BY  DET.ID, DET.SUBSCR_ID, DET.EVENT_ID, DET.REFCODE, DET.BO_REFCODE, DET.RETRY_COUNT, DET.EVENT_TIME, DET.SESSION_ID, DET.CUSTOM_ORDER_SEQ, DET.GDS2_EVENT_TRACK_ID, DET.FETCH_SEQ, DET.SITECODE, DET.ICODE');
INSERT INTO gds2_event_template_md VALUES ('BININVENTORY_SITE_FULL_01', 'site.bininventory.allitem.refresh', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE SITECODE, DOC_HEADER.ICODE, SUM (COALESCE (DOC_HEADER.STOCK_ON_HAND, 0)) ONHAND_STOCK, SUM (COALESCE (DOC_HEADER.RESERVED_STOCK, 0)) RESERVE_STOCK, SUM (COALESCE (DOC_HEADER.EFFECTIVE_STOCK, 0)) ACTUAL_STOCK, MAX (DOC_HEADER.LASTMODIFIEDON) LASTMODIFIEDON, MIN (BATCHSERIAL.EXP_DATE) MINEXPDATE, MAX (BATCHSERIAL.EXP_DATE) MAXEXPDATE FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN INVBINSTOCK_ONHAND DOC_HEADER ON EVENTS.REFCODE = DOC_HEADER.ADMSITE_CODE::TEXT LEFT JOIN INVBATCH_SERIAL BATCHSERIAL ON DOC_HEADER.INVBATCH_SERIAL_CODE = BATCHSERIAL.CODE WHERE ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NULL OR DOC_HEADER.INVBATCH_SERIAL_CODE = ''-99999'' OR ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NOT NULL AND BATCHSERIAL.EXP_DATE >= CURRENT_DATE))GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE, DOC_HEADER.ICODE');
INSERT INTO gds2_event_template_md VALUES ('INVENTORY_SITE_DAILY_01', 'site.inventory.allitem.reconcile', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::bigint as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.SITECODE, DOC_HEADER.ICODE, SUM(DOC_HEADER.CLOSINGSTOCKQTY) CLOSINGSTOCKQTY, SUM(DOC_HEADER.CLOSINGSTOCKAMOUNT) CLOSINGSTOCKAMOUNT, SUM(DOC_HEADER.UNSETTLESALEQTY) UNSETTLESALEQTY FROM GDS2_EVENT_QUEUE EVENTS, V_GDS2_REALTIMESTOCK DOC_HEADER, ADMSITE SITE WHERE EVENTS.REFCODE::bigint = DOC_HEADER.SITECODE AND DOC_HEADER.SITECODE = SITE.CODE GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.SITECODE, DOC_HEADER.ICODE');
INSERT INTO gds2_event_template_md VALUES ('MOP_01', 'retail.mop.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, PSITE_MOP DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('GSTRATEMASTER_01', 'inventory.gstrate.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, INVGSTRATE DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('CUSTOMER_01', 'snd.customer.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, FINSL DOC_HEADER, ADMCLS CLASS WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.SLCODE AND DOC_HEADER.CLSCODE = CLASS.CLSCODE AND CLSTYPE = ''C''');
INSERT INTO gds2_event_template_md VALUES ('BININVENTORY_SITE_DAILY_01', 'site.bininventory.allitem.reconcile', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE SITECODE, DOC_HEADER.ICODE, SUM (coalesce (DOC_HEADER.STOCK_ON_HAND, 0)) ONHAND_STOCK, SUM (coalesce (DOC_HEADER.RESERVED_STOCK, 0)) RESERVE_STOCK, SUM (coalesce (DOC_HEADER.EFFECTIVE_STOCK, 0)) ACTUAL_STOCK, MAX(DOC_HEADER.LASTMODIFIEDON) LASTMODIFIEDON FROM GDS2_EVENT_QUEUE EVENTS, INVBINSTOCK_ONHAND DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.ADMSITE_CODE GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.ADMSITE_CODE, DOC_HEADER.ICODE');
INSERT INTO gds2_event_template_md VALUES ('SNDORDER_02', 'snd.transferorder.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, SALORDMAIN DOC_HEADER, ADMSITE OWNER_SITE, ADMSITE DOC_SITE WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.ORDCODE AND DOC_HEADER.ADMSITE_CODE_OWNER = OWNER_SITE.CODE AND DOC_HEADER.ADMSITE_CODE = DOC_SITE.CODE AND DOC_HEADER.AuthorCode IS NOT NULL');
INSERT INTO gds2_event_template_md VALUES ('ARTICLE_01', 'article.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, INVARTICLE DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('SITEREPLNSOURCE_01', 'site.replnsource.tagging.updated', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, ADMSITE_OU DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.ADMSITE_CODE');
INSERT INTO gds2_event_template_md VALUES ('PICKCONFIRM_02', 'wms.retail.pick.confirmed', ' ', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS,  RETAILORDMAIN DOC_HEADER WHERE EVENTS.REFCODE = DOC_HEADER.ORDCODE');
INSERT INTO gds2_event_template_md VALUES ('POSORDER_01', 'pos.posorder.added', ' ', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, PSITE_POSORDER DOC_HEADER WHERE EVENTS.REFCODE = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('SITE_01', 'SITE', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE::bigint as REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM ADMSITE DOC_HEADER LEFT OUTER JOIN ADMCITY CITY ON (DOC_HEADER.CTNAME = CITY.CTNAME) LEFT OUTER JOIN ADMGSTIN GSTIN ON (ADMGSTIN_CODE = GSTIN.CODE) LEFT OUTER JOIN ADMGSTSTATE GSTSTATE ON (CP_GSTIN_STATE_CODE = GSTSTATE.CODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE REFCODE::bigint = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('INWARDLOGISTIC_01', 'INWARDLOGISTIC', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE::BIGINT as REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM INVLGTNOTE DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE_OWNER = OWNER_SITE.CODE) INNER JOIN ADMSITE FROM_SITE ON (ADMSITE_CODE = FROM_SITE.CODE) LEFT OUTER JOIN FINSL CONSIGNOR ON (CNCODE = CONSIGNOR.SLCODE) INNER JOIN FINSL TRANSPORTER ON (DOC_HEADER.TRPCODE = TRANSPORTER.SLCODE) LEFT OUTER JOIN INVLGTNOTE_BALES BALES ON (LGTCODE = INVLGTNOTE_CODE) INNER JOIN HRDEMP CREATEDBY_USER ON (DOC_HEADER.ECODE = CREATEDBY_USER.ECODE) LEFT OUTER JOIN HRDEMP MODIFIEDBY_USER ON (LAST_ACCESS_ECODE = MODIFIEDBY_USER.ECODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE ((REFCODE::BIGINT = LGTCODE) AND (EVENT_ID = ''INWARDLOGISTIC'')) AND (LGTTYPE = ''I'')');
INSERT INTO gds2_event_template_md VALUES ('ITEMSET_01', 'ITEMSET', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, INVSETMAIN ITEMSET WHERE EVENTS.REFCODE::BIGINT = ITEMSET.SETCODE AND EVENTS.EVENT_ID = ''ITEMSET''');
INSERT INTO gds2_event_template_md VALUES ('HSNSACMASTER_01', 'inventory.hsnsac.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, INVHSNSACMAIN DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('VATTAXMASTER_01', 'finance.vat.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, FINTAXMAIN DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.TAXCODE');
INSERT INTO gds2_event_template_md VALUES ('VATTAXREGION_01', 'finance.vatregion.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, ADMCMPTAX DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('APPALLOCATION_01', 'app.allocation.site.configuration.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, CONNECTED_APP_SITE DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.ADMSITE_CODE');
INSERT INTO gds2_event_template_md VALUES ('PICKCONFIRM_01', 'wms.pick.confirmed', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, SUM(CONFIRM_QTY) CONFIRM_QTY FROM GDS2_EVENT_QUEUE EVENTS, INVPICKLISTDET DOC_HEADER WHERE EVENTS.REFCODE = DOC_HEADER.INTGBATCHDETID GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ');
INSERT INTO gds2_event_template_md VALUES ('ITEM_03', 'item.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, INVITEM DOC_HEADER WHERE EVENTS.REFCODE = DOC_HEADER.ICODE');
INSERT INTO gds2_event_template_md VALUES ('POSGRC_01', 'POSGRC', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN PSITE_GRC DOC_HEADER ON (REFCODE = DOC_HEADER.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) INNER JOIN ADMSITE REPLN_SITE ON (REPLN_ADMSITE_CODE = REPLN_SITE.CODE) LEFT OUTER JOIN FINSL CUSTOMER ON (DOC_HEADER.SLCODE = CUSTOMER.SLCODE) WHERE EVENT_ID = ''POSGRC''');
INSERT INTO gds2_event_template_md VALUES ('INVENTORY_STOCKPOINT_01', 'INVENTORY_STOCKPOINT', '', ' SELECT EVENTS.ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ, SITECODE, STOCK.ICODE, STOCK.LOCCODE, STOCKPOINTCODE, SUM (CLOSINGSTOCKQTY) CLOSINGSTOCKQTY, SUM (CLOSINGSTOCKAMOUNT) CLOSINGSTOCKAMOUNT, SUM (UNSETTLESALEQTY) UNSETTLESALEQTY FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN V_GDS2_REALTIMESTOCK STOCK ON (REFCODE = GDS_REFCODE_STKPT) INNER JOIN INVITEM ITEM ON (STOCK.ICODE = ITEM.ICODE) INNER JOIN ADMSITE SITE ON (SITECODE = SITE.CODE) INNER JOIN INVLOC STOCKPOINT ON (STOCK.LOCCODE = STOCKPOINT.LOCCODE) LEFT OUTER JOIN PSITE_STOCKPOINT SITESTOCKPOINT ON (STOCKPOINTCODE = SITESTOCKPOINT.CODE) INNER JOIN INVGRP_MV ITEMGROUP ON (INVARTICLE_CODE = ARTICLE_CODE) WHERE EVENT_ID = ''INVENTORY_STOCKPOINT''GROUP BY EVENTS.ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ, SITECODE, STOCK.ICODE, STOCK.LOCCODE, STOCKPOINTCODE');
INSERT INTO gds2_event_template_md VALUES ('ITEM_01', 'ITEM', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, INVITEM ITEM, V_GDS2_INVGRP INVENTORY_GROUPWHERE EVENTS.REFCODE = ITEM.ICODEAND EVENTS.EVENT_ID = ''ITEM''AND ITEM.GRPCODE = INVENTORY_GROUP.DEPARTMENT_CODE');
INSERT INTO gds2_event_template_md VALUES ('GRTADVICE_01', 'GRTADVICE', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM SALORDMAIN DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE_OWNER = OWNER_SITE.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) LEFT OUTER JOIN FINSL TRANSPORTER ON (DOC_HEADER.TRPCODE = TRANSPORTER.SLCODE) LEFT OUTER JOIN FINSL CUSTOMER ON (PCODE = CUSTOMER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.SALTRADEGRP_CODE = TRADEGRP.CODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE ((REFCODE = CAST (ORDCODE as TEXT)) AND (EVENT_ID = ''GRTADVICE'')) AND (AUTHORCODE IS NOT NULL)');
INSERT INTO gds2_event_template_md VALUES ('POSSTF_01', 'POSSTF', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, PSITE_STFDOC DOC_HEADER, ADMSITE SITEWHERE EVENTS.REFCODE = CAST(DOC_HEADER.CODE AS TEXT)AND DOC_HEADER.ADMSITE_CODE = SITE.CODEAND EVENTS.EVENT_ID = ''POSSTF''');
INSERT INTO gds2_event_template_md VALUES ('POSPACKET_01', 'POSPACKET', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, PSITE_PACKET DOC_HEADER, ADMSITE DOC_SITE, ADMSITE REPLN_SITEWHERE EVENTS.REFCODE = DOC_HEADER.IDAND DOC_HEADER.REPLN_ADMSITE_CODE = REPLN_SITE.CODEAND DOC_HEADER.ADMSITE_CODE = DOC_SITE.CODEAND EVENTS.EVENT_ID = ''POSPACKET''');
INSERT INTO gds2_event_template_md VALUES ('POSPACKETVOID_01', 'POSPACKETVOID', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, PSITE_PACKET DOC_HEADER, ADMSITE DOC_SITE, ADMSITE REPLN_SITEWHERE EVENTS.REFCODE = DOC_HEADER.IDAND DOC_HEADER.REPLN_ADMSITE_CODE = REPLN_SITE.CODEAND DOC_HEADER.ADMSITE_CODE = DOC_SITE.CODEAND DOC_HEADER.STATUS = ''V''AND EVENTS.EVENT_ID = ''POSPACKETVOID''');
INSERT INTO gds2_event_template_md VALUES ('SNDRETINVOICE_01', 'SNDRETINVOICE', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM SALRTMAIN DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE_OWNER = OWNER_SITE.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) LEFT OUTER JOIN FINSL CUSTOMER ON (PCODE = CUSTOMER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.SALTRADEGRP_CODE = TRADEGRP.CODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE (REFCODE = TO_CHAR (RTCODE)) AND (EVENT_ID = ''SNDRETINVOICE'')');
INSERT INTO gds2_event_template_md VALUES ('POSBILL_01', 'POSBILL', '', 'SELECT EVENTS.ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN PSITE_POSBILL POSBILL ON (REFCODE = POSBILL.CODE) INNER JOIN ADMSITE SITE ON (POSBILL.ADMSITE_CODE = SITE.CODE) LEFT OUTER JOIN PSITE_CUSTOMER CUSTOMER ON (PSITE_CUSTOMER_CODE = CUSTOMER.CODE) WHERE EVENT_ID = ''POSBILL''');
INSERT INTO gds2_event_template_md VALUES ('VENDORMASTER_01', 'VENDORMASTER', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM FINSL DOC_HEADER INNER JOIN ADMCLS CLASS ON (DOC_HEADER.CLSCODE = CLASS.CLSCODE) LEFT OUTER JOIN ADMCITY BILLINGCITY ON (BCTNAME = BILLINGCITY.CTNAME) LEFT OUTER JOIN ADMCITY SHIPPINGCITY ON (SCTNAME = SHIPPINGCITY.CTNAME) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE (REFCODE = TO_CHAR (SLCODE)) AND (CLSTYPE = ''S'')');
INSERT INTO gds2_event_template_md VALUES ('POSGRT_01', 'POSGRT', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN PSITE_GRT DOC_HEADER ON (REFCODE = DOC_HEADER.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) INNER JOIN ADMSITE REPLN_SITE ON (REPLN_ADMSITE_CODE = REPLN_SITE.CODE) LEFT OUTER JOIN FINSL CUSTOMER ON (DOC_HEADER.SLCODE = CUSTOMER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.FINTRADEGRP_CODE = TRADEGRP.CODE) WHERE EVENT_ID = ''POSGRT''');
INSERT INTO gds2_event_template_md VALUES ('DCCANCEL_01', 'DCCANCEL', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM INVDCMAIN DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE_OWNER = OWNER_SITE.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) LEFT OUTER JOIN FINSL TRANSPORTER ON (DOC_HEADER.TRPCODE = TRANSPORTER.SLCODE) LEFT OUTER JOIN FINSL CUSTOMER ON (PCODE = CUSTOMER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.SALTRADEGRP_CODE = TRADEGRP.CODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE ((REFCODE = CAST (DCCODE as TEXT)) AND (EVENT_ID = ''DCCANCEL'')) AND (STATUS IN (''C''))');
INSERT INTO gds2_event_template_md VALUES ('DELIVERYCHALLAN_01', 'DELIVERYCHALLAN', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM INVDCMAIN DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE_OWNER = OWNER_SITE.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) LEFT OUTER JOIN FINSL TRANSPORTER ON (DOC_HEADER.TRPCODE = TRANSPORTER.SLCODE) LEFT OUTER JOIN FINSL CUSTOMER ON (PCODE = CUSTOMER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.SALTRADEGRP_CODE = TRADEGRP.CODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE ((REFCODE = CAST (DCCODE as TEXT)) AND (EVENT_ID = ''DELIVERYCHALLAN'')) AND (STATUS IN (''P'', ''I''))');
INSERT INTO gds2_event_template_md VALUES ('SNDINVOICE_01', 'SNDINVOICE', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM SALINVMAIN DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE_OWNER = OWNER_SITE.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) LEFT OUTER JOIN FINSL TRANSPORTER ON (DOC_HEADER.TRPCODE = TRANSPORTER.SLCODE) LEFT OUTER JOIN FINSL CUSTOMER ON (PCODE = CUSTOMER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.SALTRADEGRP_CODE = TRADEGRP.CODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE ((REFCODE = CAST (INVCODE as TEXT)) AND (EVENT_ID = ''SNDINVOICE'')) AND (RELEASE_STATUS = ''P'')');
INSERT INTO gds2_event_template_md VALUES ('SNDORDER_01', 'SNDORDER', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM SALORDMAIN DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE_OWNER = OWNER_SITE.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) LEFT OUTER JOIN FINSL TRANSPORTER ON (DOC_HEADER.TRPCODE = TRANSPORTER.SLCODE) LEFT OUTER JOIN FINSL CUSTOMER ON (PCODE = CUSTOMER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.SALTRADEGRP_CODE = TRADEGRP.CODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE ((REFCODE = CAST (ORDCODE as TEXT)) AND (EVENT_ID = ''SNDORDER'')) AND (AUTHORCODE IS NOT NULL)');
INSERT INTO gds2_event_template_md VALUES ('PRDORD_01', 'PRDORD', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN PRDORD DOC_HEADER ON (REFCODE = ORDCODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = CODE) INNER JOIN PRDPR PROCESS ON (DOC_HEADER.PRCODE = PROCESS.PRCODE) LEFT OUTER JOIN FINSL FINANCE ON (PCODE = FINANCE.SLCODE) WHERE EVENT_ID = ''PRDORD''');
INSERT INTO gds2_event_template_md VALUES ('POSAUDIT_01', 'POSAUDIT', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, PSITE_AUDITJOURNAL DOC_HEADER, ADMSITE DOC_SITEWHERE EVENTS.REFCODE = DOC_HEADER.CODEAND DOC_HEADER.ADMSITE_CODE = DOC_SITE.CODEAND EVENTS.EVENT_ID = ''POSAUDIT''');
INSERT INTO gds2_event_template_md VALUES ('INVMISC_01', 'INVMISC', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, INVMISCMAIN DOC_HEADER, ADMSITE DOC_SITEWHERE EVENTS.REFCODE = cast(DOC_HEADER.MISCCODE as text )AND DOC_HEADER.ADMSITE_CODE = DOC_SITE.CODEAND EVENTS.EVENT_ID = ''INVMISC''');
INSERT INTO gds2_event_template_md VALUES ('INVENTORY_ARTICLE_01', 'INVENTORY_ARTICLE', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, STOCK.SITECODE, STOCK.INVARTICLE_CODE, SUM(STOCK.CLOSINGSTOCKQTY) CLOSINGSTOCKQTY, SUM(STOCK.UNSETTLESALEQTY) UNSETTLESALEQTYFROM GDS2_EVENT_QUEUE EVENTS, V_GDS2_ARTICLESTOCK STOCK, ADMSITE SITE, INVARTICLE ARTICLE, INVLOC STOCKPOINTWHERE EVENTS.EVENT_ID = ''INVENTORY_ARTICLE'' AND EVENTS.REFCODE = STOCK.GDS_REFCODE_ARTICLE AND STOCK.SITECODE = SITE.CODE AND STOCK.LOCCODE = STOCKPOINT.LOCCODE AND STOCK.INVARTICLE_CODE = ARTICLE.CODEGROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, STOCK.SITECODE, STOCK.INVARTICLE_CODE');
INSERT INTO gds2_event_template_md VALUES ('SITETOSITETRANSFER_01', 'SITETOSITETRANSFER', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN PSITE_GRT DOC_HEADER ON (REFCODE = DOC_HEADER.CODE) INNER JOIN ADMSITE DOC_SITE ON (ADMSITE_CODE = DOC_SITE.CODE) INNER JOIN ADMSITE REPLN_SITE ON (REPLN_ADMSITE_CODE = REPLN_SITE.CODE) LEFT OUTER JOIN FINSL CUSTOMER ON (DOC_HEADER.SLCODE = CUSTOMER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.FINTRADEGRP_CODE = TRADEGRP.CODE) WHERE EVENT_ID = ''SITETOSITETRANSFER''');
INSERT INTO gds2_event_template_md VALUES ('SETTLEMENT_01', 'pos.settlement.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, PSITE_POSSTLM DOC_HEADER WHERE EVENTS.REFCODE = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('ITEM_02', 'ITEM', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, INVITEM ITEM, V_GDS2_INVGRP INVENTORY_GROUPWHERE EVENTS.REFCODE = ITEM.ICODEAND EVENTS.EVENT_ID = ''ITEM''AND ITEM.GRPCODE = INVENTORY_GROUP.DEPARTMENT_CODE');
INSERT INTO gds2_event_template_md VALUES ('SNDOUTWARDLOGISTIC_01', 'SNDOUTWARDLOGISTIC', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE::BIGINT as REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM INVLGTNOTE DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (DOC_HEADER.ADMSITE_CODE_OWNER = OWNER_SITE.CODE) LEFT OUTER JOIN ADMSITE DESTINATION_SITE ON (DOC_HEADER.ADMSITE_CODE = DESTINATION_SITE.CODE) LEFT OUTER JOIN FINSL CONSIGNOR ON (CNCODE = CONSIGNOR.SLCODE) INNER JOIN FINSL TRANSPORTER ON (DOC_HEADER.TRPCODE = TRANSPORTER.SLCODE) INNER JOIN SALINVMAIN DOCUMENT_DETAIL ON (DOC_HEADER.LGTCODE = DOCUMENT_DETAIL.LGTCODE) INNER JOIN HRDEMP CREATEDBY_USER ON (DOC_HEADER.ECODE = CREATEDBY_USER.ECODE) LEFT OUTER JOIN HRDEMP MODIFIEDBY_USER ON (DOC_HEADER.LAST_ACCESS_ECODE = MODIFIEDBY_USER.ECODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE ( ( (REFCODE::BIGINT = DOC_HEADER.LGTCODE) AND (ENTTYPE = ''SIM'')) AND (EVENT_ID = ''SNDOUTWARDLOGISTIC'')) AND (LGTTYPE = ''O'')');
INSERT INTO gds2_event_template_md VALUES ('GATEENTRY_01', 'GATEENTRY', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE::BIGINT as REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM INVGATEIN DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (DOC_HEADER.ADMSITE_CODE_OWNER = OWNER_SITE.CODE) LEFT OUTER JOIN FINSL CONSIGNOR ON (DOC_HEADER.CNCODE = CONSIGNOR.SLCODE) LEFT OUTER JOIN INVLGTNOTE LOGISTICS ON (DOC_HEADER.LGTCODE = LOGISTICS.LGTCODE) INNER JOIN HRDEMP CREATEDBY_USER ON (DOC_HEADER.ECODE = CREATEDBY_USER.ECODE) LEFT OUTER JOIN HRDEMP MODIFIEDBY_USER ON (DOC_HEADER.LAST_ACCESS_ECODE = MODIFIEDBY_USER.ECODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE (REFCODE::BIGINT = DOC_HEADER.CODE) AND (EVENT_ID = ''GATEENTRY'')');
INSERT INTO gds2_event_template_md VALUES ('HOGRC_01', 'HOGRC', '', 'SELECT EVENTS.ID, SUBSCR_ID, EVENT_ID, REFCODE::BIGINT as REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM INVGRCMAIN DOC_HEADER INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE_IN = OWNER_SITE.CODE) INNER JOIN FINSL VENDOR ON (PCODE = VENDOR.SLCODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) INNER JOIN INVLOC STOCKPOINT ON (DOC_HEADER.LOCCODE = STOCKPOINT.LOCCODE) LEFT OUTER JOIN PSITE_STOCKPOINT STORE_STOCKPOINT ON (DOC_HEADER.PSITE_STOCKPOINT_CODE = STORE_STOCKPOINT.CODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.FINTRADEGRP_CODE = TRADEGRP.CODE) LEFT OUTER JOIN PURTERMMAIN PURCHASETERM ON (PURTERMCODE = PURCHASETERM.CODE) LEFT OUTER JOIN ADMCURRENCY CURRENCY ON (DOC_HEADER.ADMCURRENCY_CODE = CURRENCY.CODE) LEFT OUTER JOIN INVGATEIN GATEENTRY ON (INVGATEIN_CODE = GATEENTRY.CODE) LEFT OUTER JOIN INVLGTNOTE LOGISTIC_DIRECT ON (DOC_HEADER.LGTCODE = LOGISTIC_DIRECT.LGTCODE) INNER JOIN HRDEMP CREATEDBY_USER ON (DOC_HEADER.ECODE = CREATEDBY_USER.ECODE) INNER JOIN HRDEMP MODIFIEDBY_USER ON (DOC_HEADER.LAST_ACCESS_ECODE = MODIFIEDBY_USER.ECODE) LEFT OUTER JOIN HRDEMP AUTHBY_USER ON (AUTH_ECODE = AUTHBY_USER.ECODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS CROSS JOIN INVLGTNOTE LOGISTIC_VIA_GATEENTRY WHERE ( (REFCODE::BIGINT = GRCCODE) AND (coalesce (GATEENTRY.LGTCODE, -10) = (LOGISTIC_VIA_GATEENTRY.LGTCODE ))) AND (EVENT_ID = ''HOGRC'')');
INSERT INTO gds2_event_template_md VALUES ('PURCHASEORDER_01', 'PURCHASEORDER', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE::BIGINT as REFCODE , REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN PURORDMAIN DOC_HEADER ON (REFCODE::BIGINT = ORDCODE) INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE = OWNER_SITE.CODE) LEFT OUTER JOIN FINSL VENDOR ON (PCODE = VENDOR.SLCODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) LEFT OUTER JOIN FINSL TRANSPORTER ON (DOC_HEADER.TRPCODE = TRANSPORTER.SLCODE) LEFT OUTER JOIN FINTRADEGRP TRADEGRP ON (DOC_HEADER.FINTRADEGRP_CODE = TRADEGRP.CODE) LEFT OUTER JOIN PURTERMMAIN PURCHASETERM ON (PURTERMCODE = PURCHASETERM.CODE) LEFT OUTER JOIN ADMCURRENCY CURRENCY ON (DOC_HEADER.ADMCURRENCY_CODE = CURRENCY.CODE) INNER JOIN HRDEMP CREATEDBY ON (DOC_HEADER.ECODE = CREATEDBY.ECODE) LEFT OUTER JOIN HRDEMP MODIFIEDBY ON (LAST_ACCESS_ECODE = MODIFIEDBY.ECODE) LEFT OUTER JOIN HRDEMP MERCHENDISER ON (MRCHNDSRCODE = MERCHENDISER.ECODE) WHERE (EVENT_ID = ''PURCHASEORDER'') AND (AUTHORCODE IS NOT NULL)');
INSERT INTO gds2_event_template_md VALUES ('TENDER_01', 'tender.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, TENDER_MASTER DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('PURCHASEORDERCANCEL_01', 'PURCHASEORDERCANCEL', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE::BIGINT as REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS INNER JOIN PURORDCNLMAIN DOC_HEADER ON (REFCODE::BIGINT = CNLCODE) INNER JOIN ADMSITE OWNER_SITE ON (ADMSITE_CODE = CODE) INNER JOIN HRDEMP CREATEDBY_USER ON (DOC_HEADER.ECODE = CREATEDBY_USER.ECODE) LEFT OUTER JOIN HRDEMP MODIFIEDBY_USER ON (LAST_ACCESS_ECODE = MODIFIEDBY_USER.ECODE) WHERE EVENT_ID = ''PURCHASEORDERCANCEL''');
INSERT INTO gds2_event_template_md VALUES ('ADMGSTIN_01', 'admin.gstin.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, ADMGSTIN DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('CHANNEL_01', 'CHANNEL', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, FINSL DOC_HEADER, ADMCLS CLASS WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.SLCODE AND DOC_HEADER.CLSCODE = CLASS.CLSCODE');
INSERT INTO gds2_event_template_md VALUES ('TRANSPORTER_01', 'TRANSPORTER', '', 'SELECT ID, SUBSCR_ID, EVENT_ID, REFCODE::BIGINT as REFCODE, REFCODE BO_REFCODE, RETRY_COUNT, EVENT_TIME, SESSION_ID, CUSTOM_ORDER_SEQ, GDS2_EVENT_TRACK_ID, FETCH_SEQ FROM FINSL DOC_HEADER LEFT OUTER JOIN ADMCMPTAX TAXREGION ON (DOC_HEADER.ADMCMPTAX_CODE = TAXREGION.CODE) LEFT OUTER JOIN FINSL AGENT ON (DOC_HEADER.AGCODE = AGENT.SLCODE) LEFT OUTER JOIN ADMCITY BILLING_CITY ON (DOC_HEADER.BCTNAME = BILLING_CITY.CTNAME) LEFT OUTER JOIN ADMCITY SHIPPING_CITY ON (DOC_HEADER.BCTNAME = SHIPPING_CITY.CTNAME) INNER JOIN ADMCLS SL_CLASS ON (DOC_HEADER.CLSCODE = SL_CLASS.CLSCODE) CROSS JOIN GDS2_EVENT_QUEUE EVENTS WHERE REFCODE::BIGINT = DOC_HEADER.SLCODE');
INSERT INTO gds2_event_template_md VALUES ('EXPENSE_01', 'expense.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, EXPENSE_MASTER DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CODE');
INSERT INTO gds2_event_template_md VALUES ('PRICELIST_01', 'snd.pricelist.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, SALPRICELISTMAIN DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.PRICELISTCODE');
INSERT INTO gds2_event_template_md VALUES ('INVOICE_CONSIGNMENT_01', 'retail.invoice.consignment.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, SALCSMAIN DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.CSCODE');
INSERT INTO gds2_event_template_md VALUES ('INVOICE_OUTRIGHT_01', 'retail.invoice.outright.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, SALSSMAIN DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.SSCODE');
INSERT INTO gds2_event_template_md VALUES ('CONVERSION_PRODUCTION_01', 'inventory.conversion.production.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, PRDORD DOC_HEADER, PRDPR PROCESS WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.ORDCODE AND DOC_HEADER.PRCODE = PROCESS.PRCODE AND PRTYPE = ''P''');
INSERT INTO gds2_event_template_md VALUES ('CONVERSION_SPLIT_01', 'inventory.conversion.split.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, PRDORD DOC_HEADER, PRDPR PROCESS WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.ORDCODE AND DOC_HEADER.PRCODE = PROCESS.PRCODE AND PRTYPE = ''H''');
INSERT INTO gds2_event_template_md VALUES ('CONVERSION_BUNDLE_01', 'inventory.conversion.bundle.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, PRDORD DOC_HEADER, PRDPR PROCESS WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.ORDCODE AND DOC_HEADER.PRCODE = PROCESS.PRCODE AND PRTYPE = ''C''');
INSERT INTO gds2_event_template_md VALUES ('HOGRT_01', 'procurement.grt.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, INVGRTMAIN DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.GRTCODE');
INSERT INTO gds2_event_template_md VALUES ('HOGRC_02', 'procurement.grc.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, INVGRCMAIN DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.GRCCODE');
INSERT INTO gds2_event_template_md VALUES ('ARTICLE_DELETE_01', 'article.deleted', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS WHERE EVENTS.EVENT_ID = ''article.deleted''');
INSERT INTO gds2_event_template_md VALUES ('INVGROUP_DELETE_01', 'inventorygroup.deleted', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS WHERE EVENTS.EVENT_ID = ''inventorygroup.deleted''');
INSERT INTO gds2_event_template_md VALUES ('SITETOSITETRANSFER_02', 'pos.goodsreturn.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQFROM GDS2_EVENT_QUEUE EVENTS, PSITE_GRT DOC_HEADER, ADMSITE DOC_SITEWHERE EVENTS.REFCODE = DOC_HEADER.CODEAND DOC_HEADER.ADMSITE_CODE = DOC_SITE.CODE');
INSERT INTO gds2_event_template_md VALUES ('SNDINVOICE_02', 'snd.invoice.added', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, SALINVMAIN DOC_HEADER, ADMSITE DOC_SITE WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.INVCODE AND DOC_HEADER.ADMSITE_CODE = DOC_SITE.CODE AND DOC_HEADER.RELEASE_STATUS = ''P''');
INSERT INTO gds2_event_template_md VALUES ('INVENTORYGROUP_01', 'inventorygroup.added', '', 'SELECT distinct EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE::BIGINT as REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.FETCH_SEQ FROM GDS2_EVENT_QUEUE EVENTS, INVGRP DOC_HEADER WHERE EVENTS.REFCODE::BIGINT = DOC_HEADER.GRPCODE');
INSERT INTO gds2_event_template_md VALUES ('INVENTORY_SITE_FULL_01', 'site.inventory.allitem.refresh', '', 'SELECT EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE BO_REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.SITECODE, DOC_HEADER.ICODE, SUM (DOC_HEADER.CLOSINGSTOCKQTY) CLOSINGSTOCKQTY, SUM (DOC_HEADER.CLOSINGSTOCKAMOUNT) CLOSINGSTOCKAMOUNT, SUM (DOC_HEADER.UNSETTLESALEQTY) UNSETTLESALEQTY, MAX (LASTSTKUPDTIME) LASTMODIFIEDON, MIN (BATCHSERIAL.EXP_DATE) MINEXPDATE, MAX (BATCHSERIAL.EXP_DATE) MAXEXPDATE FROM GDS2_EVENT_QUEUE EVENTS  INNER JOIN V_GDS2_REALTIMESTOCK DOC_HEADER ON EVENTS.REFCODE = DOC_HEADER.SITECODE::TEXT INNER JOIN ADMSITE SITE ON DOC_HEADER.SITECODE = SITE.CODE LEFT JOIN INVBATCH_SERIAL BATCHSERIAL ON DOC_HEADER.INVBATCH_SERIAL_CODE = BATCHSERIAL.CODE WHERE ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NULL OR DOC_HEADER.INVBATCH_SERIAL_CODE = ''-99999'' OR ( DOC_HEADER.INVBATCH_SERIAL_CODE IS NOT NULL AND BATCHSERIAL.EXP_DATE >= CURRENT_DATE))GROUP BY EVENTS.ID, EVENTS.SUBSCR_ID, EVENTS.EVENT_ID, EVENTS.REFCODE, EVENTS.REFCODE, EVENTS.RETRY_COUNT, EVENTS.EVENT_TIME, EVENTS.SESSION_ID, EVENTS.CUSTOM_ORDER_SEQ, EVENTS.GDS2_EVENT_TRACK_ID, EVENTS.FETCH_SEQ, DOC_HEADER.SITECODE, DOC_HEADER.ICODE');

--COlumn Modification
DROP VIEW IF EXISTS GINVIEW.LV_AGENT;
DROP VIEW IF EXISTS GINVIEW.LV_ARAP_SUB_LEDGER;
DROP VIEW IF EXISTS GINVIEW.LV_EWAYBILL;
DROP VIEW IF EXISTS GINVIEW.SO_TO_PRI;
DROP VIEW IF EXISTS GINVIEW.LV_CUSTOMER_SUPPLIER;
DROP VIEW IF EXISTS GINVIEW.LV_INTER_STK_TRANFER;
DROP VIEW IF EXISTS GINVIEW.LV_INTER_STK_TRANFER_BATCH;
DROP VIEW IF EXISTS GINVIEW.LV_JOBBER;
DROP VIEW IF EXISTS GINVIEW.LV_TRANSPORTER;
DROP VIEW IF EXISTS GINVIEW.LV_VENDOR_ITEM;											   
				 
								 

				   
ALTER TABLE finsl
RENAME COLUMN "LIMIT" to "limit";

ALTER TABLE mailjob
RENAME COLUMN "TO" to "to";

ALTER TABLE mailbox
RENAME COLUMN "TO" to "to";


CREATE OR REPLACE VIEW ginview.lv_jobber AS
 SELECT s.slcode AS uk,
    s.abbre AS alias,
    tax.name AS tax_region,
    cur.name AS currency,
    ag.slname AS sales_agent_name,
    s.agrate AS agency_commission_rate,
    s.baddr AS billing_address,
    s.bankaccountno AS bank_account_no,
    s.bankifccode AS bank_ifsc_code,
    s.bankmicrcode AS bank_micr_code,
    s.bankname AS bank_name,
    s.bankrtgscode AS bank_rtgs_code,
    s.bcp AS billing_contact_person,
    s.bctname AS billing_city,
    bct.stname AS billing_state,
    bct.dist AS billing_district,
    bct.zone AS billing_zone,
    s.bemail AS billing_email1,
    s.bemail2 AS billing_email2,
    s.bfx1 AS billing_fax,
    s.bfx2 AS billing_mobile,
    s.bph1 AS billing_office_phone1,
    s.bph2 AS billing_office_phone2,
    s.bph3 AS billing_office_phone3,
    s.bph4 AS billing_residence_phone,
    s.bpin AS billing_pincode,
    s.brand AS product_brand_name,
    s.bwebsite AS billing_website,
    initcap(
        CASE
            WHEN (COALESCE(s.cash_discount_applicable, 'N'::bpchar) = 'Y'::bpchar) THEN 'YES'::text
            WHEN (COALESCE(s.cash_discount_applicable, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS cash_discount_applicable,
    s.cash_discount_percentage,
    s.cash_discount_period,
    s.chqlabel AS bank_cheque_label,
    s.cinno AS cin_no,
    cls.clsname AS class_name,
    initcap(
        CASE
            WHEN (cls.clstype = 'C'::bpchar) THEN 'CUSTOMER'::text
            WHEN (cls.clstype = 'S'::bpchar) THEN 'SUPPLIER'::text
            WHEN (cls.clstype = 'J'::bpchar) THEN 'JOBBER'::text
            WHEN (cls.clstype = 'A'::bpchar) THEN 'AGENT'::text
            WHEN (cls.clstype = 'T'::bpchar) THEN 'TRANSPORTER'::text
            WHEN (cls.clstype = 'E'::bpchar) THEN 'EMPLOYEE'::text
            WHEN (cls.clstype = 'D'::bpchar) THEN 'TDS AGENCY'::text
            WHEN (cls.clstype = 'H'::bpchar) THEN 'CHANNEL'::text
            WHEN (cls.clstype = 'O'::bpchar) THEN 'OTHERS'::text
            ELSE NULL::text
        END) AS class_type,
    initcap(
        CASE
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'PRO'::bpchar) THEN 'PROPRIETORSHIP'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'PAR'::bpchar) THEN 'PARTNERSHIP'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'PRI'::bpchar) THEN 'PRIVATE LIMITED'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'LIM'::bpchar) THEN 'LIMITED'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'HUF'::bpchar) THEN 'HUF'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'COO'::bpchar) THEN 'CO-OPERATIVE'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'OTH'::bpchar) THEN 'OTHERS'::text
            ELSE NULL::text
        END) AS company_type,
    tl.glname AS transfer_in_ledger,
    cl.glname AS consignment_sales_ledger,
    sl.slname AS consignment_sales_sub_ledger,
    tisl.slname AS transfer_in_sub_ledger,
    tol.glname AS transfer_out_ledger,
    tsl.slname AS transfer_out_sub_ledger,
    s.cramt AS credit_limit,
    cr.crname AS credit_rating,
    s.crdays AS credit_days,
    s.croverdueamt AS credit_overdue_amount,
    s.croverduedays AS credit_max_overdue_days,
    s.crtolerance AS credit_tolerance_percentage,
    s.cstdate AS cst_date,
    s.cstno AS cst_no,
    initcap(
        CASE
            WHEN (COALESCE(s.cvrule, 'N'::bpchar) = 'NONE'::bpchar) THEN 'L'::text
            WHEN (COALESCE(s.cvrule, 'N'::bpchar) = 'CREDIT LIMIT'::bpchar) THEN 'O'::text
            WHEN (COALESCE(s.cvrule, 'N'::bpchar) = 'OVERDUE'::bpchar) THEN 'B'::text
            ELSE 'CREDIT LIMIT AND OVERDUE'::text
        END) AS credit_verification_rule,
    s.default_markup AS markup_on_rsp,
    s.default_markup_wsp AS markup_on_wsp,
        CASE
            WHEN (COALESCE(s.due_date_basis, 'E'::bpchar) = 'E'::bpchar) THEN 'ENTRY DATE'::text
            WHEN (COALESCE(s.due_date_basis, 'E'::bpchar) = 'D'::bpchar) THEN 'DOCUMENT DATE'::text
            ELSE NULL::text
        END AS due_date_basis,
    s.exciseno AS excise_regd_no,
    s.excise_date AS excise_regd_date,
    initcap(
        CASE
            WHEN (COALESCE(s.ext, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            WHEN (COALESCE(s.ext, 'N'::bpchar) = 'Y'::bpchar) THEN 'YES'::text
            ELSE NULL::text
        END) AS extinct,
    gr.name AS purchase_trade_group,
    initcap(
        CASE
            WHEN (s.gatein_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.gatein_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS gate_entry_applicable,
    s.glcode AS arap_glcode,
    gl.glname AS arap_ledger,
        CASE
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'SMA'::bpchar) THEN 'SMALL SCALE'::text
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'LRG'::bpchar) THEN 'LARGE SCALE'::text
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'GOV'::bpchar) THEN 'GOVERNMENT'::text
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'CON'::bpchar) THEN 'CONTRACTOR'::text
            ELSE NULL::text
        END AS industry_type,
    s.intrate AS credit_interest_rate,
    initcap(
        CASE
            WHEN (s.lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.lgt_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS inward_logistic_applicable,
        CASE
            WHEN (COALESCE(s."limit", 'U'::bpchar) = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (COALESCE(s."limit", 'U'::bpchar) = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (COALESCE(s."limit", 'U'::bpchar) = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS markup_on_rsp_limit,
        CASE
            WHEN (COALESCE(s.limit_wsp, 'U'::bpchar) = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (COALESCE(s.limit_wsp, 'U'::bpchar) = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (COALESCE(s.limit_wsp, 'U'::bpchar) = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS markup_on_wsp_limit,
    s.lstdate AS vat_regd_date,
    s.lstno AS vat_regd_no,
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.markup_selling_limit = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS purchase_price_limit,
    s.markup_selling_price AS purchase_price_factor,
    s.markup_selling_round_off AS purchase_price_roundoff,
    s.microno AS mse_redg_no,
    initcap(
        CASE
            WHEN (s.out_lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_lgt_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_logistic_applicable,
    initcap(
        CASE
            WHEN (s.out_permit_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_permit_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_permit_applicable,
    s.pan,
    initcap(
        CASE
            WHEN (s.permit_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.permit_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS inward_permit_applicable,
    s.prd_max_days AS production_max_overdue_days,
        CASE
            WHEN (COALESCE(s.prd_overdue_action, 'N'::bpchar) = 'O'::bpchar) THEN 'RESTRICT ORDER'::text
            ELSE 'NO RESTRICTION'::text
        END AS production_overdue_action,
    pri.pricelistname AS sale_price_list,
    initcap(((((
        CASE
            WHEN (COALESCE(s.markup_selling_price, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE ((s.markup_selling_price)::text || '% of '::text)
        END ||
        CASE
            WHEN (s.pricetype = 'M'::bpchar) THEN 'RSP'::text
            WHEN (s.pricetype = 'W'::bpchar) THEN 'WSP'::text
            WHEN (s.pricetype = 'C'::bpchar) THEN 'STANDARD RATE'::text
            WHEN (s.pricetype = 'L'::bpchar) THEN 'MRP'::text
            WHEN (s.pricetype = 'R'::bpchar) THEN 'EFFECTIVE RATE (LAST LANDING COST)'::text
            WHEN (s.pricetype = 'B'::bpchar) THEN 'BASIC RATE (LAST PURCHASE)'::text
            ELSE NULL::text
        END) ||
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN ' (UPPER ROUND '::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN ' (LOWER ROUND '::text
            ELSE ' (ROUND '::text
        END) ||
        CASE
            WHEN (COALESCE(s.markup_selling_round_off, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE ('UPTO '::text || (s.markup_selling_round_off)::text)
        END) || ')'::text)) AS purchase_price_type,
    s.product AS nature_of_product,
    pgl.glname AS purchase_ledger,
    rgl.glname AS purchase_return_ledger,
    rsl.slname AS purchase_return_sub_ledger,
    psl.slname AS purchase_sub_ledger,
    pf.formname AS purchase_form,
    ptr.name AS purchase_term,
    s.pur_delivery_buffer_days AS order_delivery_buffer_days,
    s.pur_duedays AS order_delivery_due_days,
    initcap(
        CASE
            WHEN (COALESCE(s.pur_price_chart_appl, 'N'::bpchar) = 'Y'::bpchar) THEN 'YES'::text
            WHEN (COALESCE(s.pur_price_chart_appl, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS purchase_price_chart_appl,
    s.rem AS remarks,
    s.round_off_markup AS markup_on_rsp_roundoff,
    s.round_off_markup_wsp AS markup_on_wsp_roundoff,
    s.saddr AS shipping_address,
    sgl.glname AS sales_ledger,
    rtl.glname AS sales_return_ledger,
    srsl.slname AS sales_return_sub_ledger,
    ssl.slname AS sales_sub_ledger,
    initcap(
        CASE
            WHEN (COALESCE(s.saletype, 'C'::bpchar) = 'C'::bpchar) THEN 'CONSIGNMENT'::text
            WHEN (COALESCE(s.saletype, 'C'::bpchar) = 'O'::bpchar) THEN 'OUTRIGHT'::text
            ELSE NULL::text
        END) AS sale_type,
    initcap(
        CASE
            WHEN (COALESCE(s.sale_post_method, 'I'::bpchar) = 'I'::bpchar) THEN 'TAX INCLUSIVE'::text
            WHEN (COALESCE(s.sale_post_method, 'I'::bpchar) = 'E'::bpchar) THEN 'TAX EXCLUSIVE'::text
            ELSE NULL::text
        END) AS sale_posting_method,
    sf.formname AS sale_form,
    str.saltermname AS sale_term,
    ftg.name AS sale_trade_group,
    s.scp AS shipping_contact_person,
    s.sctname AS shipping_city,
    sct.stname AS shipping_state,
    sct.dist AS shipping_district,
    sct.zone AS shipping_zone,
    s.semail AS shipping_email1,
    s.semail2 AS shipping_email2,
    s.servicetaxcategor AS service_tax_category,
    s.servicetaxdate AS service_tax_regd_date,
    s.servicetaxno AS service_tax_regd_no,
    s.sfx1 AS shipping_fax,
    s.sfx2 AS shipping_mobile,
    initcap(
        CASE
            WHEN (s.shipment_tracking_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.shipment_tracking_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS shipment_tracking_applicable,
    s.slcode AS code,
    s.slid AS identity_no,
    s.slname AS name,
    s.slowner AS company_director_name,
    s.sph1 AS shipping_office_phone1,
    s.sph2 AS shipping_office_phone2,
    s.sph3 AS shipping_office_phone3,
    s.sph4 AS shipping_residence_phone,
    s.spin AS shipping_pincode,
    s.ssino AS ssi_regd_no,
    s.swebsite AS shipping_website,
    tds.tdssrcname AS tds_source,
    initcap(
        CASE
            WHEN (COALESCE(s.tds_app, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            ELSE 'YES'::text
        END) AS tds_applicable,
    tdl.glname AS transit_diff_ledger,
    tsdl.slname AS transit_diff_sub_ledger,
    trl.glname AS transit_ledger,
    trsl.slname AS transit_sub_ledger,
    tp.slname AS transporter,
    vel.glname AS vat_expense_ledger,
    ves.slname AS vat_expense_sub_ledger,
    initcap(
        CASE
            WHEN (s.whether_consignment = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS consignment_purchase_app,
    gst.name AS gst_category,
    s.cp_gstin_no AS gst_identification_no,
    s.cp_gstin_date AS gst_registration_date,
    s.cp_gstin_state_code AS gst_state_code,
    gte.name AS gst_state_name,
    NULL::text AS email,
    bct.class AS billing_city_class,
    sct.class AS shipping_city_class,
    s.transporter_id
   FROM (((((((((((((((((((((((((((((((((((((((main.finsl s
     LEFT JOIN main.finsl ag ON ((s.agcode = ag.slcode)))
     LEFT JOIN main.finsl sl ON ((s.consignment_sales_slcode = sl.slcode)))
     LEFT JOIN main.finsl tsl ON ((s.consignment_trnsfr_slcode = tsl.slcode)))
     LEFT JOIN main.finsl psl ON ((s.purchase_slcode = psl.slcode)))
     LEFT JOIN main.finsl rsl ON ((s.purchase_return_slcode = rsl.slcode)))
     LEFT JOIN main.finsl ssl ON ((s.sales_slcode = ssl.slcode)))
     LEFT JOIN main.finsl tsdl ON ((s.transitdiff_slcode = tsdl.slcode)))
     LEFT JOIN main.finsl trsl ON ((s.transit_slcode = trsl.slcode)))
     LEFT JOIN main.finsl tp ON ((s.trpcode = tp.slcode)))
     LEFT JOIN main.finsl ves ON ((s.vatexp_slcode = ves.slcode)))
     LEFT JOIN main.finsl tisl ON ((s.consignment_slcode = tisl.slcode)))
     LEFT JOIN main.finsl srsl ON ((s.sales_return_slcode = srsl.slcode)))
     LEFT JOIN main.fingl tl ON ((s.consignment_glcode = tl.glcode)))
     LEFT JOIN main.fingl cl ON ((s.consignment_sales_glcode = cl.glcode)))
     LEFT JOIN main.fingl tol ON ((s.consignment_trnsfr_glcode = tol.glcode)))
     LEFT JOIN main.fingl gl ON ((s.glcode = gl.glcode)))
     LEFT JOIN main.fingl pgl ON ((s.purchase_glcode = pgl.glcode)))
     LEFT JOIN main.fingl rgl ON ((s.purchase_return_glcode = rgl.glcode)))
     LEFT JOIN main.fingl sgl ON ((s.sales_glcode = sgl.glcode)))
     LEFT JOIN main.fingl rtl ON ((s.sales_return_glcode = rtl.glcode)))
     LEFT JOIN main.fingl tdl ON ((s.transitdiff_glcode = tdl.glcode)))
     LEFT JOIN main.fingl trl ON ((s.transit_glcode = trl.glcode)))
     LEFT JOIN main.fingl vel ON ((s.vatexp_glcode = vel.glcode)))
     JOIN main.admcls cls ON ((s.clscode = cls.clscode)))
     LEFT JOIN main.admcity bct ON (((s.bctname)::text = (bct.ctname)::text)))
     LEFT JOIN main.admcity sct ON (((s.sctname)::text = (sct.ctname)::text)))
     LEFT JOIN main.admcmptax tax ON ((s.admcmptax_code = tax.code)))
     LEFT JOIN main.admcurrency cur ON ((s.admcurrency_code = cur.code)))
     LEFT JOIN main.salcreditrating cr ON ((s.crcode = cr.crcode)))
     LEFT JOIN main.fintradegrp gr ON ((s.fintradegrp_code = gr.code)))
     LEFT JOIN main.salpricelistmain pri ON ((s.pricelistcode = pri.pricelistcode)))
     LEFT JOIN main.finform pf ON ((s.purformcode = pf.formcode)))
     LEFT JOIN main.finform sf ON ((s.salformcode = sf.formcode)))
     LEFT JOIN main.purtermmain ptr ON ((s.purtermmain_code = ptr.code)))
     LEFT JOIN main.saltermmain str ON ((s.saltermcode = str.saltermcode)))
     LEFT JOIN main.fintradegrp ftg ON ((s.saltradegrp_code = ftg.code)))
     LEFT JOIN main.fintdssrc tds ON ((s.tdssrccode = tds.tdssrccode)))
     JOIN main.admgstcategory gst ON ((s.cp_category_code = gst.code)))
     LEFT JOIN main.admgststate gte ON ((s.cp_gstin_state_code = gte.code)))
  WHERE (cls.clstype = 'J'::bpchar);


ALTER VIEW ginview.lv_jobber OWNER TO gslpgadmin;
CREATE OR REPLACE VIEW ginview.lv_customer_supplier AS
 SELECT s.slcode AS uk,
    s.abbre AS alias,
    cur.name AS currency,
    COALESCE(ag.slname, 'No Agent'::character varying) AS sales_agent_name,
    s.agrate AS agency_commission_rate,
    s.baddr AS billing_address,
    s.bankaccountno AS bank_account_no,
    s.bankifccode AS bank_ifsc_code,
    s.bankmicrcode AS bank_micr_code,
    s.bankname AS bank_name,
    s.bankrtgscode AS bank_rtgs_code,
    s.bcp AS billing_contact_person,
    s.bctname AS billing_city,
    bct.stname AS billing_state,
    bct.dist AS billing_district,
    bct.zone AS billing_zone,
    s.bemail AS billing_email1,
    s.bemail2 AS billing_email2,
    s.bfx1 AS billing_fax,
    s.bfx2 AS billing_mobile,
    s.bph1 AS billing_office_phone1,
    s.bph2 AS billing_office_phone2,
    s.bph3 AS billing_office_phone3,
    s.bph4 AS billing_residence_phone,
    s.bpin AS billing_pincode,
    s.brand AS product_brand_name,
    s.bwebsite AS billing_website,
    initcap(
        CASE
            WHEN (s.cash_discount_applicable = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.cash_discount_applicable = 'N'::bpchar) THEN 'NO'::text
            ELSE 'NO'::text
        END) AS cash_discount_applicable,
    s.cash_discount_percentage,
    s.cash_discount_period,
    s.chqlabel AS bank_cheque_label,
    s.cinno AS cin_no,
    cls.clsname AS class_name,
    initcap(
        CASE
            WHEN (cls.clstype = 'C'::bpchar) THEN 'CUSTOMER'::text
            WHEN (cls.clstype = 'S'::bpchar) THEN 'SUPPLIER'::text
            WHEN (cls.clstype = 'J'::bpchar) THEN 'JOBBER'::text
            WHEN (cls.clstype = 'A'::bpchar) THEN 'AGENT'::text
            WHEN (cls.clstype = 'T'::bpchar) THEN 'TRANSPORTER'::text
            WHEN (cls.clstype = 'E'::bpchar) THEN 'EMPLOYEE'::text
            WHEN (cls.clstype = 'D'::bpchar) THEN 'TDS AGENCY'::text
            WHEN (cls.clstype = 'H'::bpchar) THEN 'CHANNEL'::text
            WHEN (cls.clstype = 'O'::bpchar) THEN 'OTHERS'::text
            ELSE NULL::text
        END) AS class_type,
    initcap(
        CASE
            WHEN (s.companytype = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (s.companytype = 'PRO'::bpchar) THEN 'PROPRIETORSHIP'::text
            WHEN (s.companytype = 'PAR'::bpchar) THEN 'PARTNERSHIP'::text
            WHEN (s.companytype = 'PRI'::bpchar) THEN 'PRIVATE LIMITED'::text
            WHEN (s.companytype = 'LIM'::bpchar) THEN 'LIMITED'::text
            WHEN (s.companytype = 'HUF'::bpchar) THEN 'HUF'::text
            WHEN (s.companytype = 'COO'::bpchar) THEN 'CO-OPERATIVE'::text
            ELSE 'OTHERS'::text
        END) AS company_type,
    s.cramt AS credit_limit,
    cr.crname AS credit_rating,
    s.crdays AS credit_days,
    s.croverdueamt AS credit_overdue_amount,
    s.croverduedays AS credit_max_overdue_days,
    s.crtolerance AS credit_tolerance_percentage,
    s.cstdate AS cst_date,
    s.cstno AS cst_no,
    initcap(
        CASE
            WHEN (s.cvrule = 'N'::bpchar) THEN 'NONE'::text
            WHEN (s.cvrule = 'L'::bpchar) THEN 'CREDIT LIMIT'::text
            WHEN (s.cvrule = 'O'::bpchar) THEN 'OVERDUE'::text
            WHEN (s.cvrule = 'B'::bpchar) THEN 'CREDIT LIMIT AND OVERDUE'::text
            ELSE 'NONE'::text
        END) AS credit_verification_rule,
    s.default_markup AS markup_on_rsp,
    s.default_markup_wsp AS markup_on_wsp,
        CASE
            WHEN (s.due_date_basis = 'E'::bpchar) THEN 'ENTRY DATE'::text
            WHEN (s.due_date_basis = 'D'::bpchar) THEN 'DOCUMENT DATE'::text
            ELSE 'ENTRY DATE'::text
        END AS due_date_basis,
    s.exciseno AS excise_regd_no,
    s.excise_date AS excise_regd_date,
    initcap(
        CASE
            WHEN (s.ext = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.ext = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS extinct,
    gr.name AS purchase_trade_group,
    initcap(
        CASE
            WHEN (s.gatein_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.gatein_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS gate_entry_applicable,
    s.glcode AS arap_glcode,
    gl.glname AS arap_ledger,
        CASE
            WHEN (s.industrytype = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (s.industrytype = 'SMA'::bpchar) THEN 'SMALL SCALE'::text
            WHEN (s.industrytype = 'LRG'::bpchar) THEN 'LARGE SCALE'::text
            WHEN (s.industrytype = 'GOV'::bpchar) THEN 'GOVERNMENT'::text
            WHEN (s.industrytype = 'CON'::bpchar) THEN 'CONTRACTOR'::text
            ELSE 'OTHERS'::text
        END AS industry_type,
    s.intrate AS credit_interest_rate,
    initcap(
        CASE
            WHEN (s.lgt_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS inward_logistic_applicable,
        CASE
            WHEN (s."limit" = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s."limit" = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s."limit" = 'L'::bpchar) THEN 'LOWER'::text
            ELSE 'UPPER'::text
        END AS markup_on_rsp_limit,
        CASE
            WHEN (s.limit_wsp = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.limit_wsp = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.limit_wsp = 'L'::bpchar) THEN 'LOWER'::text
            ELSE 'UPPER'::text
        END AS markup_on_wsp_limit,
    s.lstdate AS vat_regd_date,
    s.lstno AS vat_regd_no,
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.markup_selling_limit = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS purchase_price_limit,
    s.markup_selling_price AS purchase_price_factor,
    s.markup_selling_round_off AS purchase_price_roundoff,
    s.microno AS mse_redg_no,
    initcap(
        CASE
            WHEN (s.out_lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_lgt_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_logistic_applicable,
    initcap(
        CASE
            WHEN (s.out_permit_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_permit_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_permit_applicable,
    s.pan,
    initcap(
        CASE
            WHEN (s.permit_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.permit_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS inward_permit_applicable,
    s.prd_max_days AS production_max_overdue_days,
        CASE
            WHEN (s.prd_overdue_action = 'O'::bpchar) THEN 'RESTRICT ORDER'::text
            WHEN (s.prd_overdue_action = 'N'::bpchar) THEN 'NO RESTRICTION'::text
            ELSE 'NO RESTRICTION'::text
        END AS production_overdue_action,
    initcap((((
        CASE
            WHEN (COALESCE(s.markup_selling_price, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE (((s.markup_selling_price)::character varying)::text || '% of '::text)
        END ||
        CASE
            WHEN (s.pricetype = 'M'::bpchar) THEN 'RSP'::text
            WHEN (s.pricetype = 'W'::bpchar) THEN 'WSP'::text
            WHEN (s.pricetype = 'C'::bpchar) THEN 'STANDARD RATE'::text
            WHEN (s.pricetype = 'L'::bpchar) THEN 'MRP'::text
            WHEN (s.pricetype = 'R'::bpchar) THEN 'EFFECTIVE RATE (LAST LANDING COST)'::text
            WHEN (s.pricetype = 'B'::bpchar) THEN 'BASIC RATE (LAST PURCHASE)'::text
            ELSE NULL::text
        END) ||
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN ' (UPPER ROUND ) '::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN ' (LOWER ROUND ) '::text
            ELSE ' (ROUND '::text
        END) ||
        CASE
            WHEN (COALESCE(s.markup_selling_round_off, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE (('UPTO '::text || ((s.markup_selling_round_off)::character varying)::text) || ')'::text)
        END)) AS purchase_price_type,
    s.product AS nature_of_product,
    ptr.name AS purchase_term,
    s.pur_delivery_buffer_days AS order_delivery_buffer_days,
    s.pur_duedays AS order_delivery_due_days,
    initcap(
        CASE
            WHEN (s.pur_price_chart_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.pur_price_chart_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE 'NO'::text
        END) AS purchase_price_chart_appl,
    s.rem AS remarks,
    s.round_off_markup AS markup_on_rsp_roundoff,
    s.round_off_markup_wsp AS markup_on_wsp_roundoff,
    s.saddr AS shipping_address,
    initcap(
        CASE
            WHEN (s.saletype = 'C'::bpchar) THEN 'CONSIGNMENT'::text
            WHEN (s.saletype = 'O'::bpchar) THEN 'OUTRIGHT'::text
            ELSE 'CONSIGNMENT'::text
        END) AS sale_type,
    initcap(
        CASE
            WHEN (s.sale_post_method = 'I'::bpchar) THEN 'TAX INCLUSIVE'::text
            WHEN (s.sale_post_method = 'E'::bpchar) THEN 'TAX EXCLUSIVE'::text
            ELSE 'TAX INCLUSIVE'::text
        END) AS sale_posting_method,
    str.saltermname AS sale_term,
    ftg.name AS sale_trade_group,
    s.scp AS shipping_contact_person,
    s.sctname AS shipping_city,
    sct.stname AS shipping_state,
    sct.dist AS shipping_district,
    sct.zone AS shipping_zone,
    s.semail AS shipping_email1,
    s.semail2 AS shipping_email2,
    s.servicetaxcategor AS service_tax_category,
    s.servicetaxdate AS service_tax_regd_date,
    s.servicetaxno AS service_tax_regd_no,
    s.sfx1 AS shipping_fax,
    s.sfx2 AS shipping_mobile,
    initcap(
        CASE
            WHEN (s.shipment_tracking_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.shipment_tracking_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS shipment_tracking_applicable,
    s.slcode AS code,
    s.slid AS identity_no,
    s.slname AS name,
    s.slowner AS company_director_name,
    s.sph1 AS shipping_office_phone1,
    s.sph2 AS shipping_office_phone2,
    s.sph3 AS shipping_office_phone3,
    s.sph4 AS shipping_residence_phone,
    s.spin AS shipping_pincode,
    s.ssino AS ssi_regd_no,
    s.swebsite AS shipping_website,
    tds.tdssrcname AS tds_source,
    initcap(
        CASE
            WHEN (s.tds_app = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.tds_app = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS tds_applicable,
    tp.slname AS transporter,
    initcap(
        CASE
            WHEN (s.whether_consignment = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS consignment_purchase_app,
    gst.name AS gst_category,
    s.cp_gstin_no AS gst_identification_no,
    s.cp_gstin_date AS gst_registration_date,
    s.cp_gstin_state_code AS gst_state_code,
    gte.name AS gst_state_name,
    NULL::text AS email,
    bct.class AS billing_city_class,
    sct.class AS shipping_city_class,
    s.transporter_id
   FROM (((((((((((((((main.finsl s
     LEFT JOIN main.finsl ag ON ((s.agcode = ag.slcode)))
     LEFT JOIN main.finsl tp ON ((s.trpcode = tp.slcode)))
     LEFT JOIN main.fingl gl ON ((s.glcode = gl.glcode)))
     JOIN main.admcls cls ON ((s.clscode = cls.clscode)))
     LEFT JOIN main.admcity bct ON (((s.bctname)::text = (bct.ctname)::text)))
     LEFT JOIN main.admcity sct ON (((s.sctname)::text = (sct.ctname)::text)))
     LEFT JOIN main.admcurrency cur ON ((s.admcurrency_code = cur.code)))
     LEFT JOIN main.salcreditrating cr ON ((s.crcode = cr.crcode)))
     LEFT JOIN main.fintradegrp gr ON ((s.fintradegrp_code = gr.code)))
     LEFT JOIN main.purtermmain ptr ON ((s.purtermmain_code = ptr.code)))
     LEFT JOIN main.saltermmain str ON ((s.saltermcode = str.saltermcode)))
     LEFT JOIN main.fintradegrp ftg ON ((s.saltradegrp_code = ftg.code)))
     LEFT JOIN main.fintdssrc tds ON ((s.tdssrccode = tds.tdssrccode)))
     JOIN main.admgstcategory gst ON ((s.cp_category_code = gst.code)))
     LEFT JOIN main.admgststate gte ON ((s.cp_gstin_state_code = gte.code)))
  WHERE (cls.clstype <> ALL (ARRAY['D'::bpchar, 'O'::bpchar]));


ALTER VIEW ginview.lv_customer_supplier OWNER TO gslpgadmin;
CREATE OR REPLACE VIEW ginview.lv_ewaybill
 AS
 SELECT fnc_uk() AS uk,
    admsite_code,
    owner_site,
    entry_source,
    supplytype,
    sub_type,
    doc_type,
    doc_no,
    doc_date,
    from_partyname,
    from_gstin,
    from_address1,
    from_address2,
    from_place,
    from_pin_code,
    from_state,
    to_partyname,
    to_gstin,
    to_address1,
    to_address2,
    to_place,
    to_pin_code,
    to_state,
    product,
    description,
    hsn,
    hsn_sac_id,
    unit,
    qty,
    assessable_value,
    cgst_rate,
    sgst_rate,
    igst_rate,
    cess_rate,
    tax_rate,
    cgst_amount,
    sgst_amount,
    igst_amount,
    cess_amount,
    trans_mode,
    distance_in_km,
    trans_name,
    trans_id,
    trans_doc_no,
    trans_date,
    vehicle_no,
    'Regular'::text AS vehicle_type,
    total_invoice_value,
    from_state AS dispatch_state,
    ship_to_state,
    others,
    transaction_type,
    sub_supply_description,
    from_party_email,
    to_party_email,
    ship_to_gstin,
    ship_to_trade_name,
    trans_email,
    ewaybill_no,
    ewaybill_generatedon
   FROM ( SELECT m.admsite_code_owner AS admsite_code,
            st.short_code AS owner_site,
            'Sales Invoice / Transfer Out'::text AS entry_source,
            'Outward'::text AS supplytype,
                CASE
                    WHEN m.saltradegrp_code = 3 THEN 'Export'::text
                    ELSE
                    CASE
                        WHEN m.saltradegrp_code = 4 AND m.cp_gstin_no IS NOT NULL THEN 'For Own Use'::text
                        ELSE 'Supply'::text
                    END
                END AS sub_type,
                CASE
                    WHEN m.saltradegrp_code = 4 AND m.cp_gstin_no IS NOT NULL THEN 'Challan'::text
                    ELSE
                    CASE
                        WHEN m.gstappl = 'Y'::bpchar THEN 'Tax Invoice'::text
                        ELSE 'Bill of Supply'::text
                    END
                END AS doc_type,
            m.scheme_docno AS doc_no,
            m.invdt AS doc_date,
            ou.name AS from_partyname,
            st.gst_identification_no AS from_gstin,
            st.address AS from_address1,
            NULL::text AS from_address2,
            st.city AS from_place,
            st.pincode AS from_pin_code,
            st.gst_state_name AS from_state,
            COALESCE(dt.customer, dt.ou_name) AS to_partyname,
            COALESCE(dt.gst_identification_no, 'URP'::character varying) AS to_gstin,
            dt.address AS to_address1,
            NULL::text AS to_address2,
            dt.city AS to_place,
                CASE
                    WHEN m.saltradegrp_code = 3 THEN '999999'::character varying
                    ELSE dt.pincode
                END AS to_pin_code,
                CASE
                    WHEN m.saltradegrp_code = 3 THEN 'OTHER COUNTRIES'::character varying
                    ELSE COALESCE(dt.gst_state_name, dt.state)
                END AS to_state,
            hsn.description AS product,
            hsn.description,
            hsn.hsn_sac_code AS hsn_sac_id,
            d.hsn_sac_code AS hsn,
            i.uom AS unit,
            sum(d.invqty) AS qty,
            sum(COALESCE(tax.taxable_amount, d.effamt)) AS assessable_value,
            tax.cgst_rate,
            tax.sgst_rate,
            tax.igst_rate,
            tax.cess_rate,
            tax.rate AS tax_rate,
            sum(tax.cgst_amount) AS cgst_amount,
            sum(tax.sgst_amount) AS sgst_amount,
            sum(tax.igst_amount) AS igst_amount,
            sum(tax.cess_amount) AS cess_amount,
            initcap(lgt.war::text) AS trans_mode,
            lgt.distance AS distance_in_km,
            trp.slname AS trans_name,
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN trp.cp_gstin_no
                    ELSE NULL::character varying
                END AS trans_id,
            lgt.docno AS trans_doc_no,
            lgt.docdt AS trans_date,
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN lgt.vehicleno
                    ELSE NULL::character varying
                END AS vehicle_no,
            m.netamt AS total_invoice_value,
                CASE
                    WHEN m.saltradegrp_code = 3 THEN 'OTHER COUNTRIES'::character varying
                    ELSE COALESCE(dt.shipping_gst_state_name, COALESCE(dt.gst_state_name, dt.state))
                END AS ship_to_state,
            chg.chgamt AS others,
                CASE
                    WHEN dt.billing_shipping_same = 'NO'::text THEN 'Bill To - Ship To'::text
                    ELSE 'Regular'::text
                END AS transaction_type,
                CASE
                    WHEN m.saltradegrp_code = 3 THEN 'Export'::text
                    ELSE
                    CASE
                        WHEN m.saltradegrp_code = 4 THEN
                        CASE
                            WHEN m.cp_gstin_no IS NULL THEN 'Supply'::text
                            ELSE 'For own use'::text
                        END
                        ELSE 'Supply'::text
                    END
                END AS sub_supply_description,
            st.email1 AS from_party_email,
            dt.email1 AS to_party_email,
                CASE
                    WHEN dt.billing_shipping_same = 'YES'::text THEN COALESCE(dt.gst_identification_no, 'URP'::character varying)
                    ELSE COALESCE(dt.shipping_gst_identification_no, 'URP'::character varying)
                END AS ship_to_gstin,
                CASE
                    WHEN dt.billing_shipping_same = 'YES'::text THEN COALESCE(dt.ou_name, dt.customer)
                    ELSE COALESCE(dt.shipping_company_name, dt.customer)
                END AS ship_to_trade_name,
            trp.bemail AS trans_email,
            m.ewaybillno AS ewaybill_no,
            m.ewaybillgeneratedon AS ewaybill_generatedon
           FROM salinvmain m
             JOIN salinvdet d ON m.invcode = d.invcode
             JOIN ginview.lv_item i ON d.icode::text = i.item_code::text
             JOIN admou ou ON m.admou_code = ou.code
             JOIN ginview.lv_site st ON m.admsite_code_owner = st.sitecode
             LEFT JOIN ginview.lv_site dt ON m.admsite_code = dt.sitecode
             LEFT JOIN invlgtnote lgt ON m.lgtcode = lgt.lgtcode
             LEFT JOIN finsl trp ON lgt.trpcode = trp.slcode
             JOIN invhsnsacmain hsn ON i.invhsnsacmain_code = hsn.code
             LEFT JOIN ( SELECT sum(COALESCE(chg_1.chgamt, 0::numeric)) AS chgamt,
                    chg_1.invcode
                   FROM salinvchg chg_1
                  WHERE chg_1.operation_level = 'H'::bpchar AND chg_1.istax = 'N'::bpchar
                  GROUP BY chg_1.invcode) chg ON m.invcode = chg.invcode
             LEFT JOIN ( SELECT salinvchg_item.salinvdet_code,
                    salinvchg_item.appamt AS taxable_amount,
                    sum(salinvchg_item.rate) AS rate,
                    sum(
                        CASE
                            WHEN salinvchg_item.gst_component = 'CGST'::bpchar THEN salinvchg_item.rate
                            ELSE 0::numeric
                        END) AS cgst_rate,
                    sum(
                        CASE
                            WHEN salinvchg_item.gst_component = 'CGST'::bpchar THEN salinvchg_item.chgamt
                            ELSE 0::numeric
                        END) AS cgst_amount,
                    sum(
                        CASE
                            WHEN salinvchg_item.gst_component = 'SGST'::bpchar THEN salinvchg_item.rate
                            ELSE 0::numeric
                        END) AS sgst_rate,
                    sum(
                        CASE
                            WHEN salinvchg_item.gst_component = 'SGST'::bpchar THEN salinvchg_item.chgamt
                            ELSE 0::numeric
                        END) AS sgst_amount,
                    sum(
                        CASE
                            WHEN salinvchg_item.gst_component = 'IGST'::bpchar THEN salinvchg_item.rate
                            ELSE 0::numeric
                        END) AS igst_rate,
                    sum(
                        CASE
                            WHEN salinvchg_item.gst_component = 'IGST'::bpchar THEN salinvchg_item.chgamt
                            ELSE 0::numeric
                        END) AS igst_amount,
                    sum(
                        CASE
                            WHEN salinvchg_item.gst_component = 'CESS'::bpchar THEN salinvchg_item.rate
                            ELSE 0::numeric
                        END) AS cess_rate,
                    sum(
                        CASE
                            WHEN salinvchg_item.gst_component = 'CESS'::bpchar THEN salinvchg_item.chgamt
                            ELSE 0::numeric
                        END) AS cess_amount
                   FROM salinvchg_item
                  WHERE salinvchg_item.source = 'G'::bpchar
                  GROUP BY salinvchg_item.salinvdet_code, salinvchg_item.appamt) tax ON d.code = tax.salinvdet_code
          GROUP BY m.admsite_code_owner, st.short_code, (
                CASE
                    WHEN m.saltradegrp_code = 3 THEN 'Export'::text
                    ELSE
                    CASE
                        WHEN m.saltradegrp_code = 4 AND m.cp_gstin_no IS NOT NULL THEN 'For Own Use'::text
                        ELSE 'Supply'::text
                    END
                END), (
                CASE
                    WHEN m.saltradegrp_code = 4 AND m.cp_gstin_no IS NOT NULL THEN 'Challan'::text
                    ELSE
                    CASE
                        WHEN m.gstappl = 'Y'::bpchar THEN 'Tax Invoice'::text
                        ELSE 'Bill of Supply'::text
                    END
                END), m.scheme_docno, m.invdt, ou.name, st.gst_identification_no, st.address, st.city, st.pincode, st.gst_state_name, (COALESCE(dt.customer, dt.ou_name)), (COALESCE(dt.gst_identification_no, 'URP'::character varying)), dt.address, dt.city, (
                CASE
                    WHEN m.saltradegrp_code = 3 THEN '999999'::character varying
                    ELSE dt.pincode
                END), (
                CASE
                    WHEN m.saltradegrp_code = 3 THEN 'OTHER COUNTRIES'::character varying
                    ELSE COALESCE(dt.gst_state_name, dt.state)
                END), hsn.description, hsn.hsn_sac_code, d.hsn_sac_code, i.uom, tax.cgst_rate, tax.sgst_rate, tax.igst_rate, tax.cess_rate, tax.rate, (initcap(lgt.war::text)), lgt.distance, trp.slname, (
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN trp.cp_gstin_no
                    ELSE NULL::character varying
                END), lgt.docno, lgt.docdt, (
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN lgt.vehicleno
                    ELSE NULL::character varying
                END), (
                CASE
                    WHEN m.saltradegrp_code = 3 THEN 'OTHER COUNTRIES'::character varying
                    ELSE COALESCE(dt.shipping_gst_state_name, COALESCE(dt.gst_state_name, dt.state))
                END), m.netamt, chg.chgamt, (
                CASE
                    WHEN dt.billing_shipping_same = 'NO'::text THEN 'Bill To - Ship To'::text
                    ELSE 'Regular'::text
                END), (
                CASE
                    WHEN m.saltradegrp_code = 3 THEN 'Export'::text
                    ELSE
                    CASE
                        WHEN m.saltradegrp_code = 4 THEN
                        CASE
                            WHEN m.cp_gstin_no IS NULL THEN 'Supply'::text
                            ELSE 'For own use'::text
                        END
                        ELSE 'Supply'::text
                    END
                END), st.email1, dt.email1, (
                CASE
                    WHEN dt.billing_shipping_same = 'YES'::text THEN COALESCE(dt.gst_identification_no, 'URP'::character varying)
                    ELSE COALESCE(dt.shipping_gst_identification_no, 'URP'::character varying)
                END), (
                CASE
                    WHEN dt.billing_shipping_same = 'YES'::text THEN COALESCE(dt.ou_name, dt.customer)
                    ELSE COALESCE(dt.shipping_company_name, dt.customer)
                END), trp.bemail, m.ewaybillno, m.ewaybillgeneratedon
        UNION ALL
         SELECT m.admsite_code,
            st.short_code,
            'Purchase Return'::text AS entry_source,
            'Outward'::text AS supplytype,
                CASE
                    WHEN m.fintradegrp_code = 3 THEN 'Export'::text
                    WHEN m.gstappl = 'Y'::bpchar THEN 'Supply'::text
                    ELSE 'Others'::text
                END AS sub_type,
                CASE
                    WHEN m.gstappl = 'Y'::bpchar THEN 'Tax Invoice'::text
                    ELSE 'Others'::text
                END AS doc_type,
            m.scheme_docno AS doc_no,
            m.rtdt AS doc_date,
            ou.name AS from_partyname,
            st.gst_identification_no AS from_gstin,
            st.address AS from_address1,
            NULL::text AS from_address2,
            st.city AS from_place,
            st.pincode AS from_pin_code,
            st.gst_state_name AS from_state,
            dt.name AS to_partyname,
            COALESCE(dt.gst_identification_no, 'URP'::character varying) AS "coalesce",
            dt.billing_address AS to_address1,
            NULL::text AS to_address2,
            dt.billing_city AS to_place,
                CASE
                    WHEN m.fintradegrp_code = 3 THEN '999999'::character varying
                    ELSE dt.billing_pincode
                END AS to_pin_code,
                CASE
                    WHEN m.fintradegrp_code = 3 THEN 'OTHER COUNTRIES'::character varying
                    ELSE COALESCE(dt.gst_state_name, dt.billing_state)
                END AS to_state,
            hsn.description AS product,
            hsn.description,
            hsn.hsn_sac_code AS hsn_sac_id,
            d.hsn_sac_code AS hsn,
            i.uom AS unit,
            sum(d.qty) AS qty,
            sum(COALESCE(tax.taxable_amount, d.netamt)) AS taxable_amount,
            tax.cgst_rate,
            tax.sgst_rate,
            tax.igst_rate,
            tax.cess_rate,
            tax.rate AS tax_rate,
            sum(tax.cgst_amount) AS cgst_amount,
            sum(tax.sgst_amount) AS sgst_amount,
            sum(tax.igst_amount) AS igst_amount,
            sum(tax.cess_amount) AS cess_amount,
            initcap(lgt.war::text) AS trans_mode,
            lgt.distance AS distance_in_km,
            trp.slname AS trans_name,
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN trp.cp_gstin_no
                    ELSE NULL::character varying
                END AS trans_id,
            lgt.docno AS trans_doc_no,
            lgt.docdt AS trans_date,
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN lgt.vehicleno
                    ELSE NULL::character varying
                END AS vehicle_no,
            m.netamt AS total_invoice_value,
                CASE
                    WHEN m.fintradegrp_code = 3 THEN 'OTHER COUNTRIES'::character varying
                    ELSE COALESCE(dt.gst_state_name, dt.billing_state)
                END AS ship_to_state,
            chg.chgamt AS others,
            'Regular'::text AS transaction_type,
                CASE
                    WHEN m.fintradegrp_code = 3 THEN 'Export'::text
                    ELSE
                    CASE
                        WHEN m.gstappl = 'Y'::bpchar THEN
                        CASE
                            WHEN m.doccode IS NULL THEN 'Others'::text
                            ELSE 'Supply'::text
                        END
                        ELSE 'Others'::text
                    END
                END AS sub_supply_description,
            st.email1 AS from_party_email,
            dt.billing_email1 AS to_party_email,
            COALESCE(dt.gst_identification_no, 'URP'::character varying) AS ship_to_gstin,
            ou.name AS ship_to_trade_name,
            trp.bemail AS trans_email,
            m.ewaybillno AS ewaybill_no,
            m.ewaybillgeneratedon AS ewaybill_generatedon
           FROM purrtmain m
             JOIN purrtdet d ON m.rtcode = d.rtcode
             JOIN ginview.lv_item i ON d.icode::text = i.item_code::text
             JOIN admou ou ON m.admou_code = ou.code
             JOIN ginview.lv_site st ON m.admsite_code = st.sitecode
             JOIN ginview.lv_customer_supplier dt ON m.pcode = dt.code
             LEFT JOIN invlgtnote lgt ON m.lgtcode = lgt.lgtcode
             LEFT JOIN finsl trp ON lgt.trpcode = trp.slcode
             JOIN invhsnsacmain hsn ON i.invhsnsacmain_code = hsn.code
             LEFT JOIN ( SELECT purrtchg_item.purrtdet_code,
                    purrtchg_item.appamt AS taxable_amount,
                    sum(purrtchg_item.rate) AS rate,
                    sum(
                        CASE
                            WHEN purrtchg_item.gst_component = 'CGST'::bpchar THEN purrtchg_item.rate
                            ELSE 0::numeric
                        END) AS cgst_rate,
                    sum(
                        CASE
                            WHEN purrtchg_item.gst_component = 'CGST'::bpchar THEN purrtchg_item.chgamt
                            ELSE 0::numeric
                        END) AS cgst_amount,
                    sum(
                        CASE
                            WHEN purrtchg_item.gst_component = 'SGST'::bpchar THEN purrtchg_item.rate
                            ELSE 0::numeric
                        END) AS sgst_rate,
                    sum(
                        CASE
                            WHEN purrtchg_item.gst_component = 'SGST'::bpchar THEN purrtchg_item.chgamt
                            ELSE 0::numeric
                        END) AS sgst_amount,
                    sum(
                        CASE
                            WHEN purrtchg_item.gst_component = 'IGST'::bpchar THEN purrtchg_item.rate
                            ELSE 0::numeric
                        END) AS igst_rate,
                    sum(
                        CASE
                            WHEN purrtchg_item.gst_component = 'IGST'::bpchar THEN purrtchg_item.chgamt
                            ELSE 0::numeric
                        END) AS igst_amount,
                    sum(
                        CASE
                            WHEN purrtchg_item.gst_component = 'CESS'::bpchar THEN purrtchg_item.rate
                            ELSE 0::numeric
                        END) AS cess_rate,
                    sum(
                        CASE
                            WHEN purrtchg_item.gst_component = 'CESS'::bpchar THEN purrtchg_item.chgamt
                            ELSE 0::numeric
                        END) AS cess_amount
                   FROM purrtchg_item
                  WHERE purrtchg_item.source = 'G'::bpchar
                  GROUP BY purrtchg_item.purrtdet_code, purrtchg_item.appamt) tax ON d.code = tax.purrtdet_code
             LEFT JOIN ( SELECT sum(COALESCE(chg_1.chgamt, 0::numeric)) AS chgamt,
                    chg_1.rtcode
                   FROM purrtchg chg_1
                  WHERE chg_1.operation_level = 'H'::bpchar AND chg_1.istax = 'N'::bpchar
                  GROUP BY chg_1.rtcode) chg ON m.rtcode = chg.rtcode
          GROUP BY m.admsite_code, st.short_code, (
                CASE
                    WHEN m.fintradegrp_code = 3 THEN 'Export'::text
                    WHEN m.gstappl = 'Y'::bpchar THEN 'Supply'::text
                    ELSE 'Others'::text
                END), (
                CASE
                    WHEN m.gstappl = 'Y'::bpchar THEN 'Tax Invoice'::text
                    ELSE 'Others'::text
                END), m.scheme_docno, m.rtdt, ou.name, st.gst_identification_no, st.address, st.city, st.pincode, st.gst_state_name, dt.name, (COALESCE(dt.gst_identification_no, 'URP'::character varying)), dt.billing_address, dt.billing_city, (
                CASE
                    WHEN m.fintradegrp_code = 3 THEN '999999'::character varying
                    ELSE dt.billing_pincode
                END), (
                CASE
                    WHEN m.fintradegrp_code = 3 THEN 'OTHER COUNTRIES'::character varying
                    ELSE COALESCE(dt.gst_state_name, dt.billing_state)
                END), hsn.description, hsn.hsn_sac_code, d.hsn_sac_code, i.uom, tax.cgst_rate, tax.sgst_rate, tax.igst_rate, tax.cess_rate, tax.rate, (initcap(lgt.war::text)), lgt.distance, trp.slname, (
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN trp.cp_gstin_no
                    ELSE NULL::character varying
                END), lgt.docno, lgt.docdt, (
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN lgt.vehicleno
                    ELSE NULL::character varying
                END), m.netamt, chg.chgamt, (
                CASE
                    WHEN m.fintradegrp_code = 3 THEN 'Export'::text
                    ELSE
                    CASE
                        WHEN m.gstappl = 'Y'::bpchar THEN
                        CASE
                            WHEN m.doccode IS NULL THEN 'Others'::text
                            ELSE 'Supply'::text
                        END
                        ELSE 'Others'::text
                    END
                END), st.email1, dt.billing_email1, trp.bemail, m.ewaybillno, m.ewaybillgeneratedon
        UNION ALL
         SELECT m.admsite_code,
            st.short_code,
            'WIP Material Transaction'::text AS text,
            'Outward'::text AS text,
            'Job Work'::text AS text,
            'Challan'::text AS text,
            m.wiptxnno,
            m.wip_date,
            ou.name,
            st.gst_identification_no,
            st.address,
            NULL::text AS text,
            st.city,
            st.pincode,
            st.gst_state_name,
            dt.name,
            COALESCE(dt.gst_identification_no, 'URP'::character varying) AS "coalesce",
            dt.billing_address,
            NULL::text AS text,
            dt.billing_city,
            dt.billing_pincode,
            COALESCE(dt.gst_state_name, dt.billing_state) AS "coalesce",
            i.hsn_description,
            i.hsn_description,
            i.hsn_sac_id,
            i.hsn_code,
            i.uom,
            sum(d.qty) AS sum,
            sum(COALESCE(d.qty, 0::numeric) * COALESCE(d.rate, d.costrate)) AS sum,
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            initcap(lgt.war::text) AS initcap,
            lgt.distance,
            trp.slname,
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN trp.cp_gstin_no
                    ELSE NULL::character varying
                END AS "case",
            lgt.docno,
            lgt.docdt,
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN lgt.vehicleno
                    ELSE NULL::character varying
                END AS "case",
            sum(COALESCE(d.qty, 0::numeric) * COALESCE(d.rate, d.costrate)) AS total_invoice_value,
            COALESCE(dt.gst_state_name, dt.billing_state) AS "coalesce",
            NULL::numeric AS others,
            'Regular'::text AS transaction_type,
            'Job Work'::text AS sub_supply_description,
            st.email1 AS from_party_email,
            dt.billing_email1 AS to_party_email,
            COALESCE(dt.gst_identification_no, 'URP'::character varying) AS ship_to_gstin,
            ou.name AS ship_to_trade_name,
            trp.bemail AS trans_email,
            m.ewaybillno AS ewaybill_no,
            m.ewaybillgeneratedon AS ewaybill_generatedon
           FROM prdwipmain m
             JOIN prdwipdet d ON m.code = d.wiptxn_code
             JOIN admou ou ON m.admou_code = ou.code
             JOIN ginview.lv_site st ON m.admsite_code = st.sitecode
             JOIN ginview.lv_customer_supplier dt ON m.pcode = dt.code
             JOIN ginview.lv_item i ON d.assembly_icode::text = i.item_code::text
             LEFT JOIN invlgtnote lgt ON m.lgtcode = lgt.lgtcode
             LEFT JOIN finsl trp ON lgt.trpcode = trp.slcode
          GROUP BY m.admsite_code, st.short_code, m.wiptxnno, m.wip_date, ou.name, st.gst_identification_no, st.address, st.city, st.pincode, st.gst_state_name, dt.name, (COALESCE(dt.gst_identification_no, 'URP'::character varying)), dt.billing_address, dt.billing_city, dt.billing_pincode, (COALESCE(dt.gst_state_name, dt.billing_state)), i.hsn_description, i.hsn_sac_id, i.hsn_code, i.uom, (initcap(lgt.war::text)), lgt.distance, trp.slname, (
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN trp.cp_gstin_no
                    ELSE NULL::character varying
                END), lgt.docno, lgt.docdt, (
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN lgt.vehicleno
                    ELSE NULL::character varying
                END), st.email1, dt.billing_email1, trp.bemail, m.ewaybillno, m.ewaybillgeneratedon
        UNION ALL
         SELECT m.admsite_code,
            st.short_code,
            'Inter-Stockpoint Transfer'::text AS text,
            'Outward'::text AS text,
            'Others'::text AS text,
            'Others'::text AS text,
            m.scheme_docno,
            m.stfdt,
            ou.name,
            st.gst_identification_no AS from_gstin,
            isp.address AS from_address1,
            NULL::text AS from_address2,
            isp.city,
            isp.pincode,
            st.gst_state_name AS from_state,
                CASE
                    WHEN pty.type <> 'MANUFACTURING UNIT'::text THEN ou.name
                    ELSE t.name
                END AS to_party_name,
            t.to_gstin,
            osp.address AS to_address1,
            NULL::text AS to_address2,
            osp.city AS to_place,
            osp.pincode AS to_pincode,
            t.to_state,
            i.hsn_description AS product,
            i.hsn_description AS description,
            i.hsn_sac_id,
            i.hsn_code AS hsn,
            i.uom AS unit,
            sum(d.qty) AS sum,
            sum(d.stfamt) AS sum,
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            NULL::numeric AS "numeric",
            initcap(lgt.war::text) AS initcap,
            lgt.distance,
            trp.slname,
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN trp.cp_gstin_no
                    ELSE NULL::character varying
                END AS "case",
            lgt.docno,
            lgt.docdt,
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN lgt.vehicleno
                    ELSE NULL::character varying
                END AS "case",
            sum(d.stfamt) AS total_invoice_value,
                CASE
                    WHEN pty.type <> 'MANUFACTURING UNIT'::text THEN COALESCE(st.shipping_gst_state_name, COALESCE(st.gst_state_name, st.state))
                    ELSE t.to_state
                END AS ship_to_state,
            NULL::numeric AS others,
            'Regular'::text AS transaction_type,
            'Others'::text AS sub_supply_description,
            st.email1 AS from_party_email,
            NULL::character varying AS to_party_email,
            t.to_gstin AS ship_to_gstin,
            ou.name AS ship_to_trade_name,
            trp.bemail AS trans_email,
            m.ewaybillno AS ewaybill_no,
            m.ewaybillgeneratedon AS ewaybill_generatedon
           FROM invstfmain m
             JOIN invstfdet d ON m.stfcode = d.stfcode
             JOIN ginview.lv_item i ON d.icode::text = i.item_code::text
             JOIN admou ou ON m.admou_code = ou.code
             JOIN ginview.lv_site st ON m.admsite_code = st.sitecode
             LEFT JOIN ginview.lv_stockpoint isp ON m.outlgtcode = isp.code
             LEFT JOIN ginview.lv_stockpoint osp ON m.inlgtcode = osp.code
             LEFT JOIN invlgtnote lgt ON m.outlgtcode = lgt.lgtcode
             LEFT JOIN finsl trp ON lgt.trpcode = trp.slcode
             JOIN ginview.lv_stockpoint pty ON m.inloccode = pty.code
             LEFT JOIN ( SELECT t1.loccode,
                    t3.name,
                    COALESCE(t3.gst_identification_no, 'URP'::character varying) AS to_gstin,
                    COALESCE(t3.gst_state_name, t3.billing_state) AS to_state
                   FROM finsl_loccode t1,
                    finsl_ou t2,
                    lv_jobber t3
                  WHERE t1.finsl_ou_code = t2.code AND t2.slcode = t3.code) t ON m.inloccode = t.loccode
          GROUP BY m.admsite_code, st.short_code, m.scheme_docno, m.stfdt, ou.name, st.gst_identification_no, isp.address, isp.city, isp.pincode, st.gst_state_name, osp.address, osp.city, osp.pincode, i.hsn_description, i.hsn_sac_id, i.hsn_code, i.uom, (initcap(lgt.war::text)), lgt.distance, trp.slname, (
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN trp.cp_gstin_no
                    ELSE NULL::character varying
                END), lgt.docno, lgt.docdt, (
                CASE
                    WHEN lgt.war = 'ROAD'::bpchar THEN lgt.vehicleno
                    ELSE NULL::character varying
                END), (
                CASE
                    WHEN pty.type <> 'MANUFACTURING UNIT'::text THEN ou.name
                    ELSE t.name
                END), t.to_gstin, t.to_state, (
                CASE
                    WHEN pty.type <> 'MANUFACTURING UNIT'::text THEN COALESCE(st.shipping_gst_state_name, COALESCE(st.gst_state_name, st.state))
                    ELSE t.to_state
                END), st.email1, trp.bemail, m.ewaybillno, m.ewaybillgeneratedon) x;

ALTER TABLE ginview.lv_ewaybill
    OWNER TO gslpgadmin;

CREATE OR REPLACE VIEW ginview.lv_inter_stk_tranfer
 AS
 SELECT stfcode,
    transfer_date,
    document_no,
    document_date,
    inloccode,
    in_stockpoint_name,
    in_stockpoint_type,
    in_stockpoint_jobber_code,
    outloccode,
    out_stockpoint_name,
    out_stockpoint_type,
    out_stockpoint_jobber_code,
    gate_entry_no,
    remarks,
    year_name,
    created_by,
    creation_time,
    last_modified_on,
    last_modified_by,
    slcode,
    slname,
    inlgtcode,
    in_logistic_no,
    in_logistic_date,
    in_logistic_transporter,
    in_logistic_document_no,
    in_logistic_document_date,
    in_logistic_station_from,
    in_logistic_station_to,
    in_logistic_declared_amount,
    outlgtcode,
    out_logistic_no,
    out_logistic_date,
    out_logistic_transporter,
    out_logistic_document_no,
    out_logistic_document_date,
    out_logistic_station_from,
    out_logistic_station_to,
    out_logistic_declared_amount,
    document_code,
    transfer_no,
    admou_code,
    price_type,
    price_factor,
    stock_transfer_type,
    admou_code_in,
    admsite_code,
    owner_site,
    icode,
    quantity,
    item_remarks,
    fnc_uk() AS uk,
    stfrate,
    stfamt,
    e_way_bill_no,
    e_way_bill_generated_on,
    e_way_bill_valid_upto,
    inter_stockpoint_transfer,
    invstfmain_udfstring01,
    invstfmain_udfstring02,
    invstfmain_udfstring03,
    invstfmain_udfstring04,
    invstfmain_udfstring05,
    invstfmain_udfstring06,
    invstfmain_udfstring07,
    invstfmain_udfstring08,
    invstfmain_udfstring09,
    invstfmain_udfstring10,
    invstfmain_udfnum01,
    invstfmain_udfnum02,
    invstfmain_udfnum03,
    invstfmain_udfnum04,
    invstfmain_udfnum05,
    invstfmain_udfdate01,
    invstfmain_udfdate02,
    invstfmain_udfdate03,
    invstfmain_udfdate04,
    invstfmain_udfdate05,
    fnc_get_batch_string(stfcode::text::character varying, icode, stfrate, 'INVSTFDET'::character varying) AS batch_serial_string,
    out_stockpoint_address,
    out_stockpoint_city,
    out_stockpoint_state,
    out_stockpoint_pin,
    out_stockpoint_phone_no,
    out_stockpoint_vat_no
   FROM ( SELECT m.stfcode,
            m.stfdt::date AS transfer_date,
            m.docno AS document_no,
            m.docdt::date AS document_date,
            m.inloccode,
            instk.locname AS in_stockpoint_name,
                CASE
                    WHEN instk.loctype = 'W'::bpchar THEN 'WAREHOUSE'::text
                    WHEN instk.loctype = 'L'::bpchar THEN 'LOGISTIC'::text
                    WHEN instk.loctype = 'T'::bpchar THEN 'TRANSIT'::text
                    WHEN instk.loctype = 'M'::bpchar THEN 'MANUFACTURING UNIT'::text
                    WHEN instk.loctype = 'S'::bpchar THEN 'SITE'::text
                    ELSE NULL::text
                END AS in_stockpoint_type,
            jb.code AS in_stockpoint_jobber_code,
            m.outloccode,
            outstk.locname AS out_stockpoint_name,
                CASE
                    WHEN outstk.loctype = 'W'::bpchar THEN 'WAREHOUSE'::text
                    WHEN outstk.loctype = 'L'::bpchar THEN 'LOGISTIC'::text
                    WHEN outstk.loctype = 'T'::bpchar THEN 'TRANSIT'::text
                    WHEN outstk.loctype = 'M'::bpchar THEN 'MANUFACTURING UNIT'::text
                    WHEN outstk.loctype = 'S'::bpchar THEN 'SITE'::text
                    ELSE NULL::text
                END AS out_stockpoint_type,
            jbo.code AS out_stockpoint_jobber_code,
            m.geno AS gate_entry_no,
            m.rem AS remarks,
            y.yname AS year_name,
            ((c.fname::text || ' ['::text) || c.eno::text) || ']'::text AS created_by,
            m."time" AS creation_time,
            m.last_access_time AS last_modified_on,
                CASE
                    WHEN md.fname IS NOT NULL THEN ((md.fname::text || ' ['::text) || md.eno::text) || ']'::text
                    ELSE NULL::text
                END AS last_modified_by,
            m.slcode,
            sl.slname,
            m.inlgtcode,
            inlgt.lgtno AS in_logistic_no,
            inlgt.lgtdt::date AS in_logistic_date,
            inlgttrp.slname AS in_logistic_transporter,
            inlgt.docno AS in_logistic_document_no,
            inlgt.docdt::date AS in_logistic_document_date,
            inlgt.stfr AS in_logistic_station_from,
            inlgt.stto AS in_logistic_station_to,
            sum(inlgt.decamt) AS in_logistic_declared_amount,
            m.outlgtcode,
            outlgt.lgtno AS out_logistic_no,
            outlgt.lgtdt::date AS out_logistic_date,
            outlgttrp.slname AS out_logistic_transporter,
            outlgt.docno AS out_logistic_document_no,
            outlgt.docdt::date AS out_logistic_document_date,
            outlgt.stfr AS out_logistic_station_from,
            outlgt.stto AS out_logistic_station_to,
            sum(outlgt.decamt) AS out_logistic_declared_amount,
            m.doccode AS document_code,
            m.scheme_docno AS transfer_no,
            m.admou_code,
            initcap(
                CASE
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'M'::bpchar THEN 'RSP'::text
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'W'::bpchar THEN 'WSP'::text
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'L'::bpchar THEN 'MRP'::text
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'R'::bpchar THEN 'STANDARD RATE'::text
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'N'::bpchar THEN 'NONE'::text
                    ELSE NULL::text
                END) AS price_type,
            m.price_factor,
            initcap(
                CASE
                    WHEN m.stftype = 'IST'::bpchar THEN 'INTER STOCK POINT TRANSFER'::text
                    WHEN m.stftype = 'IOT'::bpchar THEN 'INTER OU TRANSFER'::text
                    ELSE NULL::text
                END) AS stock_transfer_type,
            m.admou_code_in,
            m.admsite_code,
            st.shrtname AS owner_site,
            d.icode,
            sum(d.qty) AS quantity,
            d.rem AS item_remarks,
            d.stfrate,
            sum(d.stfamt) AS stfamt,
            m.ewaybillno AS e_way_bill_no,
            m.ewaybillgeneratedon AS e_way_bill_generated_on,
            m.ewaybillvalidupto AS e_way_bill_valid_upto,
            initcap(
                CASE
                    WHEN instk.loctype = 'W'::bpchar THEN 'WAREHOUSE'::text
                    WHEN instk.loctype = 'L'::bpchar THEN 'LOGISTIC'::text
                    WHEN instk.loctype = 'T'::bpchar THEN 'TRANSIT'::text
                    WHEN instk.loctype = 'M'::bpchar THEN 'MANUFACTURING UNIT'::text
                    WHEN instk.loctype = 'S'::bpchar THEN 'SITE'::text
                    ELSE NULL::text
                END) AS inter_stockpoint_transfer,
            m.udfstring01 AS invstfmain_udfstring01,
            m.udfstring02 AS invstfmain_udfstring02,
            m.udfstring03 AS invstfmain_udfstring03,
            m.udfstring04 AS invstfmain_udfstring04,
            m.udfstring05 AS invstfmain_udfstring05,
            m.udfstring06 AS invstfmain_udfstring06,
            m.udfstring07 AS invstfmain_udfstring07,
            m.udfstring08 AS invstfmain_udfstring08,
            m.udfstring09 AS invstfmain_udfstring09,
            m.udfstring10 AS invstfmain_udfstring10,
            m.udfnum01 AS invstfmain_udfnum01,
            m.udfnum02 AS invstfmain_udfnum02,
            m.udfnum03 AS invstfmain_udfnum03,
            m.udfnum04 AS invstfmain_udfnum04,
            m.udfnum05 AS invstfmain_udfnum05,
            m.udfdate01 AS invstfmain_udfdate01,
            m.udfdate02 AS invstfmain_udfdate02,
            m.udfdate03 AS invstfmain_udfdate03,
            m.udfdate04 AS invstfmain_udfdate04,
            m.udfdate05 AS invstfmain_udfdate05,
            outstk.addr AS out_stockpoint_address,
            outstk.ctname AS out_stockpoint_city,
            ac.stname AS out_stockpoint_state,
            outstk.pin AS out_stockpoint_pin,
            (outstk.ph1::text ||
                CASE
                    WHEN outstk.ph2 IS NULL THEN NULL::text
                    ELSE ','::text || outstk.ph2::text
                END) ||
                CASE
                    WHEN outstk.ph3 IS NULL THEN NULL::text
                    ELSE ','::text || outstk.ph3::text
                END AS out_stockpoint_phone_no,
            outstk.lstno AS out_stockpoint_vat_no
           FROM invstfmain m
             JOIN invstfdet d ON m.stfcode = d.stfcode
             LEFT JOIN finsl sl ON m.slcode = sl.slcode
             JOIN invloc instk ON m.inloccode = instk.loccode
             JOIN invloc outstk ON m.outloccode = outstk.loccode
             LEFT JOIN admcity ac ON ac.ctname::text = outstk.ctname::text
             JOIN admyear y ON m.ycode = y.ycode
             JOIN hrdemp c ON m.ecode = c.ecode
             LEFT JOIN hrdemp md ON m.last_access_ecode = md.ecode
             LEFT JOIN invlgtnote inlgt ON m.inlgtcode = inlgt.lgtcode
             LEFT JOIN finsl inlgttrp ON inlgt.trpcode = inlgttrp.slcode
             LEFT JOIN invlgtnote outlgt ON m.outlgtcode = outlgt.lgtcode
             LEFT JOIN finsl outlgttrp ON outlgt.trpcode = outlgttrp.slcode
             JOIN admsite st ON m.admsite_code = st.code
             LEFT JOIN ( SELECT DISTINCT t3.code,
                    t1.loccode
                   FROM finsl_loccode t1,
                    finsl_ou t2,
                    lv_jobber t3,
                    invloc t4
                  WHERE t1.finsl_ou_code = t2.code AND t2.slcode = t3.code) jb ON m.inloccode = jb.loccode
             LEFT JOIN ( SELECT DISTINCT t3.code,
                    t1.loccode
                   FROM finsl_loccode t1,
                    finsl_ou t2,
                    lv_jobber t3,
                    invloc t4
                  WHERE t1.finsl_ou_code = t2.code AND t2.slcode = t3.code) jbo ON m.outloccode = jbo.loccode
          GROUP BY m.stfcode, m.stfdt, m.docno, m.docdt, m.inloccode, instk.locname, instk.loctype, jb.code, m.outloccode, outstk.locname, outstk.loctype, jbo.code, m.geno, m.rem, y.yname, (((c.fname::text || ' ['::text) || c.eno::text) || ']'::text), m."time", m.last_access_time, (
                CASE
                    WHEN md.fname IS NOT NULL THEN ((md.fname::text || ' ['::text) || md.eno::text) || ']'::text
                    ELSE NULL::text
                END), m.slcode, sl.slname, m.inlgtcode, inlgt.lgtno, inlgt.lgtdt, inlgttrp.slname, inlgt.docno, inlgt.docdt, inlgt.stfr, inlgt.stto, m.outlgtcode, outlgt.lgtno, outlgt.lgtdt, outlgttrp.slname, outlgt.docno, outlgt.docdt, outlgt.stfr, outlgt.stto, m.doccode, m.scheme_docno, m.admou_code, (initcap(
                CASE
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'M'::bpchar THEN 'RSP'::text
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'W'::bpchar THEN 'WSP'::text
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'L'::bpchar THEN 'MRP'::text
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'R'::bpchar THEN 'STANDARD RATE'::text
                    WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'N'::bpchar THEN 'NONE'::text
                    ELSE NULL::text
                END)), m.price_factor, (initcap(
                CASE
                    WHEN m.stftype = 'IST'::bpchar THEN 'INTER STOCK POINT TRANSFER'::text
                    WHEN m.stftype = 'IOT'::bpchar THEN 'INTER OU TRANSFER'::text
                    ELSE NULL::text
                END)), m.admou_code_in, m.admsite_code, st.shrtname, d.icode, d.rem, d.stfrate, m.ewaybillno, m.ewaybillgeneratedon, m.ewaybillvalidupto, (initcap(instk.loctype::text)), m.udfstring01, m.udfstring02, m.udfstring03, m.udfstring04, m.udfstring05, m.udfstring06, m.udfstring07, m.udfstring08, m.udfstring09, m.udfstring10, m.udfnum01, m.udfnum02, m.udfnum03, m.udfnum04, m.udfnum05, m.udfdate01, m.udfdate02, m.udfdate03, m.udfdate04, m.udfdate05, outstk.addr, outstk.ctname, ac.stname, outstk.pin, ((outstk.ph1::text ||
                CASE
                    WHEN outstk.ph2 IS NULL THEN NULL::text
                    ELSE ','::text || outstk.ph2::text
                END) ||
                CASE
                    WHEN outstk.ph3 IS NULL THEN NULL::text
                    ELSE ','::text || outstk.ph3::text
                END), outstk.lstno) x;

ALTER TABLE ginview.lv_inter_stk_tranfer
    OWNER TO gslpgadmin;
	
CREATE OR REPLACE VIEW ginview.lv_inter_stk_tranfer_batch
 AS
 SELECT m.stfcode,
    m.stfdt::date AS transfer_date,
    m.docno AS document_no,
    m.docdt::date AS document_date,
    m.inloccode,
    instk.locname AS in_stockpoint_name,
        CASE
            WHEN instk.loctype = 'W'::bpchar THEN 'WAREHOUSE'::text
            WHEN instk.loctype = 'L'::bpchar THEN 'LOGISTIC'::text
            WHEN instk.loctype = 'T'::bpchar THEN 'TRANSIT'::text
            WHEN instk.loctype = 'M'::bpchar THEN 'MANUFACTURING UNIT'::text
            WHEN instk.loctype = 'S'::bpchar THEN 'SITE'::text
            ELSE NULL::text
        END AS in_stockpoint_type,
    jb.code AS in_stockpoint_jobber_code,
    m.outloccode,
    outstk.locname AS out_stockpoint_name,
        CASE
            WHEN outstk.loctype = 'W'::bpchar THEN 'WAREHOUSE'::text
            WHEN outstk.loctype = 'L'::bpchar THEN 'LOGISTIC'::text
            WHEN outstk.loctype = 'T'::bpchar THEN 'TRANSIT'::text
            WHEN outstk.loctype = 'M'::bpchar THEN 'MANUFACTURING UNIT'::text
            WHEN outstk.loctype = 'S'::bpchar THEN 'SITE'::text
            ELSE NULL::text
        END AS out_stockpoint_type,
    jbo.code AS out_stockpoint_jobber_code,
    m.geno AS gate_entry_no,
    m.rem AS remarks,
    y.yname AS year_name,
    ((c.fname::text || ' ['::text) || c.eno::text) || ']'::text AS created_by,
    m."time" AS creation_time,
    m.last_access_time AS last_modified_on,
        CASE
            WHEN md.fname IS NOT NULL THEN ((md.fname::text || ' ['::text) || md.eno::text) || ']'::text
            ELSE NULL::text
        END AS last_modified_by,
    m.slcode,
    sl.slname,
    m.inlgtcode,
    inlgt.lgtno AS in_logistic_no,
    inlgt.lgtdt AS in_logistic_date,
    inlgttrp.slname AS in_logistic_transporter,
    inlgt.docno AS in_logistic_document_no,
    inlgt.docdt AS in_logistic_document_date,
    inlgt.stfr AS in_logistic_station_from,
    inlgt.stto AS in_logistic_station_to,
    inlgt.decamt AS in_logistic_declared_amount,
    m.outlgtcode,
    outlgt.lgtno AS out_logistic_no,
    outlgt.lgtdt AS out_logistic_date,
    outlgttrp.slname AS out_logistic_transporter,
    outlgt.docno AS out_logistic_document_no,
    outlgt.docdt AS out_logistic_document_date,
    outlgt.stfr AS out_logistic_station_from,
    outlgt.stto AS out_logistic_station_to,
    outlgt.decamt AS out_logistic_declared_amount,
    m.doccode AS document_code,
    m.scheme_docno AS transfer_no,
    m.admou_code,
    initcap(
        CASE
            WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'M'::bpchar THEN 'MRP'::text
            WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'L'::bpchar THEN 'LISTED MRP'::text
            WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'W'::bpchar THEN 'WSP'::text
            WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'C'::bpchar THEN 'EFFECTIVE RATE'::text
            WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'R'::bpchar THEN 'STANDARD RATE'::text
            WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'F'::bpchar THEN 'FIFO RATE'::text
            WHEN COALESCE(m.pricetype, 'N'::bpchar) = 'N'::bpchar THEN 'NONE'::text
            ELSE NULL::text
        END) AS price_type,
    m.price_factor,
    initcap(
        CASE
            WHEN m.stftype = 'IST'::bpchar THEN 'INTER STOCK POINT TRANSFER'::text
            WHEN m.stftype = 'IOT'::bpchar THEN 'INTER OU TRANSFER'::text
            ELSE NULL::text
        END) AS stock_transfer_type,
    m.admou_code_in,
    m.admsite_code,
    st.shrtname AS owner_site,
    d.icode,
    d.qty AS quantity,
    d.rem AS item_remarks,
    d.code AS uk,
    d.stfrate,
    d.stfamt,
    m.ewaybillno AS e_way_bill_no,
    m.ewaybillgeneratedon AS e_way_bill_generated_on,
    m.ewaybillvalidupto AS e_way_bill_valid_upto,
    initcap(
        CASE
            WHEN instk.loctype = 'W'::bpchar THEN 'WAREHOUSE'::text
            WHEN instk.loctype = 'L'::bpchar THEN 'LOGISTIC'::text
            WHEN instk.loctype = 'T'::bpchar THEN 'TRANSIT'::text
            WHEN instk.loctype = 'M'::bpchar THEN 'MANUFACTURING UNIT'::text
            WHEN instk.loctype = 'S'::bpchar THEN 'SITE'::text
            ELSE NULL::text
        END) AS inter_stockpoint_transfer,
    m.udfstring01 AS invstfmain_udfstring01,
    m.udfstring02 AS invstfmain_udfstring02,
    m.udfstring03 AS invstfmain_udfstring03,
    m.udfstring04 AS invstfmain_udfstring04,
    m.udfstring05 AS invstfmain_udfstring05,
    m.udfstring06 AS invstfmain_udfstring06,
    m.udfstring07 AS invstfmain_udfstring07,
    m.udfstring08 AS invstfmain_udfstring08,
    m.udfstring09 AS invstfmain_udfstring09,
    m.udfstring10 AS invstfmain_udfstring10,
    m.udfnum01 AS invstfmain_udfnum01,
    m.udfnum02 AS invstfmain_udfnum02,
    m.udfnum03 AS invstfmain_udfnum03,
    m.udfnum04 AS invstfmain_udfnum04,
    m.udfnum05 AS invstfmain_udfnum05,
    m.udfdate01 AS invstfmain_udfdate01,
    m.udfdate02 AS invstfmain_udfdate02,
    m.udfdate03 AS invstfmain_udfdate03,
    m.udfdate04 AS invstfmain_udfdate04,
    m.udfdate05 AS invstfmain_udfdate05,
    d.invbatch_serial_code
   FROM invstfmain m
     JOIN invstfdet d ON m.stfcode = d.stfcode
     LEFT JOIN finsl sl ON m.slcode = sl.slcode
     JOIN invloc instk ON m.inloccode = instk.loccode
     JOIN invloc outstk ON m.outloccode = outstk.loccode
     JOIN admyear y ON m.ycode = y.ycode
     JOIN hrdemp c ON m.ecode = c.ecode
     LEFT JOIN hrdemp md ON m.last_access_ecode = md.ecode
     LEFT JOIN invlgtnote inlgt ON m.inlgtcode = inlgt.lgtcode
     LEFT JOIN finsl inlgttrp ON inlgt.trpcode = inlgttrp.slcode
     LEFT JOIN invlgtnote outlgt ON m.outlgtcode = outlgt.lgtcode
     LEFT JOIN finsl outlgttrp ON outlgt.trpcode = outlgttrp.slcode
     JOIN admsite st ON m.admsite_code = st.code
     LEFT JOIN ( SELECT DISTINCT t3.code,
            t1.loccode
           FROM finsl_loccode t1,
            finsl_ou t2,
            lv_jobber t3,
            invloc t4
          WHERE t1.finsl_ou_code = t2.code AND t2.slcode = t3.code) jb ON m.inloccode = jb.loccode
     LEFT JOIN ( SELECT DISTINCT t3.code,
            t1.loccode
           FROM finsl_loccode t1,
            finsl_ou t2,
            lv_jobber t3,
            invloc t4
          WHERE t1.finsl_ou_code = t2.code AND t2.slcode = t3.code) jbo ON m.outloccode = jbo.loccode;

ALTER TABLE ginview.lv_inter_stk_tranfer_batch
    OWNER TO gslpgadmin;	

CREATE OR REPLACE VIEW ginview.lv_agent AS
 SELECT s.slcode AS uk,
    s.abbre AS alias,
    tax.name AS tax_region,
    cur.name AS currency,
    ag.slname AS sales_agent_name,
    s.agrate AS agency_commission_rate,
    s.baddr AS billing_address,
    s.bankaccountno AS bank_account_no,
    s.bankifccode AS bank_ifsc_code,
    s.bankmicrcode AS bank_micr_code,
    s.bankname AS bank_name,
    s.bankrtgscode AS bank_rtgs_code,
    s.bcp AS billing_contact_person,
    s.bctname AS billing_city,
    bct.stname AS billing_state,
    bct.dist AS billing_district,
    bct.zone AS billing_zone,
    s.bemail AS billing_email1,
    s.bemail2 AS billing_email2,
    s.bfx1 AS billing_fax,
    s.bfx2 AS billing_mobile,
    s.bph1 AS billing_office_phone1,
    s.bph2 AS billing_office_phone2,
    s.bph3 AS billing_office_phone3,
    s.bph4 AS billing_residence_phone,
    s.bpin AS billing_pincode,
    s.brand AS product_brand_name,
    s.bwebsite AS billing_website,
    initcap(
        CASE
            WHEN (s.cash_discount_applicable = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.cash_discount_applicable = 'N'::bpchar) THEN 'NO'::text
            ELSE 'NO'::text
        END) AS cash_discount_applicable,
    s.cash_discount_percentage,
    s.cash_discount_period,
    s.chqlabel AS bank_cheque_label,
    s.cinno AS cin_no,
    cls.clsname AS class_name,
    initcap(
        CASE
            WHEN (cls.clstype = 'C'::bpchar) THEN 'CUSTOMER'::text
            WHEN (cls.clstype = 'S'::bpchar) THEN 'SUPPLIER'::text
            WHEN (cls.clstype = 'J'::bpchar) THEN 'JOBBER'::text
            WHEN (cls.clstype = 'A'::bpchar) THEN 'AGENT'::text
            WHEN (cls.clstype = 'T'::bpchar) THEN 'TRANSPORTER'::text
            WHEN (cls.clstype = 'E'::bpchar) THEN 'EMPLOYEE'::text
            WHEN (cls.clstype = 'D'::bpchar) THEN 'TDS AGENCY'::text
            WHEN (cls.clstype = 'H'::bpchar) THEN 'CHANNEL'::text
            WHEN (cls.clstype = 'O'::bpchar) THEN 'OTHERS'::text
            ELSE NULL::text
        END) AS class_type,
    initcap(
        CASE
            WHEN (s.companytype = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (s.companytype = 'PRO'::bpchar) THEN 'PROPRIETORSHIP'::text
            WHEN (s.companytype = 'PAR'::bpchar) THEN 'PARTNERSHIP'::text
            WHEN (s.companytype = 'PRI'::bpchar) THEN 'PRIVATE LIMITED'::text
            WHEN (s.companytype = 'LIM'::bpchar) THEN 'LIMITED'::text
            WHEN (s.companytype = 'HUF'::bpchar) THEN 'HUF'::text
            WHEN (s.companytype = 'COO'::bpchar) THEN 'CO-OPERATIVE'::text
            ELSE 'OTHERS'::text
        END) AS company_type,
    tl.glname AS transfer_in_ledger,
    cl.glname AS consignment_sales_ledger,
    sl.slname AS consignment_sales_sub_ledger,
    tisl.slname AS transfer_in_sub_ledger,
    tol.glname AS transfer_out_ledger,
    tsl.slname AS transfer_out_sub_ledger,
    s.cramt AS credit_limit,
    cr.crname AS credit_rating,
    s.crdays AS credit_days,
    s.croverdueamt AS credit_overdue_amount,
    s.croverduedays AS credit_max_overdue_days,
    s.crtolerance AS credit_tolerance_percentage,
    s.cstdate AS cst_date,
    s.cstno AS cst_no,
    initcap(
        CASE
            WHEN (s.cvrule = 'N'::bpchar) THEN 'NONE'::text
            WHEN (s.cvrule = 'L'::bpchar) THEN 'CREDIT LIMIT'::text
            WHEN (s.cvrule = 'O'::bpchar) THEN 'OVERDUE'::text
            WHEN (s.cvrule = 'B'::bpchar) THEN 'CREDIT LIMIT AND OVERDUE'::text
            ELSE 'NONE'::text
        END) AS credit_verification_rule,
    s.default_markup AS markup_on_rsp,
    s.default_markup_wsp AS markup_on_wsp,
        CASE
            WHEN (s.due_date_basis = 'E'::bpchar) THEN 'ENTRY DATE'::text
            WHEN (s.due_date_basis = 'D'::bpchar) THEN 'DOCUMENT DATE'::text
            ELSE 'ENTRY DATE'::text
        END AS due_date_basis,
    s.exciseno AS excise_regd_no,
    s.excise_date AS excise_regd_date,
    initcap(
        CASE
            WHEN (s.ext = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.ext = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS extinct,
    gr.name AS purchase_trade_group,
    initcap(
        CASE
            WHEN (s.gatein_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.gatein_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS gate_entry_applicable,
    s.glcode AS arap_glcode,
    gl.glname AS arap_ledger,
        CASE
            WHEN (s.industrytype = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (s.industrytype = 'SMA'::bpchar) THEN 'SMALL SCALE'::text
            WHEN (s.industrytype = 'LRG'::bpchar) THEN 'LARGE SCALE'::text
            WHEN (s.industrytype = 'GOV'::bpchar) THEN 'GOVERNMENT'::text
            WHEN (s.industrytype = 'CON'::bpchar) THEN 'CONTRACTOR'::text
            ELSE 'OTHERS'::text
        END AS industry_type,
    s.intrate AS credit_interest_rate,
    initcap(
        CASE
            WHEN (s.lgt_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS inward_logistic_applicable,
        CASE
            WHEN (s."limit" = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s."limit" = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s."limit" = 'L'::bpchar) THEN 'LOWER'::text--
            ELSE 'UPPER'::text
        END AS markup_on_rsp_limit,
        CASE
            WHEN (s.limit_wsp = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.limit_wsp = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.limit_wsp = 'L'::bpchar) THEN 'LOWER'::text
            ELSE 'UPPER'::text
        END AS markup_on_wsp_limit,
    s.lstdate AS vat_regd_date,
    s.lstno AS vat_regd_no,
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.markup_selling_limit = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS purchase_price_limit,
    s.markup_selling_price AS purchase_price_factor,
    s.markup_selling_round_off AS purchase_price_roundoff,
    s.microno AS mse_redg_no,
    initcap(
        CASE
            WHEN (s.out_lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_lgt_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_logistic_applicable,
    initcap(
        CASE
            WHEN (s.out_permit_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_permit_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_permit_applicable,
    s.pan,
    initcap(
        CASE
            WHEN (s.permit_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.permit_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS inward_permit_applicable,
    s.prd_max_days AS production_max_overdue_days,
        CASE
            WHEN (s.prd_overdue_action = 'O'::bpchar) THEN 'RESTRICT ORDER'::text
            WHEN (s.prd_overdue_action = 'N'::bpchar) THEN 'NO RESTRICTION'::text
            ELSE 'NO RESTRICTION'::text
        END AS production_overdue_action,
    pri.pricelistname AS sale_price_list,
    initcap((((
        CASE
            WHEN (COALESCE(s.markup_selling_price, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE (((s.markup_selling_price)::character varying)::text || '% of '::text)
        END ||
        CASE
            WHEN (s.pricetype = 'M'::bpchar) THEN 'RSP'::text
            WHEN (s.pricetype = 'W'::bpchar) THEN 'WSP'::text
            WHEN (s.pricetype = 'C'::bpchar) THEN 'STANDARD RATE'::text
            WHEN (s.pricetype = 'L'::bpchar) THEN 'MRP'::text
            WHEN (s.pricetype = 'R'::bpchar) THEN 'EFFECTIVE RATE (LAST LANDING COST)'::text
            WHEN (s.pricetype = 'B'::bpchar) THEN 'BASIC RATE (LAST PURCHASE)'::text
            ELSE NULL::text
        END) ||
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN ' (UPPER ROUND ) '::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN ' (LOWER ROUND ) '::text
            ELSE ' (ROUND '::text
        END) ||
        CASE
            WHEN (COALESCE(s.markup_selling_round_off, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE (('UPTO '::text || ((s.markup_selling_round_off)::character varying)::text) || ')'::text)
        END)) AS purchase_price_type,
    s.product AS nature_of_product,
    pgl.glname AS purchase_ledger,
    rgl.glname AS purchase_return_ledger,
    rsl.slname AS purchase_return_sub_ledger,
    psl.slname AS purchase_sub_ledger,
    pf.formname AS purchase_form,
    ptr.name AS purchase_term,
    s.pur_delivery_buffer_days AS order_delivery_buffer_days,
    s.pur_duedays AS order_delivery_due_days,
    initcap(
        CASE
            WHEN (s.pur_price_chart_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.pur_price_chart_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE 'NO'::text
        END) AS purchase_price_chart_appl,
    s.rem AS remarks,
    s.round_off_markup AS markup_on_rsp_roundoff,
    s.round_off_markup_wsp AS markup_on_wsp_roundoff,
    s.saddr AS shipping_address,
    sgl.glname AS sales_ledger,
    rtl.glname AS sales_return_ledger,
    srsl.slname AS sales_return_sub_ledger,
    ssl.slname AS sales_sub_ledger,
    initcap(
        CASE
            WHEN (s.saletype = 'C'::bpchar) THEN 'CONSIGNMENT'::text
            WHEN (s.saletype = 'O'::bpchar) THEN 'OUTRIGHT'::text
            ELSE 'CONSIGNMENT'::text
        END) AS sale_type,
    initcap(
        CASE
            WHEN (s.sale_post_method = 'I'::bpchar) THEN 'TAX INCLUSIVE'::text
            WHEN (s.sale_post_method = 'E'::bpchar) THEN 'TAX EXCLUSIVE'::text
            ELSE 'TAX INCLUSIVE'::text
        END) AS sale_posting_method,
    sf.formname AS sale_form,
    str.saltermname AS sale_term,
    ftg.name AS sale_trade_group,
    s.scp AS shipping_contact_person,
    s.sctname AS shipping_city,
    sct.stname AS shipping_state,
    sct.dist AS shipping_district,
    sct.zone AS shipping_zone,
    s.semail AS shipping_email1,
    s.semail2 AS shipping_email2,
    s.servicetaxcategor AS service_tax_category,
    s.servicetaxdate AS service_tax_regd_date,
    s.servicetaxno AS service_tax_regd_no,
    s.sfx1 AS shipping_fax,
    s.sfx2 AS shipping_mobile,
    initcap(
        CASE
            WHEN (s.shipment_tracking_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.shipment_tracking_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS shipment_tracking_applicable,
    s.slcode AS code,
    s.slid AS identity_no,
    s.slname AS name,
    s.slowner AS company_director_name,
    s.sph1 AS shipping_office_phone1,
    s.sph2 AS shipping_office_phone2,
    s.sph3 AS shipping_office_phone3,
    s.sph4 AS shipping_residence_phone,
    s.spin AS shipping_pincode,
    s.ssino AS ssi_regd_no,
    s.swebsite AS shipping_website,
    tds.tdssrcname AS tds_source,
    initcap(
        CASE
            WHEN (s.tds_app = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.tds_app = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS tds_applicable,
    tdl.glname AS transit_diff_ledger,
    tsdl.slname AS transit_diff_sub_ledger,
    trl.glname AS transit_ledger,
    trsl.slname AS transit_sub_ledger,
    tp.slname AS transporter,
    vel.glname AS vat_expense_ledger,
    ves.slname AS vat_expense_sub_ledger,
    initcap(
        CASE
            WHEN (s.whether_consignment = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS consignment_purchase_app,
    gst.name AS gst_category,
    s.cp_gstin_no AS gst_identification_no,
    s.cp_gstin_date AS gst_registration_date,
    s.cp_gstin_state_code AS gst_state_code,
    gte.name AS gst_state_name,
    NULL::text AS email,
    bct.class AS billing_city_class,
    sct.class AS shipping_city_class,
    s.transporter_id
   FROM (((((((((((((((((((((((((((((((((((((((main.finsl s
     LEFT JOIN main.finsl ag ON ((s.agcode = ag.slcode)))
     LEFT JOIN main.finsl sl ON ((s.consignment_sales_slcode = sl.slcode)))
     LEFT JOIN main.finsl tsl ON ((s.consignment_trnsfr_slcode = tsl.slcode)))
     LEFT JOIN main.finsl psl ON ((s.purchase_slcode = psl.slcode)))
     LEFT JOIN main.finsl rsl ON ((s.purchase_return_slcode = rsl.slcode)))
     LEFT JOIN main.finsl ssl ON ((s.sales_slcode = ssl.slcode)))
     LEFT JOIN main.finsl tsdl ON ((s.transitdiff_slcode = tsdl.slcode)))
     LEFT JOIN main.finsl trsl ON ((s.transit_slcode = trsl.slcode)))
     LEFT JOIN main.finsl tp ON ((s.trpcode = tp.slcode)))
     LEFT JOIN main.finsl ves ON ((s.vatexp_slcode = ves.slcode)))
     LEFT JOIN main.finsl tisl ON ((s.consignment_slcode = tisl.slcode)))
     LEFT JOIN main.finsl srsl ON ((s.sales_return_slcode = srsl.slcode)))
     LEFT JOIN main.fingl tl ON ((s.consignment_glcode = tl.glcode)))
     LEFT JOIN main.fingl cl ON ((s.consignment_sales_glcode = cl.glcode)))
     LEFT JOIN main.fingl tol ON ((s.consignment_trnsfr_glcode = tol.glcode)))
     LEFT JOIN main.fingl gl ON ((s.glcode = gl.glcode)))
     LEFT JOIN main.fingl pgl ON ((s.purchase_glcode = pgl.glcode)))
     LEFT JOIN main.fingl rgl ON ((s.purchase_return_glcode = rgl.glcode)))
     LEFT JOIN main.fingl sgl ON ((s.sales_glcode = sgl.glcode)))
     LEFT JOIN main.fingl rtl ON ((s.sales_return_glcode = rtl.glcode)))
     LEFT JOIN main.fingl tdl ON ((s.transitdiff_glcode = tdl.glcode)))
     LEFT JOIN main.fingl trl ON ((s.transit_glcode = trl.glcode)))
     LEFT JOIN main.fingl vel ON ((s.vatexp_glcode = vel.glcode)))
     JOIN main.admcls cls ON ((s.clscode = cls.clscode)))
     LEFT JOIN main.admcity bct ON (((s.bctname)::text = (bct.ctname)::text)))
     LEFT JOIN main.admcity sct ON (((s.sctname)::text = (sct.ctname)::text)))
     LEFT JOIN main.admcmptax tax ON ((s.admcmptax_code = tax.code)))
     LEFT JOIN main.admcurrency cur ON ((s.admcurrency_code = cur.code)))
     LEFT JOIN main.salcreditrating cr ON ((s.crcode = cr.crcode)))
     LEFT JOIN main.fintradegrp gr ON ((s.fintradegrp_code = gr.code)))
     LEFT JOIN main.salpricelistmain pri ON ((s.pricelistcode = pri.pricelistcode)))
     LEFT JOIN main.finform pf ON ((s.purformcode = pf.formcode)))
     LEFT JOIN main.finform sf ON ((s.salformcode = sf.formcode)))
     LEFT JOIN main.purtermmain ptr ON ((s.purtermmain_code = ptr.code)))
     LEFT JOIN main.saltermmain str ON ((s.saltermcode = str.saltermcode)))
     LEFT JOIN main.fintradegrp ftg ON ((s.saltradegrp_code = ftg.code)))
     LEFT JOIN main.fintdssrc tds ON ((s.tdssrccode = tds.tdssrccode)))
     JOIN main.admgstcategory gst ON ((s.cp_category_code = gst.code)))
     LEFT JOIN main.admgststate gte ON ((s.cp_gstin_state_code = gte.code)))
  WHERE (cls.clstype = 'A'::bpchar);

ALTER VIEW ginview.lv_agent OWNER TO gslpgadmin;

CREATE OR REPLACE VIEW ginview.lv_arap_sub_ledger AS
 SELECT s.slcode AS uk,
    s.abbre AS alias,
    COALESCE(ag.slname, 'No Agent'::character varying) AS agent_name,
    s.agrate AS agency_commission_rate,
    s.baddr AS billing_address,
    s.bankaccountno AS bank_account_no,
    s.bankifccode AS bank_ifsc_code,
    s.bankmicrcode AS bank_micr_code,
    s.bankname AS bank_name,
    s.bankrtgscode AS bank_rtgs_code,
    s.bcp AS billing_contact_person,
    s.bctname AS billing_city,
    bct.stname AS billing_state,
    bct.dist AS billing_district,
    bct.zone AS billing_zone,
    s.bemail AS billing_email1,
    s.bemail2 AS billing_email2,
    s.bfx1 AS billing_fax,
    s.bfx2 AS billing_mobile,
    s.bph1 AS billing_office_phone1,
    s.bph2 AS billing_office_phone2,
    s.bph3 AS billing_office_phone3,
    s.bph4 AS billing_residence_phone,
    s.bpin AS billing_pincode,
    s.brand AS product_brand_name,
    s.bwebsite AS billing_website,
    initcap(
        CASE
            WHEN (s.cash_discount_applicable = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.cash_discount_applicable = 'N'::bpchar) THEN 'NO'::text
            ELSE 'NO'::text
        END) AS cash_discount_applicable,
    s.cash_discount_percentage,
    s.cash_discount_period,
    s.chqlabel AS bank_cheque_label,
    s.cinno AS cin_no,
    cls.clsname AS class_name,
        CASE
            WHEN (cls.clstype = 'C'::bpchar) THEN 'CUSTOMER'::text
            WHEN (cls.clstype = 'S'::bpchar) THEN 'SUPPLIER'::text
            WHEN (cls.clstype = 'J'::bpchar) THEN 'JOBBER'::text
            WHEN (cls.clstype = 'A'::bpchar) THEN 'AGENT'::text
            WHEN (cls.clstype = 'T'::bpchar) THEN 'TRANSPORTER'::text
            WHEN (cls.clstype = 'E'::bpchar) THEN 'EMPLOYEE'::text
            WHEN (cls.clstype = 'D'::bpchar) THEN 'TDS AGENCY'::text
            WHEN (cls.clstype = 'H'::bpchar) THEN 'CHANNEL'::text
            WHEN (cls.clstype = 'O'::bpchar) THEN 'OTHERS'::text
            ELSE NULL::text
        END AS class_type,
    initcap(
        CASE
            WHEN (s.companytype = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (s.companytype = 'PRO'::bpchar) THEN 'PROPRIETORSHIP'::text
            WHEN (s.companytype = 'PAR'::bpchar) THEN 'PARTNERSHIP'::text
            WHEN (s.companytype = 'PRI'::bpchar) THEN 'PRIVATE LIMITED'::text
            WHEN (s.companytype = 'LIM'::bpchar) THEN 'LIMITED'::text
            WHEN (s.companytype = 'HUF'::bpchar) THEN 'HUF'::text
            WHEN (s.companytype = 'COO'::bpchar) THEN 'CO-OPERATIVE'::text
            ELSE 'OTHERS'::text
        END) AS company_type,
    s.cramt AS credit_limit,
    s.crdays AS credit_days,
    s.croverdueamt AS credit_overdue_amount,
    s.croverduedays AS credit_max_overdue_days,
    s.crtolerance AS credit_tolerance_percentage,
    s.cstdate AS cst_date,
    s.cstno AS cst_no,
    initcap(
        CASE
            WHEN (s.cvrule = 'N'::bpchar) THEN 'NONE'::text
            WHEN (s.cvrule = 'L'::bpchar) THEN 'CREDIT LIMIT'::text
            WHEN (s.cvrule = 'O'::bpchar) THEN 'OVERDUE'::text
            WHEN (s.cvrule = 'B'::bpchar) THEN 'CREDIT LIMIT AND OVERDUE'::text
            ELSE 'NONE'::text
        END) AS credit_verification_rule,
    s.default_markup AS markup_on_rsp,
    s.default_markup_wsp AS markup_on_wsp,
        CASE
            WHEN (s.due_date_basis = 'E'::bpchar) THEN 'ENTRY DATE'::text
            WHEN (s.due_date_basis = 'D'::bpchar) THEN 'DOCUMENT DATE'::text
            ELSE 'ENTRY DATE'::text
        END AS due_date_basis,
    s.exciseno AS excise_regd_no,
    s.excise_date AS excise_regd_date,
    initcap(
        CASE
            WHEN (s.ext = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.ext = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS extinct,
    initcap(
        CASE
            WHEN (s.gatein_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.gatein_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS gate_entry_applicable,
    s.glcode AS arap_glcode,
    gl.glname AS arap_ledger,
        CASE
            WHEN (s.industrytype = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (s.industrytype = 'SMA'::bpchar) THEN 'SMALL SCALE'::text
            WHEN (s.industrytype = 'LRG'::bpchar) THEN 'LARGE SCALE'::text
            WHEN (s.industrytype = 'GOV'::bpchar) THEN 'GOVERNMENT'::text
            WHEN (s.industrytype = 'CON'::bpchar) THEN 'CONTRACTOR'::text
            ELSE 'OTHERS'::text
        END AS industry_type,
    s.intrate AS credit_interest_rate,
    initcap(
        CASE
            WHEN (s.lgt_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS inward_logistic_applicable,
        CASE
            WHEN (s."limit" = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s."limit" = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s."limit" = 'L'::bpchar) THEN 'LOWER'::text--
            ELSE 'UPPER'::text
        END AS markup_on_rsp_limit,
        CASE
            WHEN (s.limit_wsp = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.limit_wsp = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.limit_wsp = 'L'::bpchar) THEN 'LOWER'::text
            ELSE 'UPPER'::text
        END AS markup_on_wsp_limit,
    s.lstdate AS vat_regd_date,
    s.lstno AS vat_regd_no,
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.markup_selling_limit = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS purchase_price_limit,
    s.markup_selling_price AS purchase_price_factor,
    s.markup_selling_round_off AS purchase_price_roundoff,
    s.microno AS mse_redg_no,
        CASE
            WHEN (s.out_lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_lgt_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END AS outward_logistic_applicable,
    initcap(
        CASE
            WHEN (s.out_permit_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_permit_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_permit_applicable,
    s.pan,
    initcap(
        CASE
            WHEN (s.permit_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.permit_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS inward_permit_applicable,
    s.prd_max_days AS production_max_overdue_days,
        CASE
            WHEN (s.prd_overdue_action = 'O'::bpchar) THEN 'RESTRICT ORDER'::text
            WHEN (s.prd_overdue_action = 'N'::bpchar) THEN 'NO RESTRICTION'::text
            ELSE 'NO RESTRICTION'::text
        END AS production_overdue_action,
    initcap((((
        CASE
            WHEN (COALESCE(s.markup_selling_price, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE (((s.markup_selling_price)::character varying)::text || '% of '::text)
        END ||
        CASE
            WHEN (s.pricetype = 'M'::bpchar) THEN 'RSP'::text
            WHEN (s.pricetype = 'W'::bpchar) THEN 'WSP'::text
            WHEN (s.pricetype = 'C'::bpchar) THEN 'STANDARD RATE'::text
            WHEN (s.pricetype = 'L'::bpchar) THEN 'MRP'::text
            WHEN (s.pricetype = 'R'::bpchar) THEN 'EFFECTIVE RATE (LAST LANDING COST)'::text
            WHEN (s.pricetype = 'B'::bpchar) THEN 'BASIC RATE (LAST PURCHASE)'::text
            ELSE NULL::text
        END) ||
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN ' (UPPER ROUND ) '::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN ' (LOWER ROUND ) '::text
            ELSE ' (ROUND '::text
        END) ||
        CASE
            WHEN (COALESCE(s.markup_selling_round_off, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE (('UPTO '::text || ((s.markup_selling_round_off)::character varying)::text) || ')'::text)
        END)) AS purchase_price_type,
    s.product AS nature_of_product,
    s.pur_delivery_buffer_days AS order_delivery_buffer_days,
    s.pur_duedays AS order_delivery_due_days,
    initcap(
        CASE
            WHEN (s.pur_price_chart_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.pur_price_chart_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS purchas_price_chart_appl,
    s.rem AS remarks,
    s.round_off_markup AS markup_on_rsp_roundoff,
    s.round_off_markup_wsp AS markup_on_wsp_roundoff,
    initcap(
        CASE
            WHEN (s.saletype = 'C'::bpchar) THEN 'CONSIGNMENT'::text
            WHEN (s.saletype = 'O'::bpchar) THEN 'OUTRIGHT'::text
            ELSE 'CONSIGNMENT'::text
        END) AS sale_type,
    initcap(
        CASE
            WHEN (s.sale_post_method = 'I'::bpchar) THEN 'TAX INCLUSIVE'::text
            WHEN (s.sale_post_method = 'E'::bpchar) THEN 'TAX EXCLUSIVE'::text
            ELSE 'TAX INCLUSIVE'::text
        END) AS sale_posting_method,
    s.saddr AS shipping_address,
    s.scp AS shipping_contact_person,
    s.sctname AS shipping_city,
    sct.stname AS shipping_state,
    sct.dist AS shipping_district,
    sct.zone AS shipping_zone,
    s.semail AS shipping_email1,
    s.semail2 AS shipping_email2,
    s.servicetaxcategor AS service_tax_category,
    s.servicetaxdate AS service_tax_regd_date,
    s.servicetaxno AS service_tax_regd_no,
    s.sfx1 AS shipping_fax,
    s.sfx2 AS shipping_mobile,
    initcap(
        CASE
            WHEN (s.shipment_tracking_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.shipment_tracking_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS shipment_tracking_applicable,
    s.slcode AS code,
    s.slid AS identity_no,
    s.slname AS name,
    s.slowner AS company_director_name,
    s.sph1 AS shipping_office_phone1,
    s.sph2 AS shipping_office_phone2,
    s.sph3 AS shipping_office_phone3,
    s.sph4 AS shipping_residence_phone,
    s.spin AS shipping_pincode,
    s.ssino AS ssi_regd_no,
    s.swebsite AS shipping_website,
    tds.tdssrcname AS tds_source,
    initcap(
        CASE
            WHEN (s.tds_app = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.tds_app = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS tds_applicable,
    initcap(
        CASE
            WHEN (s.whether_consignment = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS consignment_purchase_app,
    gst.name AS gst_category,
    s.cp_gstin_no AS gst_identification_no,
    s.cp_gstin_date AS gst_registration_date,
    s.cp_gstin_state_code AS gst_state_code,
    gte.name AS gst_state_name,
    NULL::text AS email,
    s.agcode AS sales_agent_code,
    (((s.slname)::text || '|'::text) || (s.slid)::text) AS display_name_shortcode,
    s.transporter_id
   FROM ((((((((main.finsl s
     JOIN main.fingl gl ON ((s.glcode = gl.glcode)))
     JOIN main.admcls cls ON ((s.clscode = cls.clscode)))
     LEFT JOIN main.admcity bct ON (((s.bctname)::text = (bct.ctname)::text)))
     LEFT JOIN main.admcity sct ON (((s.sctname)::text = (sct.ctname)::text)))
     LEFT JOIN main.fintdssrc tds ON ((s.tdssrccode = tds.tdssrccode)))
     JOIN main.admgstcategory gst ON ((s.cp_category_code = gst.code)))
     LEFT JOIN main.admgststate gte ON ((s.cp_gstin_state_code = gte.code)))
     LEFT JOIN main.finsl ag ON ((s.agcode = ag.slcode)))
  WHERE (gl.srctype = 'R'::bpchar);

ALTER VIEW ginview.lv_arap_sub_ledger OWNER TO gslpgadmin;

CREATE OR REPLACE VIEW ginview.lv_transporter AS
 SELECT s.slcode AS uk,
    s.abbre AS alias,
    tax.name AS tax_region,
    cur.name AS currency,
    ag.slname AS sales_agent_name,
    s.agrate AS agency_commission_rate,
    s.baddr AS billing_address,
    s.bankaccountno AS bank_account_no,
    s.bankifccode AS bank_ifsc_code,
    s.bankmicrcode AS bank_micr_code,
    s.bankname AS bank_name,
    s.bankrtgscode AS bank_rtgs_code,
    s.bcp AS billing_contact_person,
    s.bctname AS billing_city,
    bct.stname AS billing_state,
    bct.dist AS billing_district,
    bct.zone AS billing_zone,
    s.bemail AS billing_email1,
    s.bemail2 AS billing_email2,
    s.bfx1 AS billing_fax,
    s.bfx2 AS billing_mobile,
    s.bph1 AS billing_office_phone1,
    s.bph2 AS billing_office_phone2,
    s.bph3 AS billing_office_phone3,
    s.bph4 AS billing_residence_phone,
    s.bpin AS billing_pincode,
    s.brand AS product_brand_name,
    s.bwebsite AS billing_website,
    initcap(
        CASE
            WHEN (COALESCE(s.cash_discount_applicable, 'N'::bpchar) = 'Y'::bpchar) THEN 'YES'::text
            WHEN (COALESCE(s.cash_discount_applicable, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS cash_discount_applicable,
    s.cash_discount_percentage,
    s.cash_discount_period,
    s.chqlabel AS bank_cheque_label,
    s.cinno AS cin_no,
    cls.clsname AS class_name,
    initcap(
        CASE
            WHEN (cls.clstype = 'C'::bpchar) THEN 'CUSTOMER'::text
            WHEN (cls.clstype = 'S'::bpchar) THEN 'SUPPLIER'::text
            WHEN (cls.clstype = 'J'::bpchar) THEN 'JOBBER'::text
            WHEN (cls.clstype = 'A'::bpchar) THEN 'AGENT'::text
            WHEN (cls.clstype = 'T'::bpchar) THEN 'TRANSPORTER'::text
            WHEN (cls.clstype = 'E'::bpchar) THEN 'EMPLOYEE'::text
            WHEN (cls.clstype = 'D'::bpchar) THEN 'TDS AGENCY'::text
            WHEN (cls.clstype = 'H'::bpchar) THEN 'CHANNEL'::text
            WHEN (cls.clstype = 'O'::bpchar) THEN 'OTHERS'::text
            ELSE NULL::text
        END) AS class_type,
    initcap(
        CASE
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'PRO'::bpchar) THEN 'PROPRIETORSHIP'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'PAR'::bpchar) THEN 'PARTNERSHIP'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'PRI'::bpchar) THEN 'PRIVATE LIMITED'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'LIM'::bpchar) THEN 'LIMITED'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'HUF'::bpchar) THEN 'HUF'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'COO'::bpchar) THEN 'CO-OPERATIVE'::text
            WHEN (COALESCE(s.companytype, 'OTH'::bpchar) = 'OTH'::bpchar) THEN 'OTHERS'::text
            ELSE NULL::text
        END) AS company_type,
    tl.glname AS transfer_in_ledger,
    cl.glname AS consignment_sales_ledger,
    sl.slname AS consignment_sales_sub_ledger,
    tisl.slname AS transfer_in_sub_ledger,
    tol.glname AS transfer_out_ledger,
    tsl.slname AS transfer_out_sub_ledger,
    s.cramt AS credit_limit,
    cr.crname AS credit_rating,
    s.crdays AS credit_days,
    s.croverdueamt AS credit_overdue_amount,
    s.croverduedays AS credit_max_overdue_days,
    s.crtolerance AS credit_tolerance_percentage,
    s.cstdate AS cst_date,
    s.cstno AS cst_no,
    initcap(
        CASE
            WHEN (COALESCE(s.cvrule, 'N'::bpchar) = 'NONE'::bpchar) THEN 'L'::text
            WHEN (COALESCE(s.cvrule, 'N'::bpchar) = 'CREDIT LIMIT'::bpchar) THEN 'O'::text
            WHEN (COALESCE(s.cvrule, 'N'::bpchar) = 'OVERDUE'::bpchar) THEN 'B'::text
            ELSE 'CREDIT LIMIT AND OVERDUE'::text
        END) AS credit_verification_rule,
    s.default_markup AS markup_on_rsp,
    s.default_markup_wsp AS markup_on_wsp,
        CASE
            WHEN (COALESCE(s.due_date_basis, 'E'::bpchar) = 'E'::bpchar) THEN 'ENTRY DATE'::text
            WHEN (COALESCE(s.due_date_basis, 'E'::bpchar) = 'D'::bpchar) THEN 'DOCUMENT DATE'::text
            ELSE NULL::text
        END AS due_date_basis,
    s.exciseno AS excise_regd_no,
    s.excise_date AS excise_regd_date,
    initcap(
        CASE
            WHEN (COALESCE(s.ext, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            WHEN (COALESCE(s.ext, 'N'::bpchar) = 'Y'::bpchar) THEN 'YES'::text
            ELSE NULL::text
        END) AS extinct,
    gr.name AS purchase_trade_group,
    initcap(
        CASE
            WHEN (s.gatein_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.gatein_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS gate_entry_applicable,
    s.glcode AS arap_glcode,
    gl.glname AS arap_ledger,
        CASE
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'SMA'::bpchar) THEN 'SMALL SCALE'::text
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'LRG'::bpchar) THEN 'LARGE SCALE'::text
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'GOV'::bpchar) THEN 'GOVERNMENT'::text
            WHEN (COALESCE(s.industrytype, 'OTH'::bpchar) = 'CON'::bpchar) THEN 'CONTRACTOR'::text
            ELSE NULL::text
        END AS industry_type,
    s.intrate AS credit_interest_rate,
    initcap(
        CASE
            WHEN (COALESCE(s.lgt_appl, 'N'::bpchar) = 'Y'::bpchar) THEN 'YES'::text
            WHEN (COALESCE(s.lgt_appl, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS inward_logistic_applicable,
        CASE
            WHEN (COALESCE(s."limit", 'U'::bpchar) = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (COALESCE(s."limit", 'U'::bpchar) = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (COALESCE(s."limit", 'U'::bpchar) = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS markup_on_rsp_limit,
        CASE
            WHEN (COALESCE(s.limit_wsp, 'U'::bpchar) = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (COALESCE(s.limit_wsp, 'U'::bpchar) = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (COALESCE(s.limit_wsp, 'U'::bpchar) = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS markup_on_wsp_limit,
    s.lstdate AS vat_regd_date,
    s.lstno AS vat_regd_no,
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.markup_selling_limit = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS purchase_price_limit,
    s.markup_selling_price AS purchase_price_factor,
    s.markup_selling_round_off AS purchase_price_roundoff,
    s.microno AS mse_redg_no,
    initcap(
        CASE
            WHEN (s.out_lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_lgt_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_logistic_applicable,
    initcap(
        CASE
            WHEN (s.out_permit_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.out_permit_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS outward_permit_applicable,
    s.pan,
    initcap(
        CASE
            WHEN (COALESCE(s.permit_appl, 'N'::bpchar) = 'Y'::bpchar) THEN 'YES'::text
            WHEN (COALESCE(s.permit_appl, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS inward_permit_applicable,
    s.prd_max_days AS production_max_overdue_days,
        CASE
            WHEN (COALESCE(s.prd_overdue_action, 'N'::bpchar) = 'O'::bpchar) THEN 'RESTRICT ORDER'::text
            ELSE 'NO RESTRICTION'::text
        END AS production_overdue_action,
    pri.pricelistname AS sale_price_list,
    initcap(((((
        CASE
            WHEN (COALESCE(s.markup_selling_price, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE ((s.markup_selling_price)::text || '% of '::text)
        END ||
        CASE
            WHEN (s.pricetype = 'M'::bpchar) THEN 'RSP'::text
            WHEN (s.pricetype = 'W'::bpchar) THEN 'WSP'::text
            WHEN (s.pricetype = 'C'::bpchar) THEN 'STANDARD RATE'::text
            WHEN (s.pricetype = 'L'::bpchar) THEN 'MRP'::text
            WHEN (s.pricetype = 'R'::bpchar) THEN 'EFFECTIVE RATE (LAST LANDING COST)'::text
            WHEN (s.pricetype = 'B'::bpchar) THEN 'BASIC RATE (LAST PURCHASE)'::text
            ELSE NULL::text
        END) ||
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN ' (UPPER ROUND '::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN ' (LOWER ROUND '::text
            ELSE ' (ROUND '::text
        END) ||
        CASE
            WHEN (COALESCE(s.markup_selling_round_off, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE ('UPTO '::text || (s.markup_selling_round_off)::text)
        END) || ')'::text)) AS purchase_price_type,
    s.product AS nature_of_product,
    pgl.glname AS purchase_ledger,
    rgl.glname AS purchase_return_ledger,
    rsl.slname AS purchase_return_sub_ledger,
    psl.slname AS purchase_sub_ledger,
    pf.formname AS purchase_form,
    ptr.name AS purchase_term,
    s.pur_delivery_buffer_days AS order_delivery_buffer_days,
    s.pur_duedays AS order_delivery_due_days,
    initcap(
        CASE
            WHEN (COALESCE(s.pur_price_chart_appl, 'N'::bpchar) = 'Y'::bpchar) THEN 'YES'::text
            WHEN (COALESCE(s.pur_price_chart_appl, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS purchase_price_chart_appl,
    s.rem AS remarks,
    s.round_off_markup AS markup_on_rsp_roundoff,
    s.round_off_markup_wsp AS markup_on_wsp_roundoff,
    s.saddr AS shipping_address,
    sgl.glname AS sales_ledger,
    rtl.glname AS sales_return_ledger,
    srsl.slname AS sales_return_sub_ledger,
    ssl.slname AS sales_sub_ledger,
    initcap(
        CASE
            WHEN (COALESCE(s.saletype, 'C'::bpchar) = 'C'::bpchar) THEN 'CONSIGNMENT'::text
            WHEN (COALESCE(s.saletype, 'C'::bpchar) = 'O'::bpchar) THEN 'OUTRIGHT'::text
            ELSE NULL::text
        END) AS sale_type,
    initcap(
        CASE
            WHEN (COALESCE(s.sale_post_method, 'I'::bpchar) = 'I'::bpchar) THEN 'TAX INCLUSIVE'::text
            WHEN (COALESCE(s.sale_post_method, 'I'::bpchar) = 'E'::bpchar) THEN 'TAX EXCLUSIVE'::text
            ELSE NULL::text
        END) AS sale_posting_method,
    sf.formname AS sale_form,
    str.saltermname AS sale_term,
    ftg.name AS sale_trade_group,
    s.scp AS shipping_contact_person,
    s.sctname AS shipping_city,
    sct.stname AS shipping_state,
    sct.dist AS shipping_district,
    sct.zone AS shipping_zone,
    s.semail AS shipping_email1,
    s.semail2 AS shipping_email2,
    s.servicetaxcategor AS service_tax_category,
    s.servicetaxdate AS service_tax_regd_date,
    s.servicetaxno AS service_tax_regd_no,
    s.sfx1 AS shipping_fax,
    s.sfx2 AS shipping_mobile,
    initcap(
        CASE
            WHEN (s.shipment_tracking_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.shipment_tracking_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS shipment_tracking_applicable,
    s.slcode AS code,
    s.slid AS identity_no,
    s.slname AS name,
    s.slowner AS company_director_name,
    s.sph1 AS shipping_office_phone1,
    s.sph2 AS shipping_office_phone2,
    s.sph3 AS shipping_office_phone3,
    s.sph4 AS shipping_residence_phone,
    s.spin AS shipping_pincode,
    s.ssino AS ssi_regd_no,
    s.swebsite AS shipping_website,
    tds.tdssrcname AS tds_source,
    initcap(
        CASE
            WHEN (COALESCE(s.tds_app, 'N'::bpchar) = 'N'::bpchar) THEN 'NO'::text
            ELSE 'YES'::text
        END) AS tds_applicable,
    tdl.glname AS transit_diff_ledger,
    tsdl.slname AS transit_diff_sub_ledger,
    trl.glname AS transit_ledger,
    trsl.slname AS transit_sub_ledger,
    tp.slname AS transporter,
    vel.glname AS vat_expense_ledger,
    ves.slname AS vat_expense_sub_ledger,
    initcap(
        CASE
            WHEN (s.whether_consignment = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS consignment_purchase_app,
    gst.name AS gst_category,
    s.cp_gstin_no AS gst_identification_no,
    (s.cp_gstin_date)::date AS gst_registration_date,
    s.cp_gstin_state_code AS gst_state_code,
    gte.name AS gst_state_name,
    NULL::text AS email,
    bct.class AS billing_city_class,
    sct.class AS shipping_city_class,
    s.transporter_id
   FROM (((((((((((((((((((((((((((((((((((((((main.finsl s
     LEFT JOIN main.finsl ag ON ((s.agcode = ag.slcode)))
     LEFT JOIN main.finsl sl ON ((s.consignment_sales_slcode = sl.slcode)))
     LEFT JOIN main.finsl tsl ON ((s.consignment_trnsfr_slcode = tsl.slcode)))
     LEFT JOIN main.finsl psl ON ((s.purchase_slcode = psl.slcode)))
     LEFT JOIN main.finsl rsl ON ((s.purchase_return_slcode = rsl.slcode)))
     LEFT JOIN main.finsl ssl ON ((s.sales_slcode = ssl.slcode)))
     LEFT JOIN main.finsl tsdl ON ((s.transitdiff_slcode = tsdl.slcode)))
     LEFT JOIN main.finsl trsl ON ((s.transit_slcode = trsl.slcode)))
     LEFT JOIN main.finsl tp ON ((s.trpcode = tp.slcode)))
     LEFT JOIN main.finsl ves ON ((s.vatexp_slcode = ves.slcode)))
     LEFT JOIN main.finsl tisl ON ((s.consignment_slcode = tisl.slcode)))
     LEFT JOIN main.finsl srsl ON ((s.sales_return_slcode = srsl.slcode)))
     LEFT JOIN main.fingl tl ON ((s.consignment_glcode = tl.glcode)))
     LEFT JOIN main.fingl cl ON ((s.consignment_sales_glcode = cl.glcode)))
     LEFT JOIN main.fingl tol ON ((s.consignment_trnsfr_glcode = tol.glcode)))
     LEFT JOIN main.fingl gl ON ((s.glcode = gl.glcode)))
     LEFT JOIN main.fingl pgl ON ((s.purchase_glcode = pgl.glcode)))
     LEFT JOIN main.fingl rgl ON ((s.purchase_return_glcode = rgl.glcode)))
     LEFT JOIN main.fingl sgl ON ((s.sales_glcode = sgl.glcode)))
     LEFT JOIN main.fingl rtl ON ((s.sales_return_glcode = rtl.glcode)))
     LEFT JOIN main.fingl tdl ON ((s.transitdiff_glcode = tdl.glcode)))
     LEFT JOIN main.fingl trl ON ((s.transit_glcode = trl.glcode)))
     LEFT JOIN main.fingl vel ON ((s.vatexp_glcode = vel.glcode)))
     JOIN main.admcls cls ON ((s.clscode = cls.clscode)))
     LEFT JOIN main.admcity bct ON (((s.bctname)::text = (bct.ctname)::text)))
     LEFT JOIN main.admcity sct ON (((s.sctname)::text = (sct.ctname)::text)))
     LEFT JOIN main.admcmptax tax ON ((s.admcmptax_code = tax.code)))
     LEFT JOIN main.admcurrency cur ON ((s.admcurrency_code = cur.code)))
     LEFT JOIN main.salcreditrating cr ON ((s.crcode = cr.crcode)))
     LEFT JOIN main.fintradegrp gr ON ((s.fintradegrp_code = gr.code)))
     LEFT JOIN main.salpricelistmain pri ON ((s.pricelistcode = pri.pricelistcode)))
     LEFT JOIN main.finform pf ON ((s.purformcode = pf.formcode)))
     LEFT JOIN main.finform sf ON ((s.salformcode = sf.formcode)))
     LEFT JOIN main.purtermmain ptr ON ((s.purtermmain_code = ptr.code)))
     LEFT JOIN main.saltermmain str ON ((s.saltermcode = str.saltermcode)))
     LEFT JOIN main.fintradegrp ftg ON ((s.saltradegrp_code = ftg.code)))
     LEFT JOIN main.fintdssrc tds ON ((s.tdssrccode = tds.tdssrccode)))
     JOIN main.admgstcategory gst ON ((s.cp_category_code = gst.code)))
     LEFT JOIN main.admgststate gte ON ((s.cp_gstin_state_code = gte.code)))
  WHERE (cls.clstype = 'T'::bpchar);

ALTER VIEW ginview.lv_transporter OWNER TO gslpgadmin;

CREATE OR REPLACE VIEW ginview.lv_vendor_item AS
 SELECT s.slcode AS uk,
    s.abbre AS alias,
    s.glcode AS arap_glcode,
    gl.glname AS arap_ledger,
    s.bankaccountno AS bank_account_no,
    s.chqlabel AS bank_cheque_label,
    s.bankifccode AS bank_ifsc_code,
    s.bankmicrcode AS bank_micr_code,
    s.bankname AS bank_name,
    s.bankrtgscode AS bank_rtgs_code,
    s.baddr AS billing_address,
    s.bctname AS billing_city,
    s.bcp AS billing_contact_person,
    bct.dist AS billing_district,
    s.bemail AS billing_email1,
    s.bemail2 AS billing_email2,
    s.bfx1 AS billing_fax,
    s.bfx2 AS billing_mobile,
    s.bph1 AS billing_office_phone1,
    s.bph2 AS billing_office_phone2,
    s.bph3 AS billing_office_phone3,
    s.bpin AS billing_pincode,
    s.bph4 AS billing_residence_phone,
    bct.stname AS billing_state,
    s.bwebsite AS billing_website,
    bct.zone AS billing_zone,
    initcap(
        CASE
            WHEN (s.cash_discount_applicable = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.cash_discount_applicable = 'N'::bpchar) THEN 'NO'::text
            ELSE 'NO'::text
        END) AS cash_discount_applicable,
    s.cash_discount_percentage,
    s.cash_discount_period,
    s.cinno AS cin_no,
    cls.clsname AS class_name,
    initcap(
        CASE
            WHEN (cls.clstype = 'C'::bpchar) THEN 'CUSTOMER'::text
            WHEN (cls.clstype = 'S'::bpchar) THEN 'SUPPLIER'::text
            WHEN (cls.clstype = 'J'::bpchar) THEN 'JOBBER'::text
            WHEN (cls.clstype = 'A'::bpchar) THEN 'AGENT'::text
            WHEN (cls.clstype = 'T'::bpchar) THEN 'TRANSPORTER'::text
            WHEN (cls.clstype = 'E'::bpchar) THEN 'EMPLOYEE'::text
            WHEN (cls.clstype = 'D'::bpchar) THEN 'TDS AGENCY'::text
            WHEN (cls.clstype = 'H'::bpchar) THEN 'CHANNEL'::text
            WHEN (cls.clstype = 'O'::bpchar) THEN 'OTHERS'::text
            ELSE NULL::text
        END) AS class_type,
    s.slcode AS code,
    s.slowner AS company_director_name,
    initcap(
        CASE
            WHEN (s.companytype = 'OTH'::bpchar) THEN 'OTHERS'::text
            WHEN (s.companytype = 'PRO'::bpchar) THEN 'PROPRIETORSHIP'::text
            WHEN (s.companytype = 'PAR'::bpchar) THEN 'PARTNERSHIP'::text
            WHEN (s.companytype = 'PRI'::bpchar) THEN 'PRIVATE LIMITED'::text
            WHEN (s.companytype = 'LIM'::bpchar) THEN 'LIMITED'::text
            WHEN (s.companytype = 'HUF'::bpchar) THEN 'HUF'::text
            WHEN (s.companytype = 'COO'::bpchar) THEN 'CO-OPERATIVE'::text
            ELSE 'OTHERS'::text
        END) AS company_type,
    initcap(
        CASE
            WHEN (s.whether_consignment = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS consignment_purchase_app,
    cl.glname AS consignment_sales_ledger,
    s.crdays AS credit_days,
    s.intrate AS credit_interest_rate,
    s.cramt AS credit_limit,
    s.croverduedays AS credit_max_overdue_days,
    s.croverdueamt AS credit_overdue_amount,
    cr.crname AS credit_rating,
    s.crtolerance AS credit_tolerance_percentage,
    initcap(
        CASE
            WHEN (s.cvrule = 'N'::bpchar) THEN 'NONE'::text
            WHEN (s.cvrule = 'L'::bpchar) THEN 'CREDIT LIMIT'::text
            WHEN (s.cvrule = 'O'::bpchar) THEN 'OVERDUE'::text
            WHEN (s.cvrule = 'B'::bpchar) THEN 'CREDIT LIMIT AND OVERDUE'::text
            ELSE 'NONE'::text
        END) AS credit_verification_rule,
    cur.name AS currency,
        CASE
            WHEN (s.due_date_basis = 'E'::bpchar) THEN 'ENTRY DATE'::text
            WHEN (s.due_date_basis = 'D'::bpchar) THEN 'DOCUMENT DATE'::text
            ELSE 'ENTRY DATE'::text
        END AS due_date_basis,
    NULL::text AS email,
    initcap(
        CASE
            WHEN (s.ext = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.ext = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS extinct,
    initcap(
        CASE
            WHEN (s.gatein_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.gatein_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS gate_entry_applicable,
    gst.name AS gst_category,
    s.cp_gstin_no AS gst_identification_no,
    s.cp_gstin_date AS gst_registration_date,
    s.cp_gstin_state_code AS gst_state_code,
    gte.name AS gst_state_name,
    s.slid AS identity_no,
    initcap(
        CASE
            WHEN (s.lgt_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.lgt_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS inward_logistic_applicable,
    initcap(
        CASE
            WHEN (s.permit_appl = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.permit_appl = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS inward_permit_applicable,
    s.default_markup AS markup_on_rsp,
        CASE
            WHEN (s."limit" = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s."limit" = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s."limit" = 'L'::bpchar) THEN 'LOWER'::text
            ELSE 'UPPER'::text
        END AS markup_on_rsp_limit,
    s.round_off_markup AS markup_on_rsp_roundoff,
    s.default_markup_wsp AS markup_on_wsp,
        CASE
            WHEN (s.limit_wsp = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.limit_wsp = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.limit_wsp = 'L'::bpchar) THEN 'LOWER'::text
            ELSE 'UPPER'::text
        END AS markup_on_wsp_limit,
    s.round_off_markup_wsp AS markup_on_wsp_roundoff,
    s.slname AS name,
    s.product AS nature_of_product,
    s.pur_delivery_buffer_days AS order_delivery_buffer_days,
    s.pur_duedays AS order_delivery_due_days,
    s.pan,
    s.brand AS product_brand_name,
    pf.formname AS purchase_form,
    pgl.glname AS purchase_ledger,
    initcap(
        CASE
            WHEN (s.pur_price_chart_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.pur_price_chart_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE 'NO'::text
        END) AS purchase_price_chart_appl,
    s.markup_selling_price AS purchase_price_factor,
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN 'UPPER'::text
            WHEN (s.markup_selling_limit = 'R'::bpchar) THEN 'ROUND'::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN 'LOWER'::text
            ELSE NULL::text
        END AS purchase_price_limit,
    s.markup_selling_round_off AS purchase_price_roundoff,
    initcap((((
        CASE
            WHEN (COALESCE(s.markup_selling_price, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE ((s.markup_selling_price)::text || '% of '::text)
        END ||
        CASE
            WHEN (s.pricetype = 'M'::bpchar) THEN 'RSP'::text
            WHEN (s.pricetype = 'W'::bpchar) THEN 'WSP'::text
            WHEN (s.pricetype = 'C'::bpchar) THEN 'STANDARD RATE'::text
            WHEN (s.pricetype = 'L'::bpchar) THEN 'MRP'::text
            WHEN (s.pricetype = 'R'::bpchar) THEN 'EFFECTIVE RATE (LAST LANDING COST)'::text
            WHEN (s.pricetype = 'B'::bpchar) THEN 'BASIC RATE (LAST PURCHASE)'::text
            ELSE NULL::text
        END) ||
        CASE
            WHEN (s.markup_selling_limit = 'U'::bpchar) THEN ' (UPPER ROUND ) '::text
            WHEN (s.markup_selling_limit = 'L'::bpchar) THEN ' (LOWER ROUND ) '::text
            ELSE ' (ROUND '::text
        END) ||
        CASE
            WHEN (COALESCE(s.markup_selling_round_off, (999)::numeric) = (999)::numeric) THEN ''::text
            ELSE (('UPTO '::text || (s.markup_selling_round_off)::text) || ')'::text)
        END)) AS purchase_price_type,
    ptr.name AS purchase_term,
    gr.name AS purchase_trade_group,
    s.rem AS remarks,
    ag.slname AS sales_agent_name,
    sf.formname AS sale_form,
    initcap(
        CASE
            WHEN (s.sale_post_method = 'I'::bpchar) THEN 'TAX INCLUSIVE'::text
            WHEN (s.sale_post_method = 'E'::bpchar) THEN 'TAX EXCLUSIVE'::text
            ELSE 'TAX INCLUSIVE'::text
        END) AS sale_posting_method,
    pri.pricelistname AS sale_price_list,
    str.saltermname AS sale_term,
    ftg.name AS sale_trade_group,
    initcap(
        CASE
            WHEN (s.saletype = 'C'::bpchar) THEN 'CONSIGNMENT'::text
            WHEN (s.saletype = 'O'::bpchar) THEN 'OUTRIGHT'::text
            ELSE 'CONSIGNMENT'::text
        END) AS sale_type,
    s.servicetaxcategor AS service_tax_category,
    s.servicetaxdate AS service_tax_regd_date,
    s.servicetaxno AS service_tax_regd_no,
    initcap(
        CASE
            WHEN (s.shipment_tracking_appl = 'Y'::bpchar) THEN 'YES'::text
            WHEN (s.shipment_tracking_appl = 'N'::bpchar) THEN 'NO'::text
            ELSE NULL::text
        END) AS shipment_tracking_applicable,
    s.saddr AS shipping_address,
    s.sctname AS shipping_city,
    s.scp AS shipping_contact_person,
    sct.dist AS shipping_district,
    s.semail AS shipping_email1,
    s.semail2 AS shipping_email2,
    s.sfx1 AS shipping_fax,
    s.sfx2 AS shipping_mobile,
    s.sph1 AS shipping_office_phone1,
    s.sph2 AS shipping_office_phone2,
    s.sph3 AS shipping_office_phone3,
    s.spin AS shipping_pincode,
    s.sph4 AS shipping_residence_phone,
    sct.stname AS shipping_state,
    s.swebsite AS shipping_website,
    sct.zone AS shipping_zone,
    tax.name AS tax_region,
    initcap(
        CASE
            WHEN (s.tds_app = 'N'::bpchar) THEN 'NO'::text
            WHEN (s.tds_app = 'Y'::bpchar) THEN 'YES'::text
            ELSE 'NO'::text
        END) AS tds_applicable,
    tds.tdssrcname AS tds_source,
    tp.slname AS transporter
   FROM (((((((((((((((((((((main.finsl s
     LEFT JOIN main.finsl ag ON ((s.agcode = ag.slcode)))
     LEFT JOIN main.finsl tp ON ((s.trpcode = tp.slcode)))
     LEFT JOIN main.fingl cl ON ((s.consignment_sales_glcode = cl.glcode)))
     LEFT JOIN main.fingl gl ON ((s.glcode = gl.glcode)))
     LEFT JOIN main.fingl pgl ON ((s.purchase_glcode = pgl.glcode)))
     JOIN main.admcls cls ON ((s.clscode = cls.clscode)))
     LEFT JOIN main.admcity bct ON (((s.bctname)::text = (bct.ctname)::text)))
     LEFT JOIN main.admcity sct ON (((s.sctname)::text = (sct.ctname)::text)))
     LEFT JOIN main.admcmptax tax ON ((s.admcmptax_code = tax.code)))
     LEFT JOIN main.admcurrency cur ON ((s.admcurrency_code = cur.code)))
     LEFT JOIN main.salcreditrating cr ON ((s.crcode = cr.crcode)))
     LEFT JOIN main.fintradegrp gr ON ((s.fintradegrp_code = gr.code)))
     LEFT JOIN main.salpricelistmain pri ON ((s.pricelistcode = pri.pricelistcode)))
     LEFT JOIN main.finform pf ON ((s.purformcode = pf.formcode)))
     LEFT JOIN main.finform sf ON ((s.salformcode = sf.formcode)))
     LEFT JOIN main.purtermmain ptr ON ((s.purtermmain_code = ptr.code)))
     LEFT JOIN main.saltermmain str ON ((s.saltermcode = str.saltermcode)))
     LEFT JOIN main.fintradegrp ftg ON ((s.saltradegrp_code = ftg.code)))
     LEFT JOIN main.fintdssrc tds ON ((s.tdssrccode = tds.tdssrccode)))
     LEFT JOIN main.admgstcategory gst ON ((s.cp_category_code = gst.code)))
     LEFT JOIN main.admgststate gte ON ((s.cp_gstin_state_code = gte.code)))
  WHERE (cls.clstype <> ALL (ARRAY['D'::bpchar, 'O'::bpchar]));

ALTER VIEW ginview.lv_vendor_item OWNER TO gslpgadmin;
CREATE OR REPLACE VIEW ginview.so_to_pri
 AS
 SELECT lv_so_header.ordcode AS l1_ordcode,
    lv_so_header.order_date AS l1_order_date,
        CASE
            WHEN salordmain.saletype = 'O'::bpchar THEN 'SALES ORDER'::text
            ELSE 'TRANSFER ORDER'::text
        END AS l1_saletype,
    lv_so_header.pcode AS l1_pcode,
    lv_customer_supplier.name AS l1_cust_name,
    lv_customer_supplier.billing_address AS l1_cust_billing_address,
    lv_customer_supplier.billing_city AS l1_cust_billing_city,
    lv_customer_supplier.billing_contact_person AS l1_cust_billing_contact_person,
    lv_customer_supplier.billing_district AS l1_cust_billing_district,
    lv_customer_supplier.billing_email1 AS l1_cust_billing_email1,
    lv_customer_supplier.billing_email2 AS l1_cust_billing_email2,
    lv_customer_supplier.billing_fax AS l1_cust_billing_fax,
    lv_customer_supplier.billing_mobile AS l1_cust_billing_mobile,
    lv_customer_supplier.billing_office_phone1 AS l1_cust_billing_office_phone1,
    lv_customer_supplier.billing_office_phone2 AS l1_cust_billing_office_phone2,
    lv_customer_supplier.billing_office_phone3 AS l1_cust_billing_office_phone3,
    lv_customer_supplier.billing_pincode AS l1_cust_billing_pincode,
    lv_customer_supplier.billing_state AS l1_cust_billing_state,
    lv_customer_supplier.billing_website AS l1_cust_billing_website,
    lv_customer_supplier.billing_zone AS l1_cust_billing_zone,
    lv_customer_supplier.gst_identification_no AS l1_cust_gstin_no,
    lv_customer_supplier.gst_state_name AS l1_cust_gst_state_name,
    lv_customer_supplier.gst_state_code AS l1_cust_gst_state_code,
    lv_so_header.document_no AS l1_document_no,
    lv_so_header.document_date AS l1_document_date,
    lv_so_header.agcode AS l1_agcode,
    lv_so_header.agent_name AS l1_agent_name,
    lv_so_header.agent_rate AS l1_agent_rate,
    lv_so_header.trpcode AS l1_trpcode,
    lv_so_header.transporter_name AS l1_transporter_name,
    lv_so_header.due_date AS l1_due_date,
    lv_so_header.status AS l1_status,
    lv_so_header.authorized_by AS l1_authorized_by,
    lv_so_header.remarks AS l1_remarks,
    lv_so_header.created_by AS l1_created_by,
    lv_so_header.created_on AS l1_created_on,
    lv_so_header.order_no AS l1_order_no,
    lv_so_header.admou_code AS l1_admou_code,
    lv_organization_unit.name AS l1_orgunit_name,
    lv_organization_unit.website AS l1_orgunit_website,
    lv_organization_unit.cin AS l1_orgunit_cin,
    lv_so_header.admsite_code AS l1_admsite_code,
    lv_refsite.name AS l1_refsite_name,
    lv_refsite.short_code AS l1_refsite_short_code,
    lv_refsite.address AS l1_refsite_address,
    lv_refsite.city AS l1_refsite_city,
    lv_refsite.email AS l1_refsite_email,
    lv_refsite.gst_state_code AS l1_refsite_gst_state_code,
    lv_refsite.gst_state_name AS l1_refsite_gst_state_name,
    lv_refsite.gst_identification_no AS l1_refsite_gstin_no,
    lv_refsite.phone1 AS l1_refsite_phone1,
    lv_refsite.phone2 AS l1_refsite_phone2,
    lv_refsite.phone3 AS l1_refsite_phone3,
    lv_refsite.pincode AS l1_refsite_pincode,
    lv_refsite.shipping_company_name AS l1_refsite_ship_company_name,
    lv_refsite.shipping_address AS l1_refsite_ship_address,
    lv_refsite.shipping_city AS l1_refsite_ship_city,
    lv_refsite.shipping_pincode AS l1_refsite_ship_pincode,
    lv_refsite.shipping_phone1 AS l1_refsite_ship_phone1,
    lv_refsite.shipping_phone2 AS l1_refsite_ship_phone2,
    lv_refsite.shipping_phone3 AS l1_refsite_ship_phone3,
    lv_refsite.shipping_email1 AS l1_refsite_ship_email1,
    lv_refsite.shipping_gst_identification_no AS l1_refsite_ship_gstin_no,
    lv_refsite.shipping_gst_state_name AS l1_refsite_ship_gst_state_name,
    lv_refsite.shipping_gst_state_code AS l1_refsite_ship_gst_state_code,
    lv_so_header.price_type AS l1_price_type,
    lv_so_header.price_list_name AS l1_price_list_name,
    lv_so_header.discount_factor AS l1_discount_factor,
    lv_so_header.price_round_off AS l1_price_round_off,
    lv_so_header.price_round_off_limit AS l1_price_round_off_limit,
    lv_so_header.admsite_code_owner AS l1_admsite_code_owner,
    lv_site.name AS l1_owner_site_name,
    lv_site.short_code AS l1_owner_short_code,
    lv_site.address AS l1_owner_site_address,
    lv_site.city AS l1_owner_site_city,
    lv_site.pincode AS l1_owner_site_pincode,
    lv_site.email1 AS l1_owner_site_email1,
    lv_site.email2 AS l1_owner_site_email2,
    lv_site.phone1 AS l1_owner_site_phone1,
    lv_site.phone2 AS l1_owner_site_phone2,
    lv_site.phone3 AS l1_owner_site_phone3,
    lv_site.gst_identification_no AS l1_owner_gst_identification_no,
    lv_site.gst_state_code AS l1_owner_gst_state_code,
    lv_site.gst_state_name AS l1_owner_gst_state_name,
    lv_so_header.price_inclusion_of_tax AS l1_price_inclusion_of_tax,
    lv_so_header.price_mode AS l1_price_mode,
    lv_so_header.price_basis AS l1_price_basis,
    lv_so_header.sales_term AS l1_sales_term,
    lv_so_header.gross_amount AS l1_inv_gross_amount,
    lv_so_header.charge_amount AS l1_inv_charge_amount,
    lv_so_header.net_amount AS l1_inv_net_amount,
    lv_so_header.trade_group_name AS l1_trade_group_name,
    lv_so_header.store_pos_order_no AS l1_store_pos_order_no,
    lv_so_header.store_pos_order_date AS l1_store_pos_order_date,
    lv_so_header.store_pos_order_remarks AS l1_store_pos_order_remarks,
    lv_so_header.tax_based_on AS l1_tax_based_on,
    lv_so_header.authorized_on AS l1_authorized_on,
    lv_so_header.last_accessed_by AS l1_last_accessed_by,
    lv_so_header.last_accessed_on AS l1_last_accessed_on,
    lv_so_header.on_hold AS l1_on_hold,
    lv_so_header.held_by AS l1_held_by,
    lv_so_header.held_on AS l1_held_on,
    lv_so_header.against_reservation AS l1_against_reservation,
    lv_so_header.challan_no AS l1_challan_no,
    lv_so_header.salordmain_udfstring01 AS l1_salordmain_udfstring01,
    lv_so_header.salordmain_udfstring02 AS l1_salordmain_udfstring02,
    lv_so_header.salordmain_udfstring03 AS l1_salordmain_udfstring03,
    lv_so_header.salordmain_udfstring04 AS l1_salordmain_udfstring04,
    lv_so_header.salordmain_udfstring05 AS l1_salordmain_udfstring05,
    lv_so_header.salordmain_udfstring06 AS l1_salordmain_udfstring06,
    lv_so_header.salordmain_udfstring07 AS l1_salordmain_udfstring07,
    lv_so_header.salordmain_udfstring08 AS l1_salordmain_udfstring08,
    lv_so_header.salordmain_udfstring09 AS l1_salordmain_udfstring09,
    lv_so_header.salordmain_udfstring10 AS l1_salordmain_udfstring10,
    lv_so_header.salordmain_udfnum01 AS l1_salordmain_udfnum01,
    lv_so_header.salordmain_udfnum02 AS l1_salordmain_udfnum02,
    lv_so_header.salordmain_udfnum03 AS l1_salordmain_udfnum03,
    lv_so_header.salordmain_udfnum04 AS l1_salordmain_udfnum04,
    lv_so_header.salordmain_udfnum05 AS l1_salordmain_udfnum05,
    lv_so_header.salordmain_udfdate01 AS l1_salordmain_udfdate01,
    lv_so_header.salordmain_udfdate02 AS l1_salordmain_udfdate02,
    lv_so_header.salordmain_udfdate03 AS l1_salordmain_udfdate03,
    lv_so_header.salordmain_udfdate04 AS l1_salordmain_udfdate04,
    lv_so_header.salordmain_udfdate05 AS l1_salordmain_udfdate05
   FROM lv_so_header
     JOIN salordmain ON lv_so_header.ordcode = salordmain.ordcode
     LEFT JOIN lv_customer_supplier ON lv_so_header.pcode = lv_customer_supplier.code
     LEFT JOIN ginview.lv_organization_unit ON lv_so_header.admou_code = lv_organization_unit.code
     JOIN lv_refsite ON lv_so_header.admsite_code = lv_refsite.sitecode
     JOIN ginview.lv_site ON lv_so_header.admsite_code_owner = lv_site.sitecode;

ALTER TABLE ginview.so_to_pri
    OWNER TO gslpgadmin;

DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE UPPER(table_name) = UPPER('AUD2_FINSL')) THEN
        IF EXISTS (SELECT 1 FROM information_schema.columns WHERE UPPER(table_name) = 'AUD2_FINSL' AND column_name = 'LIMIT') THEN
            ALTER TABLE AUD2_FINSL RENAME COLUMN "LIMIT" to "limit";
        END IF;
    END IF;
END $$;

--Not Valid Check Constraint
/*																 
ALTER TABLE finjrnmain ADD CONSTRAINT c_finjrnmain_glcode_slcode CHECK ((((glcode IS NULL) AND (slcode IS NULL)) OR ((glcode IS NOT NULL) AND (slcode IS NOT NULL)))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE invgrtmain ADD CONSTRAINT c_invgrtmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_taxcode CHECK ((taxcode IS NOT NULL)) NOT VALID;
ALTER TABLE invmiscmain ADD CONSTRAINT c_invmiscmain_doccode CHECK ((doccode IS NOT NULL)) NOT VALID;
ALTER TABLE invmiscmain ADD CONSTRAINT c_invmiscmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE invstfmain ADD CONSTRAINT c_invstfmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE prdjrcbom ADD CONSTRAINT c_prdjrcbom_jobbom_code CHECK ((jobbom_code IS NOT NULL)) NOT VALID;
ALTER TABLE prdord ADD CONSTRAINT c_prdord_doccode CHECK ((doccode IS NOT NULL)) NOT VALID;
ALTER TABLE prdord ADD CONSTRAINT c_prdord_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE purinvjrnmain ADD CONSTRAINT c_purinvjrnmain_purtermcode CHECK ((purtermcode IS NOT NULL)) NOT VALID;
ALTER TABLE purordcnlmain ADD CONSTRAINT c_purordcnlmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE purrtmain ADD CONSTRAINT c_purrtmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE pursrvchg ADD CONSTRAINT n_pursrvchg_glcode CHECK ((glcode IS NOT NULL)) NOT VALID;
ALTER TABLE pursrvchg_item ADD CONSTRAINT n_pursrvchg_item_glcode CHECK ((glcode IS NOT NULL)) NOT VALID;
ALTER TABLE pursrvjrnchg ADD CONSTRAINT n_ppursrvjrnchg_glcode CHECK ((glcode IS NOT NULL)) NOT VALID;
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT n_pursrvjrnchg_item_glcode CHECK ((glcode IS NOT NULL)) NOT VALID;
ALTER TABLE pursrvmain ADD CONSTRAINT c_pursrvmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE salinvjrnmain ADD CONSTRAINT c_salinvjrnmain_saltermcode CHECK ((saltermcode IS NOT NULL)) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE salordcnlmain ADD CONSTRAINT c_salordcnlmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_scheme_docno CHECK ((scheme_docno IS NOT NULL)) NOT VALID;

--Primary Key
															   
ALTER TABLE gds2_event_version_map ADD CONSTRAINT gds2_event_version_map_pkey primary key(event_id, event_template_id, gds2_version);
ALTER TABLE gds2_version ADD CONSTRAINT gds2_version_pkey primary key(version);
ALTER TABLE mdconnected_event ADD CONSTRAINT mdconnected_event_pk primary key(connected_app_type, gds2_version, gds_event_id);
ALTER TABLE admattached_files ADD CONSTRAINT admattached_files_pk PRIMARY KEY (code);
ALTER TABLE admcity ADD CONSTRAINT p_admcity_code PRIMARY KEY (code);
ALTER TABLE admcls ADD CONSTRAINT p_admcls_clscode PRIMARY KEY (clscode);
ALTER TABLE admcmp ADD CONSTRAINT p_admcmp_cmpcode PRIMARY KEY (cmpcode);
ALTER TABLE admcmptax ADD CONSTRAINT pk_admcmptax PRIMARY KEY (code);
ALTER TABLE admcurrency ADD CONSTRAINT admcurrency_pk PRIMARY KEY (code);
ALTER TABLE admcurrency_rate ADD CONSTRAINT admcurrency_rate_pk PRIMARY KEY (code);
ALTER TABLE admdaybook ADD CONSTRAINT admdaybook_pk PRIMARY KEY (code);
ALTER TABLE admdocreport ADD CONSTRAINT admdocreport_pk PRIMARY KEY (code);
ALTER TABLE admdocscheme ADD CONSTRAINT admdocscheme_pk PRIMARY KEY (doccode);
ALTER TABLE admfunction ADD CONSTRAINT p_admfunction_functioncode PRIMARY KEY (functioncode);
ALTER TABLE admgstcategory ADD CONSTRAINT admgstcategory_pk PRIMARY KEY (code);
ALTER TABLE admgstin ADD CONSTRAINT admgstin_pk PRIMARY KEY (code);
ALTER TABLE admgstjrnreason ADD CONSTRAINT admgstjrnreason_pk PRIMARY KEY (code);
ALTER TABLE admgststate ADD CONSTRAINT admgststate_pk PRIMARY KEY (code);
ALTER TABLE admisd ADD CONSTRAINT admisdcode_pk PRIMARY KEY (code);
ALTER TABLE admlastdoc ADD CONSTRAINT admlastdoc_pk PRIMARY KEY (code);
ALTER TABLE admlastno ADD CONSTRAINT admlastno_pk PRIMARY KEY (code);
ALTER TABLE admlastordno ADD CONSTRAINT admlastordno_pk PRIMARY KEY (code);
ALTER TABLE admlet ADD CONSTRAINT p_admlet_letcode PRIMARY KEY (letcode);
ALTER TABLE admlog ADD CONSTRAINT p_admlog_logcode PRIMARY KEY (logcode);
ALTER TABLE admmenu ADD CONSTRAINT p_admmenu_menucode PRIMARY KEY (menucode);
ALTER TABLE admmenu_docscheme ADD CONSTRAINT admmenudoc_pk PRIMARY KEY (code);
ALTER TABLE admmodule ADD CONSTRAINT ers_module_pk PRIMARY KEY (code);
ALTER TABLE admmonth ADD CONSTRAINT p_admmonth_mcode PRIMARY KEY (mcode);
ALTER TABLE admou ADD CONSTRAINT p_admou_code PRIMARY KEY (code);
ALTER TABLE admou_docscheme ADD CONSTRAINT admou_docscheme_pk PRIMARY KEY (code);
ALTER TABLE admou_month ADD CONSTRAINT p_admou_month_code PRIMARY KEY (code);
ALTER TABLE admou_year ADD CONSTRAINT p_admou_year_code PRIMARY KEY (code);
ALTER TABLE admpriv ADD CONSTRAINT admpriv_pk PRIMARY KEY (code);
ALTER TABLE admprn_barcode ADD CONSTRAINT admprn_barcode_pk PRIMARY KEY (code);
ALTER TABLE admprof ADD CONSTRAINT p_admprof_profcode PRIMARY KEY (profcode);
ALTER TABLE admquicklaunch ADD CONSTRAINT admquicklaunch_pk PRIMARY KEY (code);
ALTER TABLE admrole ADD CONSTRAINT p_admrole_rlcode PRIMARY KEY (rlcode);
ALTER TABLE admsite ADD CONSTRAINT p_admsite_code PRIMARY KEY (code);
ALTER TABLE admsite_ou ADD CONSTRAINT admsite_ou_pk PRIMARY KEY (code);
ALTER TABLE admterminal ADD CONSTRAINT p_admterminal_terminalcode PRIMARY KEY (terminalcode);
ALTER TABLE admyear ADD CONSTRAINT p_admyear_ycode PRIMARY KEY (ycode);
ALTER TABLE apidatasync_error_log ADD CONSTRAINT apidatasync_error_log_pk PRIMARY KEY (code);
ALTER TABLE appuser ADD CONSTRAINT appuser_pk PRIMARY KEY (id);
ALTER TABLE aud2_module ADD CONSTRAINT aud2_module_pkey PRIMARY KEY (shortcode);
ALTER TABLE aud2_table ADD CONSTRAINT aud2_table_pkey PRIMARY KEY (table_name);
ALTER TABLE aud_events ADD CONSTRAINT p_aud_login PRIMARY KEY (code);
ALTER TABLE aud_module ADD CONSTRAINT aud_module_pk PRIMARY KEY (shortcode);
ALTER TABLE aud_purge ADD CONSTRAINT aud_purge_pk PRIMARY KEY (id);
ALTER TABLE aud_purge_det ADD CONSTRAINT aud_purge_det_pk PRIMARY KEY (id);
ALTER TABLE aud_tab_col ADD CONSTRAINT aud_tab_col_pk PRIMARY KEY (table_name, update_of_column);
ALTER TABLE aud_table ADD CONSTRAINT aud_table_pk PRIMARY KEY (module_shortcode, table_name);
ALTER TABLE backup_history ADD CONSTRAINT backup_history_pk PRIMARY KEY (code);
ALTER TABLE chl_channelmaster ADD CONSTRAINT chl_channelmaster_pkey PRIMARY KEY (code);
ALTER TABLE chl_mj_order ADD CONSTRAINT chl_mj_order_pkey PRIMARY KEY (orderid);
ALTER TABLE chl_mj_orderdetail ADD CONSTRAINT chl_mj_orderdetail_pkey PRIMARY KEY (orderlineid);
ALTER TABLE cogs_run_log ADD CONSTRAINT p_tablecogs_run_log_code PRIMARY KEY (code);
ALTER TABLE connected_app ADD CONSTRAINT connected_app_pk PRIMARY KEY (code);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT connected_app_assrt_exclude_pk PRIMARY KEY (code);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT connected_app_assrt_include_pk PRIMARY KEY (code);
ALTER TABLE connected_app_bin ADD CONSTRAINT connected_app_bin_pk PRIMARY KEY (code);
ALTER TABLE connected_app_channel ADD CONSTRAINT connected_app_channel_pk PRIMARY KEY (code);
ALTER TABLE connected_app_customer ADD CONSTRAINT connected_app_customer_pk PRIMARY KEY (code);
ALTER TABLE connected_app_expense ADD CONSTRAINT connected_app_expense_pk PRIMARY KEY (code);
ALTER TABLE connected_app_expenseexception ADD CONSTRAINT connected_app_expenseexcptn_pk PRIMARY KEY (code);
ALTER TABLE connected_app_site ADD CONSTRAINT connected_app_site_pk PRIMARY KEY (code);
ALTER TABLE connected_app_stockpoint ADD CONSTRAINT connected_app_stockpoint_pk PRIMARY KEY (code);
ALTER TABLE connected_app_tender ADD CONSTRAINT connected_app_tender_pk PRIMARY KEY (code);
ALTER TABLE connected_app_tenderexception ADD CONSTRAINT connected_app_tenderexcptn_pk PRIMARY KEY (code);
ALTER TABLE connected_app_transporter ADD CONSTRAINT connected_app_transporter_pk PRIMARY KEY (code);
ALTER TABLE custompatch ADD CONSTRAINT custompatch_pk PRIMARY KEY (patchid);
ALTER TABLE custompatchcirculation ADD CONSTRAINT custompatchcirculation_pk PRIMARY KEY (patchcirculationid);
ALTER TABLE customtype ADD CONSTRAINT customtype_pk PRIMARY KEY (code);
ALTER TABLE deps_saved_ddl ADD CONSTRAINT deps_saved_ddl_pkey PRIMARY KEY (deps_id);
ALTER TABLE depthsnchangelog ADD CONSTRAINT depthsnchangelog_pk PRIMARY KEY (code);
ALTER TABLE ds_job_queue ADD CONSTRAINT ds_job_queue_pk PRIMARY KEY (sitecode);
ALTER TABLE ds_pos_statistics ADD CONSTRAINT ds_dashboard_pk PRIMARY KEY (admsite_code);
ALTER TABLE dxreceive ADD CONSTRAINT dxreceive_pk PRIMARY KEY (id);
ALTER TABLE dxreceive2 ADD CONSTRAINT dxreceive2_pk PRIMARY KEY (evtqueueid, sendercuid);
ALTER TABLE dxreceivedata ADD CONSTRAINT dxreceivedata_pk PRIMARY KEY (dxreceiveid);
ALTER TABLE dxsend ADD CONSTRAINT dxsend_pk PRIMARY KEY (id);
ALTER TABLE dxsend2 ADD CONSTRAINT dxsend2_pk PRIMARY KEY (id);
ALTER TABLE dxsenddata ADD CONSTRAINT dxsenddata_pk PRIMARY KEY (dxsendid);
ALTER TABLE dxsessionlog ADD CONSTRAINT dxsessionlog_pk PRIMARY KEY (id);
ALTER TABLE dxsessionlog2 ADD CONSTRAINT dxsessionlog2_pk PRIMARY KEY (id);
ALTER TABLE ewaybill_cancellation_history ADD CONSTRAINT ewaybill_cancel_history_pk PRIMARY KEY (code);
ALTER TABLE ex_folder_master ADD CONSTRAINT ex_folder_master_pk PRIMARY KEY (code);
ALTER TABLE ex_folder_report_map ADD CONSTRAINT ex_folder_report_map_pk PRIMARY KEY (code);
ALTER TABLE ex_report_config ADD CONSTRAINT ex_report_config_pk PRIMARY KEY (code);
ALTER TABLE ex_report_master ADD CONSTRAINT ex_report_master_pk PRIMARY KEY (code);
ALTER TABLE ex_template_master ADD CONSTRAINT ex_template_master_pk PRIMARY KEY (code);
ALTER TABLE ex_theme_master ADD CONSTRAINT ex_theme_master_pk PRIMARY KEY (code);
ALTER TABLE excisedet ADD CONSTRAINT excisedet_pk PRIMARY KEY (code);
ALTER TABLE excisemain ADD CONSTRAINT excisemain_code_pk PRIMARY KEY (code);
ALTER TABLE expense_master ADD CONSTRAINT expense_master_pk PRIMARY KEY (code);
ALTER TABLE finchg ADD CONSTRAINT p_finchg_chgcode PRIMARY KEY (chgcode);
ALTER TABLE finchqdet ADD CONSTRAINT finchqdet_pk PRIMARY KEY (code);
ALTER TABLE finchqmain ADD CONSTRAINT p_finchqmain_bookcode PRIMARY KEY (bookcode);
ALTER TABLE fincost ADD CONSTRAINT p_fincost_costcode PRIMARY KEY (costcode);
ALTER TABLE fincostop ADD CONSTRAINT fincostop_pk PRIMARY KEY (code);
ALTER TABLE fincosttag ADD CONSTRAINT fincosttag_pk PRIMARY KEY (code);
ALTER TABLE fincosttag_check ADD CONSTRAINT fincosttag_check_pk PRIMARY KEY (entcode);
ALTER TABLE findoc_age_slab ADD CONSTRAINT findoc_age_slab_pkey PRIMARY KEY (code);
ALTER TABLE finentgrp ADD CONSTRAINT p_finentgrp_entgrpcode PRIMARY KEY (entgrpcode);
ALTER TABLE finenttype ADD CONSTRAINT p_finenttype_enttype PRIMARY KEY (enttype);
ALTER TABLE finform ADD CONSTRAINT p_finform_formcode PRIMARY KEY (formcode);
ALTER TABLE fingl ADD CONSTRAINT p_fingl_glcode PRIMARY KEY (glcode);
ALTER TABLE fingl_site ADD CONSTRAINT fingl_site_pk PRIMARY KEY (code);
ALTER TABLE finglbud ADD CONSTRAINT finglbud_pk PRIMARY KEY (code);
ALTER TABLE finglop ADD CONSTRAINT finglop_pk PRIMARY KEY (code);
ALTER TABLE fingrp ADD CONSTRAINT p_fingrp_grpcode PRIMARY KEY (grpcode);
ALTER TABLE finjrndet ADD CONSTRAINT finjrndet_pk PRIMARY KEY (code);
ALTER TABLE finjrnmain ADD CONSTRAINT p_finjrnmain_jrncode PRIMARY KEY (jrncode);
ALTER TABLE finnar ADD CONSTRAINT p_finnar_narcode PRIMARY KEY (narcode);
ALTER TABLE finopdoc ADD CONSTRAINT finopdoc_pk PRIMARY KEY (entcode);
ALTER TABLE finpost ADD CONSTRAINT p_finpost_postcode PRIMARY KEY (postcode);
ALTER TABLE finpost_check ADD CONSTRAINT p_finpost_check_entcode PRIMARY KEY (entcode);
ALTER TABLE finsl ADD CONSTRAINT p_finsl_slcode PRIMARY KEY (slcode);
ALTER TABLE finsl_gl ADD CONSTRAINT p_finsl_gl_code PRIMARY KEY (code);
ALTER TABLE finsl_gl_site ADD CONSTRAINT p_finsl_gl_site_code PRIMARY KEY (code);
ALTER TABLE finsl_loccode ADD CONSTRAINT p_finsl_loccode_code PRIMARY KEY (code);
ALTER TABLE finsl_ou ADD CONSTRAINT p_finsl_ou_code PRIMARY KEY (code);
ALTER TABLE finsl_ou_site ADD CONSTRAINT finsl_ou_site_pk PRIMARY KEY (code);
ALTER TABLE finslop ADD CONSTRAINT finslop_pk PRIMARY KEY (code);
ALTER TABLE fintag ADD CONSTRAINT fintag_pk PRIMARY KEY (code);
ALTER TABLE fintax_range ADD CONSTRAINT fintax_range_code_pk PRIMARY KEY (code);
ALTER TABLE fintaxdet ADD CONSTRAINT p_fintaxdet_taxdetcode PRIMARY KEY (taxdetcode);
ALTER TABLE fintaxmain ADD CONSTRAINT p_fintaxmain_taxcode PRIMARY KEY (taxcode);
ALTER TABLE fintds_exception ADD CONSTRAINT p_fintds_exception_code PRIMARY KEY (code);
ALTER TABLE fintdsdet ADD CONSTRAINT fintdsdet_pk PRIMARY KEY (code);
ALTER TABLE fintdsmain ADD CONSTRAINT p_fintdsmain_tdscode PRIMARY KEY (tdscode);
ALTER TABLE fintdssrc ADD CONSTRAINT p_fintdssrc_tdssrccode PRIMARY KEY (tdssrccode);
ALTER TABLE fintdstag ADD CONSTRAINT fintdstag_pk PRIMARY KEY (code);
ALTER TABLE fintdstype ADD CONSTRAINT p_fintdstype_tdstypecode PRIMARY KEY (tdstypecode);
ALTER TABLE fintdstypesrc ADD CONSTRAINT p_fintds_srccode PRIMARY KEY (code);
ALTER TABLE fintradegrp ADD CONSTRAINT p_fintradegrp_code PRIMARY KEY (code);
ALTER TABLE finvchdet ADD CONSTRAINT finvchdet_pk PRIMARY KEY (code);
ALTER TABLE finvchdn ADD CONSTRAINT finvchdn_pk PRIMARY KEY (code);
ALTER TABLE finvchmain ADD CONSTRAINT p_finvchmain_vchcode PRIMARY KEY (vchcode);
ALTER TABLE gds2_entity ADD CONSTRAINT gds2_entity_pk PRIMARY KEY (id);
ALTER TABLE gds2_event_dl_queue ADD CONSTRAINT gds2_event_dl_queue_pkey PRIMARY KEY (id);
ALTER TABLE gds2_event_md ADD CONSTRAINT gds2_event_pk PRIMARY KEY (id);
ALTER TABLE gds2_event_queue ADD CONSTRAINT gds2_event_queue_pk PRIMARY KEY (id);
ALTER TABLE gds2_event_queue_data ADD CONSTRAINT gds2_event_batch_pk PRIMARY KEY (id);
ALTER TABLE gds2_event_template_md ADD CONSTRAINT gds2_event_template_md_pk PRIMARY KEY (id);
ALTER TABLE gds2_event_track ADD CONSTRAINT gds2_event_track_pk PRIMARY KEY (id);
ALTER TABLE gds2_event_track_inv ADD CONSTRAINT gds2_event_track_inv_pk PRIMARY KEY (id);
ALTER TABLE gds2_out_log_api ADD CONSTRAINT pk_gds2_out_log_rest PRIMARY KEY (id);
ALTER TABLE gds2_out_log_db ADD CONSTRAINT pk_gds2_out_log_db_rest PRIMARY KEY (id);
ALTER TABLE gds2_subscr ADD CONSTRAINT gds2_subscr_pk PRIMARY KEY (id);
ALTER TABLE gds2_subscr_event ADD CONSTRAINT gds2_subscr_event_pk PRIMARY KEY (id);
ALTER TABLE gds2_subscr_session ADD CONSTRAINT gds2_subscr_session_pkey PRIMARY KEY (id);
ALTER TABLE gds2_webhook_success ADD CONSTRAINT gds2_webhook_success_pkey PRIMARY KEY (id);
ALTER TABLE gds_entity ADD CONSTRAINT gds_entity_pk PRIMARY KEY (entity_id);
ALTER TABLE gds_inbound_transactionlog ADD CONSTRAINT gds_inbound_transactionlog_pk PRIMARY KEY (id);
ALTER TABLE global_item_show ADD CONSTRAINT pk_globalitemshow PRIMARY KEY (code, itemtype, userid);
ALTER TABLE grc_authorize_trap ADD CONSTRAINT grc_authorize_trap_pk PRIMARY KEY (grccode);
ALTER TABLE gridstate ADD CONSTRAINT gridstate_pkey PRIMARY KEY (id);
ALTER TABLE grt_authorize_trap ADD CONSTRAINT grt_authorize_trap_pk PRIMARY KEY (grtcode);
ALTER TABLE gstupload_staging ADD CONSTRAINT gstupload_staging_pk PRIMARY KEY (code);
ALTER TABLE gvbooklet ADD CONSTRAINT gvbooklet_pk PRIMARY KEY (code);
ALTER TABLE gvcategory ADD CONSTRAINT gvcategory_pk PRIMARY KEY (code);
ALTER TABLE gvissue_journal ADD CONSTRAINT gvissue_journal_pk PRIMARY KEY (code);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT gvissue_journal_void_pk PRIMARY KEY (gvissue_journal_code);
ALTER TABLE gvissue_jrnl_detail_void ADD CONSTRAINT gvissue_jrnl_detail_void_pk PRIMARY KEY (gvissue_journal_detail_code);
ALTER TABLE gvissuepayment_journal ADD CONSTRAINT gvissuepayment_journal_pk PRIMARY KEY (code);
ALTER TABLE gvissuepayment_journal_void ADD CONSTRAINT gvissuepayment_journal_void_pk PRIMARY KEY (gvissuepayment_journal_code);
ALTER TABLE gvleaves ADD CONSTRAINT gvleaves_pk PRIMARY KEY (code);
ALTER TABLE hfcounter ADD CONSTRAINT hfcounter_pk PRIMARY KEY (id);
ALTER TABLE hfhash ADD CONSTRAINT hfhash_pk PRIMARY KEY (id);
ALTER TABLE hfjob ADD CONSTRAINT hfjob_pk PRIMARY KEY (id);
ALTER TABLE hfjobparameter ADD CONSTRAINT hfjobparameter_pk PRIMARY KEY (id);
ALTER TABLE hfjobqueue ADD CONSTRAINT hfjobqueue_pk PRIMARY KEY (id);
ALTER TABLE hflist ADD CONSTRAINT hflist_pk PRIMARY KEY (id);
ALTER TABLE hfserver ADD CONSTRAINT hfserver_pk PRIMARY KEY (id);
ALTER TABLE hfset ADD CONSTRAINT hfset_pk PRIMARY KEY (id);
ALTER TABLE hfstate ADD CONSTRAINT hfstate_pk PRIMARY KEY (id);
ALTER TABLE hrddept ADD CONSTRAINT p_hrddept_deptcode PRIMARY KEY (deptcode);
ALTER TABLE hrdemp ADD CONSTRAINT p_hrdemp_ecode PRIMARY KEY (ecode);
ALTER TABLE hrdemp_ou ADD CONSTRAINT hrdemp_ou_pk PRIMARY KEY (code);
ALTER TABLE in_purord ADD CONSTRAINT p_in_purord_key PRIMARY KEY (key);
ALTER TABLE inbound_api_log ADD CONSTRAINT inbound_api_log_pk PRIMARY KEY (code);
ALTER TABLE int$article ADD CONSTRAINT int$article_pk PRIMARY KEY (code);
ALTER TABLE int$class ADD CONSTRAINT int$class_pk PRIMARY KEY (classname);
ALTER TABLE int$class_role ADD CONSTRAINT int$class_role_pk PRIMARY KEY (code);
ALTER TABLE int$customer ADD CONSTRAINT int$customer_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$gift_voucher ADD CONSTRAINT int$gift_voucher_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$history ADD CONSTRAINT int$history_pk PRIMARY KEY (code);
ALTER TABLE int$item_serial ADD CONSTRAINT int$item_serial_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$mapping ADD CONSTRAINT int$mapping_pk PRIMARY KEY (code);
ALTER TABLE int$metadata ADD CONSTRAINT int$metadata_pk PRIMARY KEY (code);
ALTER TABLE int$modify_item ADD CONSTRAINT int$modify_item_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$price_chart ADD CONSTRAINT int$price_chart_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$ret_invoice ADD CONSTRAINT int$ret_invoice_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$routegrp ADD CONSTRAINT int$routegrp_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$selectarticle ADD CONSTRAINT int$selectarticle_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$so_wiz ADD CONSTRAINT int$so_wiz_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$socnl_article ADD CONSTRAINT int$socnl_article_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$socnl_barcode ADD CONSTRAINT int$socnl_barcode_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$srvord_stsch ADD CONSTRAINT int$srvord_stsch_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$ss_price_list ADD CONSTRAINT int$ss_price_list_code_pk01 PRIMARY KEY (code);
ALTER TABLE int$tagged_file ADD CONSTRAINT int$tagged_file_pk PRIMARY KEY (code);
ALTER TABLE intgmain ADD CONSTRAINT p_intgmain_intgcode PRIMARY KEY (intgcode);
ALTER TABLE invageing ADD CONSTRAINT invageing_pk PRIMARY KEY (code);
ALTER TABLE invarticle ADD CONSTRAINT invarticle_pk PRIMARY KEY (code);
ALTER TABLE invarticle_finsl_mm ADD CONSTRAINT invarticle_finsl_mm_pk PRIMARY KEY (code);
ALTER TABLE invattr1 ADD CONSTRAINT invattr1_pk PRIMARY KEY (code);
ALTER TABLE invattr2 ADD CONSTRAINT invattr2_pk PRIMARY KEY (code);
ALTER TABLE invattr3 ADD CONSTRAINT invattr3_pk PRIMARY KEY (code);
ALTER TABLE invattr4 ADD CONSTRAINT invattr4_pk PRIMARY KEY (code);
ALTER TABLE invattr5 ADD CONSTRAINT invattr5_pk PRIMARY KEY (code);
ALTER TABLE invattr6 ADD CONSTRAINT invattr6_pk PRIMARY KEY (code);
ALTER TABLE invbatch_serial ADD CONSTRAINT invbatch_serial_pk PRIMARY KEY (code);
ALTER TABLE invbin ADD CONSTRAINT invbin_pk PRIMARY KEY (code);
ALTER TABLE invbinadjdet ADD CONSTRAINT invbinadjdet_pk PRIMARY KEY (code);
ALTER TABLE invbinadjmain ADD CONSTRAINT invbinadjmain_pk PRIMARY KEY (code);
ALTER TABLE invbincountdet ADD CONSTRAINT invbincountdet_pk PRIMARY KEY (code);
ALTER TABLE invbincountmain ADD CONSTRAINT invbincountmain_pk PRIMARY KEY (code);
ALTER TABLE invbingrp ADD CONSTRAINT invbingrp_pk PRIMARY KEY (grpcode);
ALTER TABLE invbingrplev_prompt ADD CONSTRAINT invbingrplev_prompt_pk PRIMARY KEY (code);
ALTER TABLE invbinstock_onhand ADD CONSTRAINT invbinstock_onhand_pk PRIMARY KEY (code);
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT invbinstock_onhand_serial_pk PRIMARY KEY (code);
ALTER TABLE invcat1 ADD CONSTRAINT p_invcat1_ccode PRIMARY KEY (ccode);
ALTER TABLE invcat2 ADD CONSTRAINT p_invcat2_ccode PRIMARY KEY (ccode);
ALTER TABLE invcat3 ADD CONSTRAINT p_invcat3_ccode PRIMARY KEY (ccode);
ALTER TABLE invcat4 ADD CONSTRAINT p_invcat4_ccode PRIMARY KEY (ccode);
ALTER TABLE invcat5 ADD CONSTRAINT p_invcat5_ccode PRIMARY KEY (ccode);
ALTER TABLE invcat6 ADD CONSTRAINT p_invcat6_ccode PRIMARY KEY (ccode);
ALTER TABLE invcostadj ADD CONSTRAINT p_invcostadj_code PRIMARY KEY (code);
ALTER TABLE invcostpool ADD CONSTRAINT p_invcostpool PRIMARY KEY (seq);
ALTER TABLE invdcdet ADD CONSTRAINT invdcdet_pk PRIMARY KEY (code);
ALTER TABLE invdcmain ADD CONSTRAINT p_invdcmain_dccode PRIMARY KEY (dccode);
ALTER TABLE inventgrp ADD CONSTRAINT p_inventgrp_entgrpcode PRIMARY KEY (entgrpcode);
ALTER TABLE inventtype ADD CONSTRAINT p_inventtype_enttype PRIMARY KEY (enttype);
ALTER TABLE invgatein ADD CONSTRAINT p_invgatein_code PRIMARY KEY (code);
ALTER TABLE invgrcchg ADD CONSTRAINT invgrcchg_pk PRIMARY KEY (code);
ALTER TABLE invgrcchg_item ADD CONSTRAINT invgrcchg_item_pk PRIMARY KEY (code);
ALTER TABLE invgrcdet ADD CONSTRAINT invgrcdet_pk PRIMARY KEY (code);
ALTER TABLE invgrcmain ADD CONSTRAINT p_invgrcmain_grccode PRIMARY KEY (grccode);
ALTER TABLE invgrcset ADD CONSTRAINT invgrcset_pk PRIMARY KEY (code);
ALTER TABLE invgrp ADD CONSTRAINT p_invgrp_grpcode PRIMARY KEY (grpcode);
ALTER TABLE invgrtchg ADD CONSTRAINT invgrtchg_pk PRIMARY KEY (code);
ALTER TABLE invgrtchg_item ADD CONSTRAINT invgrtchg_item_pk PRIMARY KEY (code);
ALTER TABLE invgrtdet ADD CONSTRAINT invgrtdet_pk PRIMARY KEY (code);
ALTER TABLE invgrtmain ADD CONSTRAINT p_invgrtmain_grtcode PRIMARY KEY (grtcode);
ALTER TABLE invgst_einvoice ADD CONSTRAINT p_invgst_einvoice_code PRIMARY KEY (code);
ALTER TABLE invgstaddcessrate ADD CONSTRAINT invgstaddcessrate_pkey PRIMARY KEY (code);
ALTER TABLE invgstrate ADD CONSTRAINT invgstrate_pk PRIMARY KEY (code);
ALTER TABLE invhsnsacdet ADD CONSTRAINT invhsnsacdet_pk PRIMARY KEY (code);
ALTER TABLE invhsnsacmain ADD CONSTRAINT invhsnsacmain_pk PRIMARY KEY (code);
ALTER TABLE invhsnsacslab ADD CONSTRAINT invhsnsacslab_pk PRIMARY KEY (code);
ALTER TABLE invinpool ADD CONSTRAINT p_invinpool_code PRIMARY KEY (code);
ALTER TABLE invitem ADD CONSTRAINT p_invitem_icode PRIMARY KEY (icode);
ALTER TABLE invitem_audit ADD CONSTRAINT invitem_audit_pk PRIMARY KEY (code);
ALTER TABLE invitem_history ADD CONSTRAINT pk_invitem_history_code PRIMARY KEY (code);
ALTER TABLE invitem_price ADD CONSTRAINT invitem_price_pk PRIMARY KEY (code);
ALTER TABLE invitemlastinward ADD CONSTRAINT p_invitemlastinward_code PRIMARY KEY (code);
ALTER TABLE invitemop ADD CONSTRAINT invitemop_pk PRIMARY KEY (code);
ALTER TABLE invlgtin_shipment_advice_cnl ADD CONSTRAINT p_invlgtin_ship_ad_cnl_code PRIMARY KEY (code);
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_pk PRIMARY KEY (lgtcode);
ALTER TABLE invlgtnote_bales ADD CONSTRAINT p_invlgtnote_bales_code PRIMARY KEY (code);
ALTER TABLE invlgtnote_item ADD CONSTRAINT invlgtnote_item_pk PRIMARY KEY (code);
ALTER TABLE invloc ADD CONSTRAINT p_invloc_loccode PRIMARY KEY (loccode);
ALTER TABLE invlocgrp ADD CONSTRAINT invlocgrp_pk PRIMARY KEY (code);
ALTER TABLE invmetal ADD CONSTRAINT invmetal_code_pk PRIMARY KEY (code);
ALTER TABLE invmetal_rate ADD CONSTRAINT invmetal_rate_pk PRIMARY KEY (code);
ALTER TABLE invmiscdet ADD CONSTRAINT invmiscdet_pk PRIMARY KEY (miscdetcode);
ALTER TABLE invmiscmain ADD CONSTRAINT invmiscmain_pk PRIMARY KEY (misccode);
ALTER TABLE invmmrule ADD CONSTRAINT invmmrule_pk PRIMARY KEY (code);
ALTER TABLE invmmrule_allocation ADD CONSTRAINT p_invmmrule_alloc_code PRIMARY KEY (code);
ALTER TABLE invmmrule_date ADD CONSTRAINT invmmrule_date_pk PRIMARY KEY (code);
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_pk PRIMARY KEY (code);
ALTER TABLE invmmrule_exception ADD CONSTRAINT invmmrule_exception_pk PRIMARY KEY (code);
ALTER TABLE invoutpool ADD CONSTRAINT p_invoutpool_code PRIMARY KEY (code);
ALTER TABLE invoutpool_det ADD CONSTRAINT p_invoutpool_det_code PRIMARY KEY (code);
ALTER TABLE invpermit ADD CONSTRAINT p_invpermit_permitcode PRIMARY KEY (permitcode);
ALTER TABLE invpicklistcancel ADD CONSTRAINT invpicklistcancel_pk PRIMARY KEY (code);
ALTER TABLE invpicklistconfirmcnl ADD CONSTRAINT invpicklistconfirmcnl_pk PRIMARY KEY (code);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT invpicklistconfirmdet_pk PRIMARY KEY (code);
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_pk PRIMARY KEY (code);
ALTER TABLE invpicklistmain ADD CONSTRAINT invpicklistmain_pk PRIMARY KEY (code);
ALTER TABLE invputdet ADD CONSTRAINT invputdet_pk PRIMARY KEY (code);
ALTER TABLE invputmain ADD CONSTRAINT invputmain_pk PRIMARY KEY (code);
ALTER TABLE invreqdet ADD CONSTRAINT invreqdet_pk PRIMARY KEY (reqdetcode);
ALTER TABLE invreqmain ADD CONSTRAINT invreqmain_pk PRIMARY KEY (reqcode);
ALTER TABLE invreservecancel ADD CONSTRAINT invreservecancel_pk PRIMARY KEY (code);
ALTER TABLE invreservedet ADD CONSTRAINT invreservedet_pk PRIMARY KEY (code);
ALTER TABLE invreservemain ADD CONSTRAINT invreservemain_pk PRIMARY KEY (code);
ALTER TABLE invsetdet ADD CONSTRAINT invsetdet_pk PRIMARY KEY (code);
ALTER TABLE invsetmain ADD CONSTRAINT invsetmain_pk PRIMARY KEY (setcode);
ALTER TABLE invsitestfdet ADD CONSTRAINT invsitestfdet_pk PRIMARY KEY (code);
ALTER TABLE invsitestfmain ADD CONSTRAINT p_invsitestfmain_pk PRIMARY KEY (stfcode);
ALTER TABLE invstfdet ADD CONSTRAINT invstfdet_pk PRIMARY KEY (code);
ALTER TABLE invstfmain ADD CONSTRAINT p_invstfmain_stfcode PRIMARY KEY (stfcode);
ALTER TABLE invstkadjdet ADD CONSTRAINT invstkadjdet_pk PRIMARY KEY (code);
ALTER TABLE invstkadjmain ADD CONSTRAINT invstkadjmain_pk PRIMARY KEY (stkadjcode);
ALTER TABLE invstkentdet ADD CONSTRAINT invstkentdet_pk PRIMARY KEY (code);
ALTER TABLE invstkentmain ADD CONSTRAINT p_invstkentmain_stkentcode PRIMARY KEY (stkentcode);
ALTER TABLE invstkplandet ADD CONSTRAINT invstkplandet_pk PRIMARY KEY (code);
ALTER TABLE invstkplanitem ADD CONSTRAINT p_invstkplanitem_code PRIMARY KEY (code);
ALTER TABLE invstkplanmain ADD CONSTRAINT p_invstkplanmain_stkplancode PRIMARY KEY (stkplancode);
ALTER TABLE invstock ADD CONSTRAINT p_invstock PRIMARY KEY (stockcode);
ALTER TABLE invstock_age_slab ADD CONSTRAINT invstock_age_slab_pkey PRIMARY KEY (code);
ALTER TABLE invstock_intra ADD CONSTRAINT invstock_intra_pk PRIMARY KEY (stockcode);
ALTER TABLE invtakedet ADD CONSTRAINT invtakedet_pk PRIMARY KEY (code);
ALTER TABLE invtakemain ADD CONSTRAINT invtakemain_pk PRIMARY KEY (code);
ALTER TABLE invval_migration_det ADD CONSTRAINT invval_migration_det_pk PRIMARY KEY (code);
ALTER TABLE invval_migration_main ADD CONSTRAINT invval_migration_main_pk PRIMARY KEY (code);
ALTER TABLE lpbenefit ADD CONSTRAINT lpbenefit_pk PRIMARY KEY (code);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT lpbenefit_exp_detail_pk PRIMARY KEY (code);
ALTER TABLE lpcard ADD CONSTRAINT lpcard_pk PRIMARY KEY (cardno);
ALTER TABLE lpcard_benefit_discount ADD CONSTRAINT lpcard_benefit_discount_pk PRIMARY KEY (code);
ALTER TABLE lpcard_benefit_point ADD CONSTRAINT lpcard_benefit_point_pk PRIMARY KEY (code);
ALTER TABLE lpcard_point ADD CONSTRAINT lpcard_point_pk PRIMARY KEY (code);
ALTER TABLE lpcard_type ADD CONSTRAINT lpcard_type_pk PRIMARY KEY (code);
ALTER TABLE lpredemptiontoken ADD CONSTRAINT lpredemptiontoken_pk PRIMARY KEY (code);
ALTER TABLE mailbox ADD CONSTRAINT mailbox_pk PRIMARY KEY (code);
ALTER TABLE mailjob ADD CONSTRAINT mailjob_pk PRIMARY KEY (code);
ALTER TABLE mailjobfilter ADD CONSTRAINT mailjobfilter_pk PRIMARY KEY (code);
ALTER TABLE mailjobfilter_multiple ADD CONSTRAINT mailjobfilter_multiple_pk PRIMARY KEY (code);
ALTER TABLE mailjobtype ADD CONSTRAINT mailjobtype_pk PRIMARY KEY (code);
ALTER TABLE mailjobtype_param ADD CONSTRAINT mailjobtype_param_pk PRIMARY KEY (code);
ALTER TABLE mailoccurence_event ADD CONSTRAINT mailoccurence_event_pk PRIMARY KEY (code);
ALTER TABLE mailserver ADD CONSTRAINT mailserver_pk PRIMARY KEY (code);
ALTER TABLE mdapi ADD CONSTRAINT mdapi_pk PRIMARY KEY (code);
ALTER TABLE mdappoperation ADD CONSTRAINT mdappoperation_pk PRIMARY KEY (id);
ALTER TABLE mdconnected_api ADD CONSTRAINT mdconnected_api_pk PRIMARY KEY (apiid, type);
ALTER TABLE mdconnected_app ADD CONSTRAINT mdconnected_app_pk PRIMARY KEY (app_id);
ALTER TABLE mdcustomerconfig ADD CONSTRAINT mdcustomerconfig_pk PRIMARY KEY (code);
ALTER TABLE mdgstreturn ADD CONSTRAINT mdgstreturn_pk PRIMARY KEY (code);
ALTER TABLE mdlist ADD CONSTRAINT mdlist_pk PRIMARY KEY (id);
ALTER TABLE mdlistcriteria ADD CONSTRAINT mdlistcriteria_pk PRIMARY KEY (id);
ALTER TABLE mdlistcriteriadetail ADD CONSTRAINT mdlistcriteriadetail_pkey PRIMARY KEY (id);
ALTER TABLE mdlistdetail ADD CONSTRAINT mdlistdetail_pk PRIMARY KEY (id);
ALTER TABLE mdmenu ADD CONSTRAINT mdmenu_pk PRIMARY KEY (sys_shortcode);
ALTER TABLE mdmenuappoperation ADD CONSTRAINT mdmenuappoperation_pk PRIMARY KEY (sys_mdappoperationid, sys_mdmenushortcode);
ALTER TABLE mdoperator ADD CONSTRAINT mdoperator_pkey PRIMARY KEY (id);
ALTER TABLE mdpivotreporttype ADD CONSTRAINT mdpivotreporttype_pk PRIMARY KEY (subcategory);
ALTER TABLE mdschedulejob ADD CONSTRAINT mdschedulejob_pk PRIMARY KEY (job_name);
ALTER TABLE mdtype ADD CONSTRAINT mdtype_pk PRIMARY KEY (code);
ALTER TABLE mdwinservices ADD CONSTRAINT mdwinservices_pk PRIMARY KEY (service_name);
ALTER TABLE menudocreport ADD CONSTRAINT menudocreport_pk PRIMARY KEY (code);
ALTER TABLE nfs$contacts_category ADD CONSTRAINT nfs$contacts_category_pk PRIMARY KEY (category);
ALTER TABLE nfs$events ADD CONSTRAINT nfs$events_pk PRIMARY KEY (code);
ALTER TABLE nfs$postasks ADD CONSTRAINT nfs$postasks_pk PRIMARY KEY (nfs$tasks_code);
ALTER TABLE nfs$postasks_alloc ADD CONSTRAINT nfs$postasks_alloc_pk PRIMARY KEY (code);
ALTER TABLE nfs$task_filter ADD CONSTRAINT nfs$task_filter_pk PRIMARY KEY (code);
ALTER TABLE nfs$tasks ADD CONSTRAINT nfs$tasks_pk PRIMARY KEY (code);
ALTER TABLE omschannel_mop ADD CONSTRAINT omschannel_mop_pk PRIMARY KEY (code);
ALTER TABLE picklist_rule ADD CONSTRAINT picklist_rule_pk PRIMARY KEY (code);
ALTER TABLE pivotreportlayout ADD CONSTRAINT pk_pivotreportlayout PRIMARY KEY (layoutid);
ALTER TABLE plugin_execution_history ADD CONSTRAINT plugin_execution_history_pk PRIMARY KEY (code);
ALTER TABLE posjournal ADD CONSTRAINT posjournal_pk PRIMARY KEY (code);
ALTER TABLE posjournal_detail ADD CONSTRAINT posjournal_detail_pk PRIMARY KEY (code);
ALTER TABLE posjournal_detail_void ADD CONSTRAINT posjournal_detail_void_pk PRIMARY KEY (posjournal_detail_code);
ALTER TABLE posjournal_void ADD CONSTRAINT posjournal_void_pk PRIMARY KEY (posjournal_code);
ALTER TABLE prd_saitem ADD CONSTRAINT p_prd_saitem_code PRIMARY KEY (code);
ALTER TABLE prd_wiptrack ADD CONSTRAINT prd_wiptrack_pk PRIMARY KEY (code);
ALTER TABLE prdbomdet ADD CONSTRAINT prdbomdet_pk PRIMARY KEY (code);
ALTER TABLE prdbommain ADD CONSTRAINT p_prdbommain_code PRIMARY KEY (code);
ALTER TABLE prdbomoperation ADD CONSTRAINT prdbomop_code_pk PRIMARY KEY (code);
ALTER TABLE prdbomver ADD CONSTRAINT p_prdbomver_code PRIMARY KEY (code);
ALTER TABLE prdcostsheetbom ADD CONSTRAINT prdcostsheetbom_pk PRIMARY KEY (code);
ALTER TABLE prdcostsheethead ADD CONSTRAINT p_prdcshead_code PRIMARY KEY (code);
ALTER TABLE prdcostsheetoperation ADD CONSTRAINT prdcostsheetoperation_pk PRIMARY KEY (code);
ALTER TABLE prdis ADD CONSTRAINT prdis_pk PRIMARY KEY (code);
ALTER TABLE prdjobbom ADD CONSTRAINT prdjobbom_pk PRIMARY KEY (code);
ALTER TABLE prdjobcnldet ADD CONSTRAINT p_prdjobcnldet_code PRIMARY KEY (code);
ALTER TABLE prdjobcnlmain ADD CONSTRAINT p_prdjobcnlmain_code PRIMARY KEY (code);
ALTER TABLE prdjobdet ADD CONSTRAINT prdjobdet_pk PRIMARY KEY (code);
ALTER TABLE prdjobmain ADD CONSTRAINT p_prdjobmain_code PRIMARY KEY (code);
ALTER TABLE prdjrcbom ADD CONSTRAINT p_prdjrcbom_code PRIMARY KEY (code);
ALTER TABLE prdjrcdet ADD CONSTRAINT prdjrcdet_pk PRIMARY KEY (code);
ALTER TABLE prdjrcmain ADD CONSTRAINT p_prdjrcmain_code PRIMARY KEY (code);
ALTER TABLE prdlotbom ADD CONSTRAINT prdlotbom_pk PRIMARY KEY (code);
ALTER TABLE prdlotdet ADD CONSTRAINT prdlotdet_pk PRIMARY KEY (code);
ALTER TABLE prdlotmain ADD CONSTRAINT p_prdlotmain_code PRIMARY KEY (code);
ALTER TABLE prdlotoperation ADD CONSTRAINT prdlotoperation_pk PRIMARY KEY (code);
ALTER TABLE prdmplanalloc ADD CONSTRAINT prdmplanalloc_code_pk PRIMARY KEY (code);
ALTER TABLE prdmplandet ADD CONSTRAINT prdmplandet_code_pk PRIMARY KEY (code);
ALTER TABLE prdmplanmain ADD CONSTRAINT prdmplanmain_code_pk PRIMARY KEY (code);
ALTER TABLE prdord ADD CONSTRAINT p_prdord_ordcode PRIMARY KEY (ordcode);
ALTER TABLE prdpr ADD CONSTRAINT p_prdpr_prcode PRIMARY KEY (prcode);
ALTER TABLE prdprrate ADD CONSTRAINT prdprrate_pk PRIMARY KEY (code);
ALTER TABLE prdprrate_article ADD CONSTRAINT prdprrate_article_pk PRIMARY KEY (code);
ALTER TABLE prdprrate_item ADD CONSTRAINT prdprrate_item_pk PRIMARY KEY (code);
ALTER TABLE prdrc ADD CONSTRAINT prdrc_pk PRIMARY KEY (code);
ALTER TABLE prdroutedet ADD CONSTRAINT prdroutedet_pk PRIMARY KEY (code);
ALTER TABLE prdroutegrp ADD CONSTRAINT p_prdroutegrp_code PRIMARY KEY (code);
ALTER TABLE prdroutegrpdet ADD CONSTRAINT p_prdroutegrpdet_code PRIMARY KEY (code);
ALTER TABLE prdroutemain ADD CONSTRAINT p_prdroutemain_code PRIMARY KEY (code);
ALTER TABLE prdwipclrdet ADD CONSTRAINT prdwipclrdet_pk PRIMARY KEY (code);
ALTER TABLE prdwipclrmain ADD CONSTRAINT prdwipclrmain_pk PRIMARY KEY (code);
ALTER TABLE prdwipdet ADD CONSTRAINT prdwipdet_pk PRIMARY KEY (code);
ALTER TABLE prdwipmain ADD CONSTRAINT p_prdwipmain_code PRIMARY KEY (code);
ALTER TABLE prdwiptrans ADD CONSTRAINT p_prdwiptrans_code PRIMARY KEY (code);
ALTER TABLE promo_allocation ADD CONSTRAINT promo_allocation_code_pk PRIMARY KEY (code);
ALTER TABLE promo_allocation_det ADD CONSTRAINT promo_allocation_det_pk PRIMARY KEY (code);
ALTER TABLE promo_applicable ADD CONSTRAINT promo_appl_code_pk PRIMARY KEY (code);
ALTER TABLE promo_assortment ADD CONSTRAINT promo_assortment_code_pk PRIMARY KEY (code);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT promo_assortment_exclude_pk PRIMARY KEY (code);
ALTER TABLE promo_assortment_include ADD CONSTRAINT promo_assortment_include_pk PRIMARY KEY (code);
ALTER TABLE promo_benefits ADD CONSTRAINT promo_benefits_code_pk PRIMARY KEY (code);
ALTER TABLE promo_buy ADD CONSTRAINT promo_buy_pk PRIMARY KEY (code);
ALTER TABLE promo_lastno ADD CONSTRAINT promo_lastno_pk PRIMARY KEY (code);
ALTER TABLE promo_master ADD CONSTRAINT promo_master_code_pk PRIMARY KEY (code);
ALTER TABLE promo_slab ADD CONSTRAINT promo_slab_slab_code_pk PRIMARY KEY (slab_code);
ALTER TABLE promo_voucher ADD CONSTRAINT promo_voucher_code_pk PRIMARY KEY (code);
ALTER TABLE psite_alloc_item ADD CONSTRAINT pk_psite_alloc_item_code PRIMARY KEY (code);
ALTER TABLE psite_alloc_posmail ADD CONSTRAINT psite_alloc_posmail_pk PRIMARY KEY (code);
ALTER TABLE psite_alloc_rep_headerfooter ADD CONSTRAINT psite_alloc_rep_hdrfooter_pk PRIMARY KEY (code);
ALTER TABLE psite_allocation ADD CONSTRAINT psite_allocation_pk PRIMARY KEY (code);
ALTER TABLE psite_allocation_detail ADD CONSTRAINT psite_allocation_detail_pkey PRIMARY KEY (code);
ALTER TABLE psite_appsetting ADD CONSTRAINT psite_appsetting_pk PRIMARY KEY (sys_shortcode);
ALTER TABLE psite_auditjournal ADD CONSTRAINT psite_auditjournal_pk PRIMARY KEY (code);
ALTER TABLE psite_auditjournal_assortment ADD CONSTRAINT psite_auditjournal_assrtmnt_pk PRIMARY KEY (code);
ALTER TABLE psite_auditjournalitem ADD CONSTRAINT psite_auditjournalitem_pk PRIMARY KEY (code);
ALTER TABLE psite_auditplan ADD CONSTRAINT psite_auditplan_pk PRIMARY KEY (code);
ALTER TABLE psite_auditplan_assign ADD CONSTRAINT psite_auditplan_assign_pk PRIMARY KEY (code);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT psite_auditplan_assortment_pk PRIMARY KEY (code);
ALTER TABLE psite_coupon_assign ADD CONSTRAINT psite_coupon_assign_pk PRIMARY KEY (code);
ALTER TABLE psite_coupon_assrt ADD CONSTRAINT psite_coupon_assrt_pk PRIMARY KEY (code);
ALTER TABLE psite_couponoffer ADD CONSTRAINT psite_couponoffer_pk PRIMARY KEY (code);
ALTER TABLE psite_cus_bulk_merge_session ADD CONSTRAINT psite_cus_merge_session_pk PRIMARY KEY (id);
ALTER TABLE psite_customer ADD CONSTRAINT psite_customer_pk PRIMARY KEY (code);
ALTER TABLE psite_customer_dist ADD CONSTRAINT psite_customer_dist_pk PRIMARY KEY (code);
ALTER TABLE psite_customer_merge ADD CONSTRAINT psite_customer_merge_pk PRIMARY KEY (code);
ALTER TABLE psite_deliveryslip ADD CONSTRAINT psite_deliveryslip_pk PRIMARY KEY (code);
ALTER TABLE psite_deliveryslipitem ADD CONSTRAINT psite_deliveryslipitem_pk PRIMARY KEY (code);
ALTER TABLE psite_deliveryslipitemvoid ADD CONSTRAINT psite_deliveryslipitemvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_deliveryslipvoid ADD CONSTRAINT psite_deliveryslipvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_discount ADD CONSTRAINT psite_discount_pk PRIMARY KEY (code);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT psite_discountblocklist_pk PRIMARY KEY (code);
ALTER TABLE psite_docscheme ADD CONSTRAINT psite_docscheme_pk PRIMARY KEY (code);
ALTER TABLE psite_emr_bill_resubmit ADD CONSTRAINT psite_emr_bill_resubmit_pk PRIMARY KEY (admsite_code, billdate, billno, ecode);
ALTER TABLE psite_emrsubmit_queue ADD CONSTRAINT psite_emrfeedback_log_pk PRIMARY KEY (code);
ALTER TABLE psite_emrtransaction_log ADD CONSTRAINT psite_emrtransaction_log_pk PRIMARY KEY (code);
ALTER TABLE psite_event ADD CONSTRAINT p_psev_code PRIMARY KEY (code);
ALTER TABLE psite_event_archive ADD CONSTRAINT psite_event_archive_pk PRIMARY KEY (code);
ALTER TABLE psite_event_data ADD CONSTRAINT psite_event_data_pk PRIMARY KEY (eventdata, eventtype);
ALTER TABLE psite_event_set ADD CONSTRAINT psite_event_set_pkey PRIMARY KEY (code);
ALTER TABLE psite_event_set_det ADD CONSTRAINT psite_event_set_det_pkey PRIMARY KEY (event_set_code, refcode);
ALTER TABLE psite_event_tracking ADD CONSTRAINT p_psev_tracking_code PRIMARY KEY (code);
ALTER TABLE psite_event_tracking2 ADD CONSTRAINT p_psev_tracking_code2 PRIMARY KEY (code);
ALTER TABLE psite_event_type ADD CONSTRAINT p_psev_type_eventtype PRIMARY KEY (eventtype);
ALTER TABLE psite_global_appuser ADD CONSTRAINT psite_global_appuser_pk PRIMARY KEY (id);
ALTER TABLE psite_global_appuser_assign ADD CONSTRAINT code_pk PRIMARY KEY (code);
ALTER TABLE psite_global_localpolicy ADD CONSTRAINT psite_global_localpolicy_pk PRIMARY KEY (id);
ALTER TABLE psite_global_localpolicydetail ADD CONSTRAINT psite_global_localpoldet_pk PRIMARY KEY (id);
ALTER TABLE psite_global_role ADD CONSTRAINT psite_global_role_pk PRIMARY KEY (id);
ALTER TABLE psite_global_rolemenu ADD CONSTRAINT psite_global_rolemenu_pk PRIMARY KEY (id);
ALTER TABLE psite_global_salesperson ADD CONSTRAINT psite_global_salesperson_pk PRIMARY KEY (code);
ALTER TABLE psite_grc ADD CONSTRAINT psite_grc_pk PRIMARY KEY (code);
ALTER TABLE psite_grcchg ADD CONSTRAINT psite_grcchg_pk PRIMARY KEY (code);
ALTER TABLE psite_grcchgitem ADD CONSTRAINT psite_grcchgitem_pk PRIMARY KEY (code);
ALTER TABLE psite_grcitem ADD CONSTRAINT psite_grcitem_pk PRIMARY KEY (code);
ALTER TABLE psite_group ADD CONSTRAINT psite_group_pk PRIMARY KEY (code);
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_pk PRIMARY KEY (code);
ALTER TABLE psite_grtchg ADD CONSTRAINT psite_grtchg_pk PRIMARY KEY (code);
ALTER TABLE psite_grtchgitem ADD CONSTRAINT psite_grtchgitem_pk PRIMARY KEY (code);
ALTER TABLE psite_grtitem ADD CONSTRAINT psite_grtitem_pk PRIMARY KEY (code);
ALTER TABLE psite_localpolicy ADD CONSTRAINT psite_localpolicy_pk PRIMARY KEY (code);
ALTER TABLE psite_localpolicydetail ADD CONSTRAINT psite_localpolicydetail_pk PRIMARY KEY (code);
ALTER TABLE psite_masterpolicy ADD CONSTRAINT psite_masterpolicy_pk PRIMARY KEY (sys_policysettingcode);
ALTER TABLE psite_mdappoperation ADD CONSTRAINT psite_mdappoperation_pk PRIMARY KEY (id);
ALTER TABLE psite_mdmenu ADD CONSTRAINT psite_mdmenu_pk PRIMARY KEY (id);
ALTER TABLE psite_mdmenuappoperation ADD CONSTRAINT psite_mdmenuappoperation_pk PRIMARY KEY (sys_mdappoperationid, sys_mdmenuid);
ALTER TABLE psite_mdpluginhooks ADD CONSTRAINT psite_mdpluginhooks_pk PRIMARY KEY (code);
ALTER TABLE psite_mdplugintypes ADD CONSTRAINT psite_mdplugintypes_pk PRIMARY KEY (code);
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_pk PRIMARY KEY (code);
ALTER TABLE psite_mop_assign ADD CONSTRAINT psite_mop_assign_pk PRIMARY KEY (code);
ALTER TABLE psite_packet ADD CONSTRAINT psite_packet_pk PRIMARY KEY (id);
ALTER TABLE psite_packetitem ADD CONSTRAINT psite_packetitem_pk PRIMARY KEY (id);
ALTER TABLE psite_plugin ADD CONSTRAINT psite_plugin_pk PRIMARY KEY (code);
ALTER TABLE psite_pluginalloc ADD CONSTRAINT psite_pluginalloc_pk PRIMARY KEY (code);
ALTER TABLE psite_pluginconfigrepo ADD CONSTRAINT psite_pluginconfigrepo_pk PRIMARY KEY (code);
ALTER TABLE psite_pluginvendor ADD CONSTRAINT psite_pluginvendor_pk PRIMARY KEY (code);
ALTER TABLE psite_posapiconfig ADD CONSTRAINT psite_posapiconfig_pk PRIMARY KEY (code);
ALTER TABLE psite_posbill ADD CONSTRAINT psite_posbill_pk PRIMARY KEY (code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT psite_posbill_park_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillcn ADD CONSTRAINT psite_posbillcn_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillcnadj ADD CONSTRAINT psite_posbillcnadj_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillcnop ADD CONSTRAINT psite_posbillcnop_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillcnvoid ADD CONSTRAINT psite_posbillcnvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_posbilldn ADD CONSTRAINT psite_posbilldn_pk PRIMARY KEY (code);
ALTER TABLE psite_posbilldnop ADD CONSTRAINT psite_posbilldnop_pk PRIMARY KEY (code);
ALTER TABLE psite_posbilldnvoid ADD CONSTRAINT psite_posbilldnvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillitem ADD CONSTRAINT psite_posbillitem_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT psite_posbillitem_park_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillitemvoid ADD CONSTRAINT psite_posbillitemvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillmop ADD CONSTRAINT psite_posbillmop_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT psite_posbillmop_park_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillmopdeno ADD CONSTRAINT psite_posbillmopdeno_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillmopdenovoid ADD CONSTRAINT psite_posbillmopdenovoid_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillmopvoid ADD CONSTRAINT psite_posbillmopvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_posdeprefbill ADD CONSTRAINT psite_posdeprefbill_pk PRIMARY KEY (code);
ALTER TABLE psite_posdeprefbillvoid ADD CONSTRAINT psite_posdeprefbillvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_posgvbill ADD CONSTRAINT psite_posgvbill_pk PRIMARY KEY (code);
ALTER TABLE psite_posgvbilldetail ADD CONSTRAINT psite_posgvbilldetail_pk PRIMARY KEY (code);
ALTER TABLE psite_posorder ADD CONSTRAINT psite_posorder_pk PRIMARY KEY (code);
ALTER TABLE psite_posordercancel ADD CONSTRAINT psite_posordercancel_pk PRIMARY KEY (code);
ALTER TABLE psite_posorderitem ADD CONSTRAINT psite_posorderitem_pk PRIMARY KEY (code);
ALTER TABLE psite_pospaydrop ADD CONSTRAINT psite_pospaydrop_pk PRIMARY KEY (code);
ALTER TABLE psite_pospayinout ADD CONSTRAINT psite_pospayinout_pk PRIMARY KEY (code);
ALTER TABLE psite_pospaymop ADD CONSTRAINT psite_pospaymop_pk PRIMARY KEY (code);
ALTER TABLE psite_pospaymopcount ADD CONSTRAINT psite_pospaymopcount_pk PRIMARY KEY (code);
ALTER TABLE psite_posplugin_hook_map ADD CONSTRAINT psite_posplugin_hook_map_pk PRIMARY KEY (code);
ALTER TABLE psite_posreprintbillaudit ADD CONSTRAINT psite_posreprintbillaudit_pk PRIMARY KEY (code);
ALTER TABLE psite_posreprintbillauditvoid ADD CONSTRAINT psite_posrpnbillauditvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_possession ADD CONSTRAINT psite_possession_pk PRIMARY KEY (code);
ALTER TABLE psite_posstlm ADD CONSTRAINT psite_posstlm_pk PRIMARY KEY (code);
ALTER TABLE psite_posstlmaudit_ho ADD CONSTRAINT psite_posstlmaudit_ho_pkey PRIMARY KEY (code);
ALTER TABLE psite_posstlmaudit_pos ADD CONSTRAINT psite_posstlmaudit_pos_pk PRIMARY KEY (code);
ALTER TABLE psite_promo_assign ADD CONSTRAINT table1_pk PRIMARY KEY (code);
ALTER TABLE psite_ptcbill ADD CONSTRAINT psite_ptcbill_pk PRIMARY KEY (code);
ALTER TABLE psite_ptcbillvoid ADD CONSTRAINT psite_ptcbillvoid_pk PRIMARY KEY (code);
ALTER TABLE psite_ptchead ADD CONSTRAINT psite_ptchead_pk PRIMARY KEY (code);
ALTER TABLE psite_ptchead_assign ADD CONSTRAINT psite_ptchead_assign_pk PRIMARY KEY (code);
ALTER TABLE psite_reason ADD CONSTRAINT psite_reason_pk PRIMARY KEY (code);
ALTER TABLE psite_recposbillcn ADD CONSTRAINT psite_recposbillcn_pk PRIMARY KEY (code);
ALTER TABLE psite_salesperson ADD CONSTRAINT pk_psite_salesperson PRIMARY KEY (admsite_code, id);
ALTER TABLE psite_salesperson_assign ADD CONSTRAINT code_salesperson_pk PRIMARY KEY (code);
ALTER TABLE psite_servicejob ADD CONSTRAINT psite_servicejob_pk PRIMARY KEY (sys_shortcode);
ALTER TABLE psite_si_assign ADD CONSTRAINT psite_si_ass_pk PRIMARY KEY (code);
ALTER TABLE psite_stfdoc ADD CONSTRAINT psite_stfdoc_pk PRIMARY KEY (code);
ALTER TABLE psite_stfitem ADD CONSTRAINT pk_stfitem_code PRIMARY KEY (code);
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT psite_stlm_param_acc_pk PRIMARY KEY (code);
ALTER TABLE psite_stlm_param_oth ADD CONSTRAINT psite_stlm_param_oth_pk PRIMARY KEY (code);
ALTER TABLE psite_stockpoint ADD CONSTRAINT psite_stockpoint_pk PRIMARY KEY (code);
ALTER TABLE psite_web_event ADD CONSTRAINT p_pswev_code PRIMARY KEY (code);
ALTER TABLE psite_web_event_archive ADD CONSTRAINT psite_web_event_archive_pkey PRIMARY KEY (code);
ALTER TABLE psite_webconfig ADD CONSTRAINT psite_webconfig_pk PRIMARY KEY (code);
ALTER TABLE psite_webdb_configuration ADD CONSTRAINT psite_webdb_configuration_pk PRIMARY KEY (code);
ALTER TABLE pur_price_chart ADD CONSTRAINT pur_price_chart_pk PRIMARY KEY (code);
ALTER TABLE purinvchg ADD CONSTRAINT purinvchg_pk PRIMARY KEY (code);
ALTER TABLE purinvchg_item ADD CONSTRAINT purinvchg_item_pk PRIMARY KEY (code);
ALTER TABLE purinvdet ADD CONSTRAINT purinvdet_pk PRIMARY KEY (code);
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_pkey PRIMARY KEY (code);
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT purinvjrnchg_item_pkey PRIMARY KEY (code);
ALTER TABLE purinvjrndet ADD CONSTRAINT purinvjrndet_pkey PRIMARY KEY (code);
ALTER TABLE purinvjrnmain ADD CONSTRAINT purinvjrnmain_pk PRIMARY KEY (jrncode);
ALTER TABLE purinvmain ADD CONSTRAINT p_purinvmain_invcode PRIMARY KEY (invcode);
ALTER TABLE purordchg ADD CONSTRAINT purordchg_pk PRIMARY KEY (code);
ALTER TABLE purordchg_item ADD CONSTRAINT purordchg_item_pk PRIMARY KEY (code);
ALTER TABLE purordcnldet ADD CONSTRAINT purordcnldet_pk PRIMARY KEY (code);
ALTER TABLE purordcnlmain ADD CONSTRAINT p_purordcnlmain_cnlcode PRIMARY KEY (cnlcode);
ALTER TABLE purorddet ADD CONSTRAINT purorddet_pk PRIMARY KEY (code);
ALTER TABLE purorddet_delivery ADD CONSTRAINT purorddet_delivery_pk PRIMARY KEY (code);
ALTER TABLE purordmain ADD CONSTRAINT p_purordmain_ordcode PRIMARY KEY (ordcode);
ALTER TABLE purordschedule ADD CONSTRAINT purordschedule_pk PRIMARY KEY (code);
ALTER TABLE purordset ADD CONSTRAINT purordset_code_pk PRIMARY KEY (code);
ALTER TABLE purordshipdet ADD CONSTRAINT purordshipdet_pk PRIMARY KEY (code);
ALTER TABLE purordshipmain ADD CONSTRAINT p_purordshipmain_shipcode PRIMARY KEY (shipcode);
ALTER TABLE purordshipset ADD CONSTRAINT purordshipset_code_pk PRIMARY KEY (shipsetcode);
ALTER TABLE purreqdet ADD CONSTRAINT purreqdet_pk PRIMARY KEY (code);
ALTER TABLE purreqmain ADD CONSTRAINT p_purreqmain_reqcode PRIMARY KEY (reqcode);
ALTER TABLE purrtchg ADD CONSTRAINT purrtchg_pk PRIMARY KEY (code);
ALTER TABLE purrtchg_item ADD CONSTRAINT purrtchg_item_pk PRIMARY KEY (code);
ALTER TABLE purrtdet ADD CONSTRAINT purrtdet_pk PRIMARY KEY (code);
ALTER TABLE purrtmain ADD CONSTRAINT p_purrtmain_rtcode PRIMARY KEY (rtcode);
ALTER TABLE purservice ADD CONSTRAINT p_service_servicecode PRIMARY KEY (servicecode);
ALTER TABLE pursrv_schedule ADD CONSTRAINT p_pursrv_schedule_code PRIMARY KEY (code);
ALTER TABLE pursrvchg ADD CONSTRAINT pursrvchg_pk PRIMARY KEY (code);
ALTER TABLE pursrvchg_item ADD CONSTRAINT pursrvchg_item_pk PRIMARY KEY (code);
ALTER TABLE pursrvdet ADD CONSTRAINT pursrvdet_pk PRIMARY KEY (code);
ALTER TABLE pursrvjrnchg ADD CONSTRAINT pursrvjrnchg_pk PRIMARY KEY (code);
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT pursrvjrnchg_item_pk PRIMARY KEY (code);
ALTER TABLE pursrvjrndet ADD CONSTRAINT pursrvjrndet_pk PRIMARY KEY (code);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT pursrvjrnmain_pk PRIMARY KEY (jrncode);
ALTER TABLE pursrvmain ADD CONSTRAINT p_pursrvmain_srvcode PRIMARY KEY (srvcode);
ALTER TABLE pursrvord_schedule ADD CONSTRAINT p_pursrvord_schedule_code PRIMARY KEY (code);
ALTER TABLE pursrvordchg ADD CONSTRAINT p_pursrvordchg_code PRIMARY KEY (code);
ALTER TABLE pursrvordchg_item ADD CONSTRAINT pursrvordchg_item_pk PRIMARY KEY (code);
ALTER TABLE pursrvorddet ADD CONSTRAINT p_pursrvorddet_code PRIMARY KEY (code);
ALTER TABLE pursrvordmain ADD CONSTRAINT p_pursrvordmain_code PRIMARY KEY (ordcode);
ALTER TABLE purtermdet ADD CONSTRAINT purtermdet_pk PRIMARY KEY (code);
ALTER TABLE purtermmain ADD CONSTRAINT p_purtermmain_code PRIMARY KEY (code);
ALTER TABLE pv_filter_criteria ADD CONSTRAINT pv_filter_criteria_pk PRIMARY KEY (code);
ALTER TABLE pv_filter_criteria_value ADD CONSTRAINT pv_filter_criteria_value_pk PRIMARY KEY (code);
ALTER TABLE reportlayout ADD CONSTRAINT pk_reportlayout PRIMARY KEY (layoutid);
ALTER TABLE retailordcancel ADD CONSTRAINT retailordcancel_pk PRIMARY KEY (code);
ALTER TABLE retailorddet ADD CONSTRAINT retailorddet_pk PRIMARY KEY (code);
ALTER TABLE retailordmain ADD CONSTRAINT retailordmain_pk PRIMARY KEY (ordcode);
ALTER TABLE retailordmop ADD CONSTRAINT retailordmop_pk PRIMARY KEY (code);
ALTER TABLE role ADD CONSTRAINT role_pk PRIMARY KEY (id);
ALTER TABLE rolemenu ADD CONSTRAINT rolemenu_pk PRIMARY KEY (id);
ALTER TABLE rolemenuoperation ADD CONSTRAINT rolemenuoperation_pk PRIMARY KEY (id);
ALTER TABLE salchg ADD CONSTRAINT p_salchg_salchgcode PRIMARY KEY (salchgcode);
ALTER TABLE salcreditrating ADD CONSTRAINT p_salcreditrating_crcode PRIMARY KEY (crcode);
ALTER TABLE salcsdet ADD CONSTRAINT salcsdet_pk PRIMARY KEY (code);
ALTER TABLE salcsmain ADD CONSTRAINT p_salcsmain_cscode PRIMARY KEY (cscode);
ALTER TABLE salcsmop ADD CONSTRAINT salcsmaop_pk PRIMARY KEY (code);
ALTER TABLE salinv_authorize_trap ADD CONSTRAINT salinv_authorize_trap_pk PRIMARY KEY (invcode);
ALTER TABLE salinvchg ADD CONSTRAINT salinvchg_pk PRIMARY KEY (code);
ALTER TABLE salinvchg_item ADD CONSTRAINT salinvchg_item_pk PRIMARY KEY (code);
ALTER TABLE salinvdet ADD CONSTRAINT salinvdet_pk PRIMARY KEY (code);
ALTER TABLE salinvdet_consolidate ADD CONSTRAINT salinvdet_consolidate_pk PRIMARY KEY (code);
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_pkey PRIMARY KEY (code);
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT salinvjrnchg_item_pkey PRIMARY KEY (code);
ALTER TABLE salinvjrndet ADD CONSTRAINT salinvjrndet_pkey PRIMARY KEY (code);
ALTER TABLE salinvjrnmain ADD CONSTRAINT salinvjrnmain_pk PRIMARY KEY (jrncode);
ALTER TABLE salinvmain ADD CONSTRAINT p_salinvmain_invcode PRIMARY KEY (invcode);
ALTER TABLE salord_authorize_trap ADD CONSTRAINT salord_authorize_trap_pk PRIMARY KEY (ordcode);
ALTER TABLE salordchg ADD CONSTRAINT salordchg_pk PRIMARY KEY (code);
ALTER TABLE salordchg_item ADD CONSTRAINT salordchg_item_pk PRIMARY KEY (code);
ALTER TABLE salordcnldet ADD CONSTRAINT salordcnldet_pk PRIMARY KEY (code);
ALTER TABLE salordcnlmain ADD CONSTRAINT p_salordcnlmain_cnlcode PRIMARY KEY (cnlcode);
ALTER TABLE salorddet ADD CONSTRAINT salorddet_pk PRIMARY KEY (code);
ALTER TABLE salordmain ADD CONSTRAINT p_salordmain_ordcode PRIMARY KEY (ordcode);
ALTER TABLE salpricelistdet ADD CONSTRAINT salpricelistdet_pk PRIMARY KEY (code);
ALTER TABLE salpricelistmain ADD CONSTRAINT p_salpricelistmain_listcode PRIMARY KEY (pricelistcode);
ALTER TABLE salreqdet ADD CONSTRAINT salreqdet_pk PRIMARY KEY (code);
ALTER TABLE salreqmain ADD CONSTRAINT p_salreqmain_reqcode PRIMARY KEY (reqcode);
ALTER TABLE salrtchg ADD CONSTRAINT salrtchg_pk PRIMARY KEY (code);
ALTER TABLE salrtchg_item ADD CONSTRAINT salrtchg_item_pk PRIMARY KEY (code);
ALTER TABLE salrtdet ADD CONSTRAINT salrtdet_pk PRIMARY KEY (code);
ALTER TABLE salrtdet_consolidate ADD CONSTRAINT salrtdet_consolidate_pk PRIMARY KEY (code);
ALTER TABLE salrtmain ADD CONSTRAINT p_salrtmain_rtcode PRIMARY KEY (rtcode);
ALTER TABLE salrtreason ADD CONSTRAINT salrtreason_pk PRIMARY KEY (code);
ALTER TABLE salsrvchg ADD CONSTRAINT salsrvchg_pk PRIMARY KEY (code);
ALTER TABLE salsrvchg_item ADD CONSTRAINT salsrvchg_item_pk PRIMARY KEY (code);
ALTER TABLE salsrvdet ADD CONSTRAINT salsrvdet_pk PRIMARY KEY (code);
ALTER TABLE salsrvmain ADD CONSTRAINT p_salsrvmain_srvcode PRIMARY KEY (srvcode);
ALTER TABLE salssdet ADD CONSTRAINT salssdet_pk PRIMARY KEY (code);
ALTER TABLE salssmain ADD CONSTRAINT p_salssmain_sscode PRIMARY KEY (sscode);
ALTER TABLE saltermdet ADD CONSTRAINT saltermdet_pk PRIMARY KEY (code);
ALTER TABLE saltermgrp ADD CONSTRAINT p_saltermgrp_termgrpcode PRIMARY KEY (termgrpcode);
ALTER TABLE saltermmain ADD CONSTRAINT p_saltermmain_saltermcode PRIMARY KEY (saltermcode);
ALTER TABLE si_allocation ADD CONSTRAINT si_allocation_code_pk PRIMARY KEY (code);
ALTER TABLE si_assortment ADD CONSTRAINT si_assortment_code_pk PRIMARY KEY (code);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT si_asmt_excl_code_pk PRIMARY KEY (code);
ALTER TABLE si_assortment_include ADD CONSTRAINT si_asmt_incl_code_pk PRIMARY KEY (code);
ALTER TABLE sms_account ADD CONSTRAINT sms_account_pkey PRIMARY KEY (id);
ALTER TABLE tax_recalc_history ADD CONSTRAINT tax_recalc_history_pk PRIMARY KEY (requestid);
ALTER TABLE temp_invdcso_check ADD CONSTRAINT temp_invdcso_check_pk PRIMARY KEY (salorddet_code);
ALTER TABLE tender_master ADD CONSTRAINT tender_master_pk PRIMARY KEY (code);
ALTER TABLE transactionlock ADD CONSTRAINT transactionlock_pk PRIMARY KEY (code);
ALTER TABLE udfconfig ADD CONSTRAINT udfconfig_pk PRIMARY KEY (tablename);
ALTER TABLE udfconfigdetail ADD CONSTRAINT udfconfigdetail_pk PRIMARY KEY (code);
ALTER TABLE udfparamlist ADD CONSTRAINT udfparamlist_pk PRIMARY KEY (code);
ALTER TABLE web_print_preference ADD CONSTRAINT web_print_preference_pkey PRIMARY KEY (code);

--Unique Key
ALTER TABLE mdlistcriteria ADD CONSTRAINT u_mdlist_criterianame_dto_name UNIQUE (criterianame, dto_name, mdlistid);
ALTER TABLE admautotask ADD CONSTRAINT u_admautotask_01 UNIQUE (activity);
ALTER TABLE admautotask_det ADD CONSTRAINT u_admautotask_det_01 UNIQUE (activity, activity_parameter);
ALTER TABLE admcfg_metadata ADD CONSTRAINT u_tag_keyword UNIQUE (keyword, tag);
ALTER TABLE admcity ADD CONSTRAINT u_admcity_ctname UNIQUE (ctname);
ALTER TABLE admcls ADD CONSTRAINT u_admcls_clsname UNIQUE (clsname);
ALTER TABLE admcmp ADD CONSTRAINT u_admcmp_cmpinit UNIQUE (cmpinit);
ALTER TABLE admcmp ADD CONSTRAINT u_admcmp_cmpname UNIQUE (cmpname);
ALTER TABLE admcmp ADD CONSTRAINT u_admcmp_itemprefix UNIQUE (itemprefix);
ALTER TABLE admcmp ADD CONSTRAINT u_admcmp_shrtname UNIQUE (shrtname);
ALTER TABLE admcmptax ADD CONSTRAINT admcmptax_u01 UNIQUE (name);
ALTER TABLE admcurrency ADD CONSTRAINT admcurrency_u01 UNIQUE (name);
ALTER TABLE admcurrency ADD CONSTRAINT admcurrency_u02 UNIQUE (shortcode);
ALTER TABLE admcurrency ADD CONSTRAINT admcurrency_u03 UNIQUE (symbol);
ALTER TABLE admcurrency_deno ADD CONSTRAINT admcurrency_deno_u01 UNIQUE (admcurrency_code, perunitvalue);
ALTER TABLE admcurrency_rate ADD CONSTRAINT admcurrency_rate_u01 UNIQUE (admcurrency_code, effdate);
ALTER TABLE admdaybook ADD CONSTRAINT u_admdaybook_saledt UNIQUE (saledt);
ALTER TABLE admdocreport ADD CONSTRAINT admdocreport_u01 UNIQUE (functioncode, name);
ALTER TABLE admdocreport ADD CONSTRAINT admdocreport_u02 UNIQUE (functioncode, seq);
ALTER TABLE admdocscheme ADD CONSTRAINT admdocscheme_u01 UNIQUE (cmpcode, docname);
ALTER TABLE admgstin ADD CONSTRAINT admgstin_u01 UNIQUE (ppob);
ALTER TABLE admgstin ADD CONSTRAINT admgstin_uk UNIQUE (gstin_no);
ALTER TABLE admisd ADD CONSTRAINT admisdcode_u01 UNIQUE (country, isdcode);
ALTER TABLE admlastdoc ADD CONSTRAINT admlastdoc_u01 UNIQUE (admou_code, admsite_code, cmpcode, doccode, entdt, mcode, mdmenushortcode, menucode, ycode);
ALTER TABLE admlastno ADD CONSTRAINT u_admlastno_table_name_ycode UNIQUE (table_name, ycode);
ALTER TABLE admlet ADD CONSTRAINT u_admlet_letno UNIQUE (letno);
ALTER TABLE admmenu_docscheme ADD CONSTRAINT admmenu_docscheme_u01 UNIQUE (doccode, mdmenushortcode, menucode);
ALTER TABLE admmodule ADD CONSTRAINT ers_module_u01 UNIQUE (modname);
ALTER TABLE admmonth ADD CONSTRAINT u_admmonth_mname_ycode UNIQUE (month_name, ycode);
ALTER TABLE admou ADD CONSTRAINT u_admou_name UNIQUE (name);
ALTER TABLE admou ADD CONSTRAINT u_admou_shrtname UNIQUE (shrtname);
ALTER TABLE admou_docscheme ADD CONSTRAINT u_admou_dcschm_doc_oucode_site UNIQUE (admou_code, admsite_code, doccode);
ALTER TABLE admpriv ADD CONSTRAINT u_admpriv_role_menu UNIQUE (menucode, rlcode);
ALTER TABLE admprn_barcode ADD CONSTRAINT admprn_barcode_uk01 UNIQUE (name);
ALTER TABLE admprof ADD CONSTRAINT u_admprof_profname UNIQUE (profname);
ALTER TABLE admquicklaunch ADD CONSTRAINT u_admquicklaunch_profcode UNIQUE (profcode);
ALTER TABLE admrole ADD CONSTRAINT u_admrole_rlname UNIQUE (rlname);
ALTER TABLE admsite ADD CONSTRAINT admsite_psite_u01 UNIQUE (psite_key);
ALTER TABLE admsite ADD CONSTRAINT admsite_psite_u02 UNIQUE (sitedocin);
ALTER TABLE admsite ADD CONSTRAINT u_admsite_slcode_name UNIQUE (name, slcode);
ALTER TABLE admterminal ADD CONSTRAINT u_admterminal_ipaddress UNIQUE (ipaddress);
ALTER TABLE admterminal ADD CONSTRAINT u_admterminal_terminalname UNIQUE (terminalname);
ALTER TABLE admyear ADD CONSTRAINT u_admyear_yname UNIQUE (yname);
ALTER TABLE aud2_module ADD CONSTRAINT aud2_module_shortcode_name_header_table_key UNIQUE (header_table, name, shortcode);
ALTER TABLE aud2_tab_col ADD CONSTRAINT aud2_tab_col_module_shortcode_table_name_exclude_update_of__key UNIQUE (exclude_update_of_column, module_shortcode, table_name);
ALTER TABLE aud2_table ADD CONSTRAINT aud2_table_module_shortcode_table_name_key UNIQUE (module_shortcode, table_name);
ALTER TABLE aud2_table_ddl_log ADD CONSTRAINT aud2_table_ddl_log_object_name_key UNIQUE (object_name);
ALTER TABLE aud2_transaction_table ADD CONSTRAINT aud2_transaction_table_transaction_id_table_name_key UNIQUE (table_name, transaction_id);
ALTER TABLE aud_table_ddl_log ADD CONSTRAINT aud_table_ddl_log_u01 UNIQUE (object_name);
ALTER TABLE aud_transaction ADD CONSTRAINT aud_transaction_u01 UNIQUE (module_type, transaction_id);
ALTER TABLE aud_transaction_table ADD CONSTRAINT aud_transaction_table_u01 UNIQUE (table_name, transaction_id);
ALTER TABLE capillary_gv_sync_custom ADD CONSTRAINT u_gvno UNIQUE (gvno);
ALTER TABLE concurrency_error ADD CONSTRAINT concurrency_error_u01 UNIQUE (errorcode, table_name);
ALTER TABLE connected_app_customer ADD CONSTRAINT connected_app_customer_u01 UNIQUE (connected_app_id, slcode);
ALTER TABLE connected_app_site ADD CONSTRAINT connected_app_site_u01 UNIQUE (admsite_code, connected_app_id);
ALTER TABLE customtype ADD CONSTRAINT customtype_u01 UNIQUE (concretetype, interfacetype, registeredname);
ALTER TABLE ex_mdreportdata ADD CONSTRAINT ex_mdreportdata_u01 UNIQUE (shortcode);
ALTER TABLE excisemain ADD CONSTRAINT excisemain_tariffno_u01 UNIQUE (tariffno);
ALTER TABLE finchg ADD CONSTRAINT u_finchg_chgname UNIQUE (chgname);
ALTER TABLE finchqdet ADD CONSTRAINT u_finchqdet_bookcode_chqno UNIQUE (bookcode, chqno);
ALTER TABLE finchqdet ADD CONSTRAINT u_finchqdet_gl_chqno UNIQUE (chqno, glcode);
ALTER TABLE finchqmain ADD CONSTRAINT u_finchqmain_bookno_ycode UNIQUE (bookno, ycode);
ALTER TABLE fincost ADD CONSTRAINT u_fincost_costname UNIQUE (costname);
ALTER TABLE fincostop ADD CONSTRAINT fincostop_u01 UNIQUE (admsite_code, costcode, glcode, slcode);
ALTER TABLE fincostop ADD CONSTRAINT u_fincostop_u01 UNIQUE (admsite_code, glcode, slcode, ycode);
ALTER TABLE fincosttag ADD CONSTRAINT u_fincosttag_composite UNIQUE (admsite_code, entcode, glcode, postcode, ref_admsite_code, slcode);
ALTER TABLE finentgrp ADD CONSTRAINT u_finentgrp_entgrpname UNIQUE (entgrpname);
ALTER TABLE finform ADD CONSTRAINT u_finform_formname UNIQUE (formname);
ALTER TABLE fingl ADD CONSTRAINT u_fingl_glname UNIQUE (glname);
ALTER TABLE fingl_site ADD CONSTRAINT u_fingl_site UNIQUE (admsite_code, glcode);
ALTER TABLE finglbud ADD CONSTRAINT u_finglbud_gl_cost_sl_mcode UNIQUE (admou_code, costcode, glcode, mcode, slcode);
ALTER TABLE finglop ADD CONSTRAINT u_finslop_gl_ycode_ou UNIQUE (admou_code, glcode, ycode);
ALTER TABLE fingrp ADD CONSTRAINT u_fingrp_grpname_parcode UNIQUE (grpname, parcode);
ALTER TABLE finjrndet ADD CONSTRAINT u_finjrndet_jrncode_glcode_slc UNIQUE (glcode, jrncode, slcode);
ALTER TABLE finnar ADD CONSTRAINT u_finnar_nartext_glcode UNIQUE (glcode, nartext);
ALTER TABLE finopdoc ADD CONSTRAINT finopdoc_u01 UNIQUE (entno, enttype);
ALTER TABLE finsl ADD CONSTRAINT u_finsl_slid UNIQUE (slid);
ALTER TABLE finsl_gl ADD CONSTRAINT u_finsl_gl_slcode_glcode UNIQUE (glcode, slcode);
ALTER TABLE finsl_ou ADD CONSTRAINT finsl_ou_u01 UNIQUE (admsite_code, slcode);
ALTER TABLE finslop ADD CONSTRAINT u_finslop_sl_gl_ycode_ou UNIQUE (admou_code, glcode, slcode, ycode);
ALTER TABLE fintag ADD CONSTRAINT u_fintag_postcode1_postcode2 UNIQUE (postcode1, postcode2);
ALTER TABLE fintaxmain ADD CONSTRAINT u_fintaxmain_taxname UNIQUE (taxname);
ALTER TABLE fintdsmain ADD CONSTRAINT u_fintdsmain_tdsno_ycode UNIQUE (tdsno, ycode);
ALTER TABLE fintdssrc ADD CONSTRAINT u_fintdssrc_tdssrcname UNIQUE (tdssrcname);
ALTER TABLE fintdstag ADD CONSTRAINT u_fintdssrc_type_src_dtfr UNIQUE (dtfr, fintdstypesrc_code);
ALTER TABLE fintdstype ADD CONSTRAINT u_fintdstype_tdsname UNIQUE (tdsname);
ALTER TABLE fintradegrp ADD CONSTRAINT u_fintradegrp_name UNIQUE (name);
ALTER TABLE finvchdet ADD CONSTRAINT u_finvchdet_vchcode_glcode_slc UNIQUE (glcode, slcode, vchcode);
ALTER TABLE gds2_event_track ADD CONSTRAINT gds2_event_track_u01 UNIQUE (connected_app_code, dispatch_session_id, event_id, refcode);
ALTER TABLE gds_inbound_queue ADD CONSTRAINT u_gds_inbound_queue UNIQUE (ackid, entityid);
ALTER TABLE gst_docno_check ADD CONSTRAINT u_gst_chk_sdno_ycode_gstin UNIQUE (admgstin_code, scheme_docno, ycode);
ALTER TABLE gvbooklet ADD CONSTRAINT gvbooklet_u01 UNIQUE (bookletno);
ALTER TABLE gvcategory ADD CONSTRAINT gvcategory_u01 UNIQUE (name);
ALTER TABLE gvcategory ADD CONSTRAINT gvcategory_u02 UNIQUE (prefix, suffix);
ALTER TABLE gvissue_journal ADD CONSTRAINT gvissue_journal_u01 UNIQUE (admsite_code, createdby, docdate, scheme_docno);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT gvissue_journal_void_u01 UNIQUE (admsite_code, docdate, scheme_docno, voidby);
ALTER TABLE gvleaves ADD CONSTRAINT gvleaves_u01 UNIQUE (gvno);
ALTER TABLE gvleaves ADD CONSTRAINT gvleaves_u02 UNIQUE (gvno_udf);
ALTER TABLE hfhash ADD CONSTRAINT hfhash_u01 UNIQUE (field, key);
ALTER TABLE hflock ADD CONSTRAINT hflock_source_table_key UNIQUE (source_table);
ALTER TABLE hrddept ADD CONSTRAINT u_hrddept_deptname UNIQUE (deptname);
ALTER TABLE hrdemp ADD CONSTRAINT u_hrdemp_abbre UNIQUE (abbre);
ALTER TABLE hrdemp ADD CONSTRAINT u_hrdemp_eno UNIQUE (eno);
ALTER TABLE hrdemp_ou ADD CONSTRAINT u_emp_site_code_hrdemp_ou UNIQUE (admsite_code, hrdemp_code);
ALTER TABLE int$article ADD CONSTRAINT u_int$article UNIQUE (article_name, terminalname);
ALTER TABLE int$caller_module_class ADD CONSTRAINT u_int$cmc_cmodule_classname UNIQUE (caller_module, classname);
ALTER TABLE int$class_role ADD CONSTRAINT int$class_role_dataversion_uk UNIQUE (dataversion);
ALTER TABLE int$costcenter ADD CONSTRAINT u_int$costcenter_sitecode UNIQUE (ref_admsite_code);
ALTER TABLE int$costcenter ADD CONSTRAINT u_int$costcenter_sitename UNIQUE (ref_admsite_name);
ALTER TABLE int$custparval ADD CONSTRAINT int$custparval_tnm_sitarticdsh UNIQUE (assrt_code, icode, param_shortcode, period_type, site_shortname, terminalname);
ALTER TABLE int$gift_voucher ADD CONSTRAINT int$gift_voucher_tnm_gvn_u01 UNIQUE (allocate_site, denomination, expireson, gvno, terminalname, validity_days);
ALTER TABLE int$grc_alt_item ADD CONSTRAINT u_int$grc_alt_item UNIQUE (article_name, barcode, cname1, cname2, cname3, cname4, cname5, cname6, expiry_date, icode, listed_mrp, mrp, partyname, rate, shrtname, taxname, terminalname);
ALTER TABLE int$item ADD CONSTRAINT u_int$item UNIQUE (article_name, barcode, cname1, cname2, cname3, cname4, cname5, cname6, desc1, desc2, desc3, expiry_date, listed_mrp, mrp, partyname, rate, shrtname, taxname, terminalname);
ALTER TABLE int$metadata ADD CONSTRAINT u_int$metadata_cname_colname UNIQUE (classname, colname);
ALTER TABLE int$modify_item ADD CONSTRAINT u_int$modify_item UNIQUE (article_name, barcode, cname1, cname2, cname3, cname4, cname5, cname6, expiry_date, icode, mrp, partyname, rate, rsp, shrtname, taxname, terminalname);
ALTER TABLE int$price_chart ADD CONSTRAINT int$price_chart_tnmiccnedt_u01 UNIQUE (eff_date, icode, mrp, rsp, sitename, terminalname);
ALTER TABLE int$routegrp ADD CONSTRAINT int$routegrp_tnm_rtgrpicdefdt UNIQUE (eff_date, icode, routegrp_code, terminalname);
ALTER TABLE int$socnl_article ADD CONSTRAINT int$socnl_article_tsiteinvart UNIQUE (articlecode, siteshrtname, terminalname);
ALTER TABLE int$socnl_barcode ADD CONSTRAINT int$socnl_barcode_tsiteinvart UNIQUE (barcode, sitecode, terminalname);
ALTER TABLE int$special_item ADD CONSTRAINT u_int$special_item UNIQUE (article_name, barcode, certificate_no, cname1, cname2, cname3, cname4, cname5, cname6, expiry_date, grs_weight, invmetal_code, job_cost_basis, listed_mrp, mrp, net_weight, partyname, price_basis, price_terms, rate, taxname, terminalname);
ALTER TABLE int$special_item ADD CONSTRAINT u_int$special_item_cert_no UNIQUE (certificate_no);
ALTER TABLE int$tagged_file ADD CONSTRAINT u_int$tagged_file UNIQUE (classname, doctype, filename);
ALTER TABLE invarticle ADD CONSTRAINT invarticle_u01 UNIQUE (name);
ALTER TABLE invarticle_finsl_mm ADD CONSTRAINT invarticle_finsl_mm_u01 UNIQUE (invarticle_code, slcode);
ALTER TABLE invattr1 ADD CONSTRAINT invattr1_u01 UNIQUE (name);
ALTER TABLE invattr2 ADD CONSTRAINT invattr2_u01 UNIQUE (name);
ALTER TABLE invattr3 ADD CONSTRAINT invattr3_u01 UNIQUE (name);
ALTER TABLE invattr4 ADD CONSTRAINT invattr4_u01 UNIQUE (name);
ALTER TABLE invattr5 ADD CONSTRAINT invattr5_u01 UNIQUE (name);
ALTER TABLE invattr6 ADD CONSTRAINT invattr6_u01 UNIQUE (name);
ALTER TABLE invbin ADD CONSTRAINT invbin_u01 UNIQUE (admsite_code, seqno);
ALTER TABLE invbincount_lock ADD CONSTRAINT invbincount_lock_u01 UNIQUE (invbin_code);
ALTER TABLE invbincountmain ADD CONSTRAINT invbincountmain_u01 UNIQUE (guid);
ALTER TABLE invbingrp ADD CONSTRAINT invbingrp_u01 UNIQUE (grpcode, parcode);
ALTER TABLE invbingrp ADD CONSTRAINT invbingrp_u02 UNIQUE (admsite_code, grpname);
ALTER TABLE invbingrplev_prompt ADD CONSTRAINT invbingrplev_prompt_u01 UNIQUE (admsite_code, lev);
ALTER TABLE invbingrplev_prompt ADD CONSTRAINT invbingrplev_prompt_u02 UNIQUE (admsite_code, prompt);
ALTER TABLE invbinstock_onhand ADD CONSTRAINT invbinstock_onhand_u01 UNIQUE (admsite_code, icode, invbatch_serial_code, invbin_code, loccode);
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT invbinstock_onhand_serial_u01 UNIQUE (admsite_code, icode, invbatch_serial_code, invbin_code, loccode);
ALTER TABLE invcat1 ADD CONSTRAINT u_invcat1_cname UNIQUE (cname);
ALTER TABLE invcat2 ADD CONSTRAINT u_invcat2_cname UNIQUE (cname);
ALTER TABLE invcat3 ADD CONSTRAINT u_invcat3_cname UNIQUE (cname);
ALTER TABLE invcat4 ADD CONSTRAINT u_invcat4_cname UNIQUE (cname);
ALTER TABLE invcat5 ADD CONSTRAINT u_invcat5_cname UNIQUE (cname);
ALTER TABLE invcat6 ADD CONSTRAINT u_invcat6_cname UNIQUE (cname);
ALTER TABLE invcostpool ADD CONSTRAINT u_invcostpool_01 UNIQUE (consider_qty_sign, enttype, fifo_level, pool, subenttype);
ALTER TABLE invcostpool_mix ADD CONSTRAINT invcostpool_mix_u01 UNIQUE (consider_qty_sign, enttype, pool, subenttype);
ALTER TABLE inventgrp ADD CONSTRAINT u_inventgrp_entgrpname UNIQUE (entgrpname);
ALTER TABLE inventtype ADD CONSTRAINT u_inventtype_entname UNIQUE (entname);
ALTER TABLE inventtype ADD CONSTRAINT u_inventtype_prefix UNIQUE (prefix);
ALTER TABLE invgatein ADD CONSTRAINT u_invgatein_gateinno UNIQUE (gateinno, ycode);
ALTER TABLE invgrcchg ADD CONSTRAINT u_invgrcchg_grc_chg_rate UNIQUE (chgcode, formulae, grccode, rate, sign);
ALTER TABLE invgrcdet ADD CONSTRAINT u_invgrcdet_dataversion UNIQUE (dataversion);
ALTER TABLE invgrcdet ADD CONSTRAINT u_invgrcdet_grccd_icode_pd_rt UNIQUE (acrate, grccode, icode, invbatch_serial_code, po_code);
ALTER TABLE invgrp ADD CONSTRAINT u_invgrp_grpname_parcode UNIQUE (grpname, parcode);
ALTER TABLE invgrprange ADD CONSTRAINT u_invgrprange_grpname_seq UNIQUE (grpcode, seq);
ALTER TABLE invgrtchg ADD CONSTRAINT u_invgrtchg_grc_chg_rate UNIQUE (chgcode, formulae, grtcode, rate, sign);
ALTER TABLE invgrtdet ADD CONSTRAINT u_invgrtdet_grtcd_grccd_icd_rt UNIQUE (grtcode, icode, invbatch_serial_code, invgrcdet_code, rate);
ALTER TABLE invgst_einvoice ADD CONSTRAINT u_invgst_einvoice_01 UNIQUE (transaction_code, transaction_table);
ALTER TABLE invgst_einvoice ADD CONSTRAINT u_invgst_einvoice_02 UNIQUE (irn);
ALTER TABLE invgstaddcessrate ADD CONSTRAINT u_invgstaddcess_rate_state UNIQUE (effective_date, gststatecode, invgstrate_code);
ALTER TABLE invgstrate ADD CONSTRAINT invgstrate_uk UNIQUE (tax_name);
ALTER TABLE invhsnsacdet ADD CONSTRAINT invhsnsacdet_u01 UNIQUE (effective_date, invhsnsacmain_code);
ALTER TABLE invhsnsacmain ADD CONSTRAINT invhsnsacmain_uk UNIQUE (hsn_sac_code);
ALTER TABLE invitem ADD CONSTRAINT invitem_barcode UNIQUE (barcode);
ALTER TABLE invitem ADD CONSTRAINT invitem_certificate_no_u01 UNIQUE (certificate_no);
ALTER TABLE invitem_price ADD CONSTRAINT invitem_price_u01 UNIQUE (admsite_code, effective_date, icode, invbatch_serial_code, mrp, rsp);
ALTER TABLE invitemop ADD CONSTRAINT u_invitemop_composite UNIQUE (admsite_code, icode, invbatch_serial_code, loccode, orate, pcode, psite_stockpoint_code, ycode);
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_u01 UNIQUE (lgtno, lgttype, ycode);
ALTER TABLE invloc ADD CONSTRAINT u_invloc_locname UNIQUE (locname);
ALTER TABLE invlocgrp ADD CONSTRAINT invlocgrp_u01 UNIQUE (name);
ALTER TABLE invmetal ADD CONSTRAINT invmetal_name_u01 UNIQUE (name);
ALTER TABLE invmetal_rate ADD CONSTRAINT invmetal_rate_date_mcode_u01 UNIQUE (effective_date, invmetal_code);
ALTER TABLE invmiscmain ADD CONSTRAINT invmiscmain_u01 UNIQUE (admsite_code, creation_ecode, miscdt, scheme_docno);
ALTER TABLE invmiscmain_deleted ADD CONSTRAINT invmiscmain_deleted_u01 UNIQUE (misccode);
ALTER TABLE invmmrule ADD CONSTRAINT invmmrule_u01 UNIQUE (name);
ALTER TABLE invmmrule_allocation ADD CONSTRAINT u_mmrule_alloc_st_sl_ar_code UNIQUE (admsite_code, invarticle_code, slcode);
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_u01 UNIQUE (invmmrule_date_code, rule_type);
ALTER TABLE invpermit ADD CONSTRAINT u_invpermit_pno_yc_pcode_type UNIQUE (pcode, permitno, permittype, ycode);
ALTER TABLE invpicklistmain ADD CONSTRAINT invpicklistmain_u01 UNIQUE (guid);
ALTER TABLE invputmain ADD CONSTRAINT invputmain_u01 UNIQUE (guid);
ALTER TABLE invreqmain ADD CONSTRAINT invreqmain_u01 UNIQUE (reqno, ycode);
ALTER TABLE invreservedet ADD CONSTRAINT invreservedet_u01 UNIQUE (channel_b2c_orderdetid, invbatch_serial_code, invbin_code, invreservemain_code, orddet_code, retailorddet_code);
ALTER TABLE invstfdet ADD CONSTRAINT invstfdet_u01 UNIQUE (icode, invbatch_serial_code, stfcode, stfrate);
ALTER TABLE invstkadjdet ADD CONSTRAINT invstkadjdet_u01 UNIQUE (icode, invbatch_serial_code, stkadjcode);
ALTER TABLE invstkadjmain ADD CONSTRAINT invstkadjmain_u01 UNIQUE (stkadjno, ycode);
ALTER TABLE invstkentmain ADD CONSTRAINT u_invstkentmain_stkentno_ycode UNIQUE (stkentno, ycode);
ALTER TABLE invstkplanitem ADD CONSTRAINT u_stkplnitem_loc_grp_art_icode UNIQUE (grpcode, icode, invarticle_code, invbatch_serial_code, lev1grpcode, lev2grpcode, loccode, stkplancode);
ALTER TABLE invtakemain ADD CONSTRAINT invtakemain_u01 UNIQUE (guid);
ALTER TABLE invval_migration_det ADD CONSTRAINT invval_migration_det_u01 UNIQUE (admmonth_last_date, admsite_code, icode);
ALTER TABLE invval_migration_main ADD CONSTRAINT invval_migration_main_u01 UNIQUE (admmonth_last_date, admsite_code);
ALTER TABLE log_tag_agg ADD CONSTRAINT u_log_tag_agg_logname_consumer UNIQUE (consumer, logname);
ALTER TABLE lpcard_distribution ADD CONSTRAINT lpcard_distribution_u01 UNIQUE (admsite_code, cardno);
ALTER TABLE mailjobtype ADD CONSTRAINT mailjobtype_u01 UNIQUE (classname);
ALTER TABLE mdtype ADD CONSTRAINT mdtype_u01 UNIQUE (concretetype, interfacetype, registeredname);
ALTER TABLE nfs$event_vars ADD CONSTRAINT nfs$event_vars_u01 UNIQUE (name, nfs$events_code);
ALTER TABLE nfs$events ADD CONSTRAINT nfs$events_u01 UNIQUE (name);
ALTER TABLE nfs$events ADD CONSTRAINT nfs$events_u02 UNIQUE (short_name);
ALTER TABLE nfs$tasks ADD CONSTRAINT nfs$tasks_u01 UNIQUE (name);
ALTER TABLE posjournal ADD CONSTRAINT posjournal_u01 UNIQUE (admsite_code, createdby, docdate, scheme_docno);
ALTER TABLE posjournal_void ADD CONSTRAINT posjournal_void_u01 UNIQUE (admsite_code, docdate, scheme_docno, voidby);
ALTER TABLE prdbomdet ADD CONSTRAINT u_prdbomdet_bom_seq_ci_pr_code UNIQUE (bomcode, bomoperation_code, com_saitem_code, component_icode, is_ass_item, operation_seq, prcode);
ALTER TABLE prdbommain ADD CONSTRAINT u_prdbommain_assicode_rtcd UNIQUE (assembly_icode, routecode);
ALTER TABLE prdbomver ADD CONSTRAINT u_prdbomver_bom_no_code UNIQUE (bom_version_no, bomcode);
ALTER TABLE prdcostsheetbom ADD CONSTRAINT u_prdcsbom_cscode_opseq_cicode UNIQUE (component_icode, costsheet_code, operation_seq);
ALTER TABLE prdcostsheethead ADD CONSTRAINT u_prdcshead_id UNIQUE (id);
ALTER TABLE prdcostsheetoperation ADD CONSTRAINT u_prdcsop_cscode_opseq UNIQUE (costsheet_code, operation_seq);
ALTER TABLE prdis ADD CONSTRAINT u_prdis_ordcode_icode UNIQUE (icode, invbatch_serial_code, ordcode);
ALTER TABLE prdjobbom ADD CONSTRAINT u_prdjobbom_jc_ai_lc_seq_ci UNIQUE (ass_saitem_code, assembly_icode, com_saitem_code, component_icode, job_assembly_icode, jobcode, jrcdet_code, lotcode, operation_seq, prdjobdet_code);
ALTER TABLE prdjobdet ADD CONSTRAINT u_det_jcode_lcode_aicode_sai UNIQUE (ass_saitem_code, assembly_icode, jobcode, lotcode);
ALTER TABLE prdjrcdet ADD CONSTRAINT u_prdjrcdet_jrcjoblotaicode UNIQUE (ass_saitem_code, assembly_icode, invbatch_serial_code, job_assembly_icode, jobcode, jrccode, lotcode);
ALTER TABLE prdlotbom ADD CONSTRAINT u_prdlotbom_lotaicodeseqcicode UNIQUE (ass_saitem_code, assembly_icode, com_saitem_code, component_icode, is_ass_item, lotcode, operation_seq, prcode);
ALTER TABLE prdlotdet ADD CONSTRAINT u_prdlotdet_lotcode_aicode UNIQUE (assembly_icode, lotcode);
ALTER TABLE prdlotoperation ADD CONSTRAINT u_prdlotop_lotcode_aitem_opseq UNIQUE (ass_saitem_code, assembly_icode, lotcode, operation_seq, prcode);
ALTER TABLE prdmplanmain ADD CONSTRAINT u_prdmplanmain_entno_ycode UNIQUE (entno, ycode);
ALTER TABLE prdprrate ADD CONSTRAINT u_prdprrate_prcode_pcode UNIQUE (pcode, prcode);
ALTER TABLE prdprrate_article ADD CONSTRAINT prdprrate_article_u01 UNIQUE (invarticle_code, pcode, prcode);
ALTER TABLE prdprrate_item ADD CONSTRAINT prdprrate_item_u01 UNIQUE (icode, pcode, prcode);
ALTER TABLE prdroutedet ADD CONSTRAINT u_prdroutedet_routecode_opseq UNIQUE (operation_seq, routecode);
ALTER TABLE prdroutegrp ADD CONSTRAINT u_prdroutegrp_grpname UNIQUE (grpname);
ALTER TABLE prdroutegrpdet ADD CONSTRAINT u_rtgrpdet_icode_grp_effdt UNIQUE (eff_date, icode, routecode, routegrp_code);
ALTER TABLE prdroutemain ADD CONSTRAINT u_prdroutemain_name UNIQUE (name);
ALTER TABLE prdwipdet ADD CONSTRAINT u_prdwipdet_wtc_ci_jc_lc_ai UNIQUE (ass_saitem_code, assembly_icode, com_saitem_code, component_icode, invbatch_serial_code, job_assembly_icode, jobbom_code, jobcode, lotcode, wiptxn_code);
ALTER TABLE promo_allocation ADD CONSTRAINT promo_allocation_name_u01 UNIQUE (name);
ALTER TABLE promo_allocation_det ADD CONSTRAINT promo_alloc_det_alcd_prty_u01 UNIQUE (allocation_code, priority);
ALTER TABLE promo_applicable ADD CONSTRAINT promo_appl_created_prio_u01 UNIQUE (iscreatedbyho, priority);
ALTER TABLE promo_assortment ADD CONSTRAINT promo_assort_name_cmpcode_u01 UNIQUE (cmpcode, name);
ALTER TABLE promo_master ADD CONSTRAINT promo_master_name_cmpcode_u02 UNIQUE (cmpcode, name);
ALTER TABLE promo_master ADD CONSTRAINT promo_master_no_u01 UNIQUE (no);
ALTER TABLE promo_voucher ADD CONSTRAINT promo_voucher_name_u01 UNIQUE (name);
ALTER TABLE psite_alloc_charge ADD CONSTRAINT psite_alloc_charge_u01 UNIQUE (admsite_code, salchgcode);
ALTER TABLE psite_alloc_item ADD CONSTRAINT psite_alloc_item_u01 UNIQUE (admsite_code, icode);
ALTER TABLE psite_allocation_detail ADD CONSTRAINT psite_allocation_detail_u01 UNIQUE (allocation_type, psite_allocation_code, refcode);
ALTER TABLE psite_auditplan ADD CONSTRAINT psite_auditplan_u01 UNIQUE (name);
ALTER TABLE psite_couponoffer ADD CONSTRAINT psite_coupon_u01 UNIQUE (shortcode);
ALTER TABLE psite_customer_dist ADD CONSTRAINT psite_customer_dist_u01 UNIQUE (admsite_code, psite_customer_code);
ALTER TABLE psite_customer_merge ADD CONSTRAINT psite_customer_merge_u01 UNIQUE (new_psite_customer_code, old_psite_customer_code);
ALTER TABLE psite_event_tracking ADD CONSTRAINT u_psev_tracking_composite UNIQUE (admsite_code, eventtype, refcode);
ALTER TABLE psite_event_tracking2 ADD CONSTRAINT u_psev_tracking_composite2 UNIQUE (admsite_code, eventtype, refcode);
ALTER TABLE psite_global_salesperson ADD CONSTRAINT psite_global_salesperson_u01 UNIQUE (spno);
ALTER TABLE psite_grc ADD CONSTRAINT psite_grc_u01 UNIQUE (admsite_code, createdbyid, docdt, docno);
ALTER TABLE psite_grcitem ADD CONSTRAINT psite_grcitem_u01 UNIQUE (salinvdet_code);
ALTER TABLE psite_grcitem ADD CONSTRAINT psite_grcitem_u02 UNIQUE (psite_grtitem_code);
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_u01 UNIQUE (admsite_code, createdbyid, docdt, docno);
ALTER TABLE psite_grtitem ADD CONSTRAINT psite_grtitem_u01 UNIQUE (packetitemid);
ALTER TABLE psite_mdplugintypes ADD CONSTRAINT psite_mdplugintypes_uk UNIQUE (eventtype);
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_u02 UNIQUE (shortcode);
ALTER TABLE psite_packet ADD CONSTRAINT psite_packet_u01 UNIQUE (admsite_code, createdby, packetdate, packetno);
ALTER TABLE psite_posbillcnop ADD CONSTRAINT psite_posbillcnop_u01 UNIQUE (admsite_code, cnno);
ALTER TABLE psite_posbilldnop ADD CONSTRAINT psite_posbilldnop_u01 UNIQUE (admsite_code, dnno);
ALTER TABLE psite_posstlm ADD CONSTRAINT psite_posstlm_u01 UNIQUE (admsite_code, stlmfor);
ALTER TABLE psite_promo_assign ADD CONSTRAINT promo_assign_u01 UNIQUE (admsite_code, priority);
ALTER TABLE psite_promo_assign ADD CONSTRAINT promo_assign_u02 UNIQUE (ho_matching_code);
ALTER TABLE psite_ptchead_assign ADD CONSTRAINT psite_ptchead_assign_u01 UNIQUE (admsite_code, psite_ptchead_code);
ALTER TABLE psite_salesperson_assign ADD CONSTRAINT psite_salesperson_assign_u01 UNIQUE (admsite_code, psite_global_salesperson_code);
ALTER TABLE psite_web_event ADD CONSTRAINT u_pswev_composite UNIQUE (eventtype, refcode);
ALTER TABLE pur_price_chart ADD CONSTRAINT pur_price_chart_u01 UNIQUE (effective_date, icode, pcode);
ALTER TABLE purinvchg ADD CONSTRAINT purinvchg_u01 UNIQUE (basis, chgcode, formulae, gl_cc_appl, glcode, invcode, istax, rate, sign, slcode, source);
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_c09 UNIQUE (basis, chgcode, formulae, gl_cc_appl, glcode, istax, jrncode, rate, sign, slcode, source);
ALTER TABLE purinvjrnmain ADD CONSTRAINT purinvjrnmain_u01 UNIQUE (admsite_code_owner, jrntype,jrndt, scheme_docno);
ALTER TABLE purinvmain_deleted ADD CONSTRAINT purinvmain_deleted_u01 UNIQUE (invcode);
ALTER TABLE purordchg ADD CONSTRAINT u_purordchg_ord_chg_rate UNIQUE (chgcode, ordcode, rate);
ALTER TABLE purorddet ADD CONSTRAINT u_purorddet_ord_icode_set_rate UNIQUE (icode, invsetmain_code, ordcode, rate);
ALTER TABLE purordmain ADD CONSTRAINT u_purordmain_dataversion UNIQUE (dataversion);
ALTER TABLE purordshipmain ADD CONSTRAINT u_purordshipmain_ordcode UNIQUE (ordcode);
ALTER TABLE purreqdet ADD CONSTRAINT u_purreqdet_reqcode_icode UNIQUE (icode, reqcode);
ALTER TABLE purrtchg ADD CONSTRAINT purrtchg_u01 UNIQUE (basis, chgcode, formulae, glcode, istax, rate, rtcode, sign, slcode, source);
ALTER TABLE purrtmain_deleted ADD CONSTRAINT purrtmain_deleted_u01 UNIQUE (rtcode);
ALTER TABLE purservice ADD CONSTRAINT u_purservice_servicename UNIQUE (servicename);
ALTER TABLE pursrvchg ADD CONSTRAINT u_pursrvchg_chg_rate_tds UNIQUE (basis, chgcode, formulae, glcode, include_in_tds, istax, rate, slcode, source, srvcode);
ALTER TABLE pursrvdet ADD CONSTRAINT u_pursrvdet_srv_service_gl_slc UNIQUE (glcode, servicecode, slcode, srvcode);
ALTER TABLE pursrvjrnchg ADD CONSTRAINT u_pursrvjrnchg_chg_rate_tds UNIQUE (basis, chgcode, formulae, glcode, istax, jrncode, rate, slcode, source);
ALTER TABLE pursrvjrndet ADD CONSTRAINT u_pursrvjrndet_srvc_srv_gl_slc UNIQUE (glcode, jrncode, pursrvdet_code, servicecode, slcode);
ALTER TABLE pursrvmain_deleted ADD CONSTRAINT pursrvmain_deleted_u01 UNIQUE (srvcode);
ALTER TABLE pursrvordchg ADD CONSTRAINT u_pursrvordchg_ord_chg_rt_tds UNIQUE (chgcode, include_in_tds, pursrvordmain_code, rate);
ALTER TABLE pursrvorddet ADD CONSTRAINT u_pursrvorddt_servicecd_ordcd UNIQUE (pursrvordmain_code, servicecode);
ALTER TABLE purtermdet ADD CONSTRAINT u_purtermdet_termcode_chgcode UNIQUE (chgcode, purtermmain_code);
ALTER TABLE purtermdet ADD CONSTRAINT u_purtermdet_termcodeoplvlseq UNIQUE (operation_level, purtermmain_code, seq);
ALTER TABLE retailorddet ADD CONSTRAINT retailorddet_u01 UNIQUE (intgorderdetid);
ALTER TABLE salchg ADD CONSTRAINT u_salchg_salchgname UNIQUE (salchgname);
ALTER TABLE salcreditrating ADD CONSTRAINT u_salcreditrating_crname UNIQUE (crname);
ALTER TABLE salcsmain ADD CONSTRAINT salcsmain_u02 UNIQUE (admsite_code, csdate, ecode, scheme_docno);
ALTER TABLE salcsmain_deleted ADD CONSTRAINT salcsmain_deleted_u01 UNIQUE (cscode);
ALTER TABLE salinvchg ADD CONSTRAINT u_salinvchg_inv_chg_rate UNIQUE (basis, formulae, gl_cc_appl, glcode, invcode, istax, rate, salchgcode, sign, slcode, source);
ALTER TABLE salinvdet ADD CONSTRAINT salinvdet_u01 UNIQUE (invdcdet_code);
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_c09 UNIQUE (basis, formulae, gl_cc_appl, glcode, istax, jrncode, rate, salchgcode, sign, slcode, source);
ALTER TABLE salinvmain ADD CONSTRAINT salinvmain_u01 UNIQUE (admsite_code_owner, docdt, ecode, scheme_docno);
ALTER TABLE salinvmain_deleted ADD CONSTRAINT salinvmain_deleted_u01 UNIQUE (invcode);
ALTER TABLE salordchg ADD CONSTRAINT u_salordchg_ordcd_chgcd_rate UNIQUE (chgcode, ordcode, rate);
ALTER TABLE salordmain ADD CONSTRAINT salordmain_u02 UNIQUE (admsite_code_owner, ecode, orddt, scheme_docno);
ALTER TABLE salpricelistmain ADD CONSTRAINT u_salpricelistmain_listname UNIQUE (pricelistname);
ALTER TABLE salreqdet ADD CONSTRAINT u_salreqdet_reqcode_icode UNIQUE (icode, reqcode);
ALTER TABLE salrtchg ADD CONSTRAINT u_salrtchg_rt_chg_rate UNIQUE (basis, formulae, glcode, istax, rate, rtcode, salchgcode, sign, slcode, source);
ALTER TABLE salrtmain_deleted ADD CONSTRAINT salrtmain_deleted_u01 UNIQUE (rtcode);
ALTER TABLE salsrvchg ADD CONSTRAINT u_salsrvchg_chg_rate UNIQUE (basis, chgcode, formulae, glcode, istax, rate, slcode, source, srvcode);
ALTER TABLE salsrvdet ADD CONSTRAINT u_salsrvdet_srv_service_gl_slc UNIQUE (glcode, servicecode, slcode, srvcode);
ALTER TABLE salssdet ADD CONSTRAINT salssdet_u01 UNIQUE (intg_invoicedetid);
ALTER TABLE saltermdet ADD CONSTRAINT u_saltermdet_termcode_chgcode UNIQUE (chgcode, saltermcode);
ALTER TABLE saltermdet ADD CONSTRAINT u_saltermdet_termcodeoplvlseq UNIQUE (operation_level, saltermcode, seq);
ALTER TABLE saltermgrp ADD CONSTRAINT u_saltermgrp_termgrpname UNIQUE (termgrpname);
ALTER TABLE saltermmain ADD CONSTRAINT u_saltermmain_saltermname UNIQUE (saltermname);
ALTER TABLE si_allocation ADD CONSTRAINT si_allocation_name_u01 UNIQUE (name);
ALTER TABLE si_allocation_det ADD CONSTRAINT si_alloc_det_alcd_prty_u01 UNIQUE (allocation_code, priority);
ALTER TABLE si_assortment ADD CONSTRAINT si_assort_name_cmpcode_u01 UNIQUE (name);
ALTER TABLE web_print_preference ADD CONSTRAINT u_webprntpref_user_menushrtcd UNIQUE (mdmenushortcode, user_id);

--Foreign Key
ALTER TABLE api_version_map ADD CONSTRAINT api_version_map_fk02 FOREIGN KEY (gds2_version) REFERENCES gds2_version(version);
ALTER TABLE gds2_entity ADD CONSTRAINT gds2_entity_gds2_version_fkey FOREIGN KEY (gds2_version) REFERENCES gds2_version(version);
ALTER TABLE gds2_entity_version ADD CONSTRAINT gds2_entity_version_fk02 FOREIGN KEY (gds2_version) REFERENCES gds2_version(version);
ALTER TABLE gds2_event_dl_queue ADD CONSTRAINT gds2_event_dl_queue_gds2_version_fkey FOREIGN KEY (gds2_version) REFERENCES gds2_version(version);
ALTER TABLE gds2_event_version_map ADD CONSTRAINT gds2_event_version_map_fk01 FOREIGN KEY (gds2_version) REFERENCES gds2_version(version);
ALTER TABLE gds2_webhook_failure ADD CONSTRAINT gds2_webhook_failure_gds2_version_fkey FOREIGN KEY (gds2_version) REFERENCES gds2_version(version);
ALTER TABLE gds2_webhook_success ADD CONSTRAINT gds2_webhook_success_gds2_version_fkey FOREIGN KEY (gds2_version) REFERENCES gds2_version(version);
ALTER TABLE gds2_entity_version ADD CONSTRAINT gds2_entity_version_fk01 FOREIGN KEY (gds2_entity_id) REFERENCES gds2_entity (ID);
ALTER TABLE api_version_map ADD CONSTRAINT api_version_map_fk01 FOREIGN KEY (api_code) REFERENCES mdapi (code);
ALTER TABLE appuser ADD FOREIGN KEY (gds2_entity_id) REFERENCES gds2_entity (ID);
	   
ALTER TABLE admattached_files ADD CONSTRAINT
admattached_files_r01 FOREIGN KEY (uploadedby_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE admcfg ADD CONSTRAINT
r_admcfg_terminalcode FOREIGN KEY (terminalcode) REFERENCES admterminal
(terminalcode);
ALTER TABLE admcmp ADD CONSTRAINT
r_admcmp_admcity_code FOREIGN KEY (admcity_code) REFERENCES admcity
(code);
ALTER TABLE admcmpprof ADD CONSTRAINT
r_admcmpprof_cd_glcode FOREIGN KEY (cash_discount_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admcmpprof ADD CONSTRAINT
r_admcmpprof_pos_roundoff_gl FOREIGN KEY (pos_roundoff_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admcmpprof ADD CONSTRAINT
r_admcmpprof_profitloss_glcode FOREIGN KEY (profit_loss_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admcmptax ADD CONSTRAINT
r_admcmptax_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE admcmptax ADD CONSTRAINT
r_admcmptax_last_access_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE admcurrency ADD CONSTRAINT
admcurrency_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE admcurrency ADD CONSTRAINT
admcurrency_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE admcurrency_deno ADD CONSTRAINT
admcurrency_deno_r01 FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE admcurrency_rate ADD CONSTRAINT
admcurrency_rate_r01 FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE admcurrency_rate ADD CONSTRAINT
admcurrency_rate_r02 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE admcurrency_rate ADD CONSTRAINT
admcurrency_rate_r03 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE admdaybook ADD CONSTRAINT
r_admdaybook_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE admdocreport ADD CONSTRAINT
admdocreport_r01 FOREIGN KEY (functioncode) REFERENCES admfunction
(functioncode);
ALTER TABLE admdocreport ADD CONSTRAINT
r_admdocreport_ex_rep_mast_cd FOREIGN KEY (ex_report_master_code) REFERENCES ex_report_master
(code);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r01 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r02 FOREIGN KEY (admgststate_code) REFERENCES admgststate
(code);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r03 FOREIGN KEY (igst_input_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r04 FOREIGN KEY (igst_input_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r05 FOREIGN KEY (igst_output_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r06 FOREIGN KEY (igst_output_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r07 FOREIGN KEY (cgst_input_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r08 FOREIGN KEY (cgst_input_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r09 FOREIGN KEY (cgst_output_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r10 FOREIGN KEY (cgst_output_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r11 FOREIGN KEY (sgst_input_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r12 FOREIGN KEY (sgst_input_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r13 FOREIGN KEY (sgst_output_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r14 FOREIGN KEY (sgst_output_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r15 FOREIGN KEY (cess_input_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r16 FOREIGN KEY (cess_input_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r17 FOREIGN KEY (cess_output_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r18 FOREIGN KEY (cess_output_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r19 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r20 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE admgstin ADD CONSTRAINT
admgstin_r21 FOREIGN KEY (ppob) REFERENCES admsite
(code);
ALTER TABLE admlastdoc ADD CONSTRAINT
admlastdoc_menu_shcode FOREIGN KEY (mdmenushortcode) REFERENCES mdmenu
(sys_shortcode);
ALTER TABLE admlastdoc ADD CONSTRAINT
admlastdoc_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE admlastdoc ADD CONSTRAINT
admlastdoc_r02 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE admlastdoc ADD CONSTRAINT
r_admlastdoc_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE admlastdoc ADD CONSTRAINT
r_admlastdoc_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE admlastdoc ADD CONSTRAINT
r_admlastdoc_cmpcode FOREIGN KEY (cmpcode) REFERENCES admcmp
(cmpcode);
ALTER TABLE admlastno ADD CONSTRAINT
r_admlastno_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE admlastordno ADD CONSTRAINT
r_admlastordno_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE admlet ADD CONSTRAINT
r_admlet_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE admlog ADD CONSTRAINT
r_admlog_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE admmenu ADD CONSTRAINT
r_admmenu_functioncode FOREIGN KEY (functioncode) REFERENCES admfunction
(functioncode);
ALTER TABLE admmenu ADD CONSTRAINT
r_admmenu_mdmenushortcode FOREIGN KEY (mdmenushortcode) REFERENCES mdmenu
(sys_shortcode);
ALTER TABLE admmenu ADD CONSTRAINT
r_admmenu_parentcode FOREIGN KEY (parentcode) REFERENCES admmenu
(menucode);
ALTER TABLE admmenu_docscheme ADD CONSTRAINT
admdocsch_menu_shcode FOREIGN KEY (mdmenushortcode) REFERENCES mdmenu
(sys_shortcode);
ALTER TABLE admmonth ADD CONSTRAINT
r_admmonth_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE admou ADD CONSTRAINT
admou_default_ho_site FOREIGN KEY (default_ho_site) REFERENCES admsite
(code);
ALTER TABLE admou ADD CONSTRAINT
admou_r01 FOREIGN KEY (gvcontrol_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
admou_r02 FOREIGN KEY (gvdiscount_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
admou_r03 FOREIGN KEY (roundoff_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
admou_r04 FOREIGN KEY (creditnote_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
admou_r05 FOREIGN KEY (redemption_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
admou_r06 FOREIGN KEY (debitnote_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_consignmentsale_gl FOREIGN KEY (consignmentsale_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_consignmentsale_sl FOREIGN KEY (consignmentsale_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_pkgloccode FOREIGN KEY (pkgloccode) REFERENCES invloc
(loccode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_transferin_glcode FOREIGN KEY (transferin_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_transferin_slcode FOREIGN KEY (transferin_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_transferout_glcode FOREIGN KEY (transferout_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_transferout_slcode FOREIGN KEY (transferout_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_transit_glcode FOREIGN KEY (transit_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_transit_slcode FOREIGN KEY (transit_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_transitdiff_glcode FOREIGN KEY (transitdiff_glcode) REFERENCES fingl
(glcode);
ALTER TABLE admou ADD CONSTRAINT
r_admou_transitdiff_slcode FOREIGN KEY (transitdiff_slcode) REFERENCES finsl
(slcode);
ALTER TABLE admou_docscheme ADD CONSTRAINT
r_admou_docscheme_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE admou_docscheme ADD CONSTRAINT
r_admou_docscheme_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE admou_docscheme ADD CONSTRAINT
r_admou_docscheme_oucode FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE admou_month ADD CONSTRAINT
r_admou_month_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE admou_month ADD CONSTRAINT
r_admou_month_fin_mn_md_by FOREIGN KEY (fin_month_modified_by) REFERENCES hrdemp
(ecode);
ALTER TABLE admou_month ADD CONSTRAINT
r_admou_month_inv_mn_md_by FOREIGN KEY (inv_month_modified_by) REFERENCES hrdemp
(ecode);
ALTER TABLE admou_month ADD CONSTRAINT
r_admou_month_mcode FOREIGN KEY (admmonth_code) REFERENCES admmonth
(mcode);
ALTER TABLE admou_setting ADD CONSTRAINT
r_admou_setting_admou_code_in FOREIGN KEY (admou_code_in) REFERENCES admou
(code);
ALTER TABLE admou_setting ADD CONSTRAINT
r_admou_setting_admou_code_out FOREIGN KEY (admou_code_out) REFERENCES admou
(code);
ALTER TABLE admou_year ADD CONSTRAINT
r_admou_year_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE admou_year ADD CONSTRAINT
r_admou_year_closed_by FOREIGN KEY (admyear_closed_by) REFERENCES hrdemp
(ecode);
ALTER TABLE admou_year ADD CONSTRAINT
r_admou_year_ycode FOREIGN KEY (admyear_code) REFERENCES admyear
(ycode);
ALTER TABLE admpriv ADD CONSTRAINT
r_admpriv_rlcode FOREIGN KEY (rlcode) REFERENCES admrole
(rlcode);
ALTER TABLE admquicklaunch ADD CONSTRAINT
r_admquicklaunch_profcode FOREIGN KEY (profcode) REFERENCES admprof
(profcode);
ALTER TABLE admrole ADD CONSTRAINT
r_admrole_profcode FOREIGN KEY (profcode) REFERENCES admprof
(profcode);
ALTER TABLE admsite ADD CONSTRAINT
admsite_psite_r01 FOREIGN KEY (psite_localpolicy_code) REFERENCES psite_localpolicy
(code);
ALTER TABLE admsite ADD CONSTRAINT
admsite_psite_r02 FOREIGN KEY (psite_group_code) REFERENCES psite_group
(code);
ALTER TABLE admsite ADD CONSTRAINT
admsite_psite_r03 FOREIGN KEY (psite_allocation_code) REFERENCES psite_allocation
(code);
ALTER TABLE admsite ADD CONSTRAINT
admsite_psite_r04 FOREIGN KEY (psite_promo_allocation_code) REFERENCES promo_allocation
(code);
ALTER TABLE admsite ADD CONSTRAINT
admsite_psite_r05 FOREIGN KEY (default_picklist_rule) REFERENCES picklist_rule
(code);
ALTER TABLE admsite ADD CONSTRAINT
admsite_psite_r06 FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE admsite ADD CONSTRAINT
admsite_psite_r07 FOREIGN KEY (admgstin_code) REFERENCES admgstin
(code);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_ctname FOREIGN KEY (ctname) REFERENCES admcity
(ctname);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_isdcode FOREIGN KEY (admisd_code) REFERENCES admisd
(code);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_pricelist_code FOREIGN KEY (pricelist_code) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_psite_stkpt_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_salformcode FOREIGN KEY (salformcode) REFERENCES finform
(formcode);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_store_loccode FOREIGN KEY (store_loccode) REFERENCES invloc
(loccode);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_termcode FOREIGN KEY (termcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_transit_loccode FOREIGN KEY (psite_transit_loccode) REFERENCES invloc
(loccode);
ALTER TABLE admsite ADD CONSTRAINT
r_admsite_trpcode FOREIGN KEY (trpcode) REFERENCES finsl
(slcode);
ALTER TABLE admsite ADD CONSTRAINT
r_floor_stock_point FOREIGN KEY (floorloccode) REFERENCES invloc
(loccode);
ALTER TABLE admsite ADD CONSTRAINT
r_ship_cp_category_code FOREIGN KEY (ship_cp_category_code) REFERENCES admgstcategory
(code);
ALTER TABLE admsite ADD CONSTRAINT
r_ship_cp_gstin_state_code FOREIGN KEY (ship_cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE admsite ADD CONSTRAINT
si_alloc_det_pst_si_alloc_code FOREIGN KEY (psite_si_allocation_code) REFERENCES si_allocation
(code);
ALTER TABLE admsite_ou ADD CONSTRAINT
admsite_ou_r01 FOREIGN KEY (termcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE admsite_ou ADD CONSTRAINT
admsite_ou_r02 FOREIGN KEY (return_pricelist_code) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE admsite_ou ADD CONSTRAINT
r_admsite_ou_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE admsite_ou ADD CONSTRAINT
r_admsite_ou_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE admsite_ou ADD CONSTRAINT
r_admsite_ou_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE admsite_ou ADD CONSTRAINT
r_admsite_ou_pricelist_code FOREIGN KEY (pricelist_code) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE admsite_ou ADD CONSTRAINT
r_admsite_ou_repln_site_code FOREIGN KEY (repln_admsite_code) REFERENCES admsite
(code);
ALTER TABLE admsite_ou ADD CONSTRAINT
r_admsite_ou_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE admsite_ou ADD CONSTRAINT
r_admsite_ou_strct_flw_tr_rt FOREIGN KEY (transit_via_admsite_code) REFERENCES admsite
(code);
ALTER TABLE appuser ADD CONSTRAINT
appuser_r01 FOREIGN KEY (roleid) REFERENCES role
(id);
ALTER TABLE appuser ADD CONSTRAINT
appuser_r02 FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE appuser ADD CONSTRAINT
appuser_r03 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE appuser ADD CONSTRAINT
appuser_r04 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE aud2_tab_col ADD CONSTRAINT
aud2_tab_col_r01 FOREIGN KEY (module_shortcode) REFERENCES aud2_module
(shortcode);
ALTER TABLE aud2_tab_col ADD CONSTRAINT
aud2_tab_col_r02 FOREIGN KEY (table_name) REFERENCES aud2_table
(table_name);
ALTER TABLE aud2_table ADD CONSTRAINT
aud2_table_r01 FOREIGN KEY (module_shortcode) REFERENCES aud2_module
(shortcode);
ALTER TABLE aud_events ADD CONSTRAINT
r_aud_login_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE aud_purge ADD CONSTRAINT
aud_purge_r01 FOREIGN KEY (purge_by) REFERENCES hrdemp
(ecode);
ALTER TABLE cogs_run_log ADD CONSTRAINT
r_tablecogs_run_log_ou_mcode FOREIGN KEY (admou_month_code) REFERENCES admou_month
(code);
ALTER TABLE cogs_run_log ADD CONSTRAINT
r_tablecogs_run_log_run_by FOREIGN KEY (run_by) REFERENCES hrdemp
(ecode);
ALTER TABLE connected_app ADD CONSTRAINT
connected_app_r01 FOREIGN KEY (app_id) REFERENCES mdconnected_app
(app_id);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r03 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r04 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r05 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r06 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r07 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r08 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r09 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r10 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r11 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r12 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT
connected_app_assrt_excl_r13 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r03 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r04 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r05 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r06 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r07 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r08 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r09 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r10 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r11 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r12 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT
connected_app_assrt_incl_r13 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE connected_app_bin ADD CONSTRAINT
connected_app_bin_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_bin ADD CONSTRAINT
connected_app_bin_r02 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE connected_app_bin ADD CONSTRAINT
connected_app_bin_r03 FOREIGN KEY (connected_app_site_code) REFERENCES connected_app_site
(code);
ALTER TABLE connected_app_channel ADD CONSTRAINT
connected_app_channel_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_channel ADD CONSTRAINT
connected_app_channel_r03 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE connected_app_customer ADD CONSTRAINT
connected_app_customer_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_expense ADD CONSTRAINT
connected_app_expense_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_expense ADD CONSTRAINT
connected_app_expense_r02 FOREIGN KEY (expense_master_code) REFERENCES expense_master
(code);
ALTER TABLE connected_app_expense ADD CONSTRAINT
connected_app_expense_r03 FOREIGN KEY (expense_glcode) REFERENCES fingl
(glcode);
ALTER TABLE connected_app_expense ADD CONSTRAINT
connected_app_expense_r04 FOREIGN KEY (expense_slcode) REFERENCES finsl
(slcode);
ALTER TABLE connected_app_expenseexception ADD CONSTRAINT
connected_app_expenseexcp_r01 FOREIGN KEY (connected_app_expense_code) REFERENCES connected_app_expense
(code);
ALTER TABLE connected_app_expenseexception ADD CONSTRAINT
connected_app_expenseexcp_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE connected_app_expenseexception ADD CONSTRAINT
connected_app_expenseexcp_r03 FOREIGN KEY (channel_code) REFERENCES finsl
(slcode);
ALTER TABLE connected_app_expenseexception ADD CONSTRAINT
connected_app_expenseexcp_r04 FOREIGN KEY (expense_glcode) REFERENCES fingl
(glcode);
ALTER TABLE connected_app_expenseexception ADD CONSTRAINT
connected_app_expenseexcp_r05 FOREIGN KEY (expense_slcode) REFERENCES finsl
(slcode);
ALTER TABLE connected_app_site ADD CONSTRAINT
connected_app_site_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_site ADD CONSTRAINT
connected_app_site_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE connected_app_stockpoint ADD CONSTRAINT
connected_app_stockpoint_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_stockpoint ADD CONSTRAINT
connected_app_stockpoint_r03 FOREIGN KEY (connected_app_site_code) REFERENCES connected_app_site
(code);
ALTER TABLE connected_app_stockpoint ADD CONSTRAINT
connected_app_stockpoint_r04 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE connected_app_stockpoint ADD CONSTRAINT
connected_app_stockpoint_r05 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE connected_app_tender ADD CONSTRAINT
connected_app_tender_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_tender ADD CONSTRAINT
connected_app_tender_r02 FOREIGN KEY (tender_master_code) REFERENCES tender_master
(code);
ALTER TABLE connected_app_tenderexception ADD CONSTRAINT
connected_app_tenderexcp_r01 FOREIGN KEY (connected_app_tender_code) REFERENCES connected_app_tender
(code);
ALTER TABLE connected_app_tenderexception ADD CONSTRAINT
connected_app_tenderexcp_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE connected_app_tenderexception ADD CONSTRAINT
connected_app_tenderexcp_r03 FOREIGN KEY (channel_code) REFERENCES finsl
(slcode);
ALTER TABLE connected_app_tenderexception ADD CONSTRAINT
connected_app_tenderexcp_r04 FOREIGN KEY (tender_glcode) REFERENCES fingl
(glcode);
ALTER TABLE connected_app_tenderexception ADD CONSTRAINT
connected_app_tenderexcp_r05 FOREIGN KEY (tender_slcode) REFERENCES finsl
(slcode);
ALTER TABLE connected_app_transporter ADD CONSTRAINT
connected_app_transporter_r01 FOREIGN KEY (connected_app_id) REFERENCES connected_app
(code);
ALTER TABLE connected_app_transporter ADD CONSTRAINT
connected_app_transporter_r03 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE custompatchcirculation ADD CONSTRAINT
custompatchcirculation_r01 FOREIGN KEY (patchid) REFERENCES custompatch
(patchid);
ALTER TABLE custompatchcirculation ADD CONSTRAINT
custompatchcirculation_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE custompatchdata ADD CONSTRAINT
custompatchdata_r01 FOREIGN KEY (patchid) REFERENCES custompatch
(patchid);
ALTER TABLE depthsnchangelog ADD CONSTRAINT
r_depthsnchangelog_createdby FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE depthsnchangelog ADD CONSTRAINT
r_depthsnchangelog_grpcode FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE depthsnchangelog ADD CONSTRAINT
r_depthsnchangelog_hsn_code FOREIGN KEY (invhsnsacmain_code) REFERENCES invhsnsacmain
(code);
ALTER TABLE dxreceive ADD CONSTRAINT
dxreceive_r01 FOREIGN KEY (dxreceivesessionid) REFERENCES dxsessionlog
(id);
ALTER TABLE dxreceive ADD CONSTRAINT
dxreceive_r02 FOREIGN KEY (dxprocesssessionid) REFERENCES dxsessionlog
(id);
ALTER TABLE dxreceivedata ADD CONSTRAINT
dxreceivedata_r01 FOREIGN KEY (dxreceiveid) REFERENCES dxreceive
(id);
ALTER TABLE dxsend ADD CONSTRAINT
dxsend_r01 FOREIGN KEY (dxcollectionsessionid) REFERENCES dxsessionlog
(id);
ALTER TABLE dxsend ADD CONSTRAINT
dxsend_r02 FOREIGN KEY (dxsendsessionid) REFERENCES dxsessionlog
(id);
ALTER TABLE dxsend2 ADD CONSTRAINT
dxsend2_r01 FOREIGN KEY (dxcollectionsessionid) REFERENCES dxsessionlog2
(id);
ALTER TABLE dxsend2 ADD CONSTRAINT
dxsend2_r02 FOREIGN KEY (dxsendsessionid) REFERENCES dxsessionlog2
(id);
ALTER TABLE dxsenddata ADD CONSTRAINT
dxsenddata_r01 FOREIGN KEY (dxsendid) REFERENCES dxsend
(id);
ALTER TABLE er_lastposbillsyncinfo ADD CONSTRAINT
er_lastposbillsyncinfo_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE ex_folder_master ADD CONSTRAINT
ex_folder_master_cratedby FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE ex_folder_master ADD CONSTRAINT
ex_folder_master_modifiedby FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE ex_folder_master ADD CONSTRAINT
ex_folder_master_parent FOREIGN KEY (parentfoldercode) REFERENCES ex_folder_master
(code);
ALTER TABLE ex_folder_report_map ADD CONSTRAINT
ex_folder_map_fk FOREIGN KEY (foldercode) REFERENCES ex_folder_master
(code);
ALTER TABLE ex_folder_report_map ADD CONSTRAINT
ex_report_map_fk FOREIGN KEY (reportcode) REFERENCES ex_report_master
(code);
ALTER TABLE ex_report_master ADD CONSTRAINT
ex_report_master_cratedby FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE ex_report_master ADD CONSTRAINT
ex_report_master_modifiedby FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE ex_template_master ADD CONSTRAINT
ex_template_master_cratedby FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE ex_template_master ADD CONSTRAINT
ex_template_master_modifiedby FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE ex_theme_master ADD CONSTRAINT
ex_theme_master_cratedby FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE ex_theme_master ADD CONSTRAINT
ex_theme_master_modifiedby FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE excisedet ADD CONSTRAINT
excisedet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE excisemain ADD CONSTRAINT
r_excisemain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE excisemain ADD CONSTRAINT
r_excisemain_lecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE expense_master ADD CONSTRAINT
expense_master_r01 FOREIGN KEY (createdbyid) REFERENCES appuser
(id);
ALTER TABLE expense_master ADD CONSTRAINT
expense_master_r02 FOREIGN KEY (lastmodifiedbyid) REFERENCES appuser
(id);
ALTER TABLE finchg ADD CONSTRAINT
r_finchg_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE finchg ADD CONSTRAINT
r_finchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE finchg ADD CONSTRAINT
r_finchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finchg ADD CONSTRAINT
r_finchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finchqdet ADD CONSTRAINT
r_finchqdet_bookcode FOREIGN KEY (bookcode) REFERENCES finchqmain
(bookcode);
ALTER TABLE finchqdet ADD CONSTRAINT
r_finchqdet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finchqdet ADD CONSTRAINT
r_finchqdet_vchcode FOREIGN KEY (vchcode) REFERENCES finvchmain
(vchcode);
ALTER TABLE finchqmain ADD CONSTRAINT
finchqmain_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE finchqmain ADD CONSTRAINT
r_finchqmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finchqmain ADD CONSTRAINT
r_finchqmain_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finchqmain ADD CONSTRAINT
r_finchqmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE fincostop ADD CONSTRAINT
fincostop_r01 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE fincostop ADD CONSTRAINT
fincostop_r02 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE fincostop ADD CONSTRAINT
fincostop_r03 FOREIGN KEY (costcode) REFERENCES fincost
(costcode);
ALTER TABLE fincostop ADD CONSTRAINT
fincostop_r04 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE fincostop ADD CONSTRAINT
r_fincostop_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE fincosttag ADD CONSTRAINT
r_fincosttag_costcode FOREIGN KEY (costcode) REFERENCES fincost
(costcode);
ALTER TABLE fincosttag ADD CONSTRAINT
r_fincosttag_enttype FOREIGN KEY (enttype) REFERENCES finenttype
(enttype);
ALTER TABLE fincosttag ADD CONSTRAINT
r_fincosttag_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE fincosttag ADD CONSTRAINT
r_fincosttag_postcode FOREIGN KEY (postcode) REFERENCES finpost
(postcode);
ALTER TABLE fincosttag ADD CONSTRAINT
r_fincosttag_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE fincosttag ADD CONSTRAINT
r_fincosttag_site_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE fincosttag ADD CONSTRAINT
r_fincosttag_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE fincosttag ADD CONSTRAINT
r_fincosttag_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE finenttype ADD CONSTRAINT
r_finenttype_entgrpcode FOREIGN KEY (entgrpcode) REFERENCES finentgrp
(entgrpcode);
ALTER TABLE fingl ADD CONSTRAINT
fingl_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE fingl ADD CONSTRAINT
r_fingl_ctname FOREIGN KEY (ctname) REFERENCES admcity
(ctname);
ALTER TABLE fingl ADD CONSTRAINT
r_fingl_grpcode FOREIGN KEY (grpcode) REFERENCES fingrp
(grpcode);
ALTER TABLE fingl ADD CONSTRAINT
r_fingl_tdssrccode FOREIGN KEY (tdssrccode) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE fingl_site ADD CONSTRAINT
r_fingl_site_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE fingl_site ADD CONSTRAINT
r_fingl_site_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finglbud ADD CONSTRAINT
r_finglbud_costcode FOREIGN KEY (costcode) REFERENCES admsite
(code);
ALTER TABLE finglbud ADD CONSTRAINT
r_finglbud_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finglbud ADD CONSTRAINT
r_finglbud_mcode FOREIGN KEY (mcode) REFERENCES admmonth
(mcode);
ALTER TABLE finglbud ADD CONSTRAINT
r_finglbud_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finglop ADD CONSTRAINT
r_finglop_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finglop ADD CONSTRAINT
r_finglop_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE fingrp ADD CONSTRAINT
r_fingrp_parcode FOREIGN KEY (parcode) REFERENCES fingrp
(grpcode);
ALTER TABLE finjrndet ADD CONSTRAINT
finjrndet_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE finjrndet ADD CONSTRAINT
r_finjrndet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finjrndet ADD CONSTRAINT
r_finjrndet_jrncode FOREIGN KEY (jrncode) REFERENCES finjrnmain
(jrncode);
ALTER TABLE finjrndet ADD CONSTRAINT
r_finjrndet_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finjrndet ADD CONSTRAINT
r_finjrndet_tdssrccode FOREIGN KEY (tdssrccode) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE finjrndet ADD CONSTRAINT
r_finjrndet_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE finjrndet ADD CONSTRAINT
r_finjrndet_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE finjrnmain ADD CONSTRAINT
finjrnmain_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE finjrnmain ADD CONSTRAINT
finjrnmain_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE finjrnmain ADD CONSTRAINT
finjrnmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finjrnmain ADD CONSTRAINT
r_finjrnmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finjrnmain ADD CONSTRAINT
r_finjrnmain_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finjrnmain ADD CONSTRAINT
r_finjrnmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finjrnmain ADD CONSTRAINT
r_finjrnmain_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finjrnmain ADD CONSTRAINT
r_finjrnmain_vch_code FOREIGN KEY (adv_voucher_code) REFERENCES finvchmain
(vchcode);
ALTER TABLE finjrnmain ADD CONSTRAINT
r_finjrnmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE finnar ADD CONSTRAINT
r_finnar_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finopdoc ADD CONSTRAINT
finopdoc_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE finopdoc ADD CONSTRAINT
finopdoc_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE finopdoc ADD CONSTRAINT
finopdoc_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE finpost ADD CONSTRAINT
finpost_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE finpost ADD CONSTRAINT
finpost_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finpost ADD CONSTRAINT
finpost_last_access_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finpost ADD CONSTRAINT
finpost_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE finpost ADD CONSTRAINT
finpost_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finpost ADD CONSTRAINT
r_finpost_enttype FOREIGN KEY (enttype) REFERENCES finenttype
(enttype);
ALTER TABLE finpost ADD CONSTRAINT
r_finpost_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finpost ADD CONSTRAINT
r_finpost_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finpost ADD CONSTRAINT
r_finpost_tdssrccode FOREIGN KEY (tdssrccode) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE finpost ADD CONSTRAINT
r_finpost_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE finpost ADD CONSTRAINT
r_finpost_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE finsl ADD CONSTRAINT
ar_finsl_taxcode FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_admcmptax_code FOREIGN KEY (admcmptax_code) REFERENCES admcmptax
(code);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_admcurrency_code FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_bctname FOREIGN KEY (bctname) REFERENCES admcity
(ctname);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_clscode FOREIGN KEY (clscode) REFERENCES admcls
(clscode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_con_tfs_glcode FOREIGN KEY (consignment_trnsfr_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_con_tfs_slcode FOREIGN KEY (consignment_trnsfr_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_consignment_slcode FOREIGN KEY (consignment_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_consignmnt_glcode FOREIGN KEY (consignment_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_consignsaleglcode FOREIGN KEY (consignment_sales_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_consignsaleslcode FOREIGN KEY (consignment_sales_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_cp_category_code FOREIGN KEY (cp_category_code) REFERENCES admgstcategory
(code);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_cp_gstin_state_code FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_crcode FOREIGN KEY (crcode) REFERENCES salcreditrating
(crcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_pricelistcode FOREIGN KEY (pricelistcode) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_pur_return_glcode FOREIGN KEY (purchase_return_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_pur_return_slcode FOREIGN KEY (purchase_return_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_purchase_glcode FOREIGN KEY (purchase_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_purchase_slcode FOREIGN KEY (purchase_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_purformcode FOREIGN KEY (purformcode) REFERENCES finform
(formcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_purtermmain_code FOREIGN KEY (purtermmain_code) REFERENCES purtermmain
(code);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_sales_glcode FOREIGN KEY (sales_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_sales_slcode FOREIGN KEY (sales_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_salesretglcode FOREIGN KEY (sales_return_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_salesretslcode FOREIGN KEY (sales_return_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_salformcode FOREIGN KEY (salformcode) REFERENCES finform
(formcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_saltermcode FOREIGN KEY (saltermcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_sctname FOREIGN KEY (sctname) REFERENCES admcity
(ctname);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_tdssrccode FOREIGN KEY (tdssrccode) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_transit_glcode FOREIGN KEY (transit_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_transit_slcode FOREIGN KEY (transit_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_transitdiff_glcode FOREIGN KEY (transitdiff_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_transitdiff_slcode FOREIGN KEY (transitdiff_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_trpcode FOREIGN KEY (trpcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_vatexp_glcode FOREIGN KEY (vatexp_glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_vatexp_slcode FOREIGN KEY (vatexp_slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl_gl ADD CONSTRAINT
finsl_gl_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finsl_gl ADD CONSTRAINT
finsl_gl_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl_gl_site ADD CONSTRAINT
finsl_gl_site_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE finsl_gl_site ADD CONSTRAINT
finsl_gl_site_finsl_gl_code FOREIGN KEY (finsl_gl_code) REFERENCES finsl_gl
(code);
ALTER TABLE finsl_loccode ADD CONSTRAINT
r_finsl_loccode_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE finsl_loccode ADD CONSTRAINT
r_finsl_ou_code FOREIGN KEY (finsl_ou_code) REFERENCES finsl_ou
(code);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_chln_loccode FOREIGN KEY (challan_loccode) REFERENCES invloc
(loccode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_inv_loccode FOREIGN KEY (invoice_loccode) REFERENCES invloc
(loccode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_pricelistcode FOREIGN KEY (pricelistcode) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_purformcode FOREIGN KEY (purformcode) REFERENCES finform
(formcode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_salformcode FOREIGN KEY (salformcode) REFERENCES finform
(formcode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_termcode FOREIGN KEY (termcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_termmain_code FOREIGN KEY (purtermmain_code) REFERENCES purtermmain
(code);
ALTER TABLE finsl_ou ADD CONSTRAINT
r_finsl_ou_tradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE finsl_ou_site ADD CONSTRAINT
r_finsl_ou__site_termcode FOREIGN KEY (termcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE finsl_ou_site ADD CONSTRAINT
r_finsl_ou_site_pricelistcode FOREIGN KEY (pricelistcode) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE finsl_ou_site ADD CONSTRAINT
r_finsl_ou_site_site_code FOREIGN KEY (site_code) REFERENCES admsite
(code);
ALTER TABLE finsl_ou_site ADD CONSTRAINT
r_finsl_ou_st_salformcode FOREIGN KEY (salformcode) REFERENCES finform
(formcode);
ALTER TABLE finsl_ou_site ADD CONSTRAINT
r_finsl_ou_st_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE finsl_ou_site ADD CONSTRAINT
r_finsl_ou_strct_flw_tr_rt FOREIGN KEY (transit_via_admsite_code) REFERENCES admsite
(code);
ALTER TABLE finsl_ou_site ADD CONSTRAINT
r_finslousite_finsloucode FOREIGN KEY (finsl_ou_code) REFERENCES finsl_ou
(code);
ALTER TABLE finslop ADD CONSTRAINT
r_finslop_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finslop ADD CONSTRAINT
r_finslop_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finslop ADD CONSTRAINT
r_finslop_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_enttype1 FOREIGN KEY (enttype1) REFERENCES finenttype
(enttype);
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_enttype2 FOREIGN KEY (enttype2) REFERENCES finenttype
(enttype);
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_postcode1 FOREIGN KEY (postcode1) REFERENCES finpost
(postcode);
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_postcode2 FOREIGN KEY (postcode2) REFERENCES finpost
(postcode);
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE fintax_range ADD CONSTRAINT
fintax_range_r01 FOREIGN KEY (taxdetcode) REFERENCES fintaxdet
(taxdetcode);
ALTER TABLE fintax_range ADD CONSTRAINT
r_fintax_range_purtax_glcode FOREIGN KEY (purtax_glcode) REFERENCES fingl
(glcode);
ALTER TABLE fintax_range ADD CONSTRAINT
r_fintax_range_purtax_slcode FOREIGN KEY (purtax_slcode) REFERENCES finsl
(slcode);
ALTER TABLE fintax_range ADD CONSTRAINT
r_fintax_range_saltax_glcode FOREIGN KEY (saltax_glcode) REFERENCES fingl
(glcode);
ALTER TABLE fintax_range ADD CONSTRAINT
r_fintax_range_saltax_slcode FOREIGN KEY (saltax_slcode) REFERENCES finsl
(slcode);
ALTER TABLE fintaxdet ADD CONSTRAINT
r_fintaxdet_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE fintaxdet ADD CONSTRAINT
r_fintaxdet_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE fintaxdet ADD CONSTRAINT
r_fintaxdet_purtax_glcode FOREIGN KEY (purtax_glcode) REFERENCES fingl
(glcode);
ALTER TABLE fintaxdet ADD CONSTRAINT
r_fintaxdet_purtax_slcode FOREIGN KEY (purtax_slcode) REFERENCES finsl
(slcode);
ALTER TABLE fintaxdet ADD CONSTRAINT
r_fintaxdet_saltax_glcode FOREIGN KEY (saltax_glcode) REFERENCES fingl
(glcode);
ALTER TABLE fintaxdet ADD CONSTRAINT
r_fintaxdet_saltax_slcode FOREIGN KEY (saltax_slcode) REFERENCES finsl
(slcode);
ALTER TABLE fintaxdet ADD CONSTRAINT
r_fintaxdet_taxcode FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE fintds_exception ADD CONSTRAINT
r_fintds_exception_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE fintds_exception ADD CONSTRAINT
r_fintds_exp_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE fintdsdet ADD CONSTRAINT
r_fintdsdet_jrncode FOREIGN KEY (jrncode) REFERENCES finjrnmain
(jrncode);
ALTER TABLE fintdsdet ADD CONSTRAINT
r_fintdsdet_tdscode FOREIGN KEY (tdscode) REFERENCES fintdsmain
(tdscode);
ALTER TABLE fintdsdet ADD CONSTRAINT
r_fintdsdet_vchcode FOREIGN KEY (vchcode) REFERENCES finvchmain
(vchcode);
ALTER TABLE fintdsmain ADD CONSTRAINT
r_fintdsmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE fintdsmain ADD CONSTRAINT
r_fintdsmain_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE fintdsmain ADD CONSTRAINT
r_fintdsmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE fintdsmain ADD CONSTRAINT
r_fintdsmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE fintdsmain ADD CONSTRAINT
r_fintdsmain_tdsglcode FOREIGN KEY (tdsglcode) REFERENCES fingl
(glcode);
ALTER TABLE fintdsmain ADD CONSTRAINT
r_fintdsmain_tdsslcode FOREIGN KEY (tdsslcode) REFERENCES finsl
(slcode);
ALTER TABLE fintdsmain ADD CONSTRAINT
r_fintdsmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE fintdstag ADD CONSTRAINT
r_fintdstag_srccode FOREIGN KEY (fintdstypesrc_code) REFERENCES fintdstypesrc
(code);
ALTER TABLE fintdstag ADD CONSTRAINT
r_fintdstag_tdssrccode FOREIGN KEY (tdssrccode) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE fintdstag ADD CONSTRAINT
r_fintdstag_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE fintdstype ADD CONSTRAINT
r_fintdstype_tdsglcode FOREIGN KEY (tdsglcode) REFERENCES fingl
(glcode);
ALTER TABLE fintdstype ADD CONSTRAINT
r_fintdstype_tdsslcode FOREIGN KEY (tdsslcode) REFERENCES finsl
(slcode);
ALTER TABLE fintdstypesrc ADD CONSTRAINT
r_fintdstypesrc_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE finvchdet ADD CONSTRAINT
finvchdet_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_bookcode FOREIGN KEY (bookcode) REFERENCES finchqmain
(bookcode);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_tdsglcode FOREIGN KEY (tdsglcode) REFERENCES fingl
(glcode);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_tdsslcode FOREIGN KEY (tdsslcode) REFERENCES finsl
(slcode);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_tdssrccode FOREIGN KEY (tdssrccode) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_vchcode FOREIGN KEY (vchcode) REFERENCES finvchmain
(vchcode);
ALTER TABLE finvchdet ADD CONSTRAINT
r_finvchdet_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE finvchdn ADD CONSTRAINT
r_finvchdn_finjrnmain_code FOREIGN KEY (finjrnmain_code) REFERENCES finjrnmain
(jrncode);
ALTER TABLE finvchdn ADD CONSTRAINT
r_finvchdn_finopdoc_code FOREIGN KEY (finopdoc_code) REFERENCES finopdoc
(entcode);
ALTER TABLE finvchdn ADD CONSTRAINT
r_finvchdn_finvchmain_code FOREIGN KEY (finvchmain_code) REFERENCES finvchmain
(vchcode);
ALTER TABLE finvchdn ADD CONSTRAINT
r_finvchdn_purinvmain_invcode FOREIGN KEY (purinvmain_invcode) REFERENCES purinvmain
(invcode);
ALTER TABLE finvchmain ADD CONSTRAINT
finvchmain_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE finvchmain ADD CONSTRAINT
finvchmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finvchmain ADD CONSTRAINT
r_finvchmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finvchmain ADD CONSTRAINT
r_finvchmain_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE finvchmain ADD CONSTRAINT
r_finvchmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE finvchmain ADD CONSTRAINT
r_finvchmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE gds2_entity ADD CONSTRAINT
gds2_entity_r01 FOREIGN KEY (connected_app_code) REFERENCES connected_app
(code);
ALTER TABLE gds2_event_queue ADD CONSTRAINT
gds2_event_queue_r01 FOREIGN KEY (subscr_id) REFERENCES gds2_subscr
(id);
ALTER TABLE gds2_event_queue ADD CONSTRAINT
gds2_event_queue_r02 FOREIGN KEY (event_id) REFERENCES gds2_event_md
(id);
ALTER TABLE gds2_event_queue_data ADD CONSTRAINT
gds2_event_batch_r02 FOREIGN KEY (event_id) REFERENCES gds2_event_md
(id);
ALTER TABLE gds2_event_template_md ADD CONSTRAINT
gds2_event_template_md_fk01 FOREIGN KEY (event_id) REFERENCES gds2_event_md
(id);
ALTER TABLE gds2_event_track ADD CONSTRAINT
gds2_event_track_fk01 FOREIGN KEY (event_id) REFERENCES gds2_event_md
(id);
ALTER TABLE gds2_event_track ADD CONSTRAINT
gds2_event_track_fk02 FOREIGN KEY (connected_app_code) REFERENCES connected_app
(code);
ALTER TABLE gds2_event_track_inv ADD CONSTRAINT
gds2_event_track_inv_fk01 FOREIGN KEY (event_id) REFERENCES gds2_event_md
(id);
ALTER TABLE gds2_out_log_api ADD CONSTRAINT
gds2_out_log_api_fk FOREIGN KEY (gds2_subscription_id) REFERENCES gds2_subscr
(id);
ALTER TABLE gds2_out_log_db ADD CONSTRAINT
gds2_out_log_db_fk FOREIGN KEY (gds2_subscription_id) REFERENCES gds2_subscr
(id);
ALTER TABLE gds2_subscr ADD CONSTRAINT
gds2_subscr_fk01 FOREIGN KEY (entity_id) REFERENCES gds2_entity
(id);
ALTER TABLE gds2_subscr_event ADD CONSTRAINT
gds2_subscr_event_fk01 FOREIGN KEY (subscr_id) REFERENCES gds2_subscr
(id);
ALTER TABLE gds2_subscr_event ADD CONSTRAINT
gds2_subscr_event_fk02 FOREIGN KEY (event_id) REFERENCES gds2_event_md
(id);
ALTER TABLE gds2_subscr_event ADD CONSTRAINT
gds2_subscr_event_fk03 FOREIGN KEY (event_template_id) REFERENCES gds2_event_template_md
(id);
ALTER TABLE gds2_subscr_session ADD CONSTRAINT
gds2_subscr_session_r01 FOREIGN KEY (subscr_id) REFERENCES gds2_subscr
(id);
ALTER TABLE gridstate ADD CONSTRAINT
gridstate_userid_hrdemp FOREIGN KEY (userid) REFERENCES hrdemp
(ecode);
ALTER TABLE gst_docno_check ADD CONSTRAINT
c_gst_docno_check_admgstin FOREIGN KEY (admgstin_code) REFERENCES admgstin
(code);
ALTER TABLE gst_docno_check ADD CONSTRAINT
c_gst_docno_check_admsite FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE gst_docno_check ADD CONSTRAINT
c_gst_docno_check_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE gst_docno_check ADD CONSTRAINT
c_gst_docno_check_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE gvbooklet ADD CONSTRAINT
gvbooklet_r01 FOREIGN KEY (gvcategory_code) REFERENCES gvcategory
(code);
ALTER TABLE gvbooklet ADD CONSTRAINT
gvbooklet_r02 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvbooklet ADD CONSTRAINT
gvbooklet_r03 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvcategory ADD CONSTRAINT
gvcategory_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvcategory ADD CONSTRAINT
gvcategory_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r01 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r03 FOREIGN KEY (customer_slcode) REFERENCES finsl
(slcode);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r04 FOREIGN KEY (debtor_glcode) REFERENCES fingl
(glcode);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r05 FOREIGN KEY (gvcontrol_glcode) REFERENCES fingl
(glcode);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r06 FOREIGN KEY (gvdiscount_glcode) REFERENCES fingl
(glcode);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r07 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r08 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvissue_journal ADD CONSTRAINT
gvissue_journal_r09 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT
gvissue_journal_void_r02 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT
gvissue_journal_void_r03 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT
gvissue_journal_void_r04 FOREIGN KEY (customer_slcode) REFERENCES finsl
(slcode);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT
gvissue_journal_void_r05 FOREIGN KEY (debtor_glcode) REFERENCES fingl
(glcode);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT
gvissue_journal_void_r06 FOREIGN KEY (gvcontrol_glcode) REFERENCES fingl
(glcode);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT
gvissue_journal_void_r07 FOREIGN KEY (gvdiscount_glcode) REFERENCES fingl
(glcode);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT
gvissue_journal_void_r08 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE gvissue_journal_void ADD CONSTRAINT
gvissue_journal_void_r09 FOREIGN KEY (voidby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvissue_jrnl_detail_void ADD CONSTRAINT
gvissue_jrnl_detail_void_r03 FOREIGN KEY (gvleaves_code) REFERENCES gvleaves
(code);
ALTER TABLE gvissue_jrnl_detail_void ADD CONSTRAINT
gvissue_jrnl_detail_void_r04 FOREIGN KEY (voidby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvissuepayment_journal ADD CONSTRAINT
gvissuepayment_journal_r01 FOREIGN KEY (gvissue_journal_code) REFERENCES gvissue_journal
(code);
ALTER TABLE gvissuepayment_journal ADD CONSTRAINT
gvissuepayment_journal_r02 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE gvissuepayment_journal ADD CONSTRAINT
gvissuepayment_journal_r03 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE gvissuepayment_journal_void ADD CONSTRAINT
gvissuepayment_jrnl_void_r03 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE gvissuepayment_journal_void ADD CONSTRAINT
gvissuepayment_jrnl_void_r04 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE gvissuepayment_journal_void ADD CONSTRAINT
gvissuepayment_jrnl_void_r06 FOREIGN KEY (voidby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvleaves ADD CONSTRAINT
gvleaves_r01 FOREIGN KEY (gvcategory_code) REFERENCES gvcategory
(code);
ALTER TABLE gvleaves ADD CONSTRAINT
gvleaves_r02 FOREIGN KEY (gvbooklet_code) REFERENCES gvbooklet
(code);
ALTER TABLE gvleaves ADD CONSTRAINT
gvleaves_r03 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE gvleaves ADD CONSTRAINT
gvleaves_r04 FOREIGN KEY (allocate_admsite_code) REFERENCES admsite
(code);
ALTER TABLE gvleaves ADD CONSTRAINT
gvleaves_r05 FOREIGN KEY (issued_admsite_code) REFERENCES admsite
(code);
ALTER TABLE gvleaves ADD CONSTRAINT
gvleaves_r06 FOREIGN KEY (redeemed_admsite_code) REFERENCES admsite
(code);
ALTER TABLE gvleaves ADD CONSTRAINT
gvleaves_r08 FOREIGN KEY (gvissue_journal_code) REFERENCES gvissue_journal
(code);
ALTER TABLE hfjobparameter ADD CONSTRAINT
hfjobparameter_r01 FOREIGN KEY (jobid) REFERENCES hfjob
(id);
ALTER TABLE hfstate ADD CONSTRAINT
hfstate_r01 FOREIGN KEY (jobid) REFERENCES hfjob
(id);
ALTER TABLE hrdemp ADD CONSTRAINT
r_hrdemp_deptcode FOREIGN KEY (deptcode) REFERENCES hrddept
(deptcode);
ALTER TABLE hrdemp ADD CONSTRAINT
r_hrdemp_profcode FOREIGN KEY (profcode) REFERENCES admprof
(profcode);
ALTER TABLE hrdemp ADD CONSTRAINT
r_hrdemp_rlcode FOREIGN KEY (rlcode) REFERENCES admrole
(rlcode);
ALTER TABLE hrdemp_ou ADD CONSTRAINT
r_hrdemp_ou_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE hrdemp_ou ADD CONSTRAINT
r_hrdemp_ou_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE hrdemp_ou ADD CONSTRAINT
r_hrdemp_ou_hrdemp_code FOREIGN KEY (hrdemp_code) REFERENCES hrdemp
(ecode);
ALTER TABLE int$caller_module_class ADD CONSTRAINT
int$caller_module_class_r01 FOREIGN KEY (classname) REFERENCES int$class
(classname);
ALTER TABLE int$class_role ADD CONSTRAINT
int$class_role_classname_fk FOREIGN KEY (classname) REFERENCES int$class
(classname);
ALTER TABLE int$class_role ADD CONSTRAINT
int$class_role_roleid_fk FOREIGN KEY (roleid) REFERENCES role
(id);
ALTER TABLE int$error_log ADD CONSTRAINT
int$error_log_user_fk FOREIGN KEY (userid) REFERENCES appuser
(id);
ALTER TABLE int$history ADD CONSTRAINT
int$history_classname_fk FOREIGN KEY (classname) REFERENCES int$class
(classname);
ALTER TABLE int$history ADD CONSTRAINT
int$history_user_fk FOREIGN KEY (importedby) REFERENCES appuser
(id);
ALTER TABLE int$mapping ADD CONSTRAINT
int$mapping_r01 FOREIGN KEY (metadata_code) REFERENCES int$metadata
(code);
ALTER TABLE int$mapping ADD CONSTRAINT
int$mapping_r02 FOREIGN KEY (classname) REFERENCES int$class
(classname);
ALTER TABLE int$metadata ADD CONSTRAINT
int$metadata_r01 FOREIGN KEY (classname) REFERENCES int$class
(classname);
ALTER TABLE int$so_wiz ADD CONSTRAINT
r_int$so_wiz_articlecode FOREIGN KEY (articlecode) REFERENCES invarticle
(code);
ALTER TABLE int$so_wiz ADD CONSTRAINT
r_int$so_wiz_sitecode FOREIGN KEY (sitecode) REFERENCES admsite
(code);
ALTER TABLE int$tagged_file ADD CONSTRAINT
int$tagged_file_r01 FOREIGN KEY (classname) REFERENCES int$class
(classname);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r01 FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r02 FOREIGN KEY (invattr1_code) REFERENCES invattr1
(code);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r03 FOREIGN KEY (invattr2_code) REFERENCES invattr2
(code);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r04 FOREIGN KEY (invattr3_code) REFERENCES invattr3
(code);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r05 FOREIGN KEY (invattr4_code) REFERENCES invattr4
(code);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r06 FOREIGN KEY (invattr5_code) REFERENCES invattr5
(code);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r07 FOREIGN KEY (invattr6_code) REFERENCES invattr6
(code);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r08 FOREIGN KEY (invmmrule_code) REFERENCES invmmrule
(code);
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r09 FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE invarticle_finsl_mm ADD CONSTRAINT
invarticle_finsl_mm_r01 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE invarticle_finsl_mm ADD CONSTRAINT
invarticle_finsl_mm_r02 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE invarticle_finsl_mm ADD CONSTRAINT
invarticle_finsl_mm_r03 FOREIGN KEY (invmmrule_code) REFERENCES invmmrule
(code);
ALTER TABLE invbatch_serial ADD CONSTRAINT
invbatch_serial_r01 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invbatch_serial ADD CONSTRAINT
invbatch_serial_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invbatch_serial ADD CONSTRAINT
invbatch_serial_r03 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invbatch_serial ADD CONSTRAINT
invbatch_serial_r04 FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE invbatch_serial ADD CONSTRAINT
invbatch_serial_r05 FOREIGN KEY (enttype) REFERENCES inventtype
(enttype);
ALTER TABLE invbin ADD CONSTRAINT
invbin_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invbin ADD CONSTRAINT
invbin_r02 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invbin ADD CONSTRAINT
invbin_r03 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invbin ADD CONSTRAINT
invbin_r04 FOREIGN KEY (assortment_code) REFERENCES promo_assortment
(code);
ALTER TABLE invbin ADD CONSTRAINT
invbin_r05 FOREIGN KEY (invbingrp_grpcode) REFERENCES invbingrp
(grpcode);
ALTER TABLE invbinadjdet ADD CONSTRAINT
invbinadjdet_r01 FOREIGN KEY (binadjmain_code) REFERENCES invbinadjmain
(code);
ALTER TABLE invbinadjdet ADD CONSTRAINT
invbinadjdet_r02 FOREIGN KEY (out_invbin_code) REFERENCES invbin
(code);
ALTER TABLE invbinadjdet ADD CONSTRAINT
invbinadjdet_r03 FOREIGN KEY (in_invbin_code) REFERENCES invbin
(code);
ALTER TABLE invbinadjdet ADD CONSTRAINT
invbinadjdet_r04 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invbinadjdet ADD CONSTRAINT
invbinadjdet_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invbinadjmain ADD CONSTRAINT
invbinadjmain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invbinadjmain ADD CONSTRAINT
invbinadjmain_r02 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invbinadjmain ADD CONSTRAINT
invbinadjmain_r03 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invbinadjmain ADD CONSTRAINT
invbinadjmain_r04 FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invbinadjmain ADD CONSTRAINT
invbinadjmain_r05 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invbinadjmain ADD CONSTRAINT
invbinadjmain_r06 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invbinadjmain ADD CONSTRAINT
invbinadjmain_r07 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invbinadjmain ADD CONSTRAINT
invbinadjmain_r08 FOREIGN KEY (postedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invbincountdet ADD CONSTRAINT
invbincountdet_r01 FOREIGN KEY (invbincountmain_code) REFERENCES invbincountmain
(code);
ALTER TABLE invbincountdet ADD CONSTRAINT
invbincountdet_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invbincountmain ADD CONSTRAINT
invbincountmain_r01 FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE invbincountmain ADD CONSTRAINT
invbincountmain_r02 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invbingrp ADD CONSTRAINT
invbingrp_r01 FOREIGN KEY (parcode) REFERENCES invbingrp
(grpcode);
ALTER TABLE invbingrp ADD CONSTRAINT
invbingrp_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invbinstock_onhand ADD CONSTRAINT
invbinstock_onhand_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invbinstock_onhand ADD CONSTRAINT
invbinstock_onhand_r02 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invbinstock_onhand ADD CONSTRAINT
invbinstock_onhand_r03 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invbinstock_onhand ADD CONSTRAINT
invbinstock_onhand_r04 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invbinstock_onhand ADD CONSTRAINT
invbinstock_onhand_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT
invbinstock_onhand_serial_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT
invbinstock_onhand_serial_r02 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT
invbinstock_onhand_serial_r03 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT
invbinstock_onhand_serial_r04 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT
invbinstock_onhand_serial_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invcostadj ADD CONSTRAINT
invcostadj_r01 FOREIGN KEY (admmonth_code) REFERENCES admmonth
(mcode);
ALTER TABLE invcostadj ADD CONSTRAINT
invcostadj_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invcostadj ADD CONSTRAINT
invcostadj_r03 FOREIGN KEY (created_by) REFERENCES hrdemp
(ecode);
ALTER TABLE invcostadj ADD CONSTRAINT
invcostadj_r04 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invcostadj ADD CONSTRAINT
invcostadj_r05 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invcostadj ADD CONSTRAINT
invcostadj_r06 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invdcdet ADD CONSTRAINT
invdcdet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invdcdet ADD CONSTRAINT
r_invdcdet_dccode FOREIGN KEY (dccode) REFERENCES invdcmain
(dccode);
ALTER TABLE invdcdet ADD CONSTRAINT
r_invdcdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invdcdet ADD CONSTRAINT
r_invdcdet_invbin_code FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invdcdet ADD CONSTRAINT
r_invdcdet_ordcode FOREIGN KEY (ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE invdcdet ADD CONSTRAINT
r_invdcdet_picklistdet_code FOREIGN KEY (invpicklistdet_code) REFERENCES invpicklistdet
(code);
ALTER TABLE invdcdet ADD CONSTRAINT
r_invdcdet_salorddet_code FOREIGN KEY (salorddet_code) REFERENCES salorddet
(code);
ALTER TABLE invdcdet ADD CONSTRAINT
r_invdcdet_soicode FOREIGN KEY (soicode) REFERENCES invitem
(icode);
ALTER TABLE invdcmain ADD CONSTRAINT
fk_invdcmain_intgcode FOREIGN KEY (intgcode) REFERENCES intgmain
(intgcode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_cnlecode FOREIGN KEY (cnlecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_laecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_linked_dccode FOREIGN KEY (linked_dccode) REFERENCES invdcmain
(dccode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_ordcode FOREIGN KEY (ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_pricelistcode FOREIGN KEY (pricelistcode) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_rtcode FOREIGN KEY (transferin_rtcode) REFERENCES salrtmain
(rtcode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_site_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_trpcode FOREIGN KEY (trpcode) REFERENCES finsl
(slcode);
ALTER TABLE invdcmain ADD CONSTRAINT
r_invdcmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE inventtype ADD CONSTRAINT
r_inventtype_entgrpcode FOREIGN KEY (entgrpcode) REFERENCES inventgrp
(entgrpcode);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgatein_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgatein_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgatein_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgatein_cncode FOREIGN KEY (cncode) REFERENCES finsl
(slcode);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgatein_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgatein_lgtcode FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgatein_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgatein_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invgatein ADD CONSTRAINT
r_invgtn_lst_accss_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgrcchg ADD CONSTRAINT
r_invgrcchg_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE invgrcchg ADD CONSTRAINT
r_invgrcchg_grccode FOREIGN KEY (grccode) REFERENCES invgrcmain
(grccode);
ALTER TABLE invgrcchg_item ADD CONSTRAINT
r_invgrcchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE invgrcchg_item ADD CONSTRAINT
r_invgrcchg_item_grccode FOREIGN KEY (grccode) REFERENCES invgrcmain
(grccode);
ALTER TABLE invgrcchg_item ADD CONSTRAINT
r_invgrcchg_itm_invgrcdetcode FOREIGN KEY (invgrcdet_code) REFERENCES invgrcdet
(code);
ALTER TABLE invgrcdet ADD CONSTRAINT
invgrcdet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE invgrcdet ADD CONSTRAINT
invgrcdet_r02 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invgrcdet ADD CONSTRAINT
r_invgrcdet_grccode FOREIGN KEY (grccode) REFERENCES invgrcmain
(grccode);
ALTER TABLE invgrcdet ADD CONSTRAINT
r_invgrcdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invgrcdet ADD CONSTRAINT
r_invgrcdet_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invgrcdet ADD CONSTRAINT
r_invgrcdet_ordcode FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE invgrcdet ADD CONSTRAINT
r_invgrcdet_poicode FOREIGN KEY (poicode) REFERENCES invitem
(icode);
ALTER TABLE invgrcdet ADD CONSTRAINT
r_invgrcdet_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invgrcmain ADD CONSTRAINT
fk_invgrcmain_intgcode FOREIGN KEY (intgcode) REFERENCES intgmain
(intgcode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_admcurrency_code FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_admsite_code_in FOREIGN KEY (admsite_code_in) REFERENCES admsite
(code);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_auth_ecode FOREIGN KEY (auth_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_gatein_code FOREIGN KEY (invgatein_code) REFERENCES invgatein
(code);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_laecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_lgtcode FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_ordcode FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_psite_stkpt_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_purtermcode FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE invgrcmain ADD CONSTRAINT
r_invgrcmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invgrcset ADD CONSTRAINT
invgrcset_r01 FOREIGN KEY (invsetmain_code) REFERENCES invsetmain
(setcode);
ALTER TABLE invgrcset ADD CONSTRAINT
invgrcsetmain_r02 FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE invgrcset ADD CONSTRAINT
invgrcsetmain_r03 FOREIGN KEY (grccode) REFERENCES invgrcmain
(grccode);
ALTER TABLE invgrp ADD CONSTRAINT
invgrp_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE invgrp ADD CONSTRAINT
invgrp_invhsnsacmain_code FOREIGN KEY (invhsnsacmain_code) REFERENCES invhsnsacmain
(code);
ALTER TABLE invgrp ADD CONSTRAINT
invgrp_r01 FOREIGN KEY (parcode) REFERENCES invgrp
(grpcode);
ALTER TABLE invgrp ADD CONSTRAINT
invgrp_r02 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invgrp ADD CONSTRAINT
r_fingrp_taxcode FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE invgrp ADD CONSTRAINT
r_invgrp_routecode FOREIGN KEY (routecode) REFERENCES prdroutemain
(code);
ALTER TABLE invgrprange ADD CONSTRAINT
r_invgrprange_grpcode FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE invgrtchg ADD CONSTRAINT
r_invgrtchg_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE invgrtchg ADD CONSTRAINT
r_invgrtchg_grtcode FOREIGN KEY (grtcode) REFERENCES invgrtmain
(grtcode);
ALTER TABLE invgrtchg_item ADD CONSTRAINT
r_invgrtchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE invgrtchg_item ADD CONSTRAINT
r_invgrtchg_item_grtcode FOREIGN KEY (grtcode) REFERENCES invgrtmain
(grtcode);
ALTER TABLE invgrtchg_item ADD CONSTRAINT
r_invgrtchg_item_invgrcdetcode FOREIGN KEY (invgrtdet_code) REFERENCES invgrtdet
(code);
ALTER TABLE invgrtdet ADD CONSTRAINT
invgrtdet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE invgrtdet ADD CONSTRAINT
invgrtdet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invgrtdet ADD CONSTRAINT
r_invgrtdet_grccode FOREIGN KEY (grccode) REFERENCES invgrcmain
(grccode);
ALTER TABLE invgrtdet ADD CONSTRAINT
r_invgrtdet_grtcode FOREIGN KEY (grtcode) REFERENCES invgrtmain
(grtcode);
ALTER TABLE invgrtdet ADD CONSTRAINT
r_invgrtdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invgrtdet ADD CONSTRAINT
r_invgrtdet_invgrcdet_code FOREIGN KEY (invgrcdet_code) REFERENCES invgrcdet
(code);
ALTER TABLE invgrtdet ADD CONSTRAINT
r_invgrtdet_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invgrtdet ADD CONSTRAINT
r_invgrtdet_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invgrtmain ADD CONSTRAINT
fk_invgrtmain_intgcode FOREIGN KEY (intgcode) REFERENCES intgmain
(intgcode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_admcurrency_code FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_auth_ecode FOREIGN KEY (auth_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_grccode FOREIGN KEY (grccode) REFERENCES invgrcmain
(grccode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_laecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_psite_stkpt_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_purtermcode FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE invgrtmain ADD CONSTRAINT
r_invgrtmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invgstaddcessrate ADD CONSTRAINT
r_invgstaddcess_gststatecode FOREIGN KEY (gststatecode) REFERENCES admgststate
(code);
ALTER TABLE invgstaddcessrate ADD CONSTRAINT
r_invgstaddcessrate_code FOREIGN KEY (invgstrate_code) REFERENCES invgstrate
(code);
ALTER TABLE invgstaddcessrate ADD CONSTRAINT
r_invgstaddcessrate_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgstaddcessrate ADD CONSTRAINT
r_invgstaddcessrate_la_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invgstrate ADD CONSTRAINT
invgstrate_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invgstrate ADD CONSTRAINT
invgstrate_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invhsnsacdet ADD CONSTRAINT
invhsnsacdet_r01 FOREIGN KEY (invhsnsacmain_code) REFERENCES invhsnsacmain
(code);
ALTER TABLE invhsnsacdet ADD CONSTRAINT
invhsnsacdet_r02 FOREIGN KEY (invgstrate_code) REFERENCES invgstrate
(code);
ALTER TABLE invhsnsacmain ADD CONSTRAINT
invhsnsacmain_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invhsnsacmain ADD CONSTRAINT
invhsnsacmain_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invhsnsacslab ADD CONSTRAINT
invhsnsacslab_r01 FOREIGN KEY (invhsnsacmain_code) REFERENCES invhsnsacmain
(code);
ALTER TABLE invhsnsacslab ADD CONSTRAINT
invhsnsacslab_r02 FOREIGN KEY (invhsnsacdet_code) REFERENCES invhsnsacdet
(code);
ALTER TABLE invhsnsacslab ADD CONSTRAINT
invhsnsacslab_r03 FOREIGN KEY (invgstrate_code) REFERENCES invgstrate
(code);
ALTER TABLE invinpool ADD CONSTRAINT
invinpool_r01 FOREIGN KEY (enttype) REFERENCES inventtype
(enttype);
ALTER TABLE invitem ADD CONSTRAINT
ar_invitem_grpcode FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE invitem ADD CONSTRAINT
ar_invitem_taxcode FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE invitem ADD CONSTRAINT
invitem_invhsnsacmain_code FOREIGN KEY (invhsnsacmain_code) REFERENCES invhsnsacmain
(code);
ALTER TABLE invitem ADD CONSTRAINT
invitem_invmetal_code_r01 FOREIGN KEY (invmetal_code) REFERENCES invmetal
(code);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_ccode1 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_ccode2 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_ccode3 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_ccode4 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_ccode5 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_ccode6 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_costsheet_code FOREIGN KEY (costsheet_code) REFERENCES prdcostsheethead
(code);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_invarticle_code FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_post_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_routecode FOREIGN KEY (routecode) REFERENCES prdroutemain
(code);
ALTER TABLE invitem ADD CONSTRAINT
r_invitem_slcode FOREIGN KEY (partycode) REFERENCES finsl
(slcode);
ALTER TABLE invitem_price ADD CONSTRAINT
invitem_price_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invitem_price ADD CONSTRAINT
invitem_price_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invitem_price ADD CONSTRAINT
invitem_price_r03 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invitem_price ADD CONSTRAINT
invitem_price_r04 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invitem_price ADD CONSTRAINT
invitem_price_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invitemlastinward ADD CONSTRAINT
invitemlastinward_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invitemlastinward ADD CONSTRAINT
invitemlastinward_r02 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invitemlastinward ADD CONSTRAINT
invitemlastinward_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invitemlastinward ADD CONSTRAINT
invitemlastinward_r04 FOREIGN KEY (enttype) REFERENCES inventtype
(enttype);
ALTER TABLE invitemlastinward ADD CONSTRAINT
invstock_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invitemop ADD CONSTRAINT
invitemop_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invitemop ADD CONSTRAINT
r_invitemop_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invitemop ADD CONSTRAINT
r_invitemop_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invitemop ADD CONSTRAINT
r_invitemop_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invitemop ADD CONSTRAINT
r_invitemop_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE invitemop ADD CONSTRAINT
r_invitemop_psite_stkpt_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE invitemop ADD CONSTRAINT
r_invitemop_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invlgtin_shipment_advice_cnl ADD CONSTRAINT
r_invlgt_shipadcnl_code_lgtcd FOREIGN KEY (lgtincode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE invlgtin_shipment_advice_cnl ADD CONSTRAINT
r_invlgt_shipadvcnl_shipcode FOREIGN KEY (shipcode) REFERENCES purordshipmain
(shipcode);
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r01 FOREIGN KEY (trpcode) REFERENCES finsl
(slcode);
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r02 FOREIGN KEY (cncode) REFERENCES finsl
(slcode);
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r03 FOREIGN KEY (stfr) REFERENCES admcity
(ctname);
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r04 FOREIGN KEY (stto) REFERENCES admcity
(ctname);
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r05 FOREIGN KEY (srvcode) REFERENCES pursrvmain
(srvcode);
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r06 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r07 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r08 FOREIGN KEY (permitcode) REFERENCES invpermit
(permitcode);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_cancelledby FOREIGN KEY (cancelledby) REFERENCES hrdemp
(ecode);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_issuedby FOREIGN KEY (issuedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_issuedto FOREIGN KEY (issuedto) REFERENCES hrdemp
(ecode);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_last_access_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_site_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invlgtnote ADD CONSTRAINT
r_invlgtnote_srvdet_code FOREIGN KEY (pursrvdet_code) REFERENCES pursrvdet
(code);
ALTER TABLE invlgtnote_bales ADD CONSTRAINT
r_invlgtnote_bales_gatein_code FOREIGN KEY (invgatein_code) REFERENCES invgatein
(code);
ALTER TABLE invlgtnote_bales ADD CONSTRAINT
r_invlgtnote_bales_lr_code FOREIGN KEY (invlgtnote_code) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE invlgtnote_item ADD CONSTRAINT
r_lgt_item_artcoe FOREIGN KEY (article_code) REFERENCES invarticle
(code);
ALTER TABLE invlgtnote_item ADD CONSTRAINT
r_lgt_item_dept_grpcode FOREIGN KEY (dept_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE invlgtnote_item ADD CONSTRAINT
r_lgt_item_div_grpcode FOREIGN KEY (div_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE invlgtnote_item ADD CONSTRAINT
r_lgt_item_lgtcode FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE invlgtnote_item ADD CONSTRAINT
r_lgt_item_sec_grpcode FOREIGN KEY (sec_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE invloc ADD CONSTRAINT
invloc_r01 FOREIGN KEY (src_loccode) REFERENCES invloc
(loccode);
ALTER TABLE invloc ADD CONSTRAINT
invloc_r03 FOREIGN KEY (invlocgrp_code) REFERENCES invlocgrp
(code);
ALTER TABLE invloc ADD CONSTRAINT
r_invloc_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invloc ADD CONSTRAINT
r_invloc_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invloc ADD CONSTRAINT
r_invloc_ctname FOREIGN KEY (ctname) REFERENCES admcity
(ctname);
ALTER TABLE invltgin_shipment_advice ADD CONSTRAINT
invltgin_ship_adv_lgtincode_fk FOREIGN KEY (lgtincode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE invltgin_shipment_advice ADD CONSTRAINT
invltgin_ship_adv_shipcode_fk FOREIGN KEY (shipcode) REFERENCES purordshipmain
(shipcode);
ALTER TABLE invmetal_rate ADD CONSTRAINT
invmetal_rate_metal_code_r01 FOREIGN KEY (invmetal_code) REFERENCES invmetal
(code);
ALTER TABLE invmiscdet ADD CONSTRAINT
invmiscdet_r01 FOREIGN KEY (misccode) REFERENCES invmiscmain
(misccode);
ALTER TABLE invmiscdet ADD CONSTRAINT
invmiscdet_r02 FOREIGN KEY (reqdetcode) REFERENCES invreqdet
(reqdetcode);
ALTER TABLE invmiscdet ADD CONSTRAINT
invmiscdet_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invmiscdet ADD CONSTRAINT
invmiscdet_r04 FOREIGN KEY (reqcode) REFERENCES invreqmain
(reqcode);
ALTER TABLE invmiscdet ADD CONSTRAINT
invmiscdet_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invmiscmain ADD CONSTRAINT
fk_invmiscmain_intgcode FOREIGN KEY (intgcode) REFERENCES intgmain
(intgcode);
ALTER TABLE invmiscmain ADD CONSTRAINT
invmiscmain_r02 FOREIGN KEY (reqcode) REFERENCES invreqmain
(reqcode);
ALTER TABLE invmiscmain ADD CONSTRAINT
invmiscmain_r03 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invmiscmain ADD CONSTRAINT
invmiscmain_r04 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invmiscmain ADD CONSTRAINT
invmiscmain_r05 FOREIGN KEY (creation_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invmiscmain ADD CONSTRAINT
invmiscmain_r06 FOREIGN KEY (last_modified_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invmiscmain ADD CONSTRAINT
r_invmisc_psite_stkpoint_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE invmiscmain ADD CONSTRAINT
r_invmiscmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invmiscmain ADD CONSTRAINT
r_invmiscmain_admsite_cc FOREIGN KEY (admsite_cc) REFERENCES admsite
(code);
ALTER TABLE invmiscmain ADD CONSTRAINT
r_invmiscmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invmiscmain ADD CONSTRAINT
r_invmiscmain_auth_ecode FOREIGN KEY (auth_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invmmrule_allocation ADD CONSTRAINT
r_invmmrule_alloc_article_code FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE invmmrule_allocation ADD CONSTRAINT
r_invmmrule_alloc_mmrule_code FOREIGN KEY (invmmrule_code) REFERENCES invmmrule
(code);
ALTER TABLE invmmrule_allocation ADD CONSTRAINT
r_invmmrule_alloc_site_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invmmrule_allocation ADD CONSTRAINT
r_invmmrule_alloc_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE invmmrule_date ADD CONSTRAINT
invmmrule_date_r01 FOREIGN KEY (invmmrule_code) REFERENCES invmmrule
(code);
ALTER TABLE invmmrule_det ADD CONSTRAINT
invmmrule_det_r01 FOREIGN KEY (invmmrule_code) REFERENCES invmmrule
(code);
ALTER TABLE invmmrule_det ADD CONSTRAINT
invmmrule_det_r02 FOREIGN KEY (invmmrule_date_code) REFERENCES invmmrule_date
(code);
ALTER TABLE invmmrule_exception ADD CONSTRAINT
invmmrule_exception_r01 FOREIGN KEY (invmmrule_code) REFERENCES invmmrule
(code);
ALTER TABLE invmmrule_exception ADD CONSTRAINT
invmmrule_exception_r02 FOREIGN KEY (invmmrule_det_code) REFERENCES invmmrule_det
(code);
ALTER TABLE invoutpool ADD CONSTRAINT
invoutpool_r01 FOREIGN KEY (enttype) REFERENCES inventtype
(enttype);
ALTER TABLE invoutpool_det ADD CONSTRAINT
invoutpool_det_r01 FOREIGN KEY (invoutpool_code) REFERENCES invoutpool
(code);
ALTER TABLE invoutpool_det ADD CONSTRAINT
invoutpool_det_r02 FOREIGN KEY (enttype) REFERENCES inventtype
(enttype);
ALTER TABLE invpermit ADD CONSTRAINT
r_invpermit_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invpermit ADD CONSTRAINT
r_invpermit_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invpermit ADD CONSTRAINT
r_invpermit_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invpermit ADD CONSTRAINT
r_invpermit_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invpermit ADD CONSTRAINT
r_invpermit_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invpermit ADD CONSTRAINT
r_invpermit_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE invpermit ADD CONSTRAINT
r_invpermit_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invpicklistcancel ADD CONSTRAINT
invpicklistcancel_r01 FOREIGN KEY (invpicklistdet_code) REFERENCES invpicklistdet
(code);
ALTER TABLE invpicklistcancel ADD CONSTRAINT
invpicklistcancel_r02 FOREIGN KEY (invreservedet_code) REFERENCES invreservedet
(code);
ALTER TABLE invpicklistcancel ADD CONSTRAINT
invpicklistcancel_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invpicklistcancel ADD CONSTRAINT
invpicklistcancel_r04 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invpicklistcancel ADD CONSTRAINT
invpicklistcancel_r05 FOREIGN KEY (cancelledby) REFERENCES hrdemp
(ecode);
ALTER TABLE invpicklistcancel ADD CONSTRAINT
invpicklistcancel_r06 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invpicklistconfirmcnl ADD CONSTRAINT
invpicklistconfirmcnl_r01 FOREIGN KEY (invpicklistmain_code) REFERENCES invpicklistmain
(code);
ALTER TABLE invpicklistconfirmcnl ADD CONSTRAINT
invpicklistconfirmcnl_r02 FOREIGN KEY (invpicklistdet_code) REFERENCES invpicklistdet
(code);
ALTER TABLE invpicklistconfirmcnl ADD CONSTRAINT
invpicklistconfirmcnl_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invpicklistconfirmcnl ADD CONSTRAINT
invpicklistconfirmcnl_r04 FOREIGN KEY (canceledby) REFERENCES hrdemp
(ecode);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT
invpicklistconfirmdet_r01 FOREIGN KEY (invpicklistmain_code) REFERENCES invpicklistmain
(code);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT
invpicklistconfirmdet_r02 FOREIGN KEY (invpicklistdet_code) REFERENCES invpicklistdet
(code);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT
invpicklistconfirmdet_r03 FOREIGN KEY (invreservemain_code) REFERENCES invreservemain
(code);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT
invpicklistconfirmdet_r04 FOREIGN KEY (invreservedet_code) REFERENCES invreservedet
(code);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT
invpicklistconfirmdet_r05 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT
invpicklistconfirmdet_r06 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT
invpicklistconfirmdet_r07 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT
invpicklistconfirmdet_r08 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invpicklistdet ADD CONSTRAINT
invpicklistdet_r01 FOREIGN KEY (invpicklistmain_code) REFERENCES invpicklistmain
(code);
ALTER TABLE invpicklistdet ADD CONSTRAINT
invpicklistdet_r02 FOREIGN KEY (invreservemain_code) REFERENCES invreservemain
(code);
ALTER TABLE invpicklistdet ADD CONSTRAINT
invpicklistdet_r03 FOREIGN KEY (invreservedet_code) REFERENCES invreservedet
(code);
ALTER TABLE invpicklistdet ADD CONSTRAINT
invpicklistdet_r04 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invpicklistdet ADD CONSTRAINT
invpicklistdet_r05 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invpicklistdet ADD CONSTRAINT
invpicklistdet_r06 FOREIGN KEY (retailorddet_code) REFERENCES retailorddet
(code);
ALTER TABLE invpicklistdet ADD CONSTRAINT
invpicklistdet_r07 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r02 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r03 FOREIGN KEY (assigned_to) REFERENCES hrdemp
(ecode);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r04 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r05 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r06 FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r07 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r08 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invpicklistmain ADD CONSTRAINT
invpicklistmain_r09 FOREIGN KEY (lastconfirmedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invputdet ADD CONSTRAINT
invputdet_r01 FOREIGN KEY (invputmain_code) REFERENCES invputmain
(code);
ALTER TABLE invputdet ADD CONSTRAINT
invputdet_r02 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invputdet ADD CONSTRAINT
invputdet_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invputdet ADD CONSTRAINT
invputdet_r04 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r02 FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r03 FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r04 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r05 FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r06 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r07 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r08 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invputmain ADD CONSTRAINT
invputmain_r09 FOREIGN KEY (postedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invreqdet ADD CONSTRAINT
invreqdet_r01 FOREIGN KEY (reqcode) REFERENCES invreqmain
(reqcode);
ALTER TABLE invreqdet ADD CONSTRAINT
invreqdet_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invreqmain ADD CONSTRAINT
invreqmain_r02 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invreqmain ADD CONSTRAINT
invreqmain_r03 FOREIGN KEY (creation_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invreqmain ADD CONSTRAINT
invreqmain_r04 FOREIGN KEY (last_modified_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invreqmain ADD CONSTRAINT
r_invreqmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invreqmain ADD CONSTRAINT
r_invreqmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invreservecancel ADD CONSTRAINT
invreservecancel_r01 FOREIGN KEY (invreservedet_code) REFERENCES invreservedet
(code);
ALTER TABLE invreservecancel ADD CONSTRAINT
invreservecancel_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invreservecancel ADD CONSTRAINT
invreservecancel_r03 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invreservecancel ADD CONSTRAINT
invreservecancel_r04 FOREIGN KEY (cancelledby) REFERENCES hrdemp
(ecode);
ALTER TABLE invreservecancel ADD CONSTRAINT
invreservecancel_r05 FOREIGN KEY (retailorddet_code) REFERENCES retailorddet
(code);
ALTER TABLE invreservecancel ADD CONSTRAINT
invreservecancel_r06 FOREIGN KEY (orddet_code) REFERENCES salorddet
(code);
ALTER TABLE invreservecancel ADD CONSTRAINT
invreservecancel_r07 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invreservedet ADD CONSTRAINT
invreservedet_r01 FOREIGN KEY (invreservemain_code) REFERENCES invreservemain
(code);
ALTER TABLE invreservedet ADD CONSTRAINT
invreservedet_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invreservedet ADD CONSTRAINT
invreservedet_r03 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invreservedet ADD CONSTRAINT
invreservedet_r04 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invreservemain ADD CONSTRAINT
invreservemain_r01 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invreservemain ADD CONSTRAINT
invreservemain_r02 FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invreservemain ADD CONSTRAINT
invreservemain_r03 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invreservemain ADD CONSTRAINT
invreservemain_r04 FOREIGN KEY (picklist_rule_code) REFERENCES picklist_rule
(code);
ALTER TABLE invreservemain ADD CONSTRAINT
invreservemain_r05 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invreservemain ADD CONSTRAINT
invreservemain_r06 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invsetdet ADD CONSTRAINT
invsetdet_r01 FOREIGN KEY (setcode) REFERENCES invsetmain
(setcode);
ALTER TABLE invsetdet ADD CONSTRAINT
invsetdet_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invsetmain ADD CONSTRAINT
fk_invsetmain_intgcode FOREIGN KEY (intgcode) REFERENCES intgmain
(intgcode);
ALTER TABLE invsetmain ADD CONSTRAINT
invsetmain_r01 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invsetmain ADD CONSTRAINT
invsetmain_r02 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invsetmain ADD CONSTRAINT
r_invsetmain_laccess_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invsitestfdet ADD CONSTRAINT
invsitestfdet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invsitestfdet ADD CONSTRAINT
r_invsitestfdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invsitestfdet ADD CONSTRAINT
r_invsitestfdet_stfcode FOREIGN KEY (stfcode) REFERENCES invsitestfmain
(stfcode);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_admou_code_in FOREIGN KEY (admou_code_in) REFERENCES admou
(code);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_lecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_loc_i FOREIGN KEY (store_loccode_in) REFERENCES invloc
(loccode);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_loc_o FOREIGN KEY (store_loccode_out) REFERENCES invloc
(loccode);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_oucode FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_site_i FOREIGN KEY (admsite_code_in) REFERENCES admsite
(code);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_site_o FOREIGN KEY (admsite_code_out) REFERENCES admsite
(code);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE invsitestfmain ADD CONSTRAINT
r_invsitestfmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invstfdet ADD CONSTRAINT
invstfdet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE invstfdet ADD CONSTRAINT
invstfdet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invstfdet ADD CONSTRAINT
r_invstfdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invstfdet ADD CONSTRAINT
r_invstfdet_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE invstfdet ADD CONSTRAINT
r_invstfdet_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE invstfdet ADD CONSTRAINT
r_invstfdet_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invstfmain ADD CONSTRAINT
invstfmain_r01 FOREIGN KEY (inlgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE invstfmain ADD CONSTRAINT
invstfmain_r02 FOREIGN KEY (outlgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE invstfmain ADD CONSTRAINT
invstfmain_r03 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_gatein_code FOREIGN KEY (invgatein_code) REFERENCES invgatein
(code);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE invstfmain ADD CONSTRAINT
r_invstfmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invstkadjdet ADD CONSTRAINT
invstkadjdet_r01 FOREIGN KEY (stkadjcode) REFERENCES invstkadjmain
(stkadjcode);
ALTER TABLE invstkadjdet ADD CONSTRAINT
invstkadjdet_r02 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invstkadjdet ADD CONSTRAINT
invstkadjdet_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invstkadjdet ADD CONSTRAINT
invstkadjdet_r04 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invstkadjdet ADD CONSTRAINT
invstkadjdet_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invstkadjmain ADD CONSTRAINT
invstkadjmain_r01 FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invstkadjmain ADD CONSTRAINT
invstkadjmain_r03 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invstkadjmain ADD CONSTRAINT
invstkadjmain_r04 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invstkadjmain ADD CONSTRAINT
invstkadjmain_r05 FOREIGN KEY (stkplancode) REFERENCES invstkplanmain
(stkplancode);
ALTER TABLE invstkadjmain ADD CONSTRAINT
invstkadjmain_r06 FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invstkadjmain ADD CONSTRAINT
r_invstkadjmain_oucode FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invstkadjmain ADD CONSTRAINT
r_invstkadjmain_site_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invstkentdet ADD CONSTRAINT
invstkentdet_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invstkentdet ADD CONSTRAINT
r_invstkentdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invstkentdet ADD CONSTRAINT
r_invstkentdet_stkentcode FOREIGN KEY (stkentcode) REFERENCES invstkentmain
(stkentcode);
ALTER TABLE invstkentmain ADD CONSTRAINT
r_invstkentmain_admoucode FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invstkentmain ADD CONSTRAINT
r_invstkentmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invstkentmain ADD CONSTRAINT
r_invstkentmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invstkentmain ADD CONSTRAINT
r_invstkentmain_site_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invstkentmain ADD CONSTRAINT
r_invstkentmain_stkplancode FOREIGN KEY (stkplancode) REFERENCES invstkplanmain
(stkplancode);
ALTER TABLE invstkentmain ADD CONSTRAINT
r_invstkentmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_article_code FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_ccode1 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_ccode2 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_ccode3 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_ccode4 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_ccode5 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_ccode6 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_grpcode FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invstkplandet ADD CONSTRAINT
r_invstkplandet_stkplancode FOREIGN KEY (stkplancode) REFERENCES invstkplanmain
(stkplancode);
ALTER TABLE invstkplanitem ADD CONSTRAINT
r_invstkplanitem_stkplancode FOREIGN KEY (stkplancode) REFERENCES invstkplanmain
(stkplancode);
ALTER TABLE invstkplanmain ADD CONSTRAINT
r_invstkplanmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE invstkplanmain ADD CONSTRAINT
r_invstkplanmain_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invstkplanmain ADD CONSTRAINT
r_invstkplanmain_oucode FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invstkplanmain ADD CONSTRAINT
r_invstkplanmain_site_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invstkplanmain ADD CONSTRAINT
r_invstkplanmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invstock ADD CONSTRAINT
invstock_fk FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invstock ADD CONSTRAINT
invstock_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_enttype FOREIGN KEY (enttype) REFERENCES inventtype
(enttype);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_psite_stkpt_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_refdeptcode FOREIGN KEY (refdeptcode) REFERENCES hrddept
(deptcode);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_refloccode FOREIGN KEY (refloccode) REFERENCES invloc
(loccode);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_refpcode FOREIGN KEY (refpcode) REFERENCES finsl
(slcode);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_refprcode FOREIGN KEY (refprcode) REFERENCES prdpr
(prcode);
ALTER TABLE invstock ADD CONSTRAINT
r_invstock_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invstock_intra ADD CONSTRAINT
invstock_intra_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invstock_log ADD CONSTRAINT
invstock_log_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invstock_onhand_agg ADD CONSTRAINT
invstock_onhand_agg_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invstock_onhand_intra_agg ADD CONSTRAINT
invstock_onhand_intra_agg_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invstock_onhand_stockpoint_agg ADD CONSTRAINT
invstock_onhand_stkpnt_agg_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invtakedet ADD CONSTRAINT
invtakedet_r01 FOREIGN KEY (invtakemain_code) REFERENCES invtakemain
(code);
ALTER TABLE invtakedet ADD CONSTRAINT
invtakedet_r02 FOREIGN KEY (invbin_code) REFERENCES invbin
(code);
ALTER TABLE invtakedet ADD CONSTRAINT
invtakedet_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invtakedet ADD CONSTRAINT
invtakedet_r04 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r02 FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r03 FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r04 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r05 FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r06 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r07 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r08 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invtakemain ADD CONSTRAINT
invtakemain_r09 FOREIGN KEY (postedby) REFERENCES hrdemp
(ecode);
ALTER TABLE invval_migration_det ADD CONSTRAINT
invval_migration_det_f01 FOREIGN KEY (invval_migration_main_code) REFERENCES invval_migration_main
(code);
ALTER TABLE invval_migration_det ADD CONSTRAINT
invval_migration_det_f02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invval_migration_det ADD CONSTRAINT
invval_migration_det_f03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE invval_migration_det ADD CONSTRAINT
invval_migration_det_f04 FOREIGN KEY (admmonth_code) REFERENCES admmonth
(mcode);
ALTER TABLE invval_migration_main ADD CONSTRAINT
invval_migration_main_f01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE invval_migration_main ADD CONSTRAINT
invval_migration_main_f02 FOREIGN KEY (admmonth_code) REFERENCES admmonth
(mcode);
ALTER TABLE lpbenefit ADD CONSTRAINT
lpbenefit_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE lpbenefit ADD CONSTRAINT
lpbenefit_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r01 FOREIGN KEY (lpbenefit_code) REFERENCES lpbenefit
(code);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r010 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r02 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r03 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r04 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r05 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r06 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r07 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r08 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r09 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE lpbenefit_exp_detail ADD CONSTRAINT
lpbenefit_exp_detail_r11 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE lpcard ADD CONSTRAINT
lpcard_r01 FOREIGN KEY (lpcard_type_code) REFERENCES lpcard_type
(code);
ALTER TABLE lpcard ADD CONSTRAINT
lpcard_r02 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE lpcard ADD CONSTRAINT
lpcard_r03 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE lpcard ADD CONSTRAINT
lpcard_r04 FOREIGN KEY (allocated_admsite_code) REFERENCES admsite
(code);
ALTER TABLE lpcard ADD CONSTRAINT
lpcard_r05 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE lpcard_benefit_discount ADD CONSTRAINT
lpcard_benefit_discount_r01 FOREIGN KEY (lpbenefit_code) REFERENCES lpbenefit
(code);
ALTER TABLE lpcard_benefit_discount ADD CONSTRAINT
lpcard_benefit_discount_r02 FOREIGN KEY (cardno) REFERENCES lpcard
(cardno);
ALTER TABLE lpcard_benefit_point ADD CONSTRAINT
lpcard_benefit_point_r01 FOREIGN KEY (lpbenefit_code) REFERENCES lpbenefit
(code);
ALTER TABLE lpcard_benefit_point ADD CONSTRAINT
lpcard_benefit_point_r02 FOREIGN KEY (cardno) REFERENCES lpcard
(cardno);
ALTER TABLE lpcard_distribution ADD CONSTRAINT
lpcard_distribution_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE lpcard_point ADD CONSTRAINT
lpcard_point_r01 FOREIGN KEY (cardno) REFERENCES lpcard
(cardno);
ALTER TABLE lpcard_type ADD CONSTRAINT
lpcard_type_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE lpcard_type ADD CONSTRAINT
lpcard_type_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE lpredemptiontoken ADD CONSTRAINT
lpredemptiontoken_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE lpredemptiontoken ADD CONSTRAINT
lpredemptiontoken_r02 FOREIGN KEY (lpcard_benefit_point_code) REFERENCES lpcard_benefit_point
(code);
ALTER TABLE mailbox ADD CONSTRAINT
mailbox_r01 FOREIGN KEY (mailjob_code) REFERENCES mailjob
(code);
ALTER TABLE mailjob ADD CONSTRAINT
mailjob_r01 FOREIGN KEY (mailserver_code) REFERENCES mailserver
(code);
ALTER TABLE mailjob ADD CONSTRAINT
mailjob_r02 FOREIGN KEY (mailjobtype_code) REFERENCES mailjobtype
(code);
ALTER TABLE mailjobfilter ADD CONSTRAINT
mailjobfilter_r01 FOREIGN KEY (mailjob_code) REFERENCES mailjob
(code);
ALTER TABLE mailjobfilter ADD CONSTRAINT
mailjobfilter_r02 FOREIGN KEY (mailjobtype_param_code) REFERENCES mailjobtype_param
(code);
ALTER TABLE mailjobfilter_multiple ADD CONSTRAINT
mailjobfilter_multiple_r01 FOREIGN KEY (mailjobfilter_code) REFERENCES mailjobfilter
(code);
ALTER TABLE mailjobtype_param ADD CONSTRAINT
mailjobtype_param_r01 FOREIGN KEY (mailjobtype_code) REFERENCES mailjobtype
(code);
ALTER TABLE mailoccurence_event ADD CONSTRAINT
mailoccurence_event_r01 FOREIGN KEY (mailjob_code) REFERENCES mailjob
(code);
ALTER TABLE mdconnected_api ADD CONSTRAINT
mdconnected_api_r01 FOREIGN KEY (apiid) REFERENCES mdapi
(code);
ALTER TABLE mdconnected_event ADD CONSTRAINT
mdconnected_event_r01 FOREIGN KEY (gds_event_id) REFERENCES gds2_event_md
(id);
ALTER TABLE mdconnected_event ADD CONSTRAINT
mdconnected_event_r02 FOREIGN KEY (gds_template_id) REFERENCES gds2_event_template_md
(id);
ALTER TABLE mdlist ADD CONSTRAINT
mdlist_r01 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE mdlistcriteria ADD CONSTRAINT
mdlistcriteria_r01 FOREIGN KEY (mdlistid) REFERENCES mdlist
(id);
ALTER TABLE mdlistcriteriadetail ADD CONSTRAINT
criteriadet_list_id FOREIGN KEY (listcriteriaid) REFERENCES mdlistcriteria
(id);
ALTER TABLE mdlistcriteriadetail ADD CONSTRAINT
criteriadet_listdet_id FOREIGN KEY (fieldid) REFERENCES mdlistdetail
(id);
ALTER TABLE mdlistcriteriadetail ADD CONSTRAINT
criteriadet_oparator_id FOREIGN KEY (operatorid) REFERENCES mdoperator
(id);
ALTER TABLE mdlistdetail ADD CONSTRAINT
mdlistdetail_r01 FOREIGN KEY (mdlistid) REFERENCES mdlist
(id);
ALTER TABLE mdmenu ADD CONSTRAINT
mdmenu_r01 FOREIGN KEY (sys_mdmenuparentshortcode) REFERENCES mdmenu
(sys_shortcode);
ALTER TABLE mdmenuappoperation ADD CONSTRAINT
mdmenuappoperation_r01 FOREIGN KEY (sys_mdappoperationid) REFERENCES mdappoperation
(id);
ALTER TABLE menudocreport ADD CONSTRAINT
docrpt_ex_rpt_master_code FOREIGN KEY (ex_report_master_code) REFERENCES ex_report_master
(code);
ALTER TABLE menudocreport ADD CONSTRAINT
fk_menudocreport FOREIGN KEY (menushortcode) REFERENCES mdmenu
(sys_shortcode);
ALTER TABLE menudocreport ADD CONSTRAINT
fk_menudocreport_createdby FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE menudocreport ADD CONSTRAINT
fk_menudocreport_lastmoddby FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE nfs$event_vars ADD CONSTRAINT
nfs$event_vars_r01 FOREIGN KEY (nfs$events_code) REFERENCES nfs$events
(code);
ALTER TABLE nfs$postasks ADD CONSTRAINT
nfs$postasks_r01 FOREIGN KEY (nfs$tasks_code) REFERENCES nfs$tasks
(code);
ALTER TABLE nfs$postasks ADD CONSTRAINT
nfs$postasks_r02 FOREIGN KEY (nfs$events_code) REFERENCES nfs$events
(code);
ALTER TABLE nfs$postasks_alloc ADD CONSTRAINT
nfs$postasks_alloc_r01 FOREIGN KEY (nfs$tasks_code) REFERENCES nfs$tasks
(code);
ALTER TABLE nfs$postasks_alloc ADD CONSTRAINT
nfs$postasks_alloc_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE nfs$task_filter ADD CONSTRAINT
nfs$task_filter_r01 FOREIGN KEY (nfs$tasks_code) REFERENCES nfs$tasks
(code);
ALTER TABLE nfs$task_filter_multiple ADD CONSTRAINT
nfs$task_filter_multiple_r01 FOREIGN KEY (nfs$task_filter_code) REFERENCES nfs$task_filter
(code);
ALTER TABLE nfs$task_recipients ADD CONSTRAINT
nfs$task_recipients_r01 FOREIGN KEY (nfs$tasks_code) REFERENCES nfs$tasks
(code);
ALTER TABLE nfs$tasks ADD CONSTRAINT
nfs$tasks_r01 FOREIGN KEY (nfs$events_code) REFERENCES nfs$events
(code);
ALTER TABLE omschannel_mop ADD CONSTRAINT
omschannel_mop_r01 FOREIGN KEY (channel_code) REFERENCES finsl
(slcode);
ALTER TABLE omschannel_mop ADD CONSTRAINT
omschannel_mop_r02 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE omschannel_mop ADD CONSTRAINT
omschannel_mop_r03 FOREIGN KEY (mop_glcode) REFERENCES fingl
(glcode);
ALTER TABLE omschannel_mop ADD CONSTRAINT
omschannel_mop_r04 FOREIGN KEY (mop_slcode) REFERENCES finsl
(slcode);
ALTER TABLE operation_log ADD CONSTRAINT
r_operation_log_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE operation_log ADD CONSTRAINT
r_operation_log_modulecode FOREIGN KEY (modulecode) REFERENCES admmenu
(menucode);
ALTER TABLE operation_log ADD CONSTRAINT
r_operation_log_sitecode FOREIGN KEY (sitecode) REFERENCES admsite
(code);
ALTER TABLE operation_log ADD CONSTRAINT
r_operation_log_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r02 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r03 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r04 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r05 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r06 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r07 FOREIGN KEY (customer_slcode) REFERENCES finsl
(slcode);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r08 FOREIGN KEY (debtor_glcode) REFERENCES fingl
(glcode);
ALTER TABLE posjournal ADD CONSTRAINT
posjournal_r09 FOREIGN KEY (retailordmain_ordcode) REFERENCES retailordmain
(ordcode);
ALTER TABLE posjournal_detail ADD CONSTRAINT
posjournal_detail_r01 FOREIGN KEY (posjournal_code) REFERENCES posjournal
(code);
ALTER TABLE posjournal_detail ADD CONSTRAINT
posjournal_detail_r02 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE posjournal_detail ADD CONSTRAINT
posjournal_detail_r03 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE posjournal_detail ADD CONSTRAINT
posjournal_detail_r04 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE posjournal_detail ADD CONSTRAINT
posjournal_detail_r05 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE posjournal_detail ADD CONSTRAINT
posjournal_detail_r06 FOREIGN KEY (tender_master_code) REFERENCES tender_master
(code);
ALTER TABLE posjournal_detail ADD CONSTRAINT
posjournal_detail_r07 FOREIGN KEY (expense_master_code) REFERENCES expense_master
(code);
ALTER TABLE posjournal_detail_void ADD CONSTRAINT
posjournal_detail_void_r03 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE posjournal_detail_void ADD CONSTRAINT
posjournal_detail_void_r04 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE posjournal_detail_void ADD CONSTRAINT
posjournal_detail_void_r05 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE posjournal_detail_void ADD CONSTRAINT
posjournal_detail_void_r06 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE posjournal_detail_void ADD CONSTRAINT
posjournal_detail_void_r08 FOREIGN KEY (tender_master_code) REFERENCES tender_master
(code);
ALTER TABLE posjournal_detail_void ADD CONSTRAINT
posjournal_detail_void_r09 FOREIGN KEY (expense_master_code) REFERENCES expense_master
(code);
ALTER TABLE posjournal_void ADD CONSTRAINT
posjournal_void_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE posjournal_void ADD CONSTRAINT
posjournal_void_r03 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE posjournal_void ADD CONSTRAINT
posjournal_void_r04 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE posjournal_void ADD CONSTRAINT
posjournal_void_r05 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE posjournal_void ADD CONSTRAINT
posjournal_void_r06 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE posjournal_void ADD CONSTRAINT
posjournal_void_r07 FOREIGN KEY (voidby) REFERENCES hrdemp
(ecode);
ALTER TABLE posjournal_void ADD CONSTRAINT
posjournal_void_r08 FOREIGN KEY (customer_slcode) REFERENCES finsl
(slcode);
ALTER TABLE posjournal_void ADD CONSTRAINT
posjournal_void_r09 FOREIGN KEY (debtor_glcode) REFERENCES fingl
(glcode);
ALTER TABLE prd_rate_staging ADD CONSTRAINT
prd_rate_staging_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE prd_saitem ADD CONSTRAINT
r_prd_saitem_01 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prd_saitem ADD CONSTRAINT
r_prd_saitem_02 FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prd_wiptrack ADD CONSTRAINT
r_prd_wiptrack_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_a_icode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_alt_grpcode FOREIGN KEY (alt_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_ass_saitem_code FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_bomcode FOREIGN KEY (bomcode) REFERENCES prdbommain
(code);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_bomoperation_code FOREIGN KEY (bomoperation_code) REFERENCES prdbomoperation
(code);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_bomver_code FOREIGN KEY (bomver_code) REFERENCES prdbomver
(code);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_com_saitem_code FOREIGN KEY (com_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_component_icode FOREIGN KEY (component_icode) REFERENCES invitem
(icode);
ALTER TABLE prdbomdet ADD CONSTRAINT
r_prdbomdet_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdbommain ADD CONSTRAINT
r_prdbommain_assemblyicode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdbommain ADD CONSTRAINT
r_prdbommain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdbommain ADD CONSTRAINT
r_prdbommain_lastaccessecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdbommain ADD CONSTRAINT
r_prdbommain_routecode FOREIGN KEY (routecode) REFERENCES prdroutemain
(code);
ALTER TABLE prdbomoperation ADD CONSTRAINT
r_prdbomop_aicode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdbomoperation ADD CONSTRAINT
r_prdbomop_ass_saitem_code FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdbomoperation ADD CONSTRAINT
r_prdbomop_bomcode FOREIGN KEY (bomcode) REFERENCES prdbommain
(code);
ALTER TABLE prdbomoperation ADD CONSTRAINT
r_prdbomop_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdbomoperation ADD CONSTRAINT
r_prdbomoperation_bomver_code FOREIGN KEY (bomver_code) REFERENCES prdbomver
(code);
ALTER TABLE prdbomver ADD CONSTRAINT
r_prdbomver_approv_ecode FOREIGN KEY (approv_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdbomver ADD CONSTRAINT
r_prdbomver_bomcode FOREIGN KEY (bomcode) REFERENCES prdbommain
(code);
ALTER TABLE prdbomver ADD CONSTRAINT
r_prdbomver_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdbomver ADD CONSTRAINT
r_prdbomver_last_access_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdcostsheetbom ADD CONSTRAINT
r_prdcsbom_component_icode FOREIGN KEY (component_icode) REFERENCES invitem
(icode);
ALTER TABLE prdcostsheetbom ADD CONSTRAINT
r_prdcsbom_costsheet_code FOREIGN KEY (costsheet_code) REFERENCES prdcostsheethead
(code);
ALTER TABLE prdcostsheetbom ADD CONSTRAINT
r_prdcsbom_csop_code FOREIGN KEY (csop_code) REFERENCES prdcostsheetoperation
(code);
ALTER TABLE prdcostsheethead ADD CONSTRAINT
r_prdcshead_approved_ecode FOREIGN KEY (approved_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdcostsheethead ADD CONSTRAINT
r_prdcshead_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdcostsheethead ADD CONSTRAINT
r_prdcshead_grpcode FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE prdcostsheethead ADD CONSTRAINT
r_prdcshead_last_access_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdcostsheethead ADD CONSTRAINT
r_prdcshead_routecode FOREIGN KEY (routecode) REFERENCES prdroutemain
(code);
ALTER TABLE prdcostsheethead ADD CONSTRAINT
r_prdcshead_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdcostsheetoperation ADD CONSTRAINT
r_prdcostsheetoperation_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdcostsheetoperation ADD CONSTRAINT
r_prdcsop_costsheet_code FOREIGN KEY (costsheet_code) REFERENCES prdcostsheethead
(code);
ALTER TABLE prdis ADD CONSTRAINT
prdis_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE prdis ADD CONSTRAINT
r_prdis_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE prdis ADD CONSTRAINT
r_prdis_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdis ADD CONSTRAINT
r_prdis_ordcode FOREIGN KEY (ordcode) REFERENCES prdord
(ordcode);
ALTER TABLE prdis ADD CONSTRAINT
r_prdis_psite_stockpoint_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE prdis ADD CONSTRAINT
r_prdis_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_a_icode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_alt_grpcode FOREIGN KEY (alt_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_ass_saitem_code FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_c_icode FOREIGN KEY (component_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_com_saitem_code FOREIGN KEY (com_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_i_loccode FOREIGN KEY (issue_loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_job_ass_icode FOREIGN KEY (job_assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_jobcode FOREIGN KEY (jobcode) REFERENCES prdjobmain
(code);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_jrcdet_code FOREIGN KEY (jrcdet_code) REFERENCES prdjrcdet
(code);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdjobbom ADD CONSTRAINT
r_prdjobbom_prdjobdet_code FOREIGN KEY (prdjobdet_code) REFERENCES prdjobdet
(code);
ALTER TABLE prdjobcnldet ADD CONSTRAINT
r_jordcnldet_prdjdet_code FOREIGN KEY (prdjobdet_code) REFERENCES prdjobdet
(code);
ALTER TABLE prdjobcnldet ADD CONSTRAINT
r_prdjobcnldet_ass_it_cd FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdjobcnldet ADD CONSTRAINT
r_prdjobcnldet_cnlcode FOREIGN KEY (cnlcode) REFERENCES prdjobcnlmain
(code);
ALTER TABLE prdjobcnldet ADD CONSTRAINT
r_prdjobcnldet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE prdjobcnldet ADD CONSTRAINT
r_prdjobcnldet_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdjobcnldet ADD CONSTRAINT
r_prdjobcnldet_prdjobmain_code FOREIGN KEY (prdjobmain_code) REFERENCES prdjobmain
(code);
ALTER TABLE prdjobcnlmain ADD CONSTRAINT
r_prdjobcnlmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdjobcnlmain ADD CONSTRAINT
r_prdjobcnlmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdjobcnlmain ADD CONSTRAINT
r_prdjobcnlmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE prdjobcnlmain ADD CONSTRAINT
r_prdjobcnlmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdjobcnlmain ADD CONSTRAINT
r_prdjobcnlmain_laccss_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdjobcnlmain ADD CONSTRAINT
r_prdjobcnlmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdjobdet ADD CONSTRAINT
r_prdjobdet_a_icode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjobdet ADD CONSTRAINT
r_prdjobdet_ass_saitem_code FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdjobdet ADD CONSTRAINT
r_prdjobdet_jobcode FOREIGN KEY (jobcode) REFERENCES prdjobmain
(code);
ALTER TABLE prdjobdet ADD CONSTRAINT
r_prdjobdet_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdjobmain ADD CONSTRAINT
prdjobmain_jobber_loccode FOREIGN KEY (jobber_loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_auth_ecode FOREIGN KEY (auth_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_lastaccessecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdjobmain ADD CONSTRAINT
r_prdjobmn_prd_wiptrack_code FOREIGN KEY (prd_wiptrack_code) REFERENCES prd_wiptrack
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
fk_prdjrcbom_job_aicode FOREIGN KEY (job_assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjrcbom ADD CONSTRAINT
prdjrcbom_r01 FOREIGN KEY (jrccode) REFERENCES prdjrcmain
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
prdjrcbom_r02 FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
prdjrcbom_r03 FOREIGN KEY (jobcode) REFERENCES prdjobmain
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
prdjrcbom_r04 FOREIGN KEY (jobdet_code) REFERENCES prdjobdet
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
prdjrcbom_r05 FOREIGN KEY (jobbom_code) REFERENCES prdjobbom
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
prdjrcbom_r06 FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjrcbom ADD CONSTRAINT
prdjrcbom_r07 FOREIGN KEY (component_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjrcbom ADD CONSTRAINT
prdjrcbom_r08 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
r_prdjrcbom_ass_it_cd FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
r_prdjrcbom_com_ass_cd FOREIGN KEY (com_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdjrcbom ADD CONSTRAINT
r_prdjrcdet_code FOREIGN KEY (jrcdet_code) REFERENCES prdjrcdet
(code);
ALTER TABLE prdjrcdet ADD CONSTRAINT
prdjrcdet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE prdjrcdet ADD CONSTRAINT
r_prdjrcdet_aicode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjrcdet ADD CONSTRAINT
r_prdjrcdet_ass_it_cd FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdjrcdet ADD CONSTRAINT
r_prdjrcdet_job_assembly_icode FOREIGN KEY (job_assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdjrcdet ADD CONSTRAINT
r_prdjrcdet_jobcode FOREIGN KEY (jobcode) REFERENCES prdjobmain
(code);
ALTER TABLE prdjrcdet ADD CONSTRAINT
r_prdjrcdet_jobdet_code FOREIGN KEY (jobdet_code) REFERENCES prdjobdet
(code);
ALTER TABLE prdjrcdet ADD CONSTRAINT
r_prdjrcdet_jrccode FOREIGN KEY (jrccode) REFERENCES prdjrcmain
(code);
ALTER TABLE prdjrcdet ADD CONSTRAINT
r_prdjrcdet_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdjrcdet ADD CONSTRAINT
r_prdjrcdet_rec_loccode FOREIGN KEY (receive_loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdjrcmain ADD CONSTRAINT
prdjrcmain_invgatein_code FOREIGN KEY (invgatein_code) REFERENCES invgatein
(code);
ALTER TABLE prdjrcmain ADD CONSTRAINT
prdjrcmain_lgtcode FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_last_access_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_prd_wiptrack_code FOREIGN KEY (prd_wiptrack_code) REFERENCES prd_wiptrack
(code);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_srvcode FOREIGN KEY (srvcode) REFERENCES pursrvmain
(srvcode);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_srvdet_code FOREIGN KEY (pursrvdet_code) REFERENCES pursrvdet
(code);
ALTER TABLE prdjrcmain ADD CONSTRAINT
r_prdjrcmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdlotbom ADD CONSTRAINT
r_prdlotbom_aicode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdlotbom ADD CONSTRAINT
r_prdlotbom_alt_grpcode FOREIGN KEY (alt_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE prdlotbom ADD CONSTRAINT
r_prdlotbom_ass_saitem_code FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdlotbom ADD CONSTRAINT
r_prdlotbom_cicode FOREIGN KEY (component_icode) REFERENCES invitem
(icode);
ALTER TABLE prdlotbom ADD CONSTRAINT
r_prdlotbom_com_saitem_code FOREIGN KEY (com_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdlotbom ADD CONSTRAINT
r_prdlotbom_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdlotbom ADD CONSTRAINT
r_prdlotbom_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdlotdet ADD CONSTRAINT
r_prdlotdet FOREIGN KEY (bomver_code) REFERENCES prdbomver
(code);
ALTER TABLE prdlotdet ADD CONSTRAINT
r_prdlotdet_assembly_icode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdlotdet ADD CONSTRAINT
r_prdlotdet_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdlotdet ADD CONSTRAINT
r_prdlotdet_prdmplanalloc_code FOREIGN KEY (prdmplanalloc_code) REFERENCES prdmplanalloc
(code);
ALTER TABLE prdlotdet ADD CONSTRAINT
r_prdlotdet_routecode FOREIGN KEY (routecode) REFERENCES prdroutemain
(code);
ALTER TABLE prdlotmain ADD CONSTRAINT
r_prdlotmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdlotmain ADD CONSTRAINT
r_prdlotmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdlotmain ADD CONSTRAINT
r_prdlotmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE prdlotmain ADD CONSTRAINT
r_prdlotmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdlotmain ADD CONSTRAINT
r_prdlotmain_lastaccessecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdlotmain ADD CONSTRAINT
r_prdlotmain_ordcode FOREIGN KEY (ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE prdlotmain ADD CONSTRAINT
r_prdlotmain_routegrp_code FOREIGN KEY (routegrp_code) REFERENCES prdroutegrp
(code);
ALTER TABLE prdlotmain ADD CONSTRAINT
r_prdlotmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdlotoperation ADD CONSTRAINT
r_prdlotop_a_icode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdlotoperation ADD CONSTRAINT
r_prdlotop_ass_saitem_code FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdlotoperation ADD CONSTRAINT
r_prdlotop_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdlotoperation ADD CONSTRAINT
r_prdlotop_lotdet_code FOREIGN KEY (lotdet_code) REFERENCES prdlotdet
(code);
ALTER TABLE prdlotoperation ADD CONSTRAINT
r_prdlotop_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdmplanalloc ADD CONSTRAINT
r_prdmplanalloc_assmicode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdmplanalloc ADD CONSTRAINT
r_prdmplanalloc_mplandetcode FOREIGN KEY (prdmplandet_code) REFERENCES prdmplandet
(code);
ALTER TABLE prdmplanalloc ADD CONSTRAINT
r_prdmplanalloc_sitecode FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdmplandet ADD CONSTRAINT
r_prdmplandet_assmicode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdmplandet ADD CONSTRAINT
r_prdmplandet_doccode FOREIGN KEY (plancode) REFERENCES prdmplanmain
(code);
ALTER TABLE prdmplanmain ADD CONSTRAINT
r_prdmplanmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE prdmplanmain ADD CONSTRAINT
r_prdmplanmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdmplanmain ADD CONSTRAINT
r_prdmplanmain_laecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdmplanmain ADD CONSTRAINT
r_prdmplanmain_ordcode FOREIGN KEY (ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE prdmplanmain ADD CONSTRAINT
r_prdmplanmain_oucode FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdmplanmain ADD CONSTRAINT
r_prdmplanmain_sitecode FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdmplanmain ADD CONSTRAINT
r_prdmplanmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_auth_ecode FOREIGN KEY (auth_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_prvordcode FOREIGN KEY (prvordcode) REFERENCES prdord
(ordcode);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_srvcode FOREIGN KEY (srvcode) REFERENCES pursrvmain
(srvcode);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_srvdet_code FOREIGN KEY (pursrvdet_code) REFERENCES pursrvdet
(code);
ALTER TABLE prdord ADD CONSTRAINT
r_prdord_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdpr ADD CONSTRAINT
r_prdpr_parcode FOREIGN KEY (parcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdprrate ADD CONSTRAINT
r_prdprrate_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE prdprrate ADD CONSTRAINT
r_prdprrate_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdprrate_article ADD CONSTRAINT
prdprrate_article_r01 FOREIGN KEY (prdprrate_code) REFERENCES prdprrate
(code);
ALTER TABLE prdprrate_article ADD CONSTRAINT
prdprrate_article_r02 FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdprrate_article ADD CONSTRAINT
prdprrate_article_r03 FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE prdprrate_article ADD CONSTRAINT
prdprrate_article_r04 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE prdprrate_item ADD CONSTRAINT
prdprrate_item_r01 FOREIGN KEY (prdprrate_code) REFERENCES prdprrate
(code);
ALTER TABLE prdprrate_item ADD CONSTRAINT
prdprrate_item_r02 FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdprrate_item ADD CONSTRAINT
prdprrate_item_r03 FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE prdprrate_item ADD CONSTRAINT
prdprrate_item_r04 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE prdrc ADD CONSTRAINT
prdrc_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE prdrc ADD CONSTRAINT
r_prdrc_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE prdrc ADD CONSTRAINT
r_prdrc_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdrc ADD CONSTRAINT
r_prdrc_ordcode FOREIGN KEY (ordcode) REFERENCES prdord
(ordcode);
ALTER TABLE prdrc ADD CONSTRAINT
r_prdrc_psite_stockpoint_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE prdrc ADD CONSTRAINT
r_prdrc_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdroutedet ADD CONSTRAINT
r_prdroutedet_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdroutedet ADD CONSTRAINT
r_prdroutedet_routecode FOREIGN KEY (routecode) REFERENCES prdroutemain
(code);
ALTER TABLE prdroutegrp ADD CONSTRAINT
r_prdroutegrp_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdroutegrp ADD CONSTRAINT
r_prdroutegrp_last_accecd FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdroutegrp ADD CONSTRAINT
r_prdroutegrp_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE prdroutegrpdet ADD CONSTRAINT
r_prdroutegrpdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE prdroutegrpdet ADD CONSTRAINT
r_prdroutegrpdet_route_code FOREIGN KEY (routegrp_code) REFERENCES prdroutegrp
(code);
ALTER TABLE prdroutegrpdet ADD CONSTRAINT
r_routecode_routegrp FOREIGN KEY (routecode) REFERENCES prdroutemain
(code);
ALTER TABLE prdroutemain ADD CONSTRAINT
r_prdroutemain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdroutemain ADD CONSTRAINT
r_prdroutemain_lastaccessecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdwipclrdet ADD CONSTRAINT
prdwipclrdet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE prdwipclrdet ADD CONSTRAINT
r_prdwipclrdet_ass_icode FOREIGN KEY (prc_assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdwipclrdet ADD CONSTRAINT
r_prdwipclrdet_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdwipclrdet ADD CONSTRAINT
r_prdwipclrdet_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdwipclrdet ADD CONSTRAINT
r_prdwipclrdet_main_code FOREIGN KEY (wipclrmain_code) REFERENCES prdwipclrmain
(code);
ALTER TABLE prdwipclrdet ADD CONSTRAINT
r_prdwipclrdet_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdwipclrdet ADD CONSTRAINT
r_prdwipclrdet_prd_saitm_code FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdwipclrdet ADD CONSTRAINT
r_prdwipclrdet_rec_ass_icode FOREIGN KEY (rec_assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdwipclrmain ADD CONSTRAINT
r_prdwipclrmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdwipclrmain ADD CONSTRAINT
r_prdwipclrmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdwipclrmain ADD CONSTRAINT
r_prdwipclrmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE prdwipclrmain ADD CONSTRAINT
r_prdwipclrmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdwipclrmain ADD CONSTRAINT
r_prdwipclrmain_last_acc_ecd FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdwipclrmain ADD CONSTRAINT
r_prdwipclrmain_loccode FOREIGN KEY (loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdwipclrmain ADD CONSTRAINT
r_prdwipclrmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdwipdet ADD CONSTRAINT
prdwipdet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_ass_saitem_code FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_assembly_icode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_cnlcode FOREIGN KEY (cnlcode) REFERENCES prdjobcnlmain
(code);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_com_saitem_code FOREIGN KEY (com_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_component_icode FOREIGN KEY (component_icode) REFERENCES invitem
(icode);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_job_ass_icode FOREIGN KEY (job_assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_jobbom_code FOREIGN KEY (jobbom_code) REFERENCES prdjobbom
(code);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_jobcode FOREIGN KEY (jobcode) REFERENCES prdjobmain
(code);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_wip_loccode FOREIGN KEY (wip_loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdwipdet ADD CONSTRAINT
r_prdwipdet_wiptxn_code FOREIGN KEY (wiptxn_code) REFERENCES prdwipmain
(code);
ALTER TABLE prdwipmain ADD CONSTRAINT
prdwipmain_invgatein_code FOREIGN KEY (invgatein_code) REFERENCES invgatein
(code);
ALTER TABLE prdwipmain ADD CONSTRAINT
prdwipmain_lgtcode FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_jobcode FOREIGN KEY (jobcode) REFERENCES prdjobmain
(code);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_jrccode FOREIGN KEY (jrccode) REFERENCES prdjrcmain
(code);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_last_access_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdwipmain ADD CONSTRAINT
r_prdwipmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE prdwiptrans ADD CONSTRAINT
prdwiptrans_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptr_prd_wiptrack_code FOREIGN KEY (prd_wiptrack_code) REFERENCES prd_wiptrack
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_aicode FOREIGN KEY (assembly_icode) REFERENCES invitem
(icode);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_ass_saitem_cd FOREIGN KEY (ass_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_cicode FOREIGN KEY (component_icode) REFERENCES invitem
(icode);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_cnlcode FOREIGN KEY (cnlcode) REFERENCES prdjobcnlmain
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_com_saitem_cd FOREIGN KEY (com_saitem_code) REFERENCES prd_saitem
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_jobber_loccode FOREIGN KEY (jobber_loccode) REFERENCES invloc
(loccode);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_jobcode FOREIGN KEY (jobcode) REFERENCES prdjobmain
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_lotcode FOREIGN KEY (lotcode) REFERENCES prdlotmain
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_prcode FOREIGN KEY (prcode) REFERENCES prdpr
(prcode);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_wipclr_code FOREIGN KEY (wipclr_code) REFERENCES prdwipclrmain
(code);
ALTER TABLE prdwiptrans ADD CONSTRAINT
r_prdwiptrans_wiptxn_code FOREIGN KEY (wiptxn_code) REFERENCES prdwipmain
(code);
ALTER TABLE promo_allocation_det ADD CONSTRAINT
promo_alloc_det_alloc_code_r01 FOREIGN KEY (allocation_code) REFERENCES promo_allocation
(code);
ALTER TABLE promo_allocation_det ADD CONSTRAINT
promo_alloc_det_allocby_r03 FOREIGN KEY (allocatedby) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_allocation_det ADD CONSTRAINT
promo_alloc_det_apprby_r06 FOREIGN KEY (approvedby) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_allocation_det ADD CONSTRAINT
promo_alloc_det_closedby_r05 FOREIGN KEY (closedby) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_allocation_det ADD CONSTRAINT
promo_alloc_det_lastmodiby_r04 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_allocation_det ADD CONSTRAINT
promo_alloc_det_promo_code_r02 FOREIGN KEY (promo_code) REFERENCES promo_master
(code);
ALTER TABLE promo_applicable ADD CONSTRAINT
promo_appl_allocatedby_r02 FOREIGN KEY (allocatedby) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_applicable ADD CONSTRAINT
promo_appl_approvedby_r05 FOREIGN KEY (approvedby) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_applicable ADD CONSTRAINT
promo_appl_closedby_r04 FOREIGN KEY (closedby) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_applicable ADD CONSTRAINT
promo_appl_lastmodifiedby_r03 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_applicable ADD CONSTRAINT
promo_appl_promo_code_r01 FOREIGN KEY (promo_code) REFERENCES promo_master
(code);
ALTER TABLE promo_assortment ADD CONSTRAINT
fk_admsite_code FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_artcl_cd_r05 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_ass_code_r01 FOREIGN KEY (assortment_code) REFERENCES promo_assortment
(code);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_ccode1_r07 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_ccode2_r08 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_ccode3_r09 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_ccode4_r10 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_ccode5_r11 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_ccode6_r12 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_dept_grcd_r04 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_div_grcd_r02 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_icode_r06 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_asmt_excl_sec_grcd_r03 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT
promo_assortment_exclude_r06 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_artl_code_r05 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_ass_code_r01 FOREIGN KEY (assortment_code) REFERENCES promo_assortment
(code);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_ccode1_r07 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_ccode2_r08 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_ccode3_r09 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_ccode4_r10 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_ccode5_r11 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_ccode6_r12 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_dept_grcd_r04 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_div_grcd_r02 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_icode_r06 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_asmt_incl_sec_grcd_r03 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE promo_assortment_include ADD CONSTRAINT
promo_assortment_include_r06 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE promo_buy ADD CONSTRAINT
promo_buy_r01 FOREIGN KEY (promo_code) REFERENCES promo_master
(code);
ALTER TABLE promo_buy ADD CONSTRAINT
promo_buy_r02 FOREIGN KEY (assortment_code) REFERENCES promo_assortment
(code);
ALTER TABLE promo_master ADD CONSTRAINT
promo_master_buy_asrt_cd_r01 FOREIGN KEY (buy_assortment_code) REFERENCES promo_assortment
(code);
ALTER TABLE promo_master ADD CONSTRAINT
promo_master_cre_ucode_r03 FOREIGN KEY (creation_usercode) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_master ADD CONSTRAINT
promo_master_modi_ucode_r04 FOREIGN KEY (modification_usercode) REFERENCES hrdemp
(ecode);
ALTER TABLE promo_master ADD CONSTRAINT
promo_master_site FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE promo_slab ADD CONSTRAINT
promo_slab_get_asrt_code_r03 FOREIGN KEY (get_assortment_code) REFERENCES promo_assortment
(code);
ALTER TABLE promo_slab ADD CONSTRAINT
promo_slab_get_bnft_code_r02 FOREIGN KEY (get_benefit_code) REFERENCES promo_benefits
(code);
ALTER TABLE promo_slab ADD CONSTRAINT
promo_slab_promo_code_r01 FOREIGN KEY (promo_code) REFERENCES promo_master
(code);
ALTER TABLE promo_voucher ADD CONSTRAINT
r_promo_voucher_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE psite_alloc_article ADD CONSTRAINT
psite_alloc_article_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_alloc_article ADD CONSTRAINT
psite_alloc_article_r02 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE psite_alloc_charge ADD CONSTRAINT
psite_alloc_charge_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_alloc_charge ADD CONSTRAINT
psite_alloc_charge_r02 FOREIGN KEY (salchgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE psite_alloc_department ADD CONSTRAINT
psite_alloc_dept_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_alloc_department ADD CONSTRAINT
psite_alloc_dept_r02 FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_alloc_division ADD CONSTRAINT
psite_alloc_division_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_alloc_division ADD CONSTRAINT
psite_alloc_division_r02 FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_alloc_item ADD CONSTRAINT
psite_alloc_item_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_alloc_item ADD CONSTRAINT
psite_alloc_item_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_alloc_posmail ADD CONSTRAINT
psite_alloc_posmail_r01 FOREIGN KEY (psite_allocation_code) REFERENCES psite_allocation
(code);
ALTER TABLE psite_alloc_rep_headerfooter ADD CONSTRAINT
psite_alloc_rep_headfoot_r01 FOREIGN KEY (psite_allocation_code) REFERENCES psite_allocation
(code);
ALTER TABLE psite_alloc_section ADD CONSTRAINT
psite_alloc_section_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_alloc_section ADD CONSTRAINT
psite_alloc_section_r02 FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_allocation ADD CONSTRAINT
psite_allocation_r02 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_allocation_detail ADD CONSTRAINT
psite_allocation_detail_r01 FOREIGN KEY (psite_allocation_code) REFERENCES psite_allocation
(code);
ALTER TABLE psite_appsetting ADD CONSTRAINT
psite_appsetting_r01 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_auditjournal ADD CONSTRAINT
psite_auditjournal_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_auditjournal ADD CONSTRAINT
psite_auditjournal_r02 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_auditjournal ADD CONSTRAINT
psite_auditjournal_r03 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE psite_auditjournal ADD CONSTRAINT
psite_auditjournal_r04 FOREIGN KEY (store_loccode) REFERENCES invloc
(loccode);
ALTER TABLE psite_auditjournal ADD CONSTRAINT
psite_auditjournal_r05 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE psite_auditjournal ADD CONSTRAINT
psite_auditjournal_r06 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_auditjournal_assortment ADD CONSTRAINT
psite_auditjournal_asrtmnt_r01 FOREIGN KEY (psite_auditjournal_code) REFERENCES psite_auditjournal
(code);
ALTER TABLE psite_auditjournalitem ADD CONSTRAINT
psite_auditjournalitem_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_auditjournalitem ADD CONSTRAINT
psite_auditjournalitem_r02 FOREIGN KEY (psite_auditjournal_code) REFERENCES psite_auditjournal
(code);
ALTER TABLE psite_auditjournalitem ADD CONSTRAINT
psite_auditjournalitem_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_auditjournalitem ADD CONSTRAINT
psite_auditjournalitem_r05 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_auditjournalitem ADD CONSTRAINT
psite_auditjournalitem_r06 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_auditplan ADD CONSTRAINT
psite_auditplan_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_auditplan ADD CONSTRAINT
psite_auditplan_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_auditplan_assign ADD CONSTRAINT
psite_auditplan_assign_r01 FOREIGN KEY (psite_auditplan_code) REFERENCES psite_auditplan
(code);
ALTER TABLE psite_auditplan_assign ADD CONSTRAINT
psite_auditplan_assign_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r01 FOREIGN KEY (psite_auditplan_code) REFERENCES psite_auditplan
(code);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r02 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r03 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r04 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r05 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r06 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r07 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r08 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r09 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r10 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r11 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE psite_auditplan_assortment ADD CONSTRAINT
psite_auditplan_assortment_r12 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_backuperror ADD CONSTRAINT
psite_backuperror_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_coupon_assign ADD CONSTRAINT
psite_coupon_assign_r01 FOREIGN KEY (couponoffer_code) REFERENCES psite_couponoffer
(code);
ALTER TABLE psite_coupon_assign ADD CONSTRAINT
psite_coupon_assign_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_coupon_assrt ADD CONSTRAINT
psite_coupon_assrt_r01 FOREIGN KEY (couponoffer_code) REFERENCES psite_couponoffer
(code);
ALTER TABLE psite_coupon_assrt ADD CONSTRAINT
psite_coupon_assrt_r02 FOREIGN KEY (assrt_code) REFERENCES promo_assortment
(code);
ALTER TABLE psite_cus_bulk_merge_session ADD CONSTRAINT
psite_cus_merge_session_r01 FOREIGN KEY (createdbyid) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_customer ADD CONSTRAINT
psite_customer_r01 FOREIGN KEY (lpcardno) REFERENCES lpcard
(cardno);
ALTER TABLE psite_customer ADD CONSTRAINT
psite_customer_r02 FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_customer ADD CONSTRAINT
psite_customer_r03 FOREIGN KEY (admisd_code) REFERENCES admisd
(code);
ALTER TABLE psite_customer_dist ADD CONSTRAINT
psite_customer_dist_r01 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE psite_customer_dist ADD CONSTRAINT
psite_customer_dist_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_customer_merge ADD CONSTRAINT
psite_customer_merge_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_day_stlm_acc ADD CONSTRAINT
psite_day_stlm_acc_r01 FOREIGN KEY (mopid) REFERENCES psite_mop
(code);
ALTER TABLE psite_deliveryslip ADD CONSTRAINT
psite_deliveryslip_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_deliveryslip ADD CONSTRAINT
psite_deliveryslip_r02 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_deliveryslip ADD CONSTRAINT
psite_deliveryslip_r03 FOREIGN KEY (psite_posbill_code) REFERENCES psite_posbill
(code);
ALTER TABLE psite_deliveryslip ADD CONSTRAINT
psite_deliveryslip_r04 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_deliveryslip ADD CONSTRAINT
psite_deliveryslip_r05 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE psite_deliveryslipitem ADD CONSTRAINT
psite_deliveryslipitem_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_deliveryslipitem ADD CONSTRAINT
psite_deliveryslipitem_r02 FOREIGN KEY (psite_deliveryslip_code) REFERENCES psite_deliveryslip
(code);
ALTER TABLE psite_deliveryslipitem ADD CONSTRAINT
psite_deliveryslipitem_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_deliveryslipitem ADD CONSTRAINT
psite_deliveryslipitem_r04 FOREIGN KEY (ipsite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_deliveryslipitem ADD CONSTRAINT
psite_deliveryslipitem_r05 FOREIGN KEY (taxdetcode) REFERENCES fintaxdet
(taxdetcode);
ALTER TABLE psite_deliveryslipitem ADD CONSTRAINT
psite_deliveryslipitem_r06 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_deliveryslipitemvoid ADD CONSTRAINT
psite_deliveryslipitemvoid_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_deliveryslipitemvoid ADD CONSTRAINT
psite_deliveryslipitemvoid_r02 FOREIGN KEY (psite_deliveryslipvoid_code) REFERENCES psite_deliveryslipvoid
(code);
ALTER TABLE psite_deliveryslipitemvoid ADD CONSTRAINT
psite_deliveryslipitemvoid_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_deliveryslipitemvoid ADD CONSTRAINT
psite_deliveryslipitemvoid_r04 FOREIGN KEY (ipsite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_deliveryslipitemvoid ADD CONSTRAINT
psite_deliveryslipitemvoid_r05 FOREIGN KEY (taxdetcode) REFERENCES fintaxdet
(taxdetcode);
ALTER TABLE psite_deliveryslipitemvoid ADD CONSTRAINT
psite_deliveryslipitemvoid_r06 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_deliveryslipvoid ADD CONSTRAINT
psite_deliveryslipvoid_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_deliveryslipvoid ADD CONSTRAINT
psite_deliveryslipvoid_r02 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_deliveryslipvoid ADD CONSTRAINT
psite_deliveryslipvoid_r03 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE psite_discount ADD CONSTRAINT
psite_discount_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_discount ADD CONSTRAINT
psite_discount_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r01 FOREIGN KEY (psite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r02 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r03 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r04 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r05 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r06 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r07 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r08 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r09 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r10 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r11 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE psite_discountblocklist ADD CONSTRAINT
psite_discountblocklist_r12 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_docscheme ADD CONSTRAINT
psite_docscheme_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_docscheme ADD CONSTRAINT
psite_docscheme_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_docscheme_detail ADD CONSTRAINT
psite_docscheme_detail_r01 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_docscheme_detail ADD CONSTRAINT
psite_docscheme_detail_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_emrtransaction_log ADD CONSTRAINT
psite_emrtransaction_log_fk01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_event ADD CONSTRAINT
r_psev_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_event ADD CONSTRAINT
r_psev_eventtype FOREIGN KEY (eventtype) REFERENCES psite_event_type
(eventtype);
ALTER TABLE psite_event_archive ADD CONSTRAINT
psite_event_archive_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_event_archive ADD CONSTRAINT
psite_event_archive_r02 FOREIGN KEY (eventtype) REFERENCES psite_event_type
(eventtype);
ALTER TABLE psite_event_data ADD CONSTRAINT
r_psev_data_eventtype FOREIGN KEY (eventtype) REFERENCES psite_event_type
(eventtype);
ALTER TABLE psite_event_set_det ADD CONSTRAINT
event_set_fk FOREIGN KEY (event_set_code) REFERENCES psite_event_set
(code);
ALTER TABLE psite_event_tracking ADD CONSTRAINT
r_psev_tracking_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_event_tracking ADD CONSTRAINT
r_psev_tracking_eventtype FOREIGN KEY (eventtype) REFERENCES psite_event_type
(eventtype);
ALTER TABLE psite_event_tracking2 ADD CONSTRAINT
r_psev_tracking_admsite_code2 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_event_tracking2 ADD CONSTRAINT
r_psev_tracking_eventtype2 FOREIGN KEY (eventtype) REFERENCES psite_event_type
(eventtype);
ALTER TABLE psite_global_appuser ADD CONSTRAINT
psite_global_appuser_r01 FOREIGN KEY (ctname) REFERENCES admcity
(ctname);
ALTER TABLE psite_global_appuser ADD CONSTRAINT
psite_global_appuser_r02 FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE psite_global_appuser ADD CONSTRAINT
psite_global_appuser_r03 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE psite_global_appuser_assign ADD CONSTRAINT
psite_appuser_assign_r01 FOREIGN KEY (psite_global_appuser_id) REFERENCES psite_global_appuser
(id);
ALTER TABLE psite_global_appuser_assign ADD CONSTRAINT
psite_appuser_assign_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_global_appuser_assign ADD CONSTRAINT
psite_appuser_assign_r03 FOREIGN KEY (psite_global_role_id) REFERENCES psite_global_role
(id);
ALTER TABLE psite_global_appuser_assign ADD CONSTRAINT
psite_appuser_assign_r04 FOREIGN KEY (psite_global_localpolicy_id) REFERENCES psite_global_localpolicy
(id);
ALTER TABLE psite_global_localpolicy ADD CONSTRAINT
psite_global_localpolicy_r01 FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE psite_global_localpolicy ADD CONSTRAINT
psite_global_localpolicy_r02 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE psite_global_localpolicydetail ADD CONSTRAINT
psite_global_localpoldet_r01 FOREIGN KEY (localpolicyid) REFERENCES psite_global_localpolicy
(id);
ALTER TABLE psite_global_localpolicydetail ADD CONSTRAINT
psite_global_localpoldet_r02 FOREIGN KEY (sys_policysettingcode) REFERENCES psite_masterpolicy
(sys_policysettingcode);
ALTER TABLE psite_global_role ADD CONSTRAINT
psite_global_role_r01 FOREIGN KEY (localpolicyid) REFERENCES psite_global_localpolicy
(id);
ALTER TABLE psite_global_role ADD CONSTRAINT
psite_global_role_r02 FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE psite_global_role ADD CONSTRAINT
psite_global_role_r03 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE psite_global_rolemenu ADD CONSTRAINT
psite_global_rolemenu_r01 FOREIGN KEY (roleid) REFERENCES psite_global_role
(id);
ALTER TABLE psite_global_rolemenu ADD CONSTRAINT
psite_global_rolemenu_r02 FOREIGN KEY (mdmenuid) REFERENCES psite_mdmenu
(id);
ALTER TABLE psite_global_rolemenuoperation ADD CONSTRAINT
psite_global_rolemenuopr_r01 FOREIGN KEY (rolemenuid) REFERENCES psite_global_rolemenu
(id);
ALTER TABLE psite_global_rolemenuoperation ADD CONSTRAINT
psite_global_rolemenuopr_r02 FOREIGN KEY (mdappoperationid) REFERENCES psite_mdappoperation
(id);
ALTER TABLE psite_global_salesperson ADD CONSTRAINT
psite_global_salesperson_r01 FOREIGN KEY (ctname) REFERENCES admcity
(ctname);
ALTER TABLE psite_global_salesperson ADD CONSTRAINT
psite_global_salesperson_r02 FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE psite_global_salesperson ADD CONSTRAINT
psite_global_salesperson_r03 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE psite_grc ADD CONSTRAINT
psite_grc_r01 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_grc ADD CONSTRAINT
psite_grc_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_grc ADD CONSTRAINT
psite_grc_r03 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE psite_grc ADD CONSTRAINT
psite_grc_r04 FOREIGN KEY (invcode) REFERENCES salinvmain
(invcode);
ALTER TABLE psite_grc ADD CONSTRAINT
psite_grc_r06 FOREIGN KEY (psite_transit_loccode) REFERENCES invloc
(loccode);
ALTER TABLE psite_grc ADD CONSTRAINT
psite_grc_r07 FOREIGN KEY (store_loccode) REFERENCES invloc
(loccode);
ALTER TABLE psite_grc ADD CONSTRAINT
psite_grc_r08 FOREIGN KEY (rec_psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_grc ADD CONSTRAINT
psite_grc_r09 FOREIGN KEY (dam_psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_docscheme_code FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_psite_grt_code FOREIGN KEY (psite_grt_code) REFERENCES psite_grt
(code);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_repln_admsite_code FOREIGN KEY (repln_admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_transferin_glcode FOREIGN KEY (transferin_glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_transferin_slcode FOREIGN KEY (transferin_slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_transit_glcode FOREIGN KEY (transit_glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_transit_slcode FOREIGN KEY (transit_slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_transitdiff_glcode FOREIGN KEY (transitdiff_glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_grc ADD CONSTRAINT
r_psite_grc_transitdiff_slcode FOREIGN KEY (transitdiff_slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_grcchg ADD CONSTRAINT
psite_grcchg_r01 FOREIGN KEY (psite_grc_code) REFERENCES psite_grc
(code);
ALTER TABLE psite_grcchg ADD CONSTRAINT
psite_grcchg_r02 FOREIGN KEY (charge_code) REFERENCES salchg
(salchgcode);
ALTER TABLE psite_grcchgitem ADD CONSTRAINT
psite_grcchgitem_r01 FOREIGN KEY (psite_grc_code) REFERENCES psite_grc
(code);
ALTER TABLE psite_grcchgitem ADD CONSTRAINT
psite_grcchgitem_r02 FOREIGN KEY (psite_grcitem_code) REFERENCES psite_grcitem
(code);
ALTER TABLE psite_grcchgitem ADD CONSTRAINT
psite_grcchgitem_r03 FOREIGN KEY (charge_code) REFERENCES salchg
(salchgcode);
ALTER TABLE psite_grcitem ADD CONSTRAINT
psite_grcitem_r01 FOREIGN KEY (psite_grc_code) REFERENCES psite_grc
(code);
ALTER TABLE psite_grcitem ADD CONSTRAINT
psite_grcitem_r02 FOREIGN KEY (dccode) REFERENCES invdcmain
(dccode);
ALTER TABLE psite_grcitem ADD CONSTRAINT
psite_grcitem_r03 FOREIGN KEY (salinvdet_code) REFERENCES salinvdet
(code);
ALTER TABLE psite_grcitem ADD CONSTRAINT
psite_grcitem_r04 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_grcitem ADD CONSTRAINT
psite_grcitem_r05 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_grcitem ADD CONSTRAINT
psite_grcitem_r06 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_grcitem ADD CONSTRAINT
r_psite_grcitem_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_grcitem ADD CONSTRAINT
r_psite_grcitem_post_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_group ADD CONSTRAINT
psite_group_r01 FOREIGN KEY (parentcode) REFERENCES psite_group
(code);
ALTER TABLE psite_group ADD CONSTRAINT
psite_group_r02 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_group ADD CONSTRAINT
psite_group_r03 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_grt ADD CONSTRAINT
fk_psite_grt_cp_gstin_st_code FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
fk_psite_grt_ow_gstin_st_code FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r01 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r03 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r05 FOREIGN KEY (store_loccode) REFERENCES invloc
(loccode);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r06 FOREIGN KEY (psite_intransit_loccode) REFERENCES invloc
(loccode);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r07 FOREIGN KEY (repln_admou_code) REFERENCES admou
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r08 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r09 FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r10 FOREIGN KEY (return_pricelist_code) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE psite_grt ADD CONSTRAINT
psite_grt_r11 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
r_psite_grt_repln_admsite_code FOREIGN KEY (repln_admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_grt ADD CONSTRAINT
r_psite_grt_transferout_glcode FOREIGN KEY (transferout_glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_grt ADD CONSTRAINT
r_psite_grt_transferout_slcode FOREIGN KEY (transferout_slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_grt ADD CONSTRAINT
r_psite_grt_transit_glcode FOREIGN KEY (transit_glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_grt ADD CONSTRAINT
r_psite_grt_transit_slcode FOREIGN KEY (transit_slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_grtchg ADD CONSTRAINT
psite_grtchg_r01 FOREIGN KEY (psite_grt_code) REFERENCES psite_grt
(code);
ALTER TABLE psite_grtchg ADD CONSTRAINT
psite_grtchg_r02 FOREIGN KEY (charge_code) REFERENCES salchg
(salchgcode);
ALTER TABLE psite_grtchgitem ADD CONSTRAINT
psite_grtchgitem_r01 FOREIGN KEY (psite_grt_code) REFERENCES psite_grt
(code);
ALTER TABLE psite_grtchgitem ADD CONSTRAINT
psite_grtchgitem_r02 FOREIGN KEY (psite_grtitem_code) REFERENCES psite_grtitem
(code);
ALTER TABLE psite_grtchgitem ADD CONSTRAINT
psite_grtchgitem_r03 FOREIGN KEY (charge_code) REFERENCES salchg
(salchgcode);
ALTER TABLE psite_grtitem ADD CONSTRAINT
psite_grtitem_r01 FOREIGN KEY (psite_grt_code) REFERENCES psite_grt
(code);
ALTER TABLE psite_grtitem ADD CONSTRAINT
psite_grtitem_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_grtitem ADD CONSTRAINT
psite_grtitem_r03 FOREIGN KEY (salorddet_code) REFERENCES salorddet
(code);
ALTER TABLE psite_grtitem ADD CONSTRAINT
psite_grtitem_r04 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_grtitem ADD CONSTRAINT
r_psite_grtitem_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_grtitem ADD CONSTRAINT
r_psite_grtitem_post_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_localpolicy ADD CONSTRAINT
psite_localpolicy_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_localpolicy ADD CONSTRAINT
psite_localpolicy_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_localpolicydetail ADD CONSTRAINT
psite_localpolicydetail_r01 FOREIGN KEY (localpolicycode) REFERENCES psite_localpolicy
(code);
ALTER TABLE psite_localpolicydetail ADD CONSTRAINT
psite_localpolicydetail_r02 FOREIGN KEY (sys_policysettingcode) REFERENCES psite_masterpolicy
(sys_policysettingcode);
ALTER TABLE psite_masterpolicy ADD CONSTRAINT
psite_masterpolicy_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_masterpolicy ADD CONSTRAINT
psite_masterpolicy_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_mdmenu ADD CONSTRAINT
psite_mdmenu_r01 FOREIGN KEY (sys_mdmenuparentid) REFERENCES psite_mdmenu
(id);
ALTER TABLE psite_mdmenuappoperation ADD CONSTRAINT
psite_mdmenuappoperation_r01 FOREIGN KEY (sys_mdmenuid) REFERENCES psite_mdmenu
(id);
ALTER TABLE psite_mdmenuappoperation ADD CONSTRAINT
psite_mdmenuappoperation_r02 FOREIGN KEY (sys_mdappoperationid) REFERENCES psite_mdappoperation
(id);
ALTER TABLE psite_mdpluginhooks ADD CONSTRAINT
psite_mdpluginhooks_r01 FOREIGN KEY (plugintype_code) REFERENCES psite_mdplugintypes
(code);
ALTER TABLE psite_mop ADD CONSTRAINT
psite_mop_r01 FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE psite_mop ADD CONSTRAINT
psite_mop_r02 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_mop ADD CONSTRAINT
psite_mop_r03 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_mop_assign ADD CONSTRAINT
psite_mop_assign_r01 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE psite_mop_assign ADD CONSTRAINT
psite_mop_assign_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_mop_assign ADD CONSTRAINT
psite_mop_assign_r03 FOREIGN KEY (mop_glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_mop_assign ADD CONSTRAINT
psite_mop_assign_r04 FOREIGN KEY (mop_slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_packet ADD CONSTRAINT
psite_packet_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_packet ADD CONSTRAINT
psite_packet_r02 FOREIGN KEY (in_psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_packet ADD CONSTRAINT
psite_packet_r03 FOREIGN KEY (out_psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_packet ADD CONSTRAINT
psite_packet_r04 FOREIGN KEY (repln_admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_packet ADD CONSTRAINT
psite_packet_r05 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_packet ADD CONSTRAINT
r_psite_packet_rtcode FOREIGN KEY (salrtmain_rtcode) REFERENCES salrtmain
(rtcode);
ALTER TABLE psite_packetitem ADD CONSTRAINT
psite_packetitem_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_packetitem ADD CONSTRAINT
psite_packetitem_r02 FOREIGN KEY (salorddet_code) REFERENCES salorddet
(code);
ALTER TABLE psite_packetitem ADD CONSTRAINT
psite_packetitem_r03 FOREIGN KEY (salordmain_ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE psite_packetitem ADD CONSTRAINT
psite_packetitem_r04 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_plugin ADD CONSTRAINT
psite_plugin_r01 FOREIGN KEY (pluginvendor_code) REFERENCES psite_pluginvendor
(code);
ALTER TABLE psite_plugin ADD CONSTRAINT
psite_plugin_r02 FOREIGN KEY (plugintypes_code) REFERENCES psite_mdplugintypes
(code);
ALTER TABLE psite_pluginalloc ADD CONSTRAINT
psite_pluginalloc_r01 FOREIGN KEY (plugin_code) REFERENCES psite_plugin
(code);
ALTER TABLE psite_pluginalloc ADD CONSTRAINT
psite_pluginalloc_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_pluginalloc ADD CONSTRAINT
psite_pluginalloc_r03 FOREIGN KEY (pluginconfig_code) REFERENCES psite_pluginconfigrepo
(code);
ALTER TABLE psite_pluginconfigrepo ADD CONSTRAINT
psite_pluginconfigrepo_r01 FOREIGN KEY (plugin_code) REFERENCES psite_plugin
(code);
ALTER TABLE psite_pluginconfigrepo ADD CONSTRAINT
psite_pluginconfigrepo_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r02 FOREIGN KEY (store_loccode) REFERENCES invloc
(loccode);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r03 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r04 FOREIGN KEY (mpsite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r05 FOREIGN KEY (lpcardno) REFERENCES lpcard
(cardno);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r06 FOREIGN KEY (lpbenefit_discount_code) REFERENCES lpbenefit
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r07 FOREIGN KEY (lpbenefit_point_code) REFERENCES lpbenefit
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r08 FOREIGN KEY (lpcard_benefit_discount_code) REFERENCES lpcard_benefit_discount
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r09 FOREIGN KEY (lpcard_benefit_point_code) REFERENCES lpcard_benefit_point
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r10 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r11 FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r12 FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r13 FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_posbill ADD CONSTRAINT
psite_posbill_r14 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r02 FOREIGN KEY (store_loccode) REFERENCES invloc
(loccode);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r03 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r04 FOREIGN KEY (mpsite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r05 FOREIGN KEY (lpcardno) REFERENCES lpcard
(cardno);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r06 FOREIGN KEY (lpbenefit_discount_code) REFERENCES lpbenefit
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r07 FOREIGN KEY (lpbenefit_point_code) REFERENCES lpbenefit
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r08 FOREIGN KEY (lpcard_benefit_discount_code) REFERENCES lpcard_benefit_discount
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r09 FOREIGN KEY (lpcard_benefit_point_code) REFERENCES lpcard_benefit_point
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r10 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r11 FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r12 FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_posbill_park ADD CONSTRAINT
psite_posbill_park_r13 FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_posbillcn ADD CONSTRAINT
psite_posbillcn_r01 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_posbillcn ADD CONSTRAINT
psite_posbillcn_r03 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillcn ADD CONSTRAINT
psite_posbillcn_r04 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE psite_posbillcnadj ADD CONSTRAINT
psite_posbillcnadj_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillcnop ADD CONSTRAINT
psite_posbillcnop_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillcnop ADD CONSTRAINT
psite_posbillcnop_r02 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE psite_posbillcnop ADD CONSTRAINT
psite_posbillcnop_r03 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_posbillcnop ADD CONSTRAINT
psite_posbillcnop_r04 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_posbillcnvoid ADD CONSTRAINT
psite_posbillcnvoid_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillcnvoid ADD CONSTRAINT
psite_posbillcnvoid_r03 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE psite_posbilldn ADD CONSTRAINT
psite_posbilldn_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbilldn ADD CONSTRAINT
psite_posbilldn_r02 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_posbilldnop ADD CONSTRAINT
psite_posbilldnop_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbilldnop ADD CONSTRAINT
psite_posbilldnop_r02 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE psite_posbilldnop ADD CONSTRAINT
psite_posbilldnop_r03 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_posbilldnop ADD CONSTRAINT
psite_posbilldnop_r04 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_posbilldnvoid ADD CONSTRAINT
psite_posbilldnvoid_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillitem ADD CONSTRAINT
psite_posbillitem_r01 FOREIGN KEY (psite_posbill_code) REFERENCES psite_posbill
(code);
ALTER TABLE psite_posbillitem ADD CONSTRAINT
psite_posbillitem_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_posbillitem ADD CONSTRAINT
psite_posbillitem_r04 FOREIGN KEY (ipsite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_posbillitem ADD CONSTRAINT
psite_posbillitem_r06 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillitem ADD CONSTRAINT
psite_posbillitem_r09 FOREIGN KEY (orderitemid) REFERENCES invitem
(icode);
ALTER TABLE psite_posbillitem ADD CONSTRAINT
psite_posbillitem_r10 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT
psite_posbillitem_park_r01 FOREIGN KEY (psite_posbill_code) REFERENCES psite_posbill_park
(code);
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT
psite_posbillitem_park_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT
psite_posbillitem_park_r04 FOREIGN KEY (ipsite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT
psite_posbillitem_park_r06 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT
psite_posbillitem_park_r09 FOREIGN KEY (orderitemid) REFERENCES invitem
(icode);
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT
psite_posbillitem_park_r10 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_posbillitemreturn ADD CONSTRAINT
psite_posbillitemreturn_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillitemreturnvoid ADD CONSTRAINT
psite_pbitemreturnvoid_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillitemvoid ADD CONSTRAINT
psite_posbillitemvoid_r01 FOREIGN KEY (psite_posbillvoid_code) REFERENCES psite_posbillvoid
(code);
ALTER TABLE psite_posbillitemvoid ADD CONSTRAINT
psite_posbillitemvoid_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_posbillitemvoid ADD CONSTRAINT
psite_posbillitemvoid_r04 FOREIGN KEY (ipsite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_posbillitemvoid ADD CONSTRAINT
psite_posbillitemvoid_r06 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillitemvoid ADD CONSTRAINT
psite_posbillitemvoid_r07 FOREIGN KEY (orderitemid) REFERENCES invitem
(icode);
ALTER TABLE psite_posbillitemvoid ADD CONSTRAINT
psite_posbillitemvoid_r08 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_posbillmop ADD CONSTRAINT
posbillmop_r09 FOREIGN KEY (lpredemptiontoken_code) REFERENCES lpredemptiontoken
(code);
ALTER TABLE psite_posbillmop ADD CONSTRAINT
psite_posbillmop_r03 FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE psite_posbillmop ADD CONSTRAINT
psite_posbillmop_r06 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillmop ADD CONSTRAINT
psite_posbillmop_r07 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE psite_posbillmop ADD CONSTRAINT
psite_posbillmop_r08 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT
posbillmop_park_r09 FOREIGN KEY (lpredemptiontoken_code) REFERENCES lpredemptiontoken
(code);
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT
psite_posbillmop_park_r03 FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT
psite_posbillmop_park_r06 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT
psite_posbillmop_park_r07 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT
psite_posbillmop_park_r08 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE psite_posbillmopdeno ADD CONSTRAINT
psite_posbillmopdeno_r03 FOREIGN KEY (psite_posbillmop_code) REFERENCES psite_posbillmop
(code);
ALTER TABLE psite_posbillmopdeno ADD CONSTRAINT
psite_posbillmopdeno_r04 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillmopdeno ADD CONSTRAINT
psite_posbillmopdeno_r05 FOREIGN KEY (gvleaves_code) REFERENCES gvleaves
(code);
ALTER TABLE psite_posbillmopdenovoid ADD CONSTRAINT
psite_posbillmopdenovoid_r03 FOREIGN KEY (psite_posbillmopvoid_code) REFERENCES psite_posbillmopvoid
(code);
ALTER TABLE psite_posbillmopdenovoid ADD CONSTRAINT
psite_posbillmopdenovoid_r04 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillmopvoid ADD CONSTRAINT
posbillmop_r07 FOREIGN KEY (lpredemptiontoken_code) REFERENCES lpredemptiontoken
(code);
ALTER TABLE psite_posbillmopvoid ADD CONSTRAINT
psite_posbillmopvoid_r03 FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE psite_posbillmopvoid ADD CONSTRAINT
psite_posbillmopvoid_r04 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillmopvoid ADD CONSTRAINT
psite_posbillmopvoid_r05 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE psite_posbillmopvoid ADD CONSTRAINT
psite_posbillmopvoid_r06 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE psite_posbillvoid ADD CONSTRAINT
psite_posbillvoid_r03 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posbillvoid ADD CONSTRAINT
psite_posbillvoid_r04 FOREIGN KEY (mpsite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_posbillvoid ADD CONSTRAINT
psite_posbillvoid_r06 FOREIGN KEY (lpcardno) REFERENCES lpcard
(cardno);
ALTER TABLE psite_posbillvoid ADD CONSTRAINT
psite_posbillvoid_r07 FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_posbillvoid ADD CONSTRAINT
psite_posbillvoid_r11 FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE psite_posbillvoid ADD CONSTRAINT
psite_posbillvoid_r12 FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_posbillvoid ADD CONSTRAINT
psite_posbillvoid_r13 FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE psite_posdeprefbill ADD CONSTRAINT
psite_posdeprefbill_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posdeprefbill ADD CONSTRAINT
psite_posdeprefbill_r02 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_posdeprefbillvoid ADD CONSTRAINT
psite_posdeprefbillvoid_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posgvbill ADD CONSTRAINT
psite_posgvbill_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posgvbill ADD CONSTRAINT
psite_posgvbill_r02 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_posgvbill ADD CONSTRAINT
psite_posgvbill_r03 FOREIGN KEY (psite_discount_code) REFERENCES psite_discount
(code);
ALTER TABLE psite_posgvbilldetail ADD CONSTRAINT
psite_posgvbilldetail_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posgvbilldetail ADD CONSTRAINT
psite_posgvbilldetail_r02 FOREIGN KEY (gvleaves_code) REFERENCES gvleaves
(code);
ALTER TABLE psite_posorder ADD CONSTRAINT
psite_posorder_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posorder ADD CONSTRAINT
psite_posorder_r02 FOREIGN KEY (salordmain_ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE psite_posorder ADD CONSTRAINT
psite_posorder_r03 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_posordercancel ADD CONSTRAINT
psite_posordercancel_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posordercancel ADD CONSTRAINT
psite_posordercancel_r04 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_posorderitem ADD CONSTRAINT
psite_posorderitem_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posorderitem ADD CONSTRAINT
psite_posorderitem_r02 FOREIGN KEY (psite_posorder_code) REFERENCES psite_posorder
(code);
ALTER TABLE psite_posorderitem ADD CONSTRAINT
psite_posorderitem_r03 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE psite_pospaydrop ADD CONSTRAINT
psite_pospaydrop_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_pospaydrop ADD CONSTRAINT
psite_pospaydrop_r02 FOREIGN KEY (psite_possession_code) REFERENCES psite_possession
(code);
ALTER TABLE psite_pospaydrop ADD CONSTRAINT
psite_pospaydrop_r03 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_pospayinout ADD CONSTRAINT
psite_pospayinout_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_pospayinout ADD CONSTRAINT
psite_pospayinout_r02 FOREIGN KEY (psite_possession_code) REFERENCES psite_possession
(code);
ALTER TABLE psite_pospayinout ADD CONSTRAINT
psite_pospayinout_r03 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_pospaymop ADD CONSTRAINT
psite_pospaymop_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_pospaymop ADD CONSTRAINT
psite_pospaymop_r02 FOREIGN KEY (psite_possession_code) REFERENCES psite_possession
(code);
ALTER TABLE psite_pospaymop ADD CONSTRAINT
psite_pospaymop_r03 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE psite_pospaymopcount ADD CONSTRAINT
psite_pospaymopcount_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_pospaymopcount ADD CONSTRAINT
psite_pospaymopcount_r02 FOREIGN KEY (psite_pospaymop_code) REFERENCES psite_pospaymop
(code);
ALTER TABLE psite_pospaymopcount ADD CONSTRAINT
psite_pospaymopcount_r03 FOREIGN KEY (psite_possession_code) REFERENCES psite_possession
(code);
ALTER TABLE psite_posplugin_hook_map ADD CONSTRAINT
psite_posplugin_hook_map_r01 FOREIGN KEY (hooktype_code) REFERENCES psite_mdpluginhooks
(code);
ALTER TABLE psite_posplugin_hook_map ADD CONSTRAINT
psite_posplugin_hook_map_r02 FOREIGN KEY (plugin_code) REFERENCES psite_plugin
(code);
ALTER TABLE psite_posreprintbillaudit ADD CONSTRAINT
psite_posreprintbillaudit_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posreprintbillaudit ADD CONSTRAINT
psite_posreprintbillaudit_r02 FOREIGN KEY (psite_posbill_code) REFERENCES psite_posbill
(code);
ALTER TABLE psite_posreprintbillauditvoid ADD CONSTRAINT
psite_posrpnbillauditvoid_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posreprintbillauditvoid ADD CONSTRAINT
psite_posrpnbillauditvoid_r02 FOREIGN KEY (psite_posbillvoid_code) REFERENCES psite_posbillvoid
(code);
ALTER TABLE psite_possession ADD CONSTRAINT
psite_possession_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posstlm ADD CONSTRAINT
psite_posstlm_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posstlm ADD CONSTRAINT
psite_posstlm_r03 FOREIGN KEY (psite_reason_code) REFERENCES psite_reason
(code);
ALTER TABLE psite_posstlm ADD CONSTRAINT
psite_posstlm_r04 FOREIGN KEY (ho_settledby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_posstlmacc ADD CONSTRAINT
psite_posstlmacc_r01 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE psite_posstlmacc ADD CONSTRAINT
psite_posstlmacc_r02 FOREIGN KEY (psite_stlm_param_acc_code) REFERENCES psite_stlm_param_acc
(code);
ALTER TABLE psite_posstlmacc ADD CONSTRAINT
psite_posstlmacc_r03 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE psite_posstlmacc ADD CONSTRAINT
psite_posstlmacc_r04 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posstlmaudit_ho ADD CONSTRAINT
psite_posstlmaudit_ho_r01 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE psite_posstlmaudit_pos ADD CONSTRAINT
psite_posstlmaudit_pos_r01 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE psite_posstlmdetail ADD CONSTRAINT
psite_posstlmdetail_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posstlmdetail ADD CONSTRAINT
psite_posstlmdetail_r02 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE psite_posstlmdetail ADD CONSTRAINT
psite_posstlmdetail_r03 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE psite_posstlmdetail ADD CONSTRAINT
psite_posstlmdetail_r04 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE psite_posstlmoth ADD CONSTRAINT
psite_posstlmoth_r01 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE psite_posstlmoth ADD CONSTRAINT
psite_posstlmoth_r02 FOREIGN KEY (psite_stlm_param_oth_code) REFERENCES psite_stlm_param_oth
(code);
ALTER TABLE psite_posstlmoth ADD CONSTRAINT
psite_posstlmoth_r03 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posstlmsession ADD CONSTRAINT
psite_posstlmsession_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_posstlmsession ADD CONSTRAINT
psite_posstlmsession_r02 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE psite_posstlmsession ADD CONSTRAINT
psite_posstlmsession_r03 FOREIGN KEY (psite_possession_code) REFERENCES psite_possession
(code);
ALTER TABLE psite_promo_assign ADD CONSTRAINT
psite_promo_assign_allocby_fk FOREIGN KEY (allocatedby) REFERENCES appuser
(id);
ALTER TABLE psite_promo_assign ADD CONSTRAINT
psite_promo_assign_approvby_fk FOREIGN KEY (approvedby) REFERENCES appuser
(id);
ALTER TABLE psite_promo_assign ADD CONSTRAINT
psite_promo_assign_clby FOREIGN KEY (closedby) REFERENCES appuser
(id);
ALTER TABLE psite_promo_assign ADD CONSTRAINT
psite_promo_assign_master_fk FOREIGN KEY (promo_code) REFERENCES promo_master
(code);
ALTER TABLE psite_promo_assign ADD CONSTRAINT
psite_promo_assign_modby_fk FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE psite_promo_assign ADD CONSTRAINT
psite_promo_assign_site_fk FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_ptcbill ADD CONSTRAINT
psite_ptcbill_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_ptcbill ADD CONSTRAINT
psite_ptcbill_r02 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE psite_ptcbill ADD CONSTRAINT
psite_ptcbill_r03 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_ptcbillvoid ADD CONSTRAINT
psite_ptcbillvoid_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_ptcbillvoid ADD CONSTRAINT
psite_ptcbillvoid_r02 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE psite_ptchead ADD CONSTRAINT
psite_ptchead_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_ptchead ADD CONSTRAINT
psite_ptchead_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_ptchead_assign ADD CONSTRAINT
psite_ptchead_assign_r01 FOREIGN KEY (psite_ptchead_code) REFERENCES psite_ptchead
(code);
ALTER TABLE psite_ptchead_assign ADD CONSTRAINT
psite_ptchead_assign_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_ptchead_assign ADD CONSTRAINT
psite_ptchead_assign_r03 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_ptchead_assign ADD CONSTRAINT
psite_ptchead_assign_r04 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_reason ADD CONSTRAINT
psite_reason_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_reason ADD CONSTRAINT
psite_reason_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_salesperson_assign ADD CONSTRAINT
psite_salesperson_assign_r01 FOREIGN KEY (psite_global_salesperson_code) REFERENCES psite_global_salesperson
(code);
ALTER TABLE psite_salesperson_assign ADD CONSTRAINT
psite_salesperson_assign_r02 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_si_assign ADD CONSTRAINT
psite_si_assign_allocby_fk FOREIGN KEY (allocatedby) REFERENCES appuser
(id);
ALTER TABLE psite_si_assign ADD CONSTRAINT
psite_si_assign_approvby_fk FOREIGN KEY (approvedby) REFERENCES appuser
(id);
ALTER TABLE psite_si_assign ADD CONSTRAINT
psite_si_assign_clby FOREIGN KEY (closedby) REFERENCES appuser
(id);
ALTER TABLE psite_si_assign ADD CONSTRAINT
psite_si_assign_master_fk FOREIGN KEY (assortment_code) REFERENCES si_assortment
(code);
ALTER TABLE psite_si_assign ADD CONSTRAINT
psite_si_assign_modby_fk FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE psite_si_assign ADD CONSTRAINT
psite_si_assign_site_fk FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE psite_stfdoc ADD CONSTRAINT
psite_stfdoc_r01 FOREIGN KEY (in_psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_stfdoc ADD CONSTRAINT
psite_stfdoc_r02 FOREIGN KEY (out_psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE psite_stfdoc ADD CONSTRAINT
psite_stfdoc_r03 FOREIGN KEY (psite_docscheme_code) REFERENCES psite_docscheme
(code);
ALTER TABLE psite_stfitem ADD CONSTRAINT
psite_stfitem_r01 FOREIGN KEY (psite_stfdoc_code) REFERENCES psite_stfdoc
(code);
ALTER TABLE psite_stfitem ADD CONSTRAINT
psite_stfitem_r02 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT
psite_stlm_param_acc_r01 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT
psite_stlm_param_acc_r02 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT
psite_stlm_param_acc_r03 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT
psite_stlm_param_acc_r04 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_stlm_param_oth ADD CONSTRAINT
psite_stlm_param_oth_r01 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_stlm_param_oth ADD CONSTRAINT
psite_stlm_param_oth_r02 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE psite_web_event ADD CONSTRAINT
r_pswev_eventtype FOREIGN KEY (eventtype) REFERENCES psite_event_type
(eventtype);
ALTER TABLE pur_price_chart ADD CONSTRAINT
r_pur_price_chart_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pur_price_chart ADD CONSTRAINT
r_pur_price_chart_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE pur_price_chart ADD CONSTRAINT
r_pur_price_chart_last_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pur_price_chart ADD CONSTRAINT
r_pur_price_chart_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvchg ADD CONSTRAINT
r_purinvchg_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purinvchg ADD CONSTRAINT
r_purinvchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE purinvchg ADD CONSTRAINT
r_purinvchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvchg ADD CONSTRAINT
r_purinvchg_invcode FOREIGN KEY (invcode) REFERENCES purinvmain
(invcode);
ALTER TABLE purinvchg ADD CONSTRAINT
r_purinvchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvchg ADD CONSTRAINT
r_purinvchg_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purinvchg_item ADD CONSTRAINT
r_purinvchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purinvchg_item ADD CONSTRAINT
r_purinvchg_item_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvchg_item ADD CONSTRAINT
r_purinvchg_item_invcode FOREIGN KEY (invcode) REFERENCES purinvmain
(invcode);
ALTER TABLE purinvchg_item ADD CONSTRAINT
r_purinvchg_item_purinvdetcode FOREIGN KEY (purinvdet_code) REFERENCES purinvdet
(code);
ALTER TABLE purinvchg_item ADD CONSTRAINT
r_purinvchg_item_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvdet ADD CONSTRAINT
purinvdet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE purinvdet ADD CONSTRAINT
r_purinvdet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvdet ADD CONSTRAINT
r_purinvdet_grccode FOREIGN KEY (grccode) REFERENCES invgrcmain
(grccode);
ALTER TABLE purinvdet ADD CONSTRAINT
r_purinvdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE purinvdet ADD CONSTRAINT
r_purinvdet_invcode FOREIGN KEY (invcode) REFERENCES purinvmain
(invcode);
ALTER TABLE purinvdet ADD CONSTRAINT
r_purinvdet_invgrcdet_code FOREIGN KEY (invgrcdet_code) REFERENCES invgrcdet
(code);
ALTER TABLE purinvdet ADD CONSTRAINT
r_purinvdet_post_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvjrnchg ADD CONSTRAINT
purinvjrnchg_r01 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvjrnchg ADD CONSTRAINT
purinvjrnchg_r02 FOREIGN KEY (jrncode) REFERENCES purinvjrnmain
(jrncode);
ALTER TABLE purinvjrnchg ADD CONSTRAINT
purinvjrnchg_r03 FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purinvjrnchg ADD CONSTRAINT
purinvjrnchg_r04 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT
purinvjrnchg_item_r01 FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT
purinvjrnchg_item_r02 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT
purinvjrnchg_item_r03 FOREIGN KEY (jrncode) REFERENCES purinvjrnmain
(jrncode);
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT
purinvjrnchg_item_r04 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT
purinvjrnchg_item_r05 FOREIGN KEY (purinvjrndet_code) REFERENCES purinvjrndet
(code);
ALTER TABLE purinvjrndet ADD CONSTRAINT
purinvjrndet_r01 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE purinvjrndet ADD CONSTRAINT
purinvjrndet_r02 FOREIGN KEY (purinvdet_code) REFERENCES purinvdet
(code);
ALTER TABLE purinvjrndet ADD CONSTRAINT
purinvjrndet_r03 FOREIGN KEY (jrncode) REFERENCES purinvjrnmain
(jrncode);
ALTER TABLE purinvjrndet ADD CONSTRAINT
r_purinvjrndet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvjrndet ADD CONSTRAINT
r_purinvjrndet_post_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r02 FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r03 FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r04 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r05 FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r06 FOREIGN KEY (pglcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r07 FOREIGN KEY (jrnslcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r08 FOREIGN KEY (jrnglcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r09 FOREIGN KEY (purinvmain_code) REFERENCES purinvmain
(invcode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r10 FOREIGN KEY (admgstjrnreason_code) REFERENCES admgstjrnreason
(code);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r11 FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r12 FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r13 FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r14 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r15 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r16 FOREIGN KEY (last_modified_by) REFERENCES hrdemp
(ecode);
ALTER TABLE purinvjrnmain ADD CONSTRAINT
purinvjrnmain_r17 FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purinvmain ADD CONSTRAINT
fk_purinvmain_cp_gstin_st_code FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE purinvmain ADD CONSTRAINT
fk_purinvmain_ow_gstin_st_code FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE purinvmain ADD CONSTRAINT
purinvmain_r01 FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE purinvmain ADD CONSTRAINT
purinvmain_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE purinvmain ADD CONSTRAINT
purinvmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_admcurrency_code FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_laecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_pglcode FOREIGN KEY (pglcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_purtermcode FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_tdsglcode FOREIGN KEY (tdsglcode) REFERENCES fingl
(glcode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_tdsslcode FOREIGN KEY (tdsslcode) REFERENCES finsl
(slcode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_tdssrccode FOREIGN KEY (tdssrccode) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE purinvmain ADD CONSTRAINT
r_purinvmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purordchg ADD CONSTRAINT
r_purordchg_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purordchg ADD CONSTRAINT
r_purordchg_ordcode FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE purordchg_item ADD CONSTRAINT
r_purordchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purordchg_item ADD CONSTRAINT
r_purordchg_item_ordcode FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE purordchg_item ADD CONSTRAINT
r_purordchg_item_purorddetcode FOREIGN KEY (purorddet_code) REFERENCES purorddet
(code);
ALTER TABLE purordcnldet ADD CONSTRAINT
cnldet_setcodes_fk FOREIGN KEY (invsetmain_code) REFERENCES invsetmain
(setcode);
ALTER TABLE purordcnldet ADD CONSTRAINT
fk_purordcnldet_purorddet_code FOREIGN KEY (purorddet_code) REFERENCES purorddet
(code);
ALTER TABLE purordcnldet ADD CONSTRAINT
r_purordcnldet_cnlcode FOREIGN KEY (cnlcode) REFERENCES purordcnlmain
(cnlcode);
ALTER TABLE purordcnldet ADD CONSTRAINT
r_purordcnldet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE purordcnldet ADD CONSTRAINT
r_purordcnldet_ordcode FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE purordcnlmain ADD CONSTRAINT
r_purordcnlmain_admoucode FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE purordcnlmain ADD CONSTRAINT
r_purordcnlmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE purordcnlmain ADD CONSTRAINT
r_purordcnlmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purordcnlmain ADD CONSTRAINT
r_purordcnlmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purordcnlmain ADD CONSTRAINT
r_purordcnlmain_site_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE purordcnlmain ADD CONSTRAINT
r_purordcnlmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purorddet ADD CONSTRAINT
fk_purorddet_setcode FOREIGN KEY (invsetmain_code) REFERENCES invsetmain
(setcode);
ALTER TABLE purorddet ADD CONSTRAINT
purorddet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE purorddet ADD CONSTRAINT
r_purorddet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE purorddet ADD CONSTRAINT
r_purorddet_ordcode FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE purorddet_delivery ADD CONSTRAINT
r_purorddet_delv_podet_code FOREIGN KEY (purorddet_code) REFERENCES purorddet
(code);
ALTER TABLE purordmain ADD CONSTRAINT
fk_purordmain_intgcode FOREIGN KEY (intgcode) REFERENCES intgmain
(intgcode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_admcurrency_code FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_authorcode FOREIGN KEY (authorcode) REFERENCES hrdemp
(ecode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_laecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_mrchndsrcode FOREIGN KEY (mrchndsrcode) REFERENCES hrdemp
(ecode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_purtermcode FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_trpcode FOREIGN KEY (trpcode) REFERENCES finsl
(slcode);
ALTER TABLE purordmain ADD CONSTRAINT
r_purordmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purordschedule ADD CONSTRAINT
r_purordschedule_ordcode FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE purordset ADD CONSTRAINT
r01_purordset_ordcode FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE purordset ADD CONSTRAINT
r02_purordset_invsetmain_code FOREIGN KEY (invsetmain_code) REFERENCES invsetmain
(setcode);
ALTER TABLE purordshipdet ADD CONSTRAINT
fk_purordshipdet FOREIGN KEY (shipcode) REFERENCES purordshipmain
(shipcode);
ALTER TABLE purordshipdet ADD CONSTRAINT
invsetmain_setcode_fk FOREIGN KEY (invsetmain_code) REFERENCES invsetmain
(setcode);
ALTER TABLE purordshipdet ADD CONSTRAINT
r_purordshipdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE purordshipmain ADD CONSTRAINT
hrdemp_shipby_fk FOREIGN KEY (shipby) REFERENCES hrdemp
(ecode);
ALTER TABLE purordshipmain ADD CONSTRAINT
purordshipmain_cancelledby_fk FOREIGN KEY (cancelledby) REFERENCES hrdemp
(ecode);
ALTER TABLE purordshipmain ADD CONSTRAINT
purordshipmain_ordcode_fkey FOREIGN KEY (ordcode) REFERENCES purordmain
(ordcode);
ALTER TABLE purordshipmain ADD CONSTRAINT
r_purordshipmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE purordshipmain ADD CONSTRAINT
r_purordshipmain_trpcode FOREIGN KEY (trpcode) REFERENCES finsl
(slcode);
ALTER TABLE purordshipset ADD CONSTRAINT
invsetmain_code_fk FOREIGN KEY (invsetmain_code) REFERENCES invsetmain
(setcode);
ALTER TABLE purreqdet ADD CONSTRAINT
r_purreqdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE purreqdet ADD CONSTRAINT
r_purreqdet_reqcode FOREIGN KEY (reqcode) REFERENCES purreqmain
(reqcode);
ALTER TABLE purreqmain ADD CONSTRAINT
r_purreqmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purreqmain ADD CONSTRAINT
r_purreqmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purreqmain ADD CONSTRAINT
r_purreqmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purrtchg ADD CONSTRAINT
r_purrtchg_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purrtchg ADD CONSTRAINT
r_purrtchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE purrtchg ADD CONSTRAINT
r_purrtchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purrtchg ADD CONSTRAINT
r_purrtchg_rtcode FOREIGN KEY (rtcode) REFERENCES purrtmain
(rtcode);
ALTER TABLE purrtchg ADD CONSTRAINT
r_purrtchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purrtchg ADD CONSTRAINT
r_purrtchg_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purrtchg_item ADD CONSTRAINT
r_purrtchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purrtchg_item ADD CONSTRAINT
r_purrtchg_item_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purrtchg_item ADD CONSTRAINT
r_purrtchg_item_purrtdetcode FOREIGN KEY (purrtdet_code) REFERENCES purrtdet
(code);
ALTER TABLE purrtchg_item ADD CONSTRAINT
r_purrtchg_item_rtcode FOREIGN KEY (rtcode) REFERENCES purrtmain
(rtcode);
ALTER TABLE purrtchg_item ADD CONSTRAINT
r_purrtchg_item_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purrtdet ADD CONSTRAINT
purrtdet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE purrtdet ADD CONSTRAINT
r_purrtdet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purrtdet ADD CONSTRAINT
r_purrtdet_grtcode FOREIGN KEY (grtcode) REFERENCES invgrtmain
(grtcode);
ALTER TABLE purrtdet ADD CONSTRAINT
r_purrtdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE purrtdet ADD CONSTRAINT
r_purrtdet_invgrtdet_code FOREIGN KEY (invgrtdet_code) REFERENCES invgrtdet
(code);
ALTER TABLE purrtdet ADD CONSTRAINT
r_purrtdet_post_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purrtdet ADD CONSTRAINT
r_purrtdet_rtcode FOREIGN KEY (rtcode) REFERENCES purrtmain
(rtcode);
ALTER TABLE purrtmain ADD CONSTRAINT
fk_purrtmain_cp_gstin_st_code FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE purrtmain ADD CONSTRAINT
fk_purrtmain_ow_gstin_st_code FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE purrtmain ADD CONSTRAINT
purrtmain_r01 FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE purrtmain ADD CONSTRAINT
purrtmain_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE purrtmain ADD CONSTRAINT
purrtmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_admcurrency_code FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_laecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_pglcode FOREIGN KEY (pglcode) REFERENCES fingl
(glcode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_purtermcode FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purrtmain ADD CONSTRAINT
r_purrtmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purservice ADD CONSTRAINT
purservice_invhsnsacmain_code FOREIGN KEY (invhsnsacmain_code) REFERENCES invhsnsacmain
(code);
ALTER TABLE purservice ADD CONSTRAINT
r_purservice_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE purservice ADD CONSTRAINT
r_purservice_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE purservice ADD CONSTRAINT
r_purservicemain_taxcode FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE purservice ADD CONSTRAINT
r_pursrv_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE pursrv_schedule ADD CONSTRAINT
r_pursrv_sch_admsitecode FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE pursrv_schedule ADD CONSTRAINT
r_pursrv_sch_prsrvord_sch_code FOREIGN KEY (pursrvord_schedule_code) REFERENCES pursrvord_schedule
(code);
ALTER TABLE pursrv_schedule ADD CONSTRAINT
r_pursrv_sch_pursrvdt_cd FOREIGN KEY (pursrvdet_code) REFERENCES pursrvdet
(code);
ALTER TABLE pursrv_schedule ADD CONSTRAINT
r_pursrv_sch_pursrvorddt_cd FOREIGN KEY (pursrvorddet_code) REFERENCES pursrvorddet
(code);
ALTER TABLE pursrv_schedule ADD CONSTRAINT
r_pursrv_sch_pursrvordmn_cd FOREIGN KEY (pursrvmain_code) REFERENCES pursrvmain
(srvcode);
ALTER TABLE pursrv_schedule ADD CONSTRAINT
r_pursrv_sch_servicecd FOREIGN KEY (servicecode) REFERENCES purservice
(servicecode);
ALTER TABLE pursrvchg ADD CONSTRAINT
r_pursrvchg_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE pursrvchg ADD CONSTRAINT
r_pursrvchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE pursrvchg ADD CONSTRAINT
r_pursrvchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvchg ADD CONSTRAINT
r_pursrvchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvchg ADD CONSTRAINT
r_pursrvchg_srvcode FOREIGN KEY (srvcode) REFERENCES pursrvmain
(srvcode);
ALTER TABLE pursrvchg ADD CONSTRAINT
r_pursrvchg_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE pursrvchg_item ADD CONSTRAINT
r_pursrvchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE pursrvchg_item ADD CONSTRAINT
r_pursrvchg_item_detcode FOREIGN KEY (pursrvdet_code) REFERENCES pursrvdet
(code);
ALTER TABLE pursrvchg_item ADD CONSTRAINT
r_pursrvchg_item_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvchg_item ADD CONSTRAINT
r_pursrvchg_item_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvchg_item ADD CONSTRAINT
r_pursrvchg_item_srvcode FOREIGN KEY (srvcode) REFERENCES pursrvmain
(srvcode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_servicecode FOREIGN KEY (servicecode) REFERENCES purservice
(servicecode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_srvcode FOREIGN KEY (srvcode) REFERENCES pursrvmain
(srvcode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_taxcode FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_tdsglcode FOREIGN KEY (tdsglcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_tdsslcode FOREIGN KEY (tdsslcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE pursrvdet ADD CONSTRAINT
r_pursrvdet_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE pursrvjrnchg ADD CONSTRAINT
r_pursrvjrnchg_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE pursrvjrnchg ADD CONSTRAINT
r_pursrvjrnchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE pursrvjrnchg ADD CONSTRAINT
r_pursrvjrnchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvjrnchg ADD CONSTRAINT
r_pursrvjrnchg_jrncode FOREIGN KEY (jrncode) REFERENCES pursrvjrnmain
(jrncode);
ALTER TABLE pursrvjrnchg ADD CONSTRAINT
r_pursrvjrnchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvjrnchg ADD CONSTRAINT
r_pursrvjrnchg_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT
r_pursrvjrnchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT
r_pursrvjrnchg_item_detcode FOREIGN KEY (pursrvjrndet_code) REFERENCES pursrvjrndet
(code);
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT
r_pursrvjrnchg_item_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT
r_pursrvjrnchg_item_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvjrndet ADD CONSTRAINT
pursrvjrndet_pursrvdet_code FOREIGN KEY (pursrvdet_code) REFERENCES pursrvdet
(code);
ALTER TABLE pursrvjrndet ADD CONSTRAINT
r_pursrvjrndet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvjrndet ADD CONSTRAINT
r_pursrvjrndet_servicecode FOREIGN KEY (servicecode) REFERENCES purservice
(servicecode);
ALTER TABLE pursrvjrndet ADD CONSTRAINT
r_pursrvjrndet_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r02 FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r03 FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r04 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r05 FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r09 FOREIGN KEY (pursrvmain_code) REFERENCES pursrvmain
(srvcode);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r10 FOREIGN KEY (admgstjrnreason_code) REFERENCES admgstjrnreason
(code);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r11 FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r12 FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r13 FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r14 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r15 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r16 FOREIGN KEY (last_modified_by) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvjrnmain ADD CONSTRAINT
pursrvjrnmain_r17 FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvmain ADD CONSTRAINT
fk_pursrvmain_cp_gstin_st_code FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE pursrvmain ADD CONSTRAINT
fk_pursrvmain_ow_gstin_st_code FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE pursrvmain ADD CONSTRAINT
pursrvmain_ref_admsite_code FOREIGN KEY (ref_admsite_code) REFERENCES admsite
(code);
ALTER TABLE pursrvmain ADD CONSTRAINT
pursrvmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrv_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_admcurr_code FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_fintrdgrp_cd FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_jrncode FOREIGN KEY (jrncode) REFERENCES finjrnmain
(jrncode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_purtermcode FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_tdsglcode FOREIGN KEY (tdsglcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_tdsslcode FOREIGN KEY (tdsslcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_tdssrccode FOREIGN KEY (tdssrccode) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE pursrvmain ADD CONSTRAINT
r_pursrvmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE pursrvord_schedule ADD CONSTRAINT
r_pursrvord_sch_admsitecode FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE pursrvord_schedule ADD CONSTRAINT
r_pursrvord_sch_pursrvorddt_cd FOREIGN KEY (pursrvorddet_code) REFERENCES pursrvorddet
(code);
ALTER TABLE pursrvord_schedule ADD CONSTRAINT
r_pursrvord_sch_pursrvordmn_cd FOREIGN KEY (pursrvordmain_code) REFERENCES pursrvordmain
(ordcode);
ALTER TABLE pursrvord_schedule ADD CONSTRAINT
r_pursrvord_sch_servicecd FOREIGN KEY (servicecode) REFERENCES purservice
(servicecode);
ALTER TABLE pursrvord_schedule ADD CONSTRAINT
r_pursrvord_schedule_cnl_ecode FOREIGN KEY (cnl_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvordchg ADD CONSTRAINT
r_pursrvordchg_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE pursrvordchg ADD CONSTRAINT
r_pursrvordchg_ordcode FOREIGN KEY (pursrvordmain_code) REFERENCES pursrvordmain
(ordcode);
ALTER TABLE pursrvordchg_item ADD CONSTRAINT
r_pursrvordchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE pursrvordchg_item ADD CONSTRAINT
r_pursrvordchg_item_detcode FOREIGN KEY (pursrvorddet_code) REFERENCES pursrvorddet
(code);
ALTER TABLE pursrvordchg_item ADD CONSTRAINT
r_pursrvordchg_item_ordcode FOREIGN KEY (pursrvordmain_code) REFERENCES pursrvordmain
(ordcode);
ALTER TABLE pursrvorddet ADD CONSTRAINT
r_pursrvorddet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE pursrvorddet ADD CONSTRAINT
r_pursrvorddet_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvorddet ADD CONSTRAINT
r_pursrvorddet_taxcode FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE pursrvorddet ADD CONSTRAINT
r_pursrvorddt_pursrvordmn_code FOREIGN KEY (pursrvordmain_code) REFERENCES pursrvordmain
(ordcode);
ALTER TABLE pursrvorddet ADD CONSTRAINT
r_pursrvordmain_tdstypecode FOREIGN KEY (tdstypecode) REFERENCES fintdstype
(tdstypecode);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_admcurr_code FOREIGN KEY (admcurrency_code) REFERENCES admcurrency
(code);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_admstcd_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_authorcode FOREIGN KEY (authorcode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_fintrdgrp_cd FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_last_accecd FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_purtermcode FOREIGN KEY (purtermcode) REFERENCES purtermmain
(code);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_slcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_tdssrc_code FOREIGN KEY (tdssrc_code) REFERENCES fintdssrc
(tdssrccode);
ALTER TABLE pursrvordmain ADD CONSTRAINT
r_pursrvordmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE purtermdet ADD CONSTRAINT
r_purtermdet_chgcode FOREIGN KEY (chgcode) REFERENCES finchg
(chgcode);
ALTER TABLE purtermdet ADD CONSTRAINT
r_purtermdt_termmain_code FOREIGN KEY (purtermmain_code) REFERENCES purtermmain
(code);
ALTER TABLE purtermmain ADD CONSTRAINT
r_purtermmain_trdgrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE purtermmain ADD CONSTRAINT
r_termmain_purglcode FOREIGN KEY (purchase_glcode) REFERENCES fingl
(glcode);
ALTER TABLE purtermmain ADD CONSTRAINT
r_termmain_purretglcode FOREIGN KEY (purchase_return_glcode) REFERENCES fingl
(glcode);
ALTER TABLE purtermmain ADD CONSTRAINT
r_termmain_purretslcode FOREIGN KEY (purchase_return_slcode) REFERENCES finsl
(slcode);
ALTER TABLE purtermmain ADD CONSTRAINT
r_termmain_purslcode FOREIGN KEY (purchase_slcode) REFERENCES finsl
(slcode);
ALTER TABLE pv_filter_criteria_value ADD CONSTRAINT
pv_filter_criteria_value_r01 FOREIGN KEY (criteria_code) REFERENCES pv_filter_criteria
(code);
ALTER TABLE reportlayout ADD CONSTRAINT
reportlayout_r01 FOREIGN KEY (createdbyid) REFERENCES appuser
(id);
ALTER TABLE reportlayout ADD CONSTRAINT
reportlayout_r02 FOREIGN KEY (lastmodifiedbyid) REFERENCES appuser
(id);
ALTER TABLE reportlayoutdata ADD CONSTRAINT
reportlayoutdata_r01 FOREIGN KEY (layoutid) REFERENCES reportlayout
(layoutid);
ALTER TABLE retailordcancel ADD CONSTRAINT
retailordcancel_r01 FOREIGN KEY (ordcode) REFERENCES retailordmain
(ordcode);
ALTER TABLE retailorddet ADD CONSTRAINT
retailorddet_r01 FOREIGN KEY (ordcode) REFERENCES retailordmain
(ordcode);
ALTER TABLE retailordmain ADD CONSTRAINT
retailordmain_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE retailordmain ADD CONSTRAINT
retailordmain_r02 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE retailordmain ADD CONSTRAINT
retailordmain_r03 FOREIGN KEY (created_by) REFERENCES appuser
(id);
ALTER TABLE retailordmain ADD CONSTRAINT
retailordmain_r04 FOREIGN KEY (shipfrom_admsite_code) REFERENCES admsite
(code);
ALTER TABLE retailordmop ADD CONSTRAINT
retailordmop_r01 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE retailordmop ADD CONSTRAINT
retailordmop_r02 FOREIGN KEY (ordcode) REFERENCES retailordmain
(ordcode);
ALTER TABLE role ADD CONSTRAINT
r_role_profcode FOREIGN KEY (profcode) REFERENCES admprof
(profcode);
ALTER TABLE role ADD CONSTRAINT
role_r01 FOREIGN KEY (localpolicyid) REFERENCES psite_localpolicy
(code);
ALTER TABLE role ADD CONSTRAINT
role_r02 FOREIGN KEY (createdby) REFERENCES appuser
(id);
ALTER TABLE role ADD CONSTRAINT
role_r03 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE rolemenu ADD CONSTRAINT
rolemenu_r01 FOREIGN KEY (roleid) REFERENCES role
(id);
ALTER TABLE rolemenu ADD CONSTRAINT
rolemenu_r02 FOREIGN KEY (mdmenushortcode) REFERENCES mdmenu
(sys_shortcode);
ALTER TABLE rolemenuoperation ADD CONSTRAINT
rolemenuoperation_r01 FOREIGN KEY (rolemenuid) REFERENCES rolemenu
(id);
ALTER TABLE rolemenuoperation ADD CONSTRAINT
rolemenuoperation_r02 FOREIGN KEY (mdappoperationid) REFERENCES mdappoperation
(id);
ALTER TABLE salchg ADD CONSTRAINT
r_salchg_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE salchg ADD CONSTRAINT
r_salchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salchg ADD CONSTRAINT
r_salchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salchg ADD CONSTRAINT
r_salchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salcsdet ADD CONSTRAINT
r_salcsdet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salcsdet ADD CONSTRAINT
r_salcsdet_post_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salcsdet ADD CONSTRAINT
r_salcsdet_psite_stkpt_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE salcsdet ADD CONSTRAINT
salcsdet_r01 FOREIGN KEY (cscode) REFERENCES salcsmain
(cscode);
ALTER TABLE salcsdet ADD CONSTRAINT
salcsdet_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salcsdet ADD CONSTRAINT
salcsdet_r03 FOREIGN KEY (invpicklistmain_code) REFERENCES invpicklistmain
(code);
ALTER TABLE salcsdet ADD CONSTRAINT
salcsdet_r05 FOREIGN KEY (secondarysupplyparenticode) REFERENCES invitem
(icode);
ALTER TABLE salcsdet ADD CONSTRAINT
salcsdet_r06 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
r_salcsmain_site_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r02 FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r03 FOREIGN KEY (debtors_glcode) REFERENCES fingl
(glcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r04 FOREIGN KEY (consignment_glcode) REFERENCES fingl
(glcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r05 FOREIGN KEY (consignment_trnsfr_glcode) REFERENCES fingl
(glcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r06 FOREIGN KEY (consignment_trnsfr_slcode) REFERENCES finsl
(slcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r07 FOREIGN KEY (consignment_sales_glcode) REFERENCES fingl
(glcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r08 FOREIGN KEY (consignment_sales_slcode) REFERENCES finsl
(slcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r09 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r10 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r11 FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r12 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r13 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r14 FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r15 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r16 FOREIGN KEY (roundoff_glcode) REFERENCES fingl
(glcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r17 FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r18 FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r19 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r20 FOREIGN KEY (gds_entity_id) REFERENCES gds_entity
(entity_id);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r21 FOREIGN KEY (order_admsite_code) REFERENCES admsite
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r23 FOREIGN KEY (return_loccode) REFERENCES invloc
(loccode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r24 FOREIGN KEY (damaged_loccode) REFERENCES invloc
(loccode);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_r25 FOREIGN KEY (shipfrom_admsite_code) REFERENCES admsite
(code);
ALTER TABLE salcsmain ADD CONSTRAINT
salcsmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salcsmop ADD CONSTRAINT
salcsmop_r01 FOREIGN KEY (cscode) REFERENCES salcsmain
(cscode);
ALTER TABLE salcsmop ADD CONSTRAINT
salcsmop_r02 FOREIGN KEY (psite_mop_code) REFERENCES psite_mop
(code);
ALTER TABLE salcsmop ADD CONSTRAINT
salcsmop_r03 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salcsmop ADD CONSTRAINT
salcsmop_r04 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salcsmop ADD CONSTRAINT
salcsmop_r05 FOREIGN KEY (tender_master_code) REFERENCES tender_master
(code);
ALTER TABLE salinvchg ADD CONSTRAINT
r_salinvchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salinvchg ADD CONSTRAINT
r_salinvchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvchg ADD CONSTRAINT
r_salinvchg_invcode FOREIGN KEY (invcode) REFERENCES salinvmain
(invcode);
ALTER TABLE salinvchg ADD CONSTRAINT
r_salinvchg_salchgcode FOREIGN KEY (salchgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salinvchg ADD CONSTRAINT
r_salinvchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvchg_item ADD CONSTRAINT
r_salinvchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salinvchg_item ADD CONSTRAINT
r_salinvchg_item_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvchg_item ADD CONSTRAINT
r_salinvchg_item_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvchg_item ADD CONSTRAINT
r_salnvchg_itm_slnvdt_code FOREIGN KEY (salinvdet_code) REFERENCES salinvdet
(code);
ALTER TABLE salinvdet ADD CONSTRAINT
invcode_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE salinvdet ADD CONSTRAINT
r_salinvdet_dccode FOREIGN KEY (dccode) REFERENCES invdcmain
(dccode);
ALTER TABLE salinvdet ADD CONSTRAINT
r_salinvdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salinvdet ADD CONSTRAINT
r_salinvdet_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE salinvdet ADD CONSTRAINT
salinvdet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE salinvdet_consolidate ADD CONSTRAINT
r_saldet_cons_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salinvdet_consolidate ADD CONSTRAINT
r_saldet_cons_invcode FOREIGN KEY (invcode) REFERENCES salinvmain
(invcode);
ALTER TABLE salinvdet_consolidate ADD CONSTRAINT
r_saldet_cons_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE salinvjrnchg ADD CONSTRAINT
salinvjrnchg_r01 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvjrnchg ADD CONSTRAINT
salinvjrnchg_r02 FOREIGN KEY (jrncode) REFERENCES salinvjrnmain
(jrncode);
ALTER TABLE salinvjrnchg ADD CONSTRAINT
salinvjrnchg_r03 FOREIGN KEY (salchgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salinvjrnchg ADD CONSTRAINT
salinvjrnchg_r04 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT
salinvjrnchg_item_r01 FOREIGN KEY (chgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT
salinvjrnchg_item_r02 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT
salinvjrnchg_item_r03 FOREIGN KEY (jrncode) REFERENCES salinvjrnmain
(jrncode);
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT
salinvjrnchg_item_r04 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT
salinvjrnchg_item_r05 FOREIGN KEY (salinvjrndet_code) REFERENCES salinvjrndet
(code);
ALTER TABLE salinvjrndet ADD CONSTRAINT
r_salinvjrndet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvjrndet ADD CONSTRAINT
r_salinvjrndet_post_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvjrndet ADD CONSTRAINT
salinvjrndet_r01 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salinvjrndet ADD CONSTRAINT
salinvjrndet_r02 FOREIGN KEY (salinvdet_code) REFERENCES salinvdet
(code);
ALTER TABLE salinvjrndet ADD CONSTRAINT
salinvjrndet_r03 FOREIGN KEY (jrncode) REFERENCES salinvjrnmain
(jrncode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r02 FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r03 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r04 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r05 FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r06 FOREIGN KEY (pglcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r07 FOREIGN KEY (jrnslcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r08 FOREIGN KEY (jrnglcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r09 FOREIGN KEY (salinvmain_code) REFERENCES salinvmain
(invcode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r10 FOREIGN KEY (admgstjrnreason_code) REFERENCES admgstjrnreason
(code);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r11 FOREIGN KEY (saltermcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r12 FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r13 FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r14 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r15 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r16 FOREIGN KEY (last_modified_by) REFERENCES hrdemp
(ecode);
ALTER TABLE salinvjrnmain ADD CONSTRAINT
salinvjrnmain_r17 FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salinvmain ADD CONSTRAINT
fk_salinvmain_intgcode FOREIGN KEY (intgcode) REFERENCES intgmain
(intgcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_admou_code_in FOREIGN KEY (admou_code_in) REFERENCES admou
(code);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_laccess_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_pglcode FOREIGN KEY (pglcode) REFERENCES fingl
(glcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_pricelistcode FOREIGN KEY (pricelistcode) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_pslcode FOREIGN KEY (pslcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_saltermcode FOREIGN KEY (saltermcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_site_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_trpcode FOREIGN KEY (trpcode) REFERENCES finsl
(slcode);
ALTER TABLE salinvmain ADD CONSTRAINT
r_salinvmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salinvmain ADD CONSTRAINT
salinvmain_r01 FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE salinvmain ADD CONSTRAINT
salinvmain_r02 FOREIGN KEY (authorize_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salinvmain ADD CONSTRAINT
salinvmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salordchg ADD CONSTRAINT
r_salordchg_chgcode FOREIGN KEY (chgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salordchg ADD CONSTRAINT
r_salordchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salordchg ADD CONSTRAINT
r_salordchg_ordcode FOREIGN KEY (ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE salordchg ADD CONSTRAINT
r_salordchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salordchg_item ADD CONSTRAINT
r_salordchg_item_chgcode FOREIGN KEY (salchgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salordchg_item ADD CONSTRAINT
r_salordchg_item_det_code FOREIGN KEY (salorddet_code) REFERENCES salorddet
(code);
ALTER TABLE salordchg_item ADD CONSTRAINT
r_salordchg_item_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salordchg_item ADD CONSTRAINT
r_salordchg_item_ordcode FOREIGN KEY (ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE salordchg_item ADD CONSTRAINT
r_salordchg_item_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salordcnldet ADD CONSTRAINT
r_salordcnldet_cnlcode FOREIGN KEY (cnlcode) REFERENCES salordcnlmain
(cnlcode);
ALTER TABLE salordcnldet ADD CONSTRAINT
r_salordcnldet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salordcnldet ADD CONSTRAINT
r_salordcnldet_ordcode FOREIGN KEY (ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE salordcnldet ADD CONSTRAINT
r_salordcnldet_salorddet_code FOREIGN KEY (salorddet_code) REFERENCES salorddet
(code);
ALTER TABLE salordcnldet ADD CONSTRAINT
salordcnldet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE salordcnlmain ADD CONSTRAINT
r_salordcnlmain_admoucode FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE salordcnlmain ADD CONSTRAINT
r_salordcnlmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE salordcnlmain ADD CONSTRAINT
r_salordcnlmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salordcnlmain ADD CONSTRAINT
r_salordcnlmain_laccess_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salordcnlmain ADD CONSTRAINT
r_salordcnlmain_site_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE salordcnlmain ADD CONSTRAINT
r_salordcnlmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salorddet ADD CONSTRAINT
r_salorddet_chl_master_chlcode FOREIGN KEY (chl_master_chlcode) REFERENCES finsl
(slcode);
ALTER TABLE salorddet ADD CONSTRAINT
r_salorddet_chl_order_detailid FOREIGN KEY (chl_order_detailid) REFERENCES chl_mj_orderdetail
(orderlineid);
ALTER TABLE salorddet ADD CONSTRAINT
r_salorddet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salorddet ADD CONSTRAINT
r_salorddet_ordcode FOREIGN KEY (ordcode) REFERENCES salordmain
(ordcode);
ALTER TABLE salorddet ADD CONSTRAINT
salorddet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE salorddet ADD CONSTRAINT
salorddet_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE salordmain ADD CONSTRAINT
r_salmain_chl_master_chlcode FOREIGN KEY (chl_master_chlcode) REFERENCES chl_channelmaster
(code);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_authorcode FOREIGN KEY (authorcode) REFERENCES hrdemp
(ecode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_chl_orderid FOREIGN KEY (chl_orderid) REFERENCES chl_mj_order
(orderid);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_heldby FOREIGN KEY (heldby) REFERENCES hrdemp
(ecode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_last_access_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_pricelistcode FOREIGN KEY (pricelistcode) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_saltermcode FOREIGN KEY (saltermcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_site_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_trpcode FOREIGN KEY (trpcode) REFERENCES finsl
(slcode);
ALTER TABLE salordmain ADD CONSTRAINT
r_salordmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salordmain ADD CONSTRAINT
salordmain_r01 FOREIGN KEY (channel_code) REFERENCES finsl
(slcode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_ccode1 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_ccode2 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_ccode3 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_ccode4 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_ccode5 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_ccode6 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_dept_grpcode FOREIGN KEY (dept_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_div_grpcode FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_invart_code FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_listcode FOREIGN KEY (pricelistcode) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
r_salpricelistdet_sec_grpcode FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE salpricelistdet ADD CONSTRAINT
sys_c0038246 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE salpricelistmain ADD CONSTRAINT
r_salpricelistmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salpricelistmain ADD CONSTRAINT
r_salpricelistmain_last_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salreqdet ADD CONSTRAINT
r_salreqdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salreqdet ADD CONSTRAINT
r_salreqdet_reqcode FOREIGN KEY (reqcode) REFERENCES salreqmain
(reqcode);
ALTER TABLE salreqmain ADD CONSTRAINT
r_salreqmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salreqmain ADD CONSTRAINT
r_salreqmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salreqmain ADD CONSTRAINT
salreqmain_r01 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salrtchg ADD CONSTRAINT
r_salrtchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salrtchg ADD CONSTRAINT
r_salrtchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salrtchg ADD CONSTRAINT
r_salrtchg_rtcode FOREIGN KEY (rtcode) REFERENCES salrtmain
(rtcode);
ALTER TABLE salrtchg ADD CONSTRAINT
r_salrtchg_salchgcode FOREIGN KEY (salchgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salrtchg ADD CONSTRAINT
r_salrtchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salrtchg_item ADD CONSTRAINT
r_salrtchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salrtchg_item ADD CONSTRAINT
r_salrtchg_item_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salrtchg_item ADD CONSTRAINT
r_salrtchg_item_rtcode FOREIGN KEY (rtcode) REFERENCES salrtmain
(rtcode);
ALTER TABLE salrtchg_item ADD CONSTRAINT
r_salrtchg_item_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salrtchg_item ADD CONSTRAINT
r_salrtchg_itm_slrtdt_code FOREIGN KEY (salrtdet_code) REFERENCES salrtdet
(code);
ALTER TABLE salrtdet ADD CONSTRAINT
r_salrtdet_dccode FOREIGN KEY (dccode) REFERENCES invdcmain
(dccode);
ALTER TABLE salrtdet ADD CONSTRAINT
r_salrtdet_icode FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salrtdet ADD CONSTRAINT
r_salrtdet_rtcode FOREIGN KEY (rtcode) REFERENCES salrtmain
(rtcode);
ALTER TABLE salrtdet ADD CONSTRAINT
r_salrtdet_salinvdet_code FOREIGN KEY (salinvdet_code) REFERENCES salinvdet
(code);
ALTER TABLE salrtdet ADD CONSTRAINT
r_salrtdet_transout_invdetcode FOREIGN KEY (transferout_salinvdet_code) REFERENCES salinvdet
(code);
ALTER TABLE salrtdet ADD CONSTRAINT
salrtdet_excisemain_code_r01 FOREIGN KEY (excisemain_code) REFERENCES excisemain
(code);
ALTER TABLE salrtdet ADD CONSTRAINT
salrtdet_r02 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE salrtdet_consolidate ADD CONSTRAINT
r_saldet_cons_rtcode FOREIGN KEY (rtcode) REFERENCES salrtmain
(rtcode);
ALTER TABLE salrtmain ADD CONSTRAINT
fk_salrtmain_cp_gstin_st_code FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
fk_salrtmain_intgcode FOREIGN KEY (intgcode) REFERENCES intgmain
(intgcode);
ALTER TABLE salrtmain ADD CONSTRAINT
fk_salrtmain_ow_gstin_st_code FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_admou_code_in FOREIGN KEY (admou_code_in) REFERENCES admou
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_gatein_code FOREIGN KEY (invgatein_code) REFERENCES invgatein
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_inloccode FOREIGN KEY (inloccode) REFERENCES invloc
(loccode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_laccess_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_outloccode FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_pglcode FOREIGN KEY (pglcode) REFERENCES fingl
(glcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_pricelistcode FOREIGN KEY (pricelistcode) REFERENCES salpricelistmain
(pricelistcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_psite_grt_code FOREIGN KEY (psite_grt_code) REFERENCES psite_grt
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_pslcode FOREIGN KEY (pslcode) REFERENCES finsl
(slcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_saltermcode FOREIGN KEY (saltermcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_saltradegrp_code FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_site_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_transitdiff_glcode FOREIGN KEY (transitdiff_glcode) REFERENCES fingl
(glcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_transitdiff_slcode FOREIGN KEY (transitdiff_slcode) REFERENCES finsl
(slcode);
ALTER TABLE salrtmain ADD CONSTRAINT
r_salrtmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salrtmain ADD CONSTRAINT
salrtmain_r01 FOREIGN KEY (lgtcode) REFERENCES invlgtnote
(lgtcode);
ALTER TABLE salrtmain ADD CONSTRAINT
salrtmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salsrvchg ADD CONSTRAINT
r_salsrvchg_chgcode FOREIGN KEY (chgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salsrvchg ADD CONSTRAINT
r_salsrvchg_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salsrvchg ADD CONSTRAINT
r_salsrvchg_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salsrvchg ADD CONSTRAINT
r_salsrvchg_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salsrvchg ADD CONSTRAINT
r_salsrvchg_srvcode FOREIGN KEY (srvcode) REFERENCES salsrvmain
(srvcode);
ALTER TABLE salsrvchg_item ADD CONSTRAINT
r_salsrvchg_item_chgcode FOREIGN KEY (chgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE salsrvchg_item ADD CONSTRAINT
r_salsrvchg_item_detcode FOREIGN KEY (salsrvdet_code) REFERENCES salsrvdet
(code);
ALTER TABLE salsrvchg_item ADD CONSTRAINT
r_salsrvchg_item_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salsrvchg_item ADD CONSTRAINT
r_salsrvchg_item_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salsrvchg_item ADD CONSTRAINT
r_salsrvchg_item_srvcode FOREIGN KEY (srvcode) REFERENCES salsrvmain
(srvcode);
ALTER TABLE salsrvdet ADD CONSTRAINT
r_salsrvdet_glcode FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE salsrvdet ADD CONSTRAINT
r_salsrvdet_servicecode FOREIGN KEY (servicecode) REFERENCES purservice
(servicecode);
ALTER TABLE salsrvdet ADD CONSTRAINT
r_salsrvdet_slcode FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE salsrvdet ADD CONSTRAINT
r_salsrvdet_srvcode FOREIGN KEY (srvcode) REFERENCES salsrvmain
(srvcode);
ALTER TABLE salsrvdet ADD CONSTRAINT
r_salsrvdet_taxcode FOREIGN KEY (taxcode) REFERENCES fintaxmain
(taxcode);
ALTER TABLE salsrvmain ADD CONSTRAINT
fk_salsrvmain_cp_gstin_st_code FOREIGN KEY (cp_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE salsrvmain ADD CONSTRAINT
fk_salsrvmain_ow_gstin_st_code FOREIGN KEY (owner_gstin_state_code) REFERENCES admgststate
(code);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrv_admsite_code_owner FOREIGN KEY (admsite_code_owner) REFERENCES admsite
(code);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_admou_code FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_doccode FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_fintrdgrp_cd FOREIGN KEY (saltradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_formcode FOREIGN KEY (formcode) REFERENCES finform
(formcode);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_last_aecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_pcode FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_saltermcode FOREIGN KEY (saltermcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE salsrvmain ADD CONSTRAINT
r_salsrvmain_ycode FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salsrvmain ADD CONSTRAINT
salsrvmain_admsite_code FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE salsrvmain ADD CONSTRAINT
salsrvmain_release_ecode FOREIGN KEY (release_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salssdet ADD CONSTRAINT
r_salssdet_psite_stkpt_code FOREIGN KEY (psite_stockpoint_code) REFERENCES psite_stockpoint
(code);
ALTER TABLE salssdet ADD CONSTRAINT
salssdet_r01 FOREIGN KEY (sscode) REFERENCES salssmain
(sscode);
ALTER TABLE salssdet ADD CONSTRAINT
salssdet_r02 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE salssdet ADD CONSTRAINT
salssdet_r04 FOREIGN KEY (secondarysupplyparenticode) REFERENCES invitem
(icode);
ALTER TABLE salssdet ADD CONSTRAINT
salssdet_r05 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r01 FOREIGN KEY (doccode) REFERENCES admdocscheme
(doccode);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r02 FOREIGN KEY (pcode) REFERENCES finsl
(slcode);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r03 FOREIGN KEY (admou_code) REFERENCES admou
(code);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r04 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r05 FOREIGN KEY (outloccode) REFERENCES invloc
(loccode);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r06 FOREIGN KEY (ycode) REFERENCES admyear
(ycode);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r07 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r08 FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r15 FOREIGN KEY (psite_posstlm_code) REFERENCES psite_posstlm
(code);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r16 FOREIGN KEY (psite_customer_code) REFERENCES psite_customer
(code);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r17 FOREIGN KEY (gds_entity_id) REFERENCES gds_entity
(entity_id);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r18 FOREIGN KEY (order_admsite_code) REFERENCES admsite
(code);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r20 FOREIGN KEY (return_loccode) REFERENCES invloc
(loccode);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r21 FOREIGN KEY (damaged_loccode) REFERENCES invloc
(loccode);
ALTER TABLE salssmain ADD CONSTRAINT
salssmain_r22 FOREIGN KEY (shipfrom_admsite_code) REFERENCES admsite
(code);
ALTER TABLE saltermdet ADD CONSTRAINT
r_saltermdet_chgcode FOREIGN KEY (chgcode) REFERENCES salchg
(salchgcode);
ALTER TABLE saltermdet ADD CONSTRAINT
r_saltermdet_saltermcode FOREIGN KEY (saltermcode) REFERENCES saltermmain
(saltermcode);
ALTER TABLE saltermmain ADD CONSTRAINT
r_saltermmain_fintradegrp_code FOREIGN KEY (fintradegrp_code) REFERENCES fintradegrp
(code);
ALTER TABLE saltermmain ADD CONSTRAINT
r_saltermmain_termgrpcode FOREIGN KEY (termgrpcode) REFERENCES saltermgrp
(termgrpcode);
ALTER TABLE saltermmain ADD CONSTRAINT
r_termmain_salglcode FOREIGN KEY (sales_glcode) REFERENCES fingl
(glcode);
ALTER TABLE saltermmain ADD CONSTRAINT
r_termmain_salretglcode FOREIGN KEY (sales_return_glcode) REFERENCES fingl
(glcode);
ALTER TABLE saltermmain ADD CONSTRAINT
r_termmain_salretslcode FOREIGN KEY (sales_return_slcode) REFERENCES finsl
(slcode);
ALTER TABLE saltermmain ADD CONSTRAINT
r_termmain_salslcode FOREIGN KEY (sales_slcode) REFERENCES finsl
(slcode);
ALTER TABLE si_allocation_det ADD CONSTRAINT
si_alloc_det_alloc_code_r01 FOREIGN KEY (allocation_code) REFERENCES si_allocation
(code);
ALTER TABLE si_allocation_det ADD CONSTRAINT
si_alloc_det_allocby_r03 FOREIGN KEY (allocatedby) REFERENCES hrdemp
(ecode);
ALTER TABLE si_allocation_det ADD CONSTRAINT
si_alloc_det_apprby_r06 FOREIGN KEY (approvedby) REFERENCES hrdemp
(ecode);
ALTER TABLE si_allocation_det ADD CONSTRAINT
si_alloc_det_closedby_r05 FOREIGN KEY (closedby) REFERENCES hrdemp
(ecode);
ALTER TABLE si_allocation_det ADD CONSTRAINT
si_alloc_det_lastmodiby_r04 FOREIGN KEY (lastmodifiedby) REFERENCES hrdemp
(ecode);
ALTER TABLE si_assortment ADD CONSTRAINT
r_si_assortment_ecode FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE si_assortment ADD CONSTRAINT
r_si_assortment_la_ecode FOREIGN KEY (last_access_ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_artl_code_r05 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_ass_code_r01 FOREIGN KEY (assortment_code) REFERENCES si_assortment
(code);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_ccode1_r07 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_ccode2_r08 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_ccode3_r09 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_ccode4_r10 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_ccode5_r11 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_ccode6_r12 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_dept_grcd_r04 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_div_grcd_r02 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_icode_r06 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_asmt_excl_sec_grcd_r03 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE si_assortment_exclude ADD CONSTRAINT
si_assortment_exclude_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_artl_code_r05 FOREIGN KEY (invarticle_code) REFERENCES invarticle
(code);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_ass_code_r01 FOREIGN KEY (assortment_code) REFERENCES si_assortment
(code);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_ccode1_r07 FOREIGN KEY (ccode1) REFERENCES invcat1
(ccode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_ccode2_r08 FOREIGN KEY (ccode2) REFERENCES invcat2
(ccode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_ccode3_r09 FOREIGN KEY (ccode3) REFERENCES invcat3
(ccode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_ccode4_r10 FOREIGN KEY (ccode4) REFERENCES invcat4
(ccode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_ccode5_r11 FOREIGN KEY (ccode5) REFERENCES invcat5
(ccode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_ccode6_r12 FOREIGN KEY (ccode6) REFERENCES invcat6
(ccode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_dept_grcd_r04 FOREIGN KEY (department_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_div_grcd_r02 FOREIGN KEY (division_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_icode_r06 FOREIGN KEY (icode) REFERENCES invitem
(icode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_asmt_incl_sec_grcd_r03 FOREIGN KEY (section_grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE si_assortment_include ADD CONSTRAINT
si_assortment_include_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE tax_recalc_history ADD CONSTRAINT
tax_recalc_history_r01 FOREIGN KEY (admsite_code) REFERENCES admsite
(code);
ALTER TABLE tax_recalc_history ADD CONSTRAINT
tax_recalc_history_r02 FOREIGN KEY (createdby) REFERENCES hrdemp
(ecode);
ALTER TABLE temp_prd_rate_staging ADD CONSTRAINT
temp_prd_rate_staging_r01 FOREIGN KEY (invbatch_serial_code) REFERENCES invbatch_serial
(code);
ALTER TABLE tender_master ADD CONSTRAINT
tender_master_r01 FOREIGN KEY (createdbyid) REFERENCES appuser
(id);
ALTER TABLE tender_master ADD CONSTRAINT
tender_master_r02 FOREIGN KEY (lastmodifiedbyid) REFERENCES appuser
(id);
ALTER TABLE tender_master ADD CONSTRAINT
tender_master_r03 FOREIGN KEY (slcode) REFERENCES finsl
(slcode);
ALTER TABLE tender_master ADD CONSTRAINT
tender_master_r04 FOREIGN KEY (glcode) REFERENCES fingl
(glcode);
ALTER TABLE track_item_upd ADD CONSTRAINT
track_item_upd_r01 FOREIGN KEY (terminal) REFERENCES admterminal
(terminalname);
ALTER TABLE track_item_upd ADD CONSTRAINT
track_item_upd_r02 FOREIGN KEY (ecode) REFERENCES hrdemp
(ecode);
ALTER TABLE track_item_upd ADD CONSTRAINT
track_item_upd_r03 FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode);
ALTER TABLE udfconfigdetail ADD CONSTRAINT
udfconfigdetail_udfconfig_code FOREIGN KEY (tablename) REFERENCES udfconfig
(tablename);
ALTER TABLE udfparamlist ADD CONSTRAINT
fk_tablename FOREIGN KEY (tablename) REFERENCES udfconfig
(tablename);
ALTER TABLE user_api ADD CONSTRAINT
user_api_r01 FOREIGN KEY (user_code) REFERENCES appuser
(id);
ALTER TABLE user_api ADD CONSTRAINT
user_api_r02 FOREIGN KEY (api_code) REFERENCES mdapi
(code);
ALTER TABLE user_map_vendor ADD CONSTRAINT
r_umven_mapuser FOREIGN KEY (mapuser) REFERENCES hrdemp
(ecode);
ALTER TABLE user_map_vendor ADD CONSTRAINT
r_umven_vcode FOREIGN KEY (vendorcode) REFERENCES finsl
(slcode);
ALTER TABLE userlistpreffilter ADD CONSTRAINT
userlistpreffilter_r01 FOREIGN KEY (mdlistid) REFERENCES mdlist
(id);
ALTER TABLE userlistpreffilter ADD CONSTRAINT
userlistpreffilter_r02 FOREIGN KEY (appuserid) REFERENCES appuser
(id);
ALTER TABLE userlistpreffilter ADD CONSTRAINT
userlistpreffilter_r03 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE userlistprefsortorder ADD CONSTRAINT
userlistprefsortorder_r01 FOREIGN KEY (mdlistid) REFERENCES mdlist
(id);
ALTER TABLE userlistprefsortorder ADD CONSTRAINT
userlistprefsortorder_r02 FOREIGN KEY (appuserid) REFERENCES appuser
(id);
ALTER TABLE userlistprefsortorder ADD CONSTRAINT
userlistprefsortorder_r03 FOREIGN KEY (lastmodifiedby) REFERENCES appuser
(id);
ALTER TABLE web_print_preference ADD CONSTRAINT
web_print_preferdoc_mendcrpcd FOREIGN KEY (doc_menudocreport_code) REFERENCES menudocreport
(code);
ALTER TABLE web_print_preference ADD CONSTRAINT
web_printprefer_mdmenushrtcd FOREIGN KEY (mdmenushortcode) REFERENCES mdmenu
(sys_shortcode);
ALTER TABLE web_print_preference ADD CONSTRAINT
web_printprefer_userid FOREIGN KEY (user_id) REFERENCES hrdemp
(ecode);

--Check Constraint
ALTER TABLE admcity ADD CONSTRAINT c_admcity_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admcls ADD CONSTRAINT c_admcls_clstype CHECK ((clstype = ANY (ARRAY['C'::bpchar, 'S'::bpchar, 'J'::bpchar, 'A'::bpchar, 'T'::bpchar, 'D'::bpchar, 'O'::bpchar, 'E'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE admcls ADD CONSTRAINT c_admcls_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admcmp ADD CONSTRAINT c_admcmp_itemprefix CHECK (((itemprefix)::text <> 'S$'::text)) NOT VALID;
ALTER TABLE admcmpprof ADD CONSTRAINT c_admcmpprof_ageing_appl CHECK ((ageing_appl = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admcmpprof ADD CONSTRAINT c_admcmpprof_allrcv_entpartge CHECK ((allow_rcv_ent_partial_ge = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admcmpprof ADD CONSTRAINT c_admcmpprof_auto_issue_lr CHECK ((auto_issue_lr = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admcmpprof ADD CONSTRAINT c_admcmpprof_costing_method CHECK ((costing_method = ANY (ARRAY['L'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE admcmpprof ADD CONSTRAINT c_admcmpprof_isstrongpasenf CHECK ((isstrongpassenforced = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admcmpprof ADD CONSTRAINT c_admcmpprof_pasexpdays CHECK ((((passwordexpirydays)::numeric >= (1)::numeric) AND ((passwordexpirydays)::numeric <= (1999)::numeric)));
ALTER TABLE admcmpprof ADD CONSTRAINT c_admcmpprof_splititm_crdt CHECK ((split_item_creation_date = ANY (ARRAY['O'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE admcurrency ADD CONSTRAINT admcurrency_c01 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE admcurrency ADD CONSTRAINT admcurrency_c02 CHECK (((isbase)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE admcurrency ADD CONSTRAINT admcurrency_c03 CHECK (((show_in_millions)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE admdaybook ADD CONSTRAINT c_admdaybook_no_of_footfall CHECK ((COALESCE((no_of_footfall)::numeric, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE admdocreport ADD CONSTRAINT admdocreport_c01 CHECK ((default_document = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admdocreport ADD CONSTRAINT admdocreport_c02 CHECK ((default_output = ANY (ARRAY['PRV'::bpchar, 'PDF'::bpchar, 'RTF'::bpchar, 'HTM'::bpchar, 'PRN'::bpchar]))) NOT VALID;
ALTER TABLE admdocreport ADD CONSTRAINT admdocreport_c03 CHECK ((online_printing = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admdocreport ADD CONSTRAINT c_admdocreport_is_custom CHECK ((is_custom = ANY (ARRAY['S'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE admdocscheme ADD CONSTRAINT admdocscheme_c01 CHECK ((default_suffix = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admdocscheme ADD CONSTRAINT admdocscheme_c03 CHECK ((generation_interval = ANY (ARRAY['N'::bpchar, 'D'::bpchar, 'M'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admdocscheme ADD CONSTRAINT admdocscheme_c04 CHECK ((manual = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admdocscheme ADD CONSTRAINT admdocscheme_c06 CHECK ((suffix_attachment = ANY (ARRAY['N'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE admdocscheme ADD CONSTRAINT admdocscheme_c07 CHECK ((gstappl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar, 'C'::bpchar, 'D'::bpchar])));
ALTER TABLE admdocscheme ADD CONSTRAINT c_admdocscheme_gen_basis CHECK ((generation_basis = ANY (ARRAY['C'::bpchar, 'O'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE admfunction ADD CONSTRAINT c_admfunction_report_type CHECK ((report_type = ANY (ARRAY['S'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE admfunction ADD CONSTRAINT c_admfunction_type CHECK ((type = ANY (ARRAY['F'::bpchar, 'R'::bpchar, 'E'::bpchar]))) NOT VALID;
ALTER TABLE admfunction ADD CONSTRAINT c_online_printing_applicable CHECK ((online_printing_applicable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admgstin ADD CONSTRAINT admgstin_c01 CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admgstjrnreason ADD CONSTRAINT admgstjrnreason_c01 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admlet ADD CONSTRAINT c_admlet_cc CHECK ((cc = ANY (ARRAY['A'::bpchar, 'T'::bpchar]))) NOT VALID;
ALTER TABLE admlet ADD CONSTRAINT c_admlet_mergedata CHECK ((mergedata = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admlet ADD CONSTRAINT c_admlet_recpntadd CHECK ((recpntadd = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admlet ADD CONSTRAINT c_admlet_respon CHECK ((respon = ANY (ARRAY['E'::bpchar, 'D'::bpchar, 'O'::bpchar]))) NOT VALID;
ALTER TABLE admmenu ADD CONSTRAINT c_admmenu_fga_appl CHECK ((fga_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admmenu ADD CONSTRAINT c_admmenu_opn_store_site CHECK ((allow_entry_from_store_site = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admmenu ADD CONSTRAINT c_admmenu_type CHECK ((type = ANY (ARRAY['M'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE admou ADD CONSTRAINT c_admou_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admou_month ADD CONSTRAINT c_admou_month_cogs_rs CHECK ((cogs_run_status = ANY (ARRAY['P'::bpchar, 'F'::bpchar])));
ALTER TABLE admou_month ADD CONSTRAINT c_admou_month_fin_ms CHECK ((fin_month_status = ANY (ARRAY['O'::bpchar, 'P'::bpchar, 'C'::bpchar])));
ALTER TABLE admou_month ADD CONSTRAINT c_admou_month_icf_status CHECK ((((inv_month_status = 'O'::bpchar) AND (cogs_run_status = 'P'::bpchar) AND (fin_month_status = 'O'::bpchar)) OR ((inv_month_status = 'C'::bpchar) AND (cogs_run_status = 'F'::bpchar) AND (fin_month_status = 'O'::bpchar)) OR ((inv_month_status = 'C'::bpchar) AND (cogs_run_status = 'P'::bpchar) AND (fin_month_status = 'O'::bpchar)) OR ((inv_month_status = 'C'::bpchar) AND (cogs_run_status = 'F'::bpchar) AND (fin_month_status = 'C'::bpchar))));
ALTER TABLE admou_month ADD CONSTRAINT c_admou_month_inv_ms CHECK ((inv_month_status = ANY (ARRAY['O'::bpchar, 'P'::bpchar, 'C'::bpchar])));
ALTER TABLE admou_setting ADD CONSTRAINT c_admou_setting_iwd_stk_val_bs CHECK ((inward_stk_val_basis = ANY (ARRAY['F'::bpchar, 'T'::bpchar]))) NOT VALID;
ALTER TABLE admpriv ADD CONSTRAINT c_admpriv_del CHECK ((del = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admpriv ADD CONSTRAINT c_admpriv_edit CHECK ((edit = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admpriv ADD CONSTRAINT c_admpriv_save CHECK ((save = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admpriv ADD CONSTRAINT c_admpriv_see CHECK ((see = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprn_barcode ADD CONSTRAINT c_admprn_barcode_prn_type CHECK ((print_type = ANY (ARRAY['I'::bpchar, 'P'::bpchar, 'S'::bpchar, 'T'::bpchar, 'L'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT admprof_allow_alternate_jrc CHECK ((allow_alternate_jrc = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT admprof_allow_jobord_close CHECK ((allow_jobord_close = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_allow_pdc_entry_c04 CHECK ((allow_pdc_entry = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_allow_rt_change_jobord CHECK ((allow_ratechange_joborder = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_altjrc_bom_mandatory CHECK ((altjrc_bom_mandatory = ANY (ARRAY['I'::bpchar, 'S'::bpchar, 'W'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT admprof_authorize_joborder CHECK ((authorize_joborder = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_c01 CHECK ((allow_alternate_grc = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_c02 CHECK ((allow_alternate_dc = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_c05 CHECK ((adjust_mandatory_ap = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_c06 CHECK ((adjust_mandatory_prdn = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_c07 CHECK ((non_price_chart_items = ANY (ARRAY['I'::bpchar, 'W'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT admprof_c08 CHECK ((allow_all_misc_lr_operation = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT admprof_c09 CHECK ((allow_snd_itm_rate_upd = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT admprof_c10 CHECK ((allow_grcgrt_edit_postrelease = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT admprof_overreceipt_tol_cntrl CHECK ((overreceipt_tolerance_control = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT admprof_prod_bom_mandatory CHECK ((prod_bom_mandatory = ANY (ARRAY['I'::bpchar, 'S'::bpchar, 'W'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT c_admprof_03 CHECK ((allow_item_cost_view = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_adjust_mandatory_srt CHECK ((adjust_mandatory_srt = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_advance_ap CHECK ((allow_advance_ap = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_auto_pi_prdn CHECK ((allow_auto_pi_prdn = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_auto_si_to CHECK ((allow_auto_si_to = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_bkdt_pstkplan CHECK ((allow_bkdt_pstkplan_activation = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_catname_change CHECK ((allow_invcat_name_change = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_consignment_gr CHECK ((allow_consignment_grc = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_disc_delv CHECK ((allow_discount_delivery = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_disc_slsord CHECK ((allow_discount_salesorder = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_grc_against_po CHECK ((allow_grc_against_po = ANY (ARRAY['I'::bpchar, 'W'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_item_editing CHECK ((allow_item_editing = ANY (ARRAY['Y'::bpchar, 'N'::bpchar, 'R'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_multi_srt CHECK ((allow_multi_srt = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_pnd_com_prdjrc CHECK ((allow_advance_ap = ANY (ARRAY['N'::bpchar, 'Y'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_ratechange_dc CHECK ((allow_ratechange_delivery = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_ratechange_so CHECK ((allow_ratechange_salesorder = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_ratechange_sr CHECK ((allow_ratechange_salesreturn = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_revert CHECK ((allow_psite_grc_grt_revert = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_rtch_jobrec CHECK ((allow_ratechange_jobreceipt = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_selitem_in CHECK ((allow_selitem_in_phystk_entry = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_so_site_change CHECK ((allow_so_site_change = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_zerorate_dc CHECK ((allow_zerorate_delivery = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_allow_zerorate_so CHECK ((allow_zerorate_salesorder = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_alow_grt_create_mode CHECK ((allow_grt_create_mode = ANY (ARRAY['A'::bpchar, 'R'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_alw_rt_chng_grt_adhc CHECK ((allow_rate_change_grt_adhoc = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_alw_wizard_multi_grt CHECK ((allow_wizard_multi_grt = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_authorise_porder CHECK ((authorise_purchaseorder = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_authorise_psite_grc CHECK ((authorise_psite_grc = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_authorise_pso CHECK ((authorise_purchaseservice = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_authrorise_sorder CHECK ((authrorise_salesorder = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_blk_same_item_deli CHECK ((block_same_item_delivery = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_create_new_itemcode CHECK ((create_new_itemcode = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_credit_alert_sales CHECK ((credit_alert_sales = ANY (ARRAY['I'::bpchar, 'W'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_datacube_admin CHECK ((datacube_admin = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT c_admprof_fin_autorelease CHECK ((fin_autorelease = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_fin_canrelease CHECK ((fin_canrelease = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_fin_canrevert CHECK ((fin_canrevert = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_global_price_change CHECK ((allow_global_price_change = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_lock_cat1 CHECK ((lock_cat1 = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_lock_cat2 CHECK ((lock_cat2 = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_lock_cat3 CHECK ((lock_cat3 = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_lock_cat4 CHECK ((lock_cat4 = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_lock_cat5 CHECK ((lock_cat5 = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_lock_cat6 CHECK ((lock_cat6 = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_marginmm_alert CHECK ((margin_monitor_alert = ANY (ARRAY['I'::bpchar, 'W'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_misc_op_status CHECK ((misc_operation_status = ANY (ARRAY['I'::bpchar, 'R'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_negstock_alert CHECK ((negative_stock_alert = ANY (ARRAY['I'::bpchar, 'W'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_overdelivery_control CHECK ((overdelivery_control = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_overreceipt_control CHECK ((overreceipt_control = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_phystk_item_modify CHECK ((phystk_item_modify = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_po_item_duedt_modify CHECK ((po_item_duedt_modify = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT c_admprof_proc_autorelease CHECK ((proc_autorelease = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_proc_canrelease CHECK ((proc_canrelease = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_proc_canrevert CHECK ((proc_canrevert = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_sal_autorelease CHECK ((sal_autorelease = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_sal_canrelease CHECK ((sal_canrelease = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_admprof_sal_canrevert CHECK ((sal_canrevert = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_cdrule_override CHECK ((allow_cdrule_override = ANY (ARRAY['N'::bpchar, 'Y'::bpchar])));
ALTER TABLE admprof ADD CONSTRAINT c_allow_po_rate_change CHECK ((allow_po_rate_change = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_prdjrc_fgrate_update CHECK ((allow_prdjrc_fgrate_update = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_quick_setoff CHECK (((allow_quick_setoff)::text = ANY (ARRAY[('Y'::character varying)::text, ('N'::character varying)::text]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_sales_term_change CHECK ((allow_sales_term_change = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_selarticle_split CHECK ((allow_selarticle_split_item = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_selitem_in_dcadhoc CHECK ((allow_selitem_in_dcadhoc = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_site_change_delivery CHECK (((allow_site_change_delivery)::text = ANY (ARRAY[('Y'::character varying)::text, ('N'::character varying)::text]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_vendor_excess_payment CHECK ((allow_vendor_excess_payment = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_allow_zero_rate_jobord CHECK ((allow_zero_rate_jobord = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_authorize_inv_docs CHECK (((authorize_inv_docs)::text = ANY (ARRAY[('Y'::character varying)::text, ('N'::character varying)::text]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_auto_refresh_price_delivery CHECK (((auto_refresh_price_delivery)::text = ANY (ARRAY[('Y'::character varying)::text, ('N'::character varying)::text]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_auto_refresh_price_proc CHECK ((auto_refresh_price_procurement = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_manual_refresh_price_delvry CHECK (((manual_refresh_price_delivery)::text = ANY (ARRAY[('Y'::character varying)::text, ('N'::character varying)::text]))) NOT VALID;
ALTER TABLE admprof ADD CONSTRAINT c_purchase_invoice_mode CHECK ((purchase_invoice_mode = ANY (ARRAY['N'::bpchar, 'C'::bpchar, 'B'::bpchar])));
ALTER TABLE admrole ADD CONSTRAINT c_admrole_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT admsite_c02 CHECK ((pricetype = ANY (ARRAY['M'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT admsite_c03 CHECK ((pricefactor < (100)::numeric)) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT admsite_c04 CHECK (((iscentrallymanaged)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT admsite_c05 CHECK (((issalespersonmanaged)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT admsite_c06 CHECK (((isglobalposreturnallowed)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE admsite ADD CONSTRAINT admsite_c07 CHECK ((installation_type = ANY (ARRAY['ZPOS'::bpchar, 'GPOS'::bpchar, 'DPOS'::bpchar])));
ALTER TABLE admsite ADD CONSTRAINT admsite_c08 CHECK (((batch_selection_process)::text = ANY (ARRAY[('FEFO'::character varying)::text, ('LEFO'::character varying)::text])));
ALTER TABLE admsite ADD CONSTRAINT admsite_psite_c01 CHECK ((psite_ispublished = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_gatein_appl CHECK ((gatein_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_ispos CHECK ((ispos = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_ispromosend_blk CHECK ((ispromosend_blocked = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_issecondary CHECK ((issecondary = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_lgt_appl CHECK ((lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_out_lgt_appl CHECK ((out_lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_out_permit_appl CHECK ((out_permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_permit_appl CHECK ((permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_sitetype CHECK (((sitetype)::text = ANY (ARRAY[('OS-OO-CM'::character varying)::text, ('MS-OO-CM'::character varying)::text, ('MS-CO-CM'::character varying)::text, ('MS-CO-OM-TS'::character varying)::text, ('US-CO-CM'::character varying)::text, ('US-CO-OM-TS'::character varying)::text, ('US-CO-OM'::character varying)::text]))) NOT VALID;
ALTER TABLE admsite ADD CONSTRAINT c_admsite_tracksecondary CHECK (((((sitetype)::text = ANY (ARRAY[('US-CO-OM-TS'::character varying)::text, ('MS-CO-OM-TS'::character varying)::text])) AND (issecondary = 'Y'::bpchar)) OR (((sitetype)::text = ANY (ARRAY[('OS-OO-CM'::character varying)::text, ('MS-OO-CM'::character varying)::text, ('MS-CO-CM'::character varying)::text, ('US-CO-CM'::character varying)::text, ('US-CO-OM'::character varying)::text])) AND (issecondary = 'N'::bpchar))));
ALTER TABLE admsite ADD CONSTRAINT c_isbillingshippingsame CHECK ((isbillingshippingsame = ANY (ARRAY['N'::bpchar, 'Y'::bpchar])));
ALTER TABLE admsite ADD CONSTRAINT c_isbillingshippingsame_blank CHECK ((((isbillingshippingsame = 'Y'::bpchar) AND (ship_legal_name IS NULL) AND (ship_cinno IS NULL) AND (ship_address IS NULL) AND (ship_ctname IS NULL) AND (ship_pin IS NULL) AND (ship_oph1 IS NULL) AND (ship_oph2 IS NULL) AND (ship_oph3 IS NULL) AND (ship_rph1 IS NULL) AND (ship_mobile IS NULL) AND (ship_fax IS NULL) AND (ship_email1 IS NULL) AND (ship_email2 IS NULL) AND (ship_website IS NULL) AND (ship_contact_person IS NULL) AND (ship_cp_category_code IS NULL) AND (ship_cp_gstin_no IS NULL) AND (ship_cp_gstin_state_code IS NULL) AND (ship_cp_gstin_date IS NULL)) OR (isbillingshippingsame <> 'Y'::bpchar)));
ALTER TABLE admsite ADD CONSTRAINT c_reserve_inv CHECK ((reserve_inv = ANY (ARRAY['M'::bpchar, 'O'::bpchar, 'N'::bpchar])));
ALTER TABLE admsite ADD CONSTRAINT c_ship_cp_gstin_state_code CHECK (((((sitetype)::text !~~ '%OM%'::text) AND (isbillingshippingsame = 'Y'::bpchar)) OR ((sitetype)::text ~~ '%OM%'::text)));
ALTER TABLE admsite ADD CONSTRAINT check_datasync_mode CHECK ((datasyncmode = ANY (ARRAY['W'::bpchar, 'A'::bpchar])));
ALTER TABLE admsite_ou ADD CONSTRAINT admsite_ou_c01 CHECK ((return_rate_basis = ANY (ARRAY['N'::bpchar, 'L'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE admsite_ou ADD CONSTRAINT c_admsite_ou_gatein_appl CHECK ((gatein_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite_ou ADD CONSTRAINT c_admsite_ou_in_lgt_appl CHECK ((in_lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite_ou ADD CONSTRAINT c_admsite_ou_in_permit_appl CHECK ((in_permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite_ou ADD CONSTRAINT c_admsite_ou_out_lgt_appl CHECK ((out_lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite_ou ADD CONSTRAINT c_admsite_ou_out_permit_appl CHECK ((out_permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE admsite_ou ADD CONSTRAINT c_admsite_ou_pkt_creation_mode CHECK (((packet_creation_mode)::text = ANY (ARRAY[('Against'::character varying)::text, ('Adhoc'::character varying)::text, ('Policy'::character varying)::text])));
ALTER TABLE admsite_ou ADD CONSTRAINT c_admsite_ou_st_flw_trnst_rt CHECK (((strictly_follow_transit_route)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE admsqlreport ADD CONSTRAINT c_admsqlreport_title_basis CHECK ((title_basis = ANY (ARRAY['C'::bpchar, 'O'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE admsqlreport ADD CONSTRAINT c_admsqlreport_type CHECK ((type = ANY (ARRAY['L'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE admyear ADD CONSTRAINT c_admyear_dtfr_dtto CHECK ((dtfr <= dtto)) NOT VALID;
ALTER TABLE admyear ADD CONSTRAINT c_admyear_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE appuser ADD CONSTRAINT appuser_c01 CHECK ((allow_last_fy_day_mode = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE capillary_gv_sync_custom ADD CONSTRAINT c_status CHECK (((status = 'P'::bpchar) OR (status = 'S'::bpchar) OR (status = 'F'::bpchar)));
ALTER TABLE cogs_diff_posting ADD CONSTRAINT c_cogs_diff_posting_01 CHECK (((rate_hierarchy)::numeric = ANY (ARRAY[(1)::numeric, (2)::numeric, (3)::numeric, (4)::numeric, (5)::numeric])));
ALTER TABLE cogs_run_log ADD CONSTRAINT c_tablecogs_run_log_cogs_rs CHECK ((status = ANY (ARRAY['C'::bpchar, 'R'::bpchar, 'E'::bpchar, 'S'::bpchar])));
ALTER TABLE connected_app ADD CONSTRAINT connected_app_c01 CHECK ((status = ANY (ARRAY['E'::bpchar, 'D'::bpchar])));
ALTER TABLE connected_app ADD CONSTRAINT connected_app_c02 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE connected_app_assrt_exclude ADD CONSTRAINT connected_app_assrt_excl_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE connected_app_assrt_include ADD CONSTRAINT connected_app_assrt_incl_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE connected_app_channel ADD CONSTRAINT connected_app_channel_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE connected_app_customer ADD CONSTRAINT connected_app_customer_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE connected_app_expenseexception ADD CONSTRAINT connected_app_expenseexp_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE connected_app_site ADD CONSTRAINT connected_app_site_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE connected_app_site ADD CONSTRAINT connected_app_site_c02 CHECK (((order_processing_model)::text = ANY (ARRAY[('NON-WMS'::character varying)::text, ('WMS'::character varying)::text])));
ALTER TABLE connected_app_site ADD CONSTRAINT connected_app_site_c03 CHECK ((allocation_type = ANY (ARRAY['S'::bpchar, 'R'::bpchar])));
ALTER TABLE connected_app_tenderexception ADD CONSTRAINT connected_app_tenderexp_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE connected_app_transporter ADD CONSTRAINT connected_app_transporter_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE depthsnchangelog ADD CONSTRAINT c_depthsnchangelog_01 CHECK ((updbasis = ANY (ARRAY['N'::bpchar, 'A'::bpchar])));
ALTER TABLE dxsessionlog ADD CONSTRAINT check_log_datasync_mode CHECK ((datasyncmode = ANY (ARRAY['W'::bpchar, 'A'::bpchar])));
ALTER TABLE dxsessionlog ADD CONSTRAINT dxsessionlog_c01 CHECK ((runmode = ANY (ARRAY['M'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE dxsessionlog2 ADD CONSTRAINT dxsessionlog2_c01 CHECK ((runmode = ANY (ARRAY['M'::bpchar, 'A'::bpchar])));
ALTER TABLE excisedet ADD CONSTRAINT excisedet_basis_c01 CHECK ((basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE expense_master ADD CONSTRAINT expense_master_c01 CHECK (((isextinct)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE finchg ADD CONSTRAINT c_finchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_exclude_in_invoice CHECK ((exclude_in_invoice = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE finchg ADD CONSTRAINT c_finchg_gst_glcode CHECK ((((source = 'G'::bpchar) AND (glcode IS NULL)) OR (source <> 'G'::bpchar)));
ALTER TABLE finchg ADD CONSTRAINT c_finchg_gst_slcode CHECK ((((source = 'G'::bpchar) AND (slcode IS NULL)) OR (source <> 'G'::bpchar)));
ALTER TABLE finchg ADD CONSTRAINT c_finchg_include_in_cost CHECK ((include_in_cost = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_ischangeable CHECK ((is_changeable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE finchg ADD CONSTRAINT c_finchg_issystem CHECK ((issystem = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE finchg ADD CONSTRAINT c_finchg_istax CHECK ((istax = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_operation_level CHECK ((operation_level = ANY (ARRAY['H'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_roundoff CHECK ((roundoff = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE finchg ADD CONSTRAINT c_finchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE finchg ADD CONSTRAINT c_finchg_taxable CHECK ((taxable = ANY (ARRAY['T'::bpchar, 'S'::bpchar, 'O'::bpchar]))) NOT VALID;
ALTER TABLE finchqdet ADD CONSTRAINT c_finchqdet_stat CHECK ((stat = ANY (ARRAY['N'::bpchar, 'I'::bpchar, 'C'::bpchar, 'D'::bpchar]))) NOT VALID;
ALTER TABLE finchqdet ADD CONSTRAINT c_finchqdet_type CHECK ((type = ANY (ARRAY['A'::bpchar, 'B'::bpchar, 'U'::bpchar]))) NOT VALID;
ALTER TABLE finchqmain ADD CONSTRAINT c_finchqmain_bookno CHECK (((bookno)::numeric > (0)::numeric)) NOT VALID;
ALTER TABLE finchqmain ADD CONSTRAINT c_finchqmain_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fincost ADD CONSTRAINT c_fincost_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fincostop ADD CONSTRAINT fincostop_c01 CHECK ((((COALESCE(damount, (0)::numeric) >= (0)::numeric) AND (COALESCE(camount, (0)::numeric) = (0)::numeric)) OR ((COALESCE(damount, (0)::numeric) = (0)::numeric) AND (COALESCE(camount, (0)::numeric) >= (0)::numeric)))) NOT VALID;
ALTER TABLE fincosttag ADD CONSTRAINT c_fincosttag_damount_camount CHECK ((((COALESCE(damount, (0)::numeric) >= (0)::numeric) AND (COALESCE(camount, (0)::numeric) = (0)::numeric)) OR ((COALESCE(damount, (0)::numeric) = (0)::numeric) AND (COALESCE(camount, (0)::numeric) >= (0)::numeric))));
ALTER TABLE fincosttag ADD CONSTRAINT c_fincosttag_enttype CHECK ((enttype = ANY (ARRAY['JDC'::bpchar, 'JDD'::bpchar, 'JDJ'::bpchar, 'JMC'::bpchar, 'JMD'::bpchar, 'PIC'::bpchar, 'PIM'::bpchar, 'PRC'::bpchar, 'PRM'::bpchar, 'PSC'::bpchar, 'PSD'::bpchar, 'PSM'::bpchar, 'SIC'::bpchar, 'SIM'::bpchar, 'SRC'::bpchar, 'SRM'::bpchar, 'VDC'::bpchar, 'VDG'::bpchar, 'VDP'::bpchar, 'VMC'::bpchar, 'VMG'::bpchar, 'VMP'::bpchar, 'SSM'::bpchar, 'SSD'::bpchar, 'SSC'::bpchar, 'TFS'::bpchar, 'TFP'::bpchar, 'SCP'::bpchar, 'SRP'::bpchar, 'ARC'::bpchar, 'TFA'::bpchar, 'CTM'::bpchar, 'CRM'::bpchar, 'CSM'::bpchar, 'TOA'::bpchar, 'TIA'::bpchar, 'GVJ'::bpchar, 'PJN'::bpchar, 'JDT'::bpchar, 'CTC'::bpchar, 'CRC'::bpchar, 'SDM'::bpchar, 'SDC'::bpchar, 'SCC'::bpchar, 'SCM'::bpchar, 'PDC'::bpchar, 'PDM'::bpchar, 'PCM'::bpchar, 'PCC'::bpchar, 'PID'::bpchar, 'PRD'::bpchar, 'PDD'::bpchar, 'PCD'::bpchar, 'SID'::bpchar, 'CTD'::bpchar, 'SRD'::bpchar, 'SDD'::bpchar, 'SCD'::bpchar, 'CRD'::bpchar, 'CSD'::bpchar, 'TID'::bpchar, 'TOD'::bpchar, 'PJM'::bpchar, 'PJC'::bpchar, 'PJD'::bpchar, 'JDR'::bpchar, 'JMR'::bpchar, 'ROM'::bpchar])));
ALTER TABLE finform ADD CONSTRAINT c_finform_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fingl ADD CONSTRAINT c_fingl_costapp CHECK ((costapp = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fingl ADD CONSTRAINT c_fingl_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fingl ADD CONSTRAINT c_fingl_srctype CHECK ((srctype = ANY (ARRAY['C'::bpchar, 'B'::bpchar, 'R'::bpchar, 'G'::bpchar]))) NOT VALID;
ALTER TABLE fingl ADD CONSTRAINT c_fingl_type CHECK ((type = ANY (ARRAY['L'::bpchar, 'A'::bpchar, 'I'::bpchar, 'E'::bpchar]))) NOT VALID;
ALTER TABLE finglop ADD CONSTRAINT c_finglop_opdamt_opcamt CHECK ((((COALESCE(opdamt, (0)::numeric) >= (0)::numeric) AND (COALESCE(opcamt, (0)::numeric) = (0)::numeric)) OR ((COALESCE(opdamt, (0)::numeric) = (0)::numeric) AND (COALESCE(opcamt, (0)::numeric) >= (0)::numeric)))) NOT VALID;
ALTER TABLE finglop ADD CONSTRAINT finglop_c01 CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fingrp ADD CONSTRAINT c_fingrp_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fingrp ADD CONSTRAINT fingrp_c01 CHECK (((grpcode)::numeric <> (parcode)::numeric)) NOT VALID;
ALTER TABLE finjrndet ADD CONSTRAINT c_finjrndet_damount_camount CHECK ((((COALESCE(damount, (0)::numeric) >= (0)::numeric) AND (COALESCE(camount, (0)::numeric) = (0)::numeric)) OR ((COALESCE(damount, (0)::numeric) = (0)::numeric) AND (COALESCE(camount, (0)::numeric) >= (0)::numeric)))) NOT VALID;
ALTER TABLE finjrndet ADD CONSTRAINT c_finjrndet_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finjrndet ADD CONSTRAINT c_finjrndet_jrntype CHECK ((jrntype = ANY (ARRAY['J'::bpchar, 'D'::bpchar, 'C'::bpchar, 'T'::bpchar, 'R'::bpchar])));
ALTER TABLE finjrnmain ADD CONSTRAINT c_finjrnmain_damount_camount CHECK ((((COALESCE(damount, (0)::numeric) >= (0)::numeric) AND (COALESCE(camount, (0)::numeric) = (0)::numeric)) OR ((COALESCE(damount, (0)::numeric) = (0)::numeric) AND (COALESCE(camount, (0)::numeric) >= (0)::numeric)))) NOT VALID;
ALTER TABLE finjrnmain ADD CONSTRAINT c_finjrnmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE finjrnmain ADD CONSTRAINT c_finjrnmain_jrntype CHECK ((jrntype = ANY (ARRAY['J'::bpchar, 'D'::bpchar, 'C'::bpchar, 'T'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE finjrnmain ADD CONSTRAINT finjrnmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar])));
ALTER TABLE finopdoc ADD CONSTRAINT c_finopdoc_cda CHECK ((cash_discount_applicable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE finopdoc ADD CONSTRAINT c_finopdoc_enttype CHECK ((enttype = ANY (ARRAY['PIM'::bpchar, 'PSM'::bpchar, 'PRM'::bpchar, 'SIM'::bpchar, 'SRM'::bpchar, 'VDP'::bpchar, 'JMD'::bpchar, 'JMC'::bpchar])));
ALTER TABLE finpost ADD CONSTRAINT c_finpost_enttype CHECK ((enttype = ANY (ARRAY['JDC'::bpchar, 'JDD'::bpchar, 'JDJ'::bpchar, 'JMC'::bpchar, 'JMD'::bpchar, 'PIC'::bpchar, 'PIM'::bpchar, 'PRC'::bpchar, 'PRM'::bpchar, 'PSC'::bpchar, 'PSD'::bpchar, 'PSM'::bpchar, 'SIC'::bpchar, 'SIM'::bpchar, 'SRC'::bpchar, 'SRM'::bpchar, 'VDC'::bpchar, 'VDG'::bpchar, 'VDP'::bpchar, 'VMC'::bpchar, 'VMG'::bpchar, 'VMP'::bpchar, 'SSM'::bpchar, 'SSD'::bpchar, 'SSC'::bpchar, 'TFS'::bpchar, 'TFP'::bpchar, 'SCP'::bpchar, 'SRP'::bpchar, 'ARC'::bpchar, 'TFA'::bpchar, 'CTM'::bpchar, 'CRM'::bpchar, 'CSM'::bpchar, 'TOA'::bpchar, 'TIA'::bpchar, 'GVJ'::bpchar, 'PJN'::bpchar, 'JDT'::bpchar, 'CTC'::bpchar, 'CRC'::bpchar, 'SDM'::bpchar, 'SDC'::bpchar, 'SCC'::bpchar, 'SCM'::bpchar, 'PDC'::bpchar, 'PDM'::bpchar, 'PCM'::bpchar, 'PCC'::bpchar, 'PID'::bpchar, 'PRD'::bpchar, 'PDD'::bpchar, 'PCD'::bpchar, 'SID'::bpchar, 'CTD'::bpchar, 'SRD'::bpchar, 'SDD'::bpchar, 'SCD'::bpchar, 'CRD'::bpchar, 'CSD'::bpchar, 'TID'::bpchar, 'TOD'::bpchar, 'PJM'::bpchar, 'PJC'::bpchar, 'PJD'::bpchar, 'JDR'::bpchar, 'JMR'::bpchar, 'SSM'::bpchar, 'SSD'::bpchar, 'SSC'::bpchar, 'ROM'::bpchar])));
ALTER TABLE finpost ADD CONSTRAINT finpost_cd_appl CHECK ((cash_discount_applicable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE finpost ADD CONSTRAINT finpost_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar])));
ALTER TABLE finsl ADD CONSTRAINT c_finsl_allow_jobber_stkpt CHECK ((allow_jobber_stockpoint = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_bale_wise_lrqty CHECK ((bale_wise_lrqty = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_cash_dis_applicable CHECK ((cash_discount_applicable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_cvrule CHECK ((cvrule = ANY (ARRAY['L'::bpchar, 'O'::bpchar, 'B'::bpchar, 'N'::bpchar])));
ALTER TABLE finsl ADD CONSTRAINT c_finsl_due_date_basis CHECK ((due_date_basis = ANY (ARRAY['E'::bpchar, 'D'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_gatein_appl CHECK ((gatein_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_limit CHECK (("limit" = ANY (ARRAY['U'::bpchar, 'L'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_limit_wsp CHECK ((limit_wsp = ANY (ARRAY['U'::bpchar, 'L'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_out_lgt_appl CHECK ((out_lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_out_prmit_appl CHECK ((out_permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_prd_overdue_action CHECK ((prd_overdue_action = ANY (ARRAY['O'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_pricetype CHECK ((pricetype = ANY (ARRAY['M'::bpchar, 'W'::bpchar, 'C'::bpchar, 'L'::bpchar, 'R'::bpchar, 'B'::bpchar])));
ALTER TABLE finsl ADD CONSTRAINT c_finsl_pur_duedays CHECK (((pur_duedays)::numeric > (0)::numeric));
ALTER TABLE finsl ADD CONSTRAINT c_finsl_pur_price_chart_appl CHECK ((pur_price_chart_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_sale_post_method CHECK ((sale_post_method = ANY (ARRAY['I'::bpchar, 'E'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_saletype CHECK ((saletype = ANY (ARRAY['O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_ship_tracking_appl CHECK ((shipment_tracking_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_taxapp CHECK ((taxapp = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_tracksecondaryinv CHECK ((track_secondary_inventory = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT c_finsl_whether_consign CHECK ((whether_consignment = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl ADD CONSTRAINT finsl_is_appl_inv_num_for_gst CHECK ((appl_inv_num_for_gst = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE finsl ADD CONSTRAINT finsl_is_marketplace CHECK (((is_marketplace)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE finsl ADD CONSTRAINT finsl_recalculate_tax CHECK (((recalculate_tax)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE finsl ADD CONSTRAINT finsl_tds_app CHECK ((tds_app = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_gl ADD CONSTRAINT c_finsl_gl_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_gl_site ADD CONSTRAINT c_finsl_gl_site_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_loccode ADD CONSTRAINT c_finsl_loccode_is_default CHECK ((is_default = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou ADD CONSTRAINT c_finsl_ou_bale_wise_lrqty CHECK ((bale_wise_lrqty = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou ADD CONSTRAINT c_finsl_ou_gatein_appl CHECK ((gatein_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou ADD CONSTRAINT c_finsl_ou_lgt_appl CHECK ((lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou ADD CONSTRAINT c_finsl_ou_out_lgt_appl CHECK ((out_lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou ADD CONSTRAINT c_finsl_ou_out_prmit_appl CHECK ((out_permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou ADD CONSTRAINT c_finsl_ou_permit_appl CHECK ((permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou ADD CONSTRAINT c_finsl_ou_ship_tracking_appl CHECK ((shipment_tracking_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou_site ADD CONSTRAINT c_finsl_ou_st_flw_trnst_rt CHECK (((strictly_follow_transit_route)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE finsl_ou_site ADD CONSTRAINT c_finslouste_out_lgt_apl CHECK ((out_lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finsl_ou_site ADD CONSTRAINT c_finslouste_out_prmt_apl CHECK ((out_permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finslop ADD CONSTRAINT c_finslop_opdamt_opcamt CHECK ((((COALESCE(opdamt, (0)::numeric) >= (0)::numeric) AND (COALESCE(opcamt, (0)::numeric) = (0)::numeric)) OR ((COALESCE(opdamt, (0)::numeric) = (0)::numeric) AND (COALESCE(opcamt, (0)::numeric) >= (0)::numeric)))) NOT VALID;
ALTER TABLE finslop ADD CONSTRAINT finslop_c01 CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fintag ADD CONSTRAINT c_fintag_enttype1 CHECK ((enttype1 = ANY (ARRAY['JDC'::bpchar, 'JDD'::bpchar, 'JDJ'::bpchar, 'JMC'::bpchar, 'JMD'::bpchar, 'PIC'::bpchar, 'PIM'::bpchar, 'PRC'::bpchar, 'PRM'::bpchar, 'PSC'::bpchar, 'PSD'::bpchar, 'PSM'::bpchar, 'SIC'::bpchar, 'SIM'::bpchar, 'SRC'::bpchar, 'SRM'::bpchar, 'VDC'::bpchar, 'VDG'::bpchar, 'VDP'::bpchar, 'VMC'::bpchar, 'VMG'::bpchar, 'VMP'::bpchar, 'SSM'::bpchar, 'SSD'::bpchar, 'SSC'::bpchar, 'TFS'::bpchar, 'TFP'::bpchar, 'SCP'::bpchar, 'SRP'::bpchar, 'ARC'::bpchar, 'TFA'::bpchar, 'CTM'::bpchar, 'CRM'::bpchar, 'CSM'::bpchar, 'TOA'::bpchar, 'TIA'::bpchar, 'GVJ'::bpchar, 'PJN'::bpchar, 'JDT'::bpchar, 'CTC'::bpchar, 'CRC'::bpchar, 'SDM'::bpchar, 'SDC'::bpchar, 'SCC'::bpchar, 'SCM'::bpchar, 'PDC'::bpchar, 'PDM'::bpchar, 'PCM'::bpchar, 'PCC'::bpchar, 'PID'::bpchar, 'PRD'::bpchar, 'PDD'::bpchar, 'PCD'::bpchar, 'SID'::bpchar, 'CTD'::bpchar, 'SRD'::bpchar, 'SDD'::bpchar, 'SCD'::bpchar, 'CRD'::bpchar, 'CSD'::bpchar, 'TID'::bpchar, 'TOD'::bpchar, 'PJM'::bpchar, 'PJC'::bpchar, 'PJD'::bpchar, 'JDR'::bpchar, 'JMR'::bpchar])));
ALTER TABLE fintag ADD CONSTRAINT c_fintag_enttype2 CHECK ((enttype2 = ANY (ARRAY['JDC'::bpchar, 'JDD'::bpchar, 'JDJ'::bpchar, 'JMC'::bpchar, 'JMD'::bpchar, 'PIC'::bpchar, 'PIM'::bpchar, 'PRC'::bpchar, 'PRM'::bpchar, 'PSC'::bpchar, 'PSD'::bpchar, 'PSM'::bpchar, 'SIC'::bpchar, 'SIM'::bpchar, 'SRC'::bpchar, 'SRM'::bpchar, 'VDC'::bpchar, 'VDG'::bpchar, 'VDP'::bpchar, 'VMC'::bpchar, 'VMG'::bpchar, 'VMP'::bpchar, 'SSM'::bpchar, 'SSD'::bpchar, 'SSC'::bpchar, 'TFS'::bpchar, 'TFP'::bpchar, 'SCP'::bpchar, 'SRP'::bpchar, 'ARC'::bpchar, 'TFA'::bpchar, 'CTM'::bpchar, 'CRM'::bpchar, 'CSM'::bpchar, 'TOA'::bpchar, 'TIA'::bpchar, 'GVJ'::bpchar, 'PJN'::bpchar, 'JDT'::bpchar, 'CTC'::bpchar, 'CRC'::bpchar, 'SDM'::bpchar, 'SDC'::bpchar, 'SCC'::bpchar, 'SCM'::bpchar, 'PDC'::bpchar, 'PDM'::bpchar, 'PCM'::bpchar, 'PCC'::bpchar, 'PID'::bpchar, 'PRD'::bpchar, 'PDD'::bpchar, 'PCD'::bpchar, 'SID'::bpchar, 'CTD'::bpchar, 'SRD'::bpchar, 'SDD'::bpchar, 'SCD'::bpchar, 'CRD'::bpchar, 'CSD'::bpchar, 'TID'::bpchar, 'TOD'::bpchar, 'PJM'::bpchar, 'PJC'::bpchar, 'PJD'::bpchar, 'JDR'::bpchar, 'JMR'::bpchar])));
ALTER TABLE fintaxdet ADD CONSTRAINT c_fintaxdet_range_appl CHECK ((range_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fintaxdet ADD CONSTRAINT c_fintaxdet_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE fintaxdet ADD CONSTRAINT c_fintaxdet_tax_basis CHECK ((tax_basis = ANY (ARRAY['M'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fintaxmain ADD CONSTRAINT c_fintaxmain_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fintds_exception ADD CONSTRAINT c_fintds_exp_date CHECK ((dtfr <= dtto)) NOT VALID;
ALTER TABLE fintdsmain ADD CONSTRAINT c_fintdsmain_dtto_dtfr CHECK ((dtfr <= dtto)) NOT VALID;
ALTER TABLE fintdsmain ADD CONSTRAINT c_fintdsmain_tdsno CHECK (((tdsno)::numeric > (0)::numeric)) NOT VALID;
ALTER TABLE fintdssrc ADD CONSTRAINT fintdssrc_srctype CHECK ((srctype = ANY (ARRAY['C'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fintdstag ADD CONSTRAINT c_fintdstag_dtfr_dtto CHECK ((dtto >= dtfr)) NOT VALID;
ALTER TABLE fintdstype ADD CONSTRAINT fintdstype_c01 CHECK ((tdstype = ANY (ARRAY['G'::bpchar, 'S'::bpchar])));
ALTER TABLE fintdstype ADD CONSTRAINT fintdstype_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE fintradegrp ADD CONSTRAINT c_fintradegrp_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finvchdet ADD CONSTRAINT c_finvchdet_damount_camount CHECK ((((COALESCE(damount, (0)::numeric) >= (0)::numeric) AND (COALESCE(camount, (0)::numeric) = (0)::numeric)) OR ((COALESCE(damount, (0)::numeric) = (0)::numeric) AND (COALESCE(camount, (0)::numeric) >= (0)::numeric)))) NOT VALID;
ALTER TABLE finvchdet ADD CONSTRAINT c_finvchdet_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE finvchdet ADD CONSTRAINT c_finvchdet_paymode CHECK ((payment_mode = ANY (ARRAY['C'::bpchar, 'H'::bpchar, 'R'::bpchar])));
ALTER TABLE finvchdet ADD CONSTRAINT c_finvchdet_vchtype CHECK ((vchtype = ANY (ARRAY['C'::bpchar, 'P'::bpchar, 'G'::bpchar, 'B'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE finvchmain ADD CONSTRAINT c_finvchmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE finvchmain ADD CONSTRAINT c_finvchmain_isadvance CHECK ((isadvance = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE finvchmain ADD CONSTRAINT c_finvchmain_vchtype CHECK ((vchtype = ANY (ARRAY['C'::bpchar, 'P'::bpchar, 'G'::bpchar, 'B'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE finvchmain ADD CONSTRAINT finvchmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE gds2_event_md ADD CONSTRAINT gds2_event_md_c01 CHECK (((is_extinct)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE gds2_subscr ADD CONSTRAINT gds2_subscr_c01 CHECK (((is_custom_order)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE gds2_subscr ADD CONSTRAINT gds2_subscr_c02 CHECK (((is_enabled)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE gds_inbound_transactionlog ADD CONSTRAINT gds_inbound_trnsctionlog_type CHECK ((transaction_type = ANY (ARRAY['CS'::bpchar, 'SS'::bpchar])));
ALTER TABLE gst_docno_check ADD CONSTRAINT c_gst_chk_sdno CHECK ((upper((scheme_docno)::text) <> 'AUTOMATIC'::text));
ALTER TABLE gstupload_staging ADD CONSTRAINT gstupload_staging_return_c01 CHECK (((return)::text = ANY (ARRAY[('GSTR1'::character varying)::text, ('GSTR2'::character varying)::text, ('GSTR'::character varying)::text, ('MASTER'::character varying)::text])));
ALTER TABLE gvbooklet ADD CONSTRAINT gvbooklet_c01 CHECK ((status = ANY (ARRAY['N'::bpchar, 'A'::bpchar, 'U'::bpchar]))) NOT VALID;
ALTER TABLE gvleaves ADD CONSTRAINT gvleaves_c01 CHECK ((status = ANY (ARRAY['N'::bpchar, 'A'::bpchar, 'I'::bpchar, 'R'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE hrddept ADD CONSTRAINT c_hrddept_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE hrdemp ADD CONSTRAINT c_hrdemp_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE hrdemp ADD CONSTRAINT c_hrdemp_salesman CHECK ((salesman = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE hrdemp ADD CONSTRAINT c_hrdemp_usertype CHECK ((usertype = ANY (ARRAY['I'::bpchar, 'E'::bpchar]))) NOT VALID;
ALTER TABLE hrdemp_ou ADD CONSTRAINT c_hrdemp_ou_default_ou CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE hrdemp_ou ADD CONSTRAINT c_hrdemp_ou_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE int$class ADD CONSTRAINT int$class_c01 CHECK ((classtype = ANY (ARRAY['M'::bpchar, 'T'::bpchar]))) NOT VALID;
ALTER TABLE int$custparval ADD CONSTRAINT int$custparval_chk_period_type CHECK (((period_type)::text = ANY (ARRAY[('6-YW01'::character varying)::text, ('6-YW02'::character varying)::text, ('6-YW03'::character varying)::text, ('6-YW04'::character varying)::text, ('6-YW05'::character varying)::text, ('6-YW06'::character varying)::text, ('6-YW07'::character varying)::text, ('6-YW08'::character varying)::text, ('6-YW09'::character varying)::text, ('6-YW10'::character varying)::text, ('6-YW11'::character varying)::text, ('6-YW12'::character varying)::text, ('6-YW13'::character varying)::text, ('6-YW14'::character varying)::text, ('6-YW15'::character varying)::text, ('6-YW16'::character varying)::text, ('6-YW17'::character varying)::text, ('6-YW18'::character varying)::text, ('6-YW19'::character varying)::text, ('6-YW20'::character varying)::text, ('6-YW21'::character varying)::text, ('6-YW22'::character varying)::text, ('6-YW23'::character varying)::text, ('6-YW24'::character varying)::text, ('6-YW25'::character varying)::text, ('6-YW26'::character varying)::text, ('6-YW27'::character varying)::text, ('6-YW28'::character varying)::text, ('6-YW29'::character varying)::text, ('6-YW30'::character varying)::text, ('6-YW31'::character varying)::text, ('6-YW32'::character varying)::text, ('6-YW33'::character varying)::text, ('6-YW34'::character varying)::text, ('6-YW35'::character varying)::text, ('6-YW36'::character varying)::text, ('6-YW37'::character varying)::text, ('6-YW38'::character varying)::text, ('6-YW39'::character varying)::text, ('6-YW40'::character varying)::text, ('6-YW41'::character varying)::text, ('6-YW42'::character varying)::text, ('6-YW43'::character varying)::text, ('6-YW44'::character varying)::text, ('6-YW45'::character varying)::text, ('6-YW46'::character varying)::text, ('6-YW47'::character varying)::text, ('6-YW48'::character varying)::text, ('6-YW49'::character varying)::text, ('6-YW50'::character varying)::text, ('6-YW51'::character varying)::text, ('6-YW52'::character varying)::text, ('6-YW53'::character varying)::text, ('5-WK01'::character varying)::text, ('5-WK02'::character varying)::text, ('5-WK03'::character varying)::text, ('5-WK04'::character varying)::text, ('5-WK05'::character varying)::text, ('4-M01'::character varying)::text, ('4-M02'::character varying)::text, ('4-M03'::character varying)::text, ('4-M04'::character varying)::text, ('4-M05'::character varying)::text, ('4-M06'::character varying)::text, ('4-M07'::character varying)::text, ('4-M08'::character varying)::text, ('4-M09'::character varying)::text, ('4-M10'::character varying)::text, ('4-M11'::character varying)::text, ('4-M12'::character varying)::text, ('3-Q01'::character varying)::text, ('3-Q02'::character varying)::text, ('3-Q03'::character varying)::text, ('3-Q04'::character varying)::text, ('2-HY01'::character varying)::text, ('2-HY02'::character varying)::text, ('1-Y00'::character varying)::text]))) NOT VALID;
ALTER TABLE int$metadata ADD CONSTRAINT int$metadata_c01 CHECK (((datatype)::text = ANY (ARRAY[('CHAR'::character varying)::text, ('NUMBER'::character varying)::text, ('VARCHAR2'::character varying)::text, ('DATE'::character varying)::text]))) NOT VALID;
ALTER TABLE int$metadata ADD CONSTRAINT int$metadata_c02 CHECK ((mandatory = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE int$metadata ADD CONSTRAINT int$metadata_c03 CHECK ((lookup_available = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE int$metadata ADD CONSTRAINT int$metadata_c04 CHECK ((udfmandatoryvalidationregion = ANY (ARRAY['F'::bpchar, 'B'::bpchar])));
ALTER TABLE invageing ADD CONSTRAINT c_invageing_dtfr_dtto CHECK ((dtfr <= dtto)) NOT VALID;
ALTER TABLE invarticle ADD CONSTRAINT invarticle_c01 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invarticle ADD CONSTRAINT invarticle_c02 CHECK ((COALESCE(mrp, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invarticle ADD CONSTRAINT invarticle_c03 CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invarticle ADD CONSTRAINT invarticle_c04 CHECK ((COALESCE(wsp, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invarticle ADD CONSTRAINT invarticle_c05 CHECK ((item_management_mode = ANY (ARRAY['I'::bpchar, 'S'::bpchar, 'B'::bpchar])));
ALTER TABLE invarticle ADD CONSTRAINT invarticle_c06 CHECK ((price_management = ANY (ARRAY['I'::bpchar, 'B'::bpchar])));
ALTER TABLE invarticle ADD CONSTRAINT invarticle_c07 CHECK ((manage_expiry = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invarticle ADD CONSTRAINT invarticle_c08 CHECK ((validity_mode = ANY (ARRAY['D'::bpchar, 'M'::bpchar, 'Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invattr1 ADD CONSTRAINT invattr1_c01 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invattr2 ADD CONSTRAINT invattr2_c01 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invattr3 ADD CONSTRAINT invattr3_c01 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invattr4 ADD CONSTRAINT invattr4_c01 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invattr5 ADD CONSTRAINT invattr5_c01 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invattr6 ADD CONSTRAINT invattr6_c01 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invbatch_serial ADD CONSTRAINT invbatch_serial_c01 CHECK ((batch_serial_mode = ANY (ARRAY['B'::bpchar, 'S'::bpchar])));
ALTER TABLE invbingrp ADD CONSTRAINT invbingrp_c01 CHECK (((ext)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE invbingrp ADD CONSTRAINT invbingrp_c02 CHECK (((grpcode)::numeric <> (parcode)::numeric));
ALTER TABLE invbinstock_onhand ADD CONSTRAINT invbinstock_onhand_c01 CHECK ((stock_on_hand >= (0)::numeric));
ALTER TABLE invbinstock_onhand ADD CONSTRAINT invbinstock_onhand_c02 CHECK ((reserved_stock >= (0)::numeric));
ALTER TABLE invbinstock_onhand ADD CONSTRAINT invbinstock_onhand_c03 CHECK ((effective_stock >= (0)::numeric));
ALTER TABLE invbinstock_onhand ADD CONSTRAINT invbinstock_onhand_c04 CHECK ((effective_stock = (stock_on_hand - reserved_stock)));
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT invbinstock_onhand_serial_c01 CHECK ((stock_on_hand >= (0)::numeric));
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT invbinstock_onhand_serial_c02 CHECK ((reserved_stock >= (0)::numeric));
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT invbinstock_onhand_serial_c03 CHECK ((effective_stock >= (0)::numeric));
ALTER TABLE invbinstock_onhand_serial ADD CONSTRAINT invbinstock_onhand_serial_c04 CHECK ((effective_stock = (stock_on_hand - reserved_stock)));
ALTER TABLE invcat1 ADD CONSTRAINT c_invcat1_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invcat2 ADD CONSTRAINT c_invcat2_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invcat3 ADD CONSTRAINT c_invcat3_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invcat4 ADD CONSTRAINT c_invcat4_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invcat5 ADD CONSTRAINT c_invcat5_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invcat6 ADD CONSTRAINT c_invcat6_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invcostadj ADD CONSTRAINT invcostadj_c01 CHECK ((source = ANY (ARRAY['A'::bpchar, 'M'::bpchar])));
ALTER TABLE invdcdet ADD CONSTRAINT c_invdcdet_isqty CHECK ((COALESCE(isqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invdcdet ADD CONSTRAINT c_invdcdet_main_status CHECK ((((COALESCE(invdcmain_status, 'P'::bpchar) = 'C'::bpchar) AND (ordcode IS NULL) AND (salorddet_code IS NULL)) OR (COALESCE(invdcmain_status, 'P'::bpchar) <> 'C'::bpchar))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_disc_basis CHECK ((discount_basis = ANY (ARRAY['B'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_disc_mode CHECK (((discount_mode IS NULL) OR (discount_mode = ANY (ARRAY['U'::bpchar, 'D'::bpchar])))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_doc_status CHECK ((doc_status = ANY (ARRAY['C'::bpchar, 'O'::bpchar]))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_entry_mode CHECK ((entry_mode = ANY (ARRAY['A'::bpchar, 'O'::bpchar, 'R'::bpchar])));
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_incl_vat_in_dist CHECK ((incl_vat_in_dist = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_isreceived CHECK ((transferin_isreceived = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_pricetype CHECK ((pricetype = ANY (ARRAY['M'::bpchar, 'W'::bpchar, 'C'::bpchar, 'L'::bpchar, 'R'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_saletype CHECK ((saletype = ANY (ARRAY['O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE invdcmain ADD CONSTRAINT c_invdcmain_status CHECK ((status = ANY (ARRAY['P'::bpchar, 'I'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE invgatein ADD CONSTRAINT c_invgatein_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE invgatein ADD CONSTRAINT invgatein_c01 CHECK ((COALESCE(gateinqty, (0)::numeric) >= COALESCE(tagqty, (0)::numeric)));
ALTER TABLE invgrcchg ADD CONSTRAINT c_invgrcchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE invgrcchg ADD CONSTRAINT c_invgrcchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE invgrcchg ADD CONSTRAINT c_invgrcchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invgrcchg ADD CONSTRAINT c_invgrcchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invgrcchg ADD CONSTRAINT c_invgrcchg_istax_source CHECK ((((istax = 'N'::bpchar) AND (source = 'F'::bpchar)) OR (istax <> 'N'::bpchar)));
ALTER TABLE invgrcchg ADD CONSTRAINT c_invgrcchg_operation_level CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE invgrcchg ADD CONSTRAINT c_invgrcchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE invgrcchg ADD CONSTRAINT c_invgrcchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_grcchgitem_include_cost CHECK ((include_in_cost = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_invgrcchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_invgrcchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_invgrcchg_item_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_invgrcchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_invgrcchg_item_istax_source CHECK ((((istax = 'N'::bpchar) AND (source = 'F'::bpchar)) OR (istax <> 'N'::bpchar)));
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_invgrcchg_item_operation_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_invgrcchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE invgrcchg_item ADD CONSTRAINT c_invgrcchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_acqty CHECK ((COALESCE(acqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_effamt CHECK ((effamt = (grsamt + chgamt)));
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_grs_dis_tax_net CHECK ((COALESCE(netamt, (0)::numeric) = ((COALESCE(grsamt, (0)::numeric) - COALESCE(discount, (0)::numeric)) + COALESCE(taxamt, (0)::numeric)))) NOT VALID;
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_itc_appl CHECK ((gst_itc_appl = ANY (ARRAY['IP'::bpchar, 'CP'::bpchar, 'NO'::bpchar])));
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_rcinvqty CHECK ((rcinvqty <= acqty));
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_rcinvqty_acqty CHECK ((COALESCE(rcinvqty, (0)::numeric) <= COALESCE(acqty, (0)::numeric))) NOT VALID;
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_rtinvqty CHECK ((rtinvqty <= rtqty));
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_rtqty CHECK ((COALESCE(rtqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_rtqty_01 CHECK ((rtqty <= acqty));
ALTER TABLE invgrcdet ADD CONSTRAINT c_invgrcdet_rtqty_acqty CHECK ((COALESCE(rtqty, (0)::numeric) <= COALESCE(acqty, (0)::numeric))) NOT VALID;
ALTER TABLE invgrcdet ADD CONSTRAINT invgrcdet_exbasis_c01 CHECK ((ex_basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_consignment_01 CHECK ((((whether_consignment = 'Y'::bpchar) AND ((rtqty + rcinvqty) <= rcqty)) OR (whether_consignment <> 'Y'::bpchar)));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_consignment_02 CHECK ((((whether_consignment = 'Y'::bpchar) AND (rtinvqty = (0)::numeric)) OR (whether_consignment <> 'Y'::bpchar)));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_entry_mode CHECK ((entry_mode = ANY (ARRAY['A'::bpchar, 'O'::bpchar, 'M'::bpchar])));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_grsamt CHECK (((grsamt + chgamt) = netamt));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_netamt CHECK ((netamt >= (0)::numeric));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_rcinvqty CHECK ((rcinvqty <= rcqty));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_rtinvqty CHECK ((rtinvqty <= rtqty));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_rtqty CHECK ((rtqty <= rcqty));
ALTER TABLE invgrcmain ADD CONSTRAINT c_invgrcmain_whether_consignme CHECK ((whether_consignment = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invgrp ADD CONSTRAINT c_invgrp_ageing_appl CHECK ((ageing_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invgrp ADD CONSTRAINT c_invgrp_costing_method CHECK ((costing_method = ANY (ARRAY['L'::bpchar, 'A'::bpchar])));
ALTER TABLE invgrp ADD CONSTRAINT c_invgrp_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invgrp ADD CONSTRAINT c_invgrp_img_convention CHECK (((img_convention)::text = ANY (ARRAY[('N'::character varying)::text, ('BARCODE'::character varying)::text, ('ARTICLE'::character varying)::text, ('CAT1'::character varying)::text, ('CAT2'::character varying)::text, ('CAT3'::character varying)::text, ('CAT4'::character varying)::text, ('CAT5'::character varying)::text, ('CAT6'::character varying)::text, ('DES1'::character varying)::text, ('DES2'::character varying)::text, ('DES3'::character varying)::text, ('DES4'::character varying)::text, ('DES5'::character varying)::text, ('DES6'::character varying)::text])));
ALTER TABLE invgrp ADD CONSTRAINT c_invgrp_lev CHECK ((COALESCE((lev)::numeric, (0)::numeric) <= (3)::numeric));
ALTER TABLE invgrp ADD CONSTRAINT c_invgrp_material_type CHECK ((material_type = ANY (ARRAY['R'::bpchar, 'S'::bpchar, 'F'::bpchar])));
ALTER TABLE invgrp ADD CONSTRAINT invgrp_c01 CHECK ((item_management_mode = ANY (ARRAY['I'::bpchar, 'S'::bpchar, 'B'::bpchar])));
ALTER TABLE invgrp ADD CONSTRAINT invgrp_c02 CHECK ((price_management = ANY (ARRAY['I'::bpchar, 'B'::bpchar])));
ALTER TABLE invgrp ADD CONSTRAINT invgrp_c03 CHECK ((manage_expiry = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invgrprange ADD CONSTRAINT c_invgrprange_range_from CHECK ((COALESCE((range_from)::numeric, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invgrprange ADD CONSTRAINT c_invgrprange_range_to CHECK ((COALESCE((range_to)::numeric, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invgrtchg ADD CONSTRAINT c_invgrtchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE invgrtchg ADD CONSTRAINT c_invgrtchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE invgrtchg ADD CONSTRAINT c_invgrtchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invgrtchg ADD CONSTRAINT c_invgrtchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invgrtchg ADD CONSTRAINT c_invgrtchg_operation_level CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE invgrtchg ADD CONSTRAINT c_invgrtchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE invgrtchg ADD CONSTRAINT c_invgrtchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE invgrtchg_item ADD CONSTRAINT c_invgrtchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE invgrtchg_item ADD CONSTRAINT c_invgrtchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE invgrtchg_item ADD CONSTRAINT c_invgrtchg_item_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invgrtchg_item ADD CONSTRAINT c_invgrtchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invgrtchg_item ADD CONSTRAINT c_invgrtchg_item_operation_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE invgrtchg_item ADD CONSTRAINT c_invgrtchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE invgrtchg_item ADD CONSTRAINT c_invgrtchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE invgrtdet ADD CONSTRAINT c_invgrtdet_grs_dis_tax_net CHECK ((COALESCE(netamt, (0)::numeric) = ((COALESCE(grsamt, (0)::numeric) - COALESCE(discount, (0)::numeric)) + COALESCE(taxamt, (0)::numeric)))) NOT VALID;
ALTER TABLE invgrtdet ADD CONSTRAINT c_invgrtdet_qty CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invgrtdet ADD CONSTRAINT c_invgrtdet_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invgrtdet ADD CONSTRAINT c_invgrtdet_rtinvqty_qty CHECK ((COALESCE(rtinvqty, (0)::numeric) <= COALESCE(qty, (0)::numeric))) NOT VALID;
ALTER TABLE invgrtdet ADD CONSTRAINT invgrtdet_exbasis_c01 CHECK ((ex_basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE invgstrate ADD CONSTRAINT invgstrate_c02 CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invhsnsacdet ADD CONSTRAINT invhsnsacdet_c01 CHECK ((slab_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invhsnsacdet ADD CONSTRAINT invhsnsacdet_c02 CHECK ((slab_basis = ANY (ARRAY['N'::bpchar, 'R'::bpchar])));
ALTER TABLE invhsnsacmain ADD CONSTRAINT invhsnsacmain_c01 CHECK ((appl = ANY (ARRAY['G'::bpchar, 'S'::bpchar])));
ALTER TABLE invhsnsacmain ADD CONSTRAINT invhsnsacmain_c02 CHECK ((issystem = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invhsnsacmain ADD CONSTRAINT invhsnsacmain_c03 CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invhsnsacslab ADD CONSTRAINT invhsnsacslab_c01 CHECK ((amount_from >= (0)::numeric));
ALTER TABLE invinpool ADD CONSTRAINT invcostpool_c02 CHECK (((consideraslastinrate)::text = ANY (ARRAY[('Y'::character varying)::text, ('N'::character varying)::text])));
ALTER TABLE invinpool ADD CONSTRAINT invinpool_c01 CHECK (((considerasinpool)::text = ANY (ARRAY[('Y'::character varying)::text, ('N'::character varying)::text])));
ALTER TABLE invinpool ADD CONSTRAINT invinpool_c02 CHECK (((consideraslastinrate)::text = ANY (ARRAY[('Y'::character varying)::text, ('N'::character varying)::text])));
ALTER TABLE invinpool ADD CONSTRAINT invinpool_c03 CHECK ((considerinaging = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invitem ADD CONSTRAINT c_invitem_01 CHECK ((allow_price_modification = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invitem ADD CONSTRAINT c_invitem_02 CHECK ((((allow_price_modification = 'N'::bpchar) AND (price_change_limit = NULL::numeric)) OR (allow_price_modification = 'Y'::bpchar)));
ALTER TABLE invitem ADD CONSTRAINT c_invitem_03 CHECK ((price_change_limit > (0)::numeric));
ALTER TABLE invitem ADD CONSTRAINT c_invitem_04 CHECK ((price_change_limit <= (100)::numeric));
ALTER TABLE invitem ADD CONSTRAINT c_invitem_autoqtypopup CHECK ((autoqtypopup = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_barrq CHECK ((barrq = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_material_type CHECK ((material_type = ANY (ARRAY['R'::bpchar, 'S'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_mrp CHECK ((COALESCE(mrp, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_neg_stk_alt CHECK ((negative_stock_alert = ANY (ARRAY['I'::bpchar, 'W'::bpchar, 'S'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_pos_multprice_action CHECK ((pos_multiprice_action = ANY (ARRAY['P'::bpchar, 'L'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_pos_ret_behavior CHECK ((pos_return_behavior = ANY (ARRAY['R'::bpchar, 'P'::bpchar, 'N'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_invitem_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT c_isservice CHECK ((isservice = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT invitem_c01 CHECK ((barunit > (0)::numeric)) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT invitem_c02 CHECK ((item_management_mode = ANY (ARRAY['I'::bpchar, 'S'::bpchar, 'B'::bpchar])));
ALTER TABLE invitem ADD CONSTRAINT invitem_c03 CHECK ((price_management = ANY (ARRAY['I'::bpchar, 'B'::bpchar])));
ALTER TABLE invitem ADD CONSTRAINT invitem_c04 CHECK ((manage_expiry = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invitem ADD CONSTRAINT invitem_c05 CHECK ((validity_mode = ANY (ARRAY['D'::bpchar, 'M'::bpchar, 'Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invitem ADD CONSTRAINT invitem_c06 CHECK ((pos_batch_selection_mode = 'M'::bpchar));
ALTER TABLE invitem ADD CONSTRAINT invitem_gst_itc_appl CHECK ((gst_itc_appl = ANY (ARRAY['IP'::bpchar, 'CP'::bpchar, 'NO'::bpchar])));
ALTER TABLE invitem ADD CONSTRAINT invitem_ismetal_c01 CHECK ((ismetal = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT invitem_job_cost_basis_c04 CHECK ((job_cost_basis = ANY (ARRAY['Q'::bpchar, 'F'::bpchar, 'P'::bpchar])));
ALTER TABLE invitem ADD CONSTRAINT invitem_price_basis_c03 CHECK ((price_basis = ANY (ARRAY['G'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT invitem_price_terms_c02 CHECK ((price_terms = ANY (ARRAY['F'::bpchar, 'V'::bpchar]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT invitem_psite_c01 CHECK (((block_sale)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE invitem ADD CONSTRAINT invitem_psite_c02 CHECK (((isprice_excludes_tax)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE invitem_price ADD CONSTRAINT invitem_price_c01 CHECK ((rsp <= mrp));
ALTER TABLE invlgtnote ADD CONSTRAINT c_invlgtnote_bale_wise_lrqty CHECK ((bale_wise_lrqty = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT c_invlgtnote_entry_source CHECK (((entry_source_old = 'L'::bpchar) OR (entry_source_old = 'W'::bpchar))) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT c_invlgtnote_entry_source_chk CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text, ('SHIPAPPL'::character varying)::text])));
ALTER TABLE invlgtnote ADD CONSTRAINT c_invlgtnote_gatein_appl CHECK ((gatein_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT c_invlgtnote_lgtstatus CHECK ((lgtstatus = ANY (ARRAY['O'::bpchar, 'I'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT c_invlgtnote_qty1_lgtrecqty CHECK ((COALESCE(qty1, (0)::numeric) >= COALESCE(lgtrecqty, (0)::numeric))) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_c01 CHECK ((((lgttype = 'I'::bpchar) AND (enttype = ANY (ARRAY['GRC'::bpchar, 'PDR'::bpchar, 'PIM'::bpchar, 'SRT'::bpchar, 'TFP'::bpchar, 'STI'::bpchar, 'PTI'::bpchar, 'PRR'::bpchar, 'PRE'::bpchar]))) OR ((lgttype = 'O'::bpchar) AND (enttype = ANY (ARRAY['SIM'::bpchar, 'PRT'::bpchar, 'TFS'::bpchar, 'STO'::bpchar, 'PTO'::bpchar, 'MIS'::bpchar, 'PRI'::bpchar]))))) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_c02 CHECK ((war = ANY (ARRAY['W'::bpchar, 'A'::bpchar, 'R'::bpchar, 'L'::bpchar])));
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_c03 CHECK ((COALESCE(qty1, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_c04 CHECK ((topay = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_c05 CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_c06 CHECK ((COALESCE(qty1, (0)::numeric) >= COALESCE(gateinqty, (0)::numeric)));
ALTER TABLE invlgtnote ADD CONSTRAINT invlgtnote_c07 CHECK ((COALESCE(qty1, (0)::numeric) >= COALESCE(lgtrecqty, (0)::numeric)));
ALTER TABLE invloc ADD CONSTRAINT c_invloc_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invloc ADD CONSTRAINT c_invloc_gatein_appl CHECK ((gatein_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invloc ADD CONSTRAINT c_invloc_loctype CHECK ((loctype = ANY (ARRAY['W'::bpchar, 'L'::bpchar, 'S'::bpchar, 'T'::bpchar, 'M'::bpchar, 'B'::bpchar])));
ALTER TABLE invloc ADD CONSTRAINT c_invloc_out_lgt_appl CHECK ((out_lgt_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invloc ADD CONSTRAINT c_invloc_out_permit_appl CHECK ((out_permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE invloc ADD CONSTRAINT c_invloc_permit_appl CHECK ((permit_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invloc ADD CONSTRAINT invloc_c01 CHECK ((src_type = ANY (ARRAY['S'::bpchar, 'L'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE invloc ADD CONSTRAINT invloc_c02 CHECK ((pricetype = ANY (ARRAY['M'::bpchar, 'W'::bpchar, 'L'::bpchar, 'C'::bpchar, 'R'::bpchar, 'F'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invlocgrp ADD CONSTRAINT c_invlocgrp_allow_planning CHECK ((allow_planning = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invmiscmain ADD CONSTRAINT c_invmiscmain_miscno CHECK (((miscno)::numeric > (0)::numeric)) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c01 CHECK ((rule_type = ANY (ARRAY['CM'::bpchar, 'CW'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c02 CHECK ((cost_def = ANY (ARRAY['B'::bpchar, 'E'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c03 CHECK ((price_def = ANY (ARRAY['M'::bpchar, 'L'::bpchar, 'W'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c04 CHECK ((basis = ANY (ARRAY['U'::bpchar, 'D'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c05 CHECK ((calc_mode = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c06 CHECK ((state = ANY (ARRAY['A'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c07 CHECK ((margin_calc_mode = ANY (ARRAY['G'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c08 CHECK ((auto_calculate_mrp = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c09 CHECK ((auto_calculate_wsp = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invmmrule_det ADD CONSTRAINT invmmrule_det_c10 CHECK (((round_off)::text = ANY (ARRAY[('N'::character varying)::text, ('U'::character varying)::text, ('L'::character varying)::text, ('R'::character varying)::text])));
ALTER TABLE invmmrule_exception ADD CONSTRAINT invmmrule_exception_c01 CHECK ((exp_calc_mode = ANY (ARRAY['F'::bpchar, 'R'::bpchar])));
ALTER TABLE invpermit ADD CONSTRAINT c_invpermit_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invpermit ADD CONSTRAINT c_invpermit_permittype CHECK ((permittype = ANY (ARRAY['I'::bpchar, 'O'::bpchar]))) NOT VALID;
ALTER TABLE invpermit ADD CONSTRAINT c_invpermit_status CHECK ((status = ANY (ARRAY['N'::bpchar, 'U'::bpchar, 'R'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE invpicklistcancel ADD CONSTRAINT invpicklistcancel_c01 CHECK ((cancel_qty > (0)::numeric));
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT invpicklistconfirmdet_c01 CHECK ((confirm_qty >= (0)::numeric));
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT invpicklistconfirmdet_c02 CHECK ((packed_qty >= (0)::numeric));
ALTER TABLE invpicklistconfirmdet ADD CONSTRAINT invpicklistconfirmdet_c03 CHECK ((cancel_qty >= (0)::numeric));
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_c01 CHECK ((picklist_qty > (0)::numeric));
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_c02 CHECK ((cancel_qty <= picklist_qty));
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_c03 CHECK ((confirm_qty <= (picklist_qty - cancel_qty)));
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_c04 CHECK ((packed_qty <= confirm_qty));
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_c05 CHECK ((picklist_qty >= (0)::numeric));
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_c06 CHECK ((cancel_qty >= (0)::numeric));
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_c07 CHECK ((confirm_qty >= (0)::numeric));
ALTER TABLE invpicklistdet ADD CONSTRAINT invpicklistdet_c08 CHECK ((packed_qty >= (0)::numeric));
ALTER TABLE invreqdet ADD CONSTRAINT invreqdet_c01 CHECK ((isqty <= rqqty));
ALTER TABLE invreqmain ADD CONSTRAINT c_invreqmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE invreqmain ADD CONSTRAINT invreqmain_c01 CHECK ((stat = ANY (ARRAY['T'::bpchar, 'P'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invreservecancel ADD CONSTRAINT invreservecancel_c01 CHECK ((order_type = ANY (ARRAY['SO'::bpchar, 'TO'::bpchar, 'RO'::bpchar])));
ALTER TABLE invreservecancel ADD CONSTRAINT invreservecancel_c02 CHECK ((cancel_qty > (0)::numeric));
ALTER TABLE invreservedet ADD CONSTRAINT invreservedet_c01 CHECK ((reserve_qty > (0)::numeric));
ALTER TABLE invreservedet ADD CONSTRAINT invreservedet_c02 CHECK ((cancel_qty <= reserve_qty));
ALTER TABLE invreservedet ADD CONSTRAINT invreservedet_c03 CHECK ((picklist_qty <= (reserve_qty - cancel_qty)));
ALTER TABLE invreservemain ADD CONSTRAINT invreservemain_c01 CHECK ((order_type = ANY (ARRAY['SO'::bpchar, 'TO'::bpchar, 'RO'::bpchar])));
ALTER TABLE invsetmain ADD CONSTRAINT c_invsetmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE invsitestfmain ADD CONSTRAINT invsitestfmain_c01 CHECK ((issecondary_out = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invsitestfmain ADD CONSTRAINT invsitestfmain_c02 CHECK ((issecondary_in = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invstfdet ADD CONSTRAINT c_invstfdet_qty CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE invstfdet ADD CONSTRAINT invstfdet_exbasis_c01 CHECK ((ex_basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar])));
ALTER TABLE invstfmain ADD CONSTRAINT c_invstfmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE invstfmain ADD CONSTRAINT c_invstfmain_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invstfmain ADD CONSTRAINT invstfmain_c01 CHECK ((pricetype = ANY (ARRAY['M'::bpchar, 'W'::bpchar, 'L'::bpchar, 'C'::bpchar, 'R'::bpchar, 'F'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE invstfmain ADD CONSTRAINT invstfmain_c02 CHECK ((stftype = ANY (ARRAY['IST'::bpchar, 'IOT'::bpchar]))) NOT VALID;
ALTER TABLE invstkadjmain ADD CONSTRAINT c_invstkadjmain_stkadjno CHECK (((stkadjno)::numeric > (0)::numeric)) NOT VALID;
ALTER TABLE invstkentmain ADD CONSTRAINT c_invstkentmain_stkentno CHECK (((stkentno)::numeric > (0)::numeric)) NOT VALID;
ALTER TABLE invstkplandet ADD CONSTRAINT c_invstkplandet_entrytype CHECK ((entrytype = ANY (ARRAY['I'::bpchar, 'G'::bpchar]))) NOT VALID;
ALTER TABLE invstkplanmain ADD CONSTRAINT c_invstkplanmain_entrytype CHECK ((entrytype = ANY (ARRAY['I'::bpchar, 'G'::bpchar]))) NOT VALID;
ALTER TABLE invstkplanmain ADD CONSTRAINT c_invstkplanmain_status CHECK ((status = ANY (ARRAY['N'::bpchar, 'A'::bpchar, 'V'::bpchar, 'U'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE invstock ADD CONSTRAINT c_invstock_enttype CHECK (((enttype)::text = ANY (ARRAY[('GRC'::character varying)::text, ('GRT'::character varying)::text, ('STI'::character varying)::text, ('STO'::character varying)::text, ('DIS'::character varying)::text, ('DRT'::character varying)::text, ('OPN'::character varying)::text, ('TFS'::character varying)::text, ('TFP'::character varying)::text, ('PRC'::character varying)::text, ('PIS'::character varying)::text, ('ADJ'::character varying)::text, ('PCI'::character varying)::text, ('PCO'::character varying)::text, ('PTI'::character varying)::text, ('PTO'::character varying)::text, ('DCI'::character varying)::text, ('DCO'::character varying)::text, ('SAL'::character varying)::text, ('SRT'::character varying)::text, ('PRR'::character varying)::text, ('PRI'::character varying)::text, ('MIS'::character varying)::text, ('PNI'::character varying)::text, ('PNO'::character varying)::text, ('SOP'::character varying)::text, ('PRT'::character varying)::text, ('OUO'::character varying)::text, ('OUI'::character varying)::text, ('WTI'::character varying)::text, ('WTO'::character varying)::text, ('BTI'::character varying)::text, ('BTO'::character varying)::text, ('RES'::character varying)::text, ('STF'::character varying)::text, ('PKT'::character varying)::text])));
ALTER TABLE invstock ADD CONSTRAINT invstock_c01 CHECK (((channeltype)::text = ANY (ARRAY[('RTL'::character varying)::text, ('ETL'::character varying)::text, NULL::text]))) NOT VALID;
ALTER TABLE lpbenefit ADD CONSTRAINT lpbenefit_c01 CHECK ((benefitmode = ANY (ARRAY['D'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE lpbenefit ADD CONSTRAINT lpbenefit_c02 CHECK (((isapplicable_for_promo_item)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE lpbenefit ADD CONSTRAINT lpbenefit_c03 CHECK (((isextinct)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE lpbenefit ADD CONSTRAINT lpbenefit_c04 CHECK ((isappl_on_billpromo_item = ANY (ARRAY['A'::bpchar, 'E'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE lpbenefit ADD CONSTRAINT lpbenefit_c05 CHECK ((roundbasis = ANY (ARRAY['L'::bpchar, 'U'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE lpbenefit ADD CONSTRAINT lpbenefit_c06 CHECK (((roundlimit)::numeric = ANY (ARRAY['2'::numeric, '1'::numeric, '0'::numeric]))) NOT VALID;
ALTER TABLE lpbenefit ADD CONSTRAINT lpbenefit_c07 CHECK (((isotpenabled)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric])));
ALTER TABLE lpcard ADD CONSTRAINT lpcard_c01 CHECK ((status = ANY (ARRAY['A'::bpchar, 'N'::bpchar, 'I'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE lpcard ADD CONSTRAINT lpcard_c02 CHECK ((gender = ANY (ARRAY['M'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE lpcard ADD CONSTRAINT lpcard_c03 CHECK ((prefcommunicationmode = ANY (ARRAY['S'::bpchar, 'E'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE lpcard ADD CONSTRAINT lpcard_c04 CHECK (((receivemessage)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE lpcard_type ADD CONSTRAINT lpcard_type_c01 CHECK ((status = ANY (ARRAY['N'::bpchar, 'G'::bpchar]))) NOT VALID;
ALTER TABLE lpcard_type ADD CONSTRAINT lpcard_type_c02 CHECK ((cardnomode = ANY (ARRAY['A'::bpchar, 'M'::bpchar]))) NOT VALID;
ALTER TABLE lpredemptiontoken ADD CONSTRAINT lpredemptiontoken_c01 CHECK (((receivebilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSGVBill'::character varying)::text, ('POSDepRefBill'::character varying)::text]))) NOT VALID;
ALTER TABLE mailbox ADD CONSTRAINT mailbox_c01 CHECK ((status = ANY (ARRAY['P'::bpchar, 'S'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE mailbox ADD CONSTRAINT mailbox_c02 CHECK (((isattachmentpresent)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE mailjob ADD CONSTRAINT mailjob_c01 CHECK (((mailformat)::text = ANY (ARRAY[('HTML'::character varying)::text, ('RTF'::character varying)::text, ('TEXT'::character varying)::text]))) NOT VALID;
ALTER TABLE mailjob ADD CONSTRAINT mailjob_c02 CHECK (((isactive)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE mailjob ADD CONSTRAINT mailjob_c03 CHECK ((modificaton_track = ANY (ARRAY['C'::bpchar, 'M'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE mailjobfilter ADD CONSTRAINT mailjobfilter_c01 CHECK (((join_condition)::text = ANY (ARRAY[('AND'::character varying)::text, ('OR'::character varying)::text]))) NOT VALID;
ALTER TABLE mailjobfilter ADD CONSTRAINT mailjobfilter_c02 CHECK (((operator)::text = ANY (ARRAY[('='::character varying)::text, ('<>'::character varying)::text, ('>='::character varying)::text, ('<='::character varying)::text, ('<'::character varying)::text, ('>'::character varying)::text, ('CONTAINS'::character varying)::text, ('NOT CONTAINS'::character varying)::text, ('NULL'::character varying)::text, ('NOT NULL'::character varying)::text, ('STARTS WITH'::character varying)::text, ('ENDS WITH'::character varying)::text, ('IN'::character varying)::text]))) NOT VALID;
ALTER TABLE mailjobfilter ADD CONSTRAINT mailjobfilter_c03 CHECK (((multiselect)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE mailjobtype ADD CONSTRAINT mailjobtype_c01 CHECK ((frequency = ANY (ARRAY['R'::bpchar, 'O'::bpchar]))) NOT VALID;
ALTER TABLE mailjobtype ADD CONSTRAINT mailjobtype_c02 CHECK (((modification_tracking)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE mailjobtype_param ADD CONSTRAINT mailjobtype_param_c01 CHECK (((datatype)::text = ANY (ARRAY[('NUMERIC'::character varying)::text, ('CHARACTER'::character varying)::text, ('DATE'::character varying)::text]))) NOT VALID;
ALTER TABLE mailjobtype_param ADD CONSTRAINT mailjobtype_param_c02 CHECK ((storage_format = ANY (ARRAY['C'::bpchar, 'V'::bpchar]))) NOT VALID;
ALTER TABLE mailjobtype_param ADD CONSTRAINT mailjobtype_param_c03 CHECK (((lookup_available)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE mailoccurence_event ADD CONSTRAINT mailoccurence_event_c01 CHECK (((event_type)::text = ANY (ARRAY[('CREATED'::character varying)::text, ('MODIFIED'::character varying)::text]))) NOT VALID;
ALTER TABLE mdgstreturn ADD CONSTRAINT mdgstreturn_return_c01 CHECK (((return)::text = ANY (ARRAY[('GSTR1'::character varying)::text, ('GSTR2'::character varying)::text, ('GSTR'::character varying)::text, ('MASTER'::character varying)::text])));
ALTER TABLE mdlistcriteria ADD CONSTRAINT mdlistcriteria_issystemdefined_check CHECK ((issystemdefined = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE mdlistcriteria ADD CONSTRAINT mdlistcriteria_visibletootheruser_check CHECK ((visibletootheruser = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE mdmenu ADD CONSTRAINT c_mdmnenu_appl_for_mscoomts CHECK ((appl_for_mscoomts = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE mdmenu ADD CONSTRAINT c_mdmnenu_appl_for_msoocm CHECK ((appl_for_msoocm = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE mdmenu ADD CONSTRAINT c_mdmnenu_notappl_for_osoocm CHECK ((notappl_for_osoocm = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE mdpivotreporttype ADD CONSTRAINT mdpivotreporttype_c01 CHECK ((sourcetype = ANY (ARRAY['V'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE mdpivotreporttype ADD CONSTRAINT mdpivotreporttype_c02 CHECK (((iscustom)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE nfs$event_vars ADD CONSTRAINT nfs$event_vars_c01 CHECK ((placement = ANY (ARRAY['A'::bpchar, 'B'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE nfs$event_vars ADD CONSTRAINT nfs$event_vars_c02 CHECK (((datatype)::text = ANY (ARRAY[('CHARACTER'::character varying)::text, ('NUMERIC'::character varying)::text, ('DATE'::character varying)::text]))) NOT VALID;
ALTER TABLE nfs$event_vars ADD CONSTRAINT nfs$event_vars_c03 CHECK ((lookup_available = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE nfs$event_vars ADD CONSTRAINT nfs$event_vars_c04 CHECK ((storage_format = ANY (ARRAY['V'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE nfs$events ADD CONSTRAINT nfs$events_c01 CHECK ((schedule_type = ANY (ARRAY['B'::bpchar, 'O'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE nfs$postasks ADD CONSTRAINT nfs$postasks_c01 CHECK (((active)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE nfs$task_filter ADD CONSTRAINT nfs$task_filter_c01 CHECK (((join_condition)::text = ANY (ARRAY[('AND'::character varying)::text, ('OR'::character varying)::text]))) NOT VALID;
ALTER TABLE nfs$task_filter ADD CONSTRAINT nfs$task_filter_c02 CHECK (((operator)::text = ANY (ARRAY[('='::character varying)::text, ('<>'::character varying)::text, ('>='::character varying)::text, ('<='::character varying)::text, ('<'::character varying)::text, ('>'::character varying)::text, ('CONTAINS'::character varying)::text, ('NOT CONTAINS'::character varying)::text, ('NULL'::character varying)::text, ('NOT NULL'::character varying)::text, ('STARTS WITH'::character varying)::text, ('ENDS WITH'::character varying)::text, ('IN'::character varying)::text]))) NOT VALID;
ALTER TABLE nfs$task_filter ADD CONSTRAINT nfs$task_filter_c03 CHECK ((multiselect = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE nfs$task_recipients ADD CONSTRAINT nfs$task_recipients_c01 CHECK ((contact_type = ANY (ARRAY['S'::bpchar, 'R'::bpchar, 'V'::bpchar]))) NOT VALID;
ALTER TABLE nfs$tasks ADD CONSTRAINT nfs$tasks_c01 CHECK ((filter_exists = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE nfs$tasks ADD CONSTRAINT nfs$tasks_c02 CHECK ((state = ANY (ARRAY['A'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE omschannel_mop ADD CONSTRAINT omschannel_mop_c01 CHECK (((isextinct)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE picklist_rule ADD CONSTRAINT picklist_rule_c01 CHECK ((isext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pivotreportlayout ADD CONSTRAINT pivotreportlayout_c01 CHECK ((layoutowner = ANY (ARRAY['H'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE posjournal ADD CONSTRAINT posjournal_c01 CHECK ((doctype = ANY (ARRAY['DEPREF'::bpchar, 'PTCASH'::bpchar]))) NOT VALID;
ALTER TABLE posjournal ADD CONSTRAINT posjournal_c02 CHECK ((status = ANY (ARRAY['O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE posjournal_detail ADD CONSTRAINT posjournal_detail_c01 CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE posjournal_detail ADD CONSTRAINT posjournal_detail_c02 CHECK ((ptcheadmode = ANY (ARRAY['R'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE posjournal_detail_void ADD CONSTRAINT posjournal_detail_void_c01 CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE posjournal_detail_void ADD CONSTRAINT posjournal_detail_void_c02 CHECK ((ptcheadmode = ANY (ARRAY['R'::bpchar, 'P'::bpchar])));
ALTER TABLE posjournal_void ADD CONSTRAINT posjournal_void_c01 CHECK ((doctype = ANY (ARRAY['DEPREF'::bpchar, 'PTCASH'::bpchar])));
ALTER TABLE posjournal_void ADD CONSTRAINT posjournal_void_c02 CHECK ((status = ANY (ARRAY['O'::bpchar, 'C'::bpchar])));
ALTER TABLE prd_saitem ADD CONSTRAINT c_prd_saitem_ext CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prd_wiptrack ADD CONSTRAINT c_prd_wiptrack_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdbomdet ADD CONSTRAINT c_prdbomdet_is_ass_item CHECK ((is_ass_item = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdbomdet ADD CONSTRAINT c_prdbomdet_ismandatory CHECK ((ismandatory = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdbomdet ADD CONSTRAINT c_prdbomdet_supply_type CHECK ((supply_type = ANY (ARRAY['P'::bpchar, 'O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE prdbomdet ADD CONSTRAINT c_prdbomdet_tolerance CHECK ((((COALESCE(shrinkage, (0)::numeric) <> (0)::numeric) AND ((tolerance)::numeric >= ceil(((COALESCE(shrinkage, (0)::numeric) * (100)::numeric) / ((100)::numeric - COALESCE(shrinkage, (0)::numeric)))))) OR (COALESCE(shrinkage, (0)::numeric) = (0)::numeric)));
ALTER TABLE prdbomdet ADD CONSTRAINT prdbomdet_issue_assembly_item CHECK ((issue_assembly_item = ANY (ARRAY['O'::bpchar, 'P'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdbommain ADD CONSTRAINT c_prdbommain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdbomoperation ADD CONSTRAINT c_prdbomop_ass_supply_type CHECK ((assembly_supply_type = ANY (ARRAY['P'::bpchar, 'O'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdbomoperation ADD CONSTRAINT c_prdbomop_consider_in_wip CHECK ((consider_in_wip = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdbomver ADD CONSTRAINT c_prdbomver_status CHECK ((status = ANY (ARRAY['A'::bpchar, 'N'::bpchar])));
ALTER TABLE prdcostsheethead ADD CONSTRAINT c_prdcshead_status CHECK ((status = ANY (ARRAY['C'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE prdcostsheethead ADD CONSTRAINT c_prdcstshhd_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdis ADD CONSTRAINT c_prdis_qty CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE prdjobbom ADD CONSTRAINT c_prdjobbom_component_type CHECK ((component_type = ANY (ARRAY['S'::bpchar, 'N'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE prdjobbom ADD CONSTRAINT c_prdjobbom_internal_iss_flag CHECK ((internal_iss_flag = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdjobbom ADD CONSTRAINT c_prdjobbom_ismandatory CHECK ((ismandatory = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdjobbom ADD CONSTRAINT c_prdjobbom_supply_type CHECK ((supply_type = ANY (ARRAY['P'::bpchar, 'O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE prdjobbom ADD CONSTRAINT c_prdjobbom_tolerance CHECK ((((COALESCE(shrinkage, (0)::numeric) <> (0)::numeric) AND ((tolerance)::numeric >= ceil(((COALESCE(shrinkage, (0)::numeric) * (100)::numeric) / ((100)::numeric - COALESCE(shrinkage, (0)::numeric)))))) OR (COALESCE(shrinkage, (0)::numeric) = (0)::numeric)));
ALTER TABLE prdjobbom ADD CONSTRAINT prdjobbom_issue_assembly_item CHECK ((issue_assembly_item = ANY (ARRAY['O'::bpchar, 'P'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdjobcnlmain ADD CONSTRAINT c_prdjobcnlmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdjobdet ADD CONSTRAINT c_prdjobdet_completed_qty CHECK (((COALESCE(completed_qty, (0)::numeric) + COALESCE(alternate_qty, (0)::numeric)) <= (COALESCE(qty, (0)::numeric) - COALESCE(cnl_qty, (0)::numeric))));
ALTER TABLE prdjobdet ADD CONSTRAINT c_prdjobdet_consider_in_wip CHECK ((consider_in_wip = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdjobmain ADD CONSTRAINT c_prdjob_allow_jobber_stkpt CHECK ((allow_jobber_stockpoint = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdjobmain ADD CONSTRAINT c_prdjobmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdjobmain ADD CONSTRAINT c_prdjobmain_isclosed CHECK ((is_closed = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdjobmain ADD CONSTRAINT c_prdjobmain_jobtype CHECK ((jobtype = ANY (ARRAY['LS'::bpchar, 'LN'::bpchar, 'AS'::bpchar, 'AN'::bpchar]))) NOT VALID;
ALTER TABLE prdjobmain ADD CONSTRAINT c_prdjobmain_prd_overdue_act CHECK ((prd_overdue_action = ANY (ARRAY['O'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdjrcmain ADD CONSTRAINT c_prdjrcmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdjrcmain ADD CONSTRAINT prdjrcmain_whether_chargeable CHECK ((whether_chargeable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE prdlot_salord ADD CONSTRAINT c_prdlot_salord_ord_pendqty CHECK ((salorddet_pendingqty > (0)::numeric));
ALTER TABLE prdlotbom ADD CONSTRAINT c_prdlotbom_component_type CHECK ((component_type = ANY (ARRAY['S'::bpchar, 'N'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE prdlotbom ADD CONSTRAINT c_prdlotbom_is_ass_item CHECK ((is_ass_item = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdlotbom ADD CONSTRAINT c_prdlotbom_ismandatory CHECK ((ismandatory = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdlotbom ADD CONSTRAINT c_prdlotbom_supply_type CHECK ((supply_type = ANY (ARRAY['P'::bpchar, 'O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE prdlotbom ADD CONSTRAINT c_prdlotbom_tolerance CHECK ((((COALESCE(shrinkage, (0)::numeric) <> (0)::numeric) AND ((tolerance)::numeric >= ceil(((COALESCE(shrinkage, (0)::numeric) * (100)::numeric) / ((100)::numeric - COALESCE(shrinkage, (0)::numeric)))))) OR (COALESCE(shrinkage, (0)::numeric) = (0)::numeric)));
ALTER TABLE prdlotmain ADD CONSTRAINT c_prdlotmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdlotmain ADD CONSTRAINT c_prdlotmain_is_closed CHECK ((is_closed = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdlotmain ADD CONSTRAINT c_prdlotmain_plan_mode CHECK ((plan_mode = ANY (ARRAY['M'::bpchar, 'A'::bpchar, 'S'::bpchar, 'T'::bpchar])));
ALTER TABLE prdlotoperation ADD CONSTRAINT c_prdlotop_standard CHECK ((is_standard = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdlotoperation ADD CONSTRAINT c_prdlotop_wip CHECK ((consider_in_wip = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdlotoperation ADD CONSTRAINT c_prdlotoperation_avl_frd_qty CHECK ((available_to_forward >= (0)::numeric)) NOT VALID;
ALTER TABLE prdlotoperation ADD CONSTRAINT prdlotop_issue_assembly_item CHECK ((issue_assembly_item = ANY (ARRAY['O'::bpchar, 'P'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdmplanmain ADD CONSTRAINT c_prdmplanmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdmplanmain ADD CONSTRAINT c_prdmplanmain_isclosed CHECK ((is_closed = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdord ADD CONSTRAINT c_prdord_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdpr ADD CONSTRAINT c_prdpr_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdpr ADD CONSTRAINT c_prdpr_prstage CHECK ((prstage = ANY (ARRAY['F'::bpchar, 'I'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE prdpr ADD CONSTRAINT c_prdpr_prtype CHECK ((prtype = ANY (ARRAY['P'::bpchar, 'C'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE prdprrate ADD CONSTRAINT c_prdprrate_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE prdprrate_article ADD CONSTRAINT prdprrate_article_c01 CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE prdprrate_item ADD CONSTRAINT prdprrate_item_c01 CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE prdrc ADD CONSTRAINT c_prdrc_qty CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE prdrc ADD CONSTRAINT c_prdrc_srvrate CHECK ((COALESCE(srvrate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE prdroutedet ADD CONSTRAINT c_prdroutedet_wip CHECK ((consider_in_wip = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE prdroutegrp ADD CONSTRAINT c_prdroutegrp_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE prdwipclrmain ADD CONSTRAINT c_prdwipclrmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdwipmain ADD CONSTRAINT c_prdwipmain_autogen_type CHECK ((autogen_type = ANY (ARRAY['O'::bpchar, 'R'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE prdwipmain ADD CONSTRAINT c_prdwipmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE prdwipmain ADD CONSTRAINT c_prdwipmain_wiptxn_type CHECK ((wiptxn_type = ANY (ARRAY['I'::bpchar, 'R'::bpchar, 'W'::bpchar]))) NOT VALID;
ALTER TABLE prdwiptrans ADD CONSTRAINT c_prdwiptrans_item_type CHECK (((item_type)::text = ANY (ARRAY[('ASS'::character varying)::text, ('COM'::character varying)::text, ('SER'::character varying)::text, ('FG'::character varying)::text, ('PSD'::character varying)::text]))) NOT VALID;
ALTER TABLE prdwiptrans ADD CONSTRAINT c_prdwiptrans_txn_type CHECK (((txn_type)::text = ANY (ARRAY[('ORD'::character varying)::text, ('ISS'::character varying)::text, ('REC'::character varying)::text, ('CNL'::character varying)::text, ('RET'::character varying)::text, ('WCL'::character varying)::text, ('WAS'::character varying)::text, ('FCL'::character varying)::text])));
ALTER TABLE promo_allocation ADD CONSTRAINT c_promo_alloc_ispromosend_blk CHECK ((ispromosend_blocked = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_allocation ADD CONSTRAINT c_promo_allocation_blockmsd CHECK ((blockmsd = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_allocation_det ADD CONSTRAINT promo_alloc_det_alc_type_c01 CHECK ((activation_type = ANY (ARRAY['D'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE promo_allocation_det ADD CONSTRAINT promo_alloc_det_appr_c03 CHECK ((approved = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_allocation_det ADD CONSTRAINT promo_alloc_det_changed_c02 CHECK ((ischanged = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_applicable ADD CONSTRAINT promo_appl_act_type_02 CHECK ((activation_type = ANY (ARRAY['D'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE promo_applicable ADD CONSTRAINT promo_appl_approved_c04 CHECK ((approved = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_applicable ADD CONSTRAINT promo_appl_promo_created_c01 CHECK (((iscreatedbyho)::numeric = ANY (ARRAY[(1)::numeric, (2)::numeric]))) NOT VALID;
ALTER TABLE promo_applicable ADD CONSTRAINT promo_appl_status_c03 CHECK ((status = ANY (ARRAY['A'::bpchar, 'I'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE promo_assortment ADD CONSTRAINT promo_assortment_c04 CHECK (((category)::text = ANY (ARRAY[('Promo'::character varying)::text, ('Bin'::character varying)::text])));
ALTER TABLE promo_assortment ADD CONSTRAINT promo_assortment_extinct_c03 CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_assortment ADD CONSTRAINT promo_assortment_iscombo_c02 CHECK ((iscombo = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_assortment ADD CONSTRAINT promo_assortment_type_c01 CHECK ((type = ANY (ARRAY['B'::bpchar, 'G'::bpchar, 'T'::bpchar, 'V'::bpchar])));
ALTER TABLE promo_assortment_exclude ADD CONSTRAINT promo_asmt_excl_prc_rbs_c01 CHECK ((price_range_basis = ANY (ARRAY['R'::bpchar, 'M'::bpchar, 'L'::bpchar, 'C'::bpchar, 'W'::bpchar]))) NOT VALID;
ALTER TABLE promo_assortment_include ADD CONSTRAINT promo_asmt_incl_prc_rng_c01 CHECK ((price_range_basis = ANY (ARRAY['R'::bpchar, 'M'::bpchar, 'L'::bpchar, 'C'::bpchar, 'W'::bpchar]))) NOT VALID;
ALTER TABLE promo_master ADD CONSTRAINT c_promo_master_category CHECK ((category = ANY (ARRAY['P'::bpchar, 'V'::bpchar]))) NOT VALID;
ALTER TABLE promo_master ADD CONSTRAINT promo_master_basis_c02 CHECK (((basis)::text = ANY (ARRAY[('QSLAB'::character varying)::text, ('VSLAB'::character varying)::text, ('QSIMPLE'::character varying)::text]))) NOT VALID;
ALTER TABLE promo_master ADD CONSTRAINT promo_master_c05 CHECK ((buy_factor_type = ANY (ARRAY['S'::bpchar, 'A'::bpchar, 'R'::bpchar])));
ALTER TABLE promo_master ADD CONSTRAINT promo_master_card_c04 CHECK ((forcardholders = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_master ADD CONSTRAINT promo_master_charge_tax_extra CHECK ((charge_tax_extra = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_master ADD CONSTRAINT promo_master_disapportion_c08 CHECK ((discapportion = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE promo_master ADD CONSTRAINT promo_master_disapportion_c09 CHECK ((((type <> 'I'::bpchar) AND (discapportion = 'N'::bpchar) AND (charge_tax_extra = 'N'::bpchar)) OR (type = 'I'::bpchar)));
ALTER TABLE promo_master ADD CONSTRAINT promo_master_extrachgbasis_c06 CHECK ((extrachgbasis = ANY (ARRAY['T'::bpchar, 'F'::bpchar])));
ALTER TABLE promo_master ADD CONSTRAINT promo_master_isext_c03 CHECK ((isextinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_master ADD CONSTRAINT promo_master_type_c01 CHECK ((type = ANY (ARRAY['M'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE promo_slab ADD CONSTRAINT promo_slab_dis_price_basis_c05 CHECK ((discount_price_basis = ANY (ARRAY['M'::bpchar, 'L'::bpchar, 'V'::bpchar, 'A'::bpchar, 'E'::bpchar])));
ALTER TABLE promo_slab ADD CONSTRAINT promo_slab_dis_type_c04 CHECK ((discount_type = ANY (ARRAY['N'::bpchar, 'A'::bpchar, 'P'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE promo_slab ADD CONSTRAINT promo_slab_get_auto_incl_c03 CHECK ((get_auto_include = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE promo_slab ADD CONSTRAINT promo_slab_get_method_c01 CHECK ((get_method = ANY (ARRAY['H'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE promo_slab ADD CONSTRAINT promo_slab_get_pool_type_c02 CHECK ((get_pool_type = ANY (ARRAY['A'::bpchar, 'C'::bpchar, 'X'::bpchar])));
ALTER TABLE promo_voucher ADD CONSTRAINT promo_voucher_isextinct_c01 CHECK ((isextinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE psite_alloc_item ADD CONSTRAINT c_psite_alloc_item_send_mode CHECK ((send_mode = ANY (ARRAY['D'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_allocation_detail ADD CONSTRAINT psite_allocation_detail_c01 CHECK (((allocation_type)::text = ANY (ARRAY[('DIS'::character varying)::text, ('MOP'::character varying)::text, ('DOC'::character varying)::text, ('PVL'::character varying)::text, ('RPL'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_appsetting ADD CONSTRAINT mdappsetting_c02 CHECK (((sys_ispolicydriven)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_appsetting ADD CONSTRAINT psite_appsetting_c01 CHECK ((sys_datatype = ANY (ARRAY['L'::bpchar, 'D'::bpchar, 'S'::bpchar, 'B'::bpchar, 'O'::bpchar, 'Q'::bpchar, 'R'::bpchar, 'F'::bpchar, 'P'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE psite_auditjournal ADD CONSTRAINT psite_auditjournal_c01 CHECK ((schedule = ANY (ARRAY['D'::bpchar, 'W'::bpchar, 'M'::bpchar, 'Q'::bpchar, 'Y'::bpchar, 'O'::bpchar]))) NOT VALID;
ALTER TABLE psite_auditjournal ADD CONSTRAINT psite_auditjournal_c02 CHECK (((poststock)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_auditjournal ADD CONSTRAINT psite_auditjournal_c03 CHECK ((status = ANY (ARRAY['A'::bpchar, 'L'::bpchar, 'V'::bpchar, 'O'::bpchar, 'C'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE psite_auditjournal ADD CONSTRAINT psite_auditjournal_c04 CHECK ((isbatchserialwise = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE psite_auditplan ADD CONSTRAINT psite_auditplan_c01 CHECK ((assortmenttype = ANY (ARRAY['G'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE psite_auditplan ADD CONSTRAINT psite_auditplan_c02 CHECK ((basis = ANY (ARRAY['G'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE psite_auditplan ADD CONSTRAINT psite_auditplan_c03 CHECK ((planmode = ANY (ARRAY['L'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE psite_auditplan ADD CONSTRAINT psite_auditplan_c04 CHECK (((poststock)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_auditplan ADD CONSTRAINT psite_auditplan_c05 CHECK (((ismandatory)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_calendar ADD CONSTRAINT psite_calendar_c01 CHECK ((status = ANY (ARRAY['N'::bpchar, 'A'::bpchar, 'L'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE psite_couponoffer ADD CONSTRAINT psite_couponoffer_c01 CHECK ((issuetype = 'T'::bpchar));
ALTER TABLE psite_couponoffer ADD CONSTRAINT psite_couponoffer_c02 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric])));
ALTER TABLE psite_customer ADD CONSTRAINT psite_customer_c01 CHECK ((gender = ANY (ARRAY['M'::bpchar, 'F'::bpchar, 'T'::bpchar, 'U'::bpchar]))) NOT VALID;
ALTER TABLE psite_customer ADD CONSTRAINT psite_customer_c02 CHECK (((receivemessage)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_customer ADD CONSTRAINT psite_customer_c03 CHECK ((prefcommunicationmode = ANY (ARRAY['S'::bpchar, 'E'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_customer ADD CONSTRAINT psite_customer_c04 CHECK (((isemployee)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_deliveryslip ADD CONSTRAINT psite_deliveryslip_c01 CHECK ((promocleared = ANY (ARRAY['I'::bpchar, 'M'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE psite_deliveryslipitem ADD CONSTRAINT psite_deliveryslipitem_c02 CHECK ((taxregime = ANY (ARRAY['V'::bpchar, 'G'::bpchar])));
ALTER TABLE psite_deliveryslipitemvoid ADD CONSTRAINT psite_deliveryslipitemvoid_c02 CHECK ((taxregime = ANY (ARRAY['V'::bpchar, 'G'::bpchar])));
ALTER TABLE psite_deliveryslipvoid ADD CONSTRAINT psite_deliveryslipvoid_c01 CHECK ((promocleared = ANY (ARRAY['I'::bpchar, 'M'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE psite_discount ADD CONSTRAINT psite_discount_c01 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_discount ADD CONSTRAINT psite_discount_c02 CHECK (((ischangeableatpos)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_discount ADD CONSTRAINT psite_discount_c03 CHECK ((applicableat = ANY (ARRAY['I'::bpchar, 'M'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE psite_discount ADD CONSTRAINT psite_discount_c04 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_discount ADD CONSTRAINT psite_discount_c05 CHECK (((appliesto)::text = ANY (ARRAY[('POSBILL'::character varying)::text, ('GVBILL'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_docscheme ADD CONSTRAINT psite_docscheme_c01 CHECK ((resettype = ANY (ARRAY['D'::bpchar, 'M'::bpchar, 'S'::bpchar]))) NOT VALID;
ALTER TABLE psite_docscheme ADD CONSTRAINT psite_docscheme_c02 CHECK (((is_global_unique)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_emrsubmit_queue ADD CONSTRAINT psite_emrfeedback_log_c01 CHECK (((billtype)::text = ANY (ARRAY[('NEW'::character varying)::text, ('VOID'::character varying)::text])));
ALTER TABLE psite_emrsubmit_queue ADD CONSTRAINT psite_emrfeedback_log_c02 CHECK (((feedbacktype)::text = ANY (ARRAY[('POSBILL'::character varying)::text, ('POSBILLVOID'::character varying)::text])));
ALTER TABLE psite_global_appuser ADD CONSTRAINT psite_global_appuser_c01 CHECK (((isactive)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_global_role ADD CONSTRAINT psite_global_role_c01 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_grcchg ADD CONSTRAINT psite_grcchg_c01 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar])));
ALTER TABLE psite_grcchg ADD CONSTRAINT psite_grcchg_c02 CHECK (((istax)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_grcchg ADD CONSTRAINT psite_grcchg_c03 CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE psite_grcchgitem ADD CONSTRAINT psite_grcchgitem_c01 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar])));
ALTER TABLE psite_grcchgitem ADD CONSTRAINT psite_grcchgitem_c02 CHECK (((istax)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_grcchgitem ADD CONSTRAINT psite_grcchgitem_c03 CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c01 CHECK ((isincluded = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c02 CHECK (((formapplicable)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c03 CHECK ((return_rate_basis = ANY (ARRAY['L'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c04 CHECK ((pricetype = ANY (ARRAY['M'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c05 CHECK ((discountmode = ANY (ARRAY['U'::bpchar, 'D'::bpchar]))) NOT VALID;
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c06 CHECK ((includetaxindiscount = ANY (ARRAY[((1)::text)::bpchar, ((0)::text)::bpchar]))) NOT VALID;
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c07 CHECK ((discountbasis = ANY (ARRAY['G'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c08 CHECK ((roundlimit = ANY (ARRAY['U'::bpchar, 'L'::bpchar, 'R'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE psite_grt ADD CONSTRAINT psite_grt_c09 CHECK ((tax_rate_basis = ANY (ARRAY['S'::bpchar, 'D'::bpchar]))) NOT VALID;
ALTER TABLE psite_grtchg ADD CONSTRAINT psite_grtchg_c01 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_grtchg ADD CONSTRAINT psite_grtchg_c02 CHECK (((istax)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_grtchg ADD CONSTRAINT psite_grtchg_c03 CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE psite_grtchg ADD CONSTRAINT psite_grtchg_c04 CHECK ((chargemode = ANY (ARRAY['B'::bpchar, 'P'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE psite_grtchgitem ADD CONSTRAINT psite_grtchgitem_c01 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_grtchgitem ADD CONSTRAINT psite_grtchgitem_c02 CHECK (((istax)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_grtchgitem ADD CONSTRAINT psite_grtchgitem_c03 CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE psite_grtchgitem ADD CONSTRAINT psite_grtchgitem_c04 CHECK ((chargemode = ANY (ARRAY['B'::bpchar, 'P'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE psite_grtitem ADD CONSTRAINT psite_grtitem_c01 CHECK ((itemratesource = ANY (ARRAY['U'::bpchar, 'A'::bpchar, 'O'::bpchar, 'D'::bpchar, 'P'::bpchar, 'C'::bpchar, 'L'::bpchar, 'M'::bpchar]))) NOT VALID;
ALTER TABLE psite_localpolicydetail ADD CONSTRAINT psite_localpolicydetail_c01 CHECK (((canchange)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_localpolicydetail ADD CONSTRAINT psite_localpolicydetail_c02 CHECK (((candelegate)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_masterpolicy ADD CONSTRAINT psite_masterpolicy_c01 CHECK ((sys_datatype = ANY (ARRAY['S'::bpchar, 'N'::bpchar, 'D'::bpchar, 'B'::bpchar, 'L'::bpchar, 'C'::bpchar, 'Q'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE psite_masterpolicy ADD CONSTRAINT psite_masterpolicy_c02 CHECK (((sys_isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_masterpolicy ADD CONSTRAINT psite_masterpolicy_c03 CHECK (((sys_canchange)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_masterpolicy ADD CONSTRAINT psite_masterpolicy_c04 CHECK (((sys_candelegate)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_masterpolicy ADD CONSTRAINT psite_masterpolicy_c05 CHECK (((sys_mandatory)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_masterpolicy ADD CONSTRAINT psite_masterpolicy_c06 CHECK ((sys_type = ANY (ARRAY['S'::bpchar, 'U'::bpchar]))) NOT VALID;
ALTER TABLE psite_mdmenu ADD CONSTRAINT psite_mdmenu_c01 CHECK (((sys_isseparator)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_mdmenu ADD CONSTRAINT psite_mdmenu_c02 CHECK (((sys_isauthorizable)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_mdmenu ADD CONSTRAINT psite_mdmenu_c03 CHECK (((sys_isdocschemeapplicable)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT mop_c07 CHECK ((blockpromotionmode = ANY (ARRAY['I'::bpchar, 'M'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c01 CHECK ((type = ANY (ARRAY['CNI'::bpchar, 'CNR'::bpchar, 'VCH'::bpchar, 'CSH'::bpchar, 'EDC'::bpchar, 'RED'::bpchar, 'GVH'::bpchar, 'DNI'::bpchar, 'DNA'::bpchar, 'WLT'::bpchar])));
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c02 CHECK (((allow_multi_line)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c03 CHECK (((prevent_over_tendering)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c04 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c05 CHECK (((isdenoapplicable)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c06 CHECK (((issettlementapplicable)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c08 CHECK (((restrictbenefit)::numeric = ANY (ARRAY['0'::numeric, '1'::numeric]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c09 CHECK (((allownegativetender)::numeric = ANY (ARRAY['0'::numeric, '1'::numeric]))) NOT VALID;
ALTER TABLE psite_mop ADD CONSTRAINT psite_mop_c10 CHECK (((iscountapplicable)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_mop_assign ADD CONSTRAINT psite_mop_assign_c01 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_mop_assign ADD CONSTRAINT psite_mop_assign_c02 CHECK (((allowglobalissuereceive)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_packet ADD CONSTRAINT c_psite_packet CHECK ((isreceived = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE psite_packet ADD CONSTRAINT psite_packet_c01 CHECK ((status = ANY (ARRAY['C'::bpchar, 'V'::bpchar])));
ALTER TABLE psite_plugin ADD CONSTRAINT psite_plugin_c01 CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE psite_pluginalloc ADD CONSTRAINT psite_pluginalloc_c01 CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE psite_pluginconfigrepo ADD CONSTRAINT psite_pluginconfigrepo_c01 CHECK (((isdefault)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_posbill ADD CONSTRAINT psite_posbill_c02 CHECK ((promocleared = ANY (ARRAY['I'::bpchar, 'M'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbill ADD CONSTRAINT psite_posbill_c03 CHECK ((posmode = ANY (ARRAY['P'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbill ADD CONSTRAINT psite_posbill_c04 CHECK ((roundbasis = ANY (ARRAY['L'::bpchar, 'U'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbill ADD CONSTRAINT psite_posbill_c05 CHECK (((roundlimit)::numeric = ANY (ARRAY['2'::numeric, '1'::numeric, '0'::numeric]))) NOT VALID;
ALTER TABLE psite_posbill ADD CONSTRAINT psite_posbill_c08 CHECK (((emrsubmitstatusho)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_posbill ADD CONSTRAINT psite_posbill_c09 CHECK (((emrsubmitstatusstore)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_posbill ADD CONSTRAINT psite_terminal_c06 CHECK ((tpcrmredtype = ANY (ARRAY['P'::bpchar, 'C'::bpchar])));
ALTER TABLE psite_posbill ADD CONSTRAINT psite_terminal_c07 CHECK ((tpcrmcoupontype = ANY (ARRAY['A'::bpchar, 'P'::bpchar])));
ALTER TABLE psite_posbill_park ADD CONSTRAINT psite_posbill_park_c02 CHECK ((promocleared = ANY (ARRAY['I'::bpchar, 'M'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbill_park ADD CONSTRAINT psite_posbill_park_c03 CHECK ((posmode = ANY (ARRAY['P'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbill_park ADD CONSTRAINT psite_posbill_park_c04 CHECK ((roundbasis = ANY (ARRAY['L'::bpchar, 'U'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbill_park ADD CONSTRAINT psite_posbill_park_c05 CHECK (((roundlimit)::numeric = ANY (ARRAY['2'::numeric, '1'::numeric, '0'::numeric]))) NOT VALID;
ALTER TABLE psite_posbill_park ADD CONSTRAINT psite_terminal_park_c06 CHECK ((tpcrmredtype = ANY (ARRAY['P'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbill_park ADD CONSTRAINT psite_terminal_park_c07 CHECK ((tpcrmcoupontype = ANY (ARRAY['A'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbillcn ADD CONSTRAINT psite_posbillcn_c01 CHECK (((cnibilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSGVBill'::character varying)::text, ('POSDepRefBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillcn ADD CONSTRAINT psite_posbillcn_c02 CHECK (((cnrbilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSGVBill'::character varying)::text, ('POSDepRefBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillcn ADD CONSTRAINT psite_posbillcn_c03 CHECK (((isglobalcn)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_posbillcnadj ADD CONSTRAINT psite_posbillcnadj_c01 CHECK (((cnrbilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSGVBill'::character varying)::text, ('POSDepRefBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillcnop ADD CONSTRAINT psite_posbillcnop_c01 CHECK (((cnibilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSGVBill'::character varying)::text, ('POSDepRefBill'::character varying)::text])));
ALTER TABLE psite_posbillcnvoid ADD CONSTRAINT psite_posbillcnvoid_c01 CHECK (((cnibilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSDepRefBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillcnvoid ADD CONSTRAINT psite_posbillcnvoid_c02 CHECK (((isglobalcn)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_posbilldn ADD CONSTRAINT psite_posbilldn_c01 CHECK (((dnibilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSDepRefBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbilldn ADD CONSTRAINT psite_posbilldn_c02 CHECK (((dnabilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSDepRefBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbilldn ADD CONSTRAINT psite_posbilldn_c03 CHECK (((isadjusted)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_posbilldnop ADD CONSTRAINT psite_posbilldnop_c01 CHECK (((dnibilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSDepRefBill'::character varying)::text])));
ALTER TABLE psite_posbilldnvoid ADD CONSTRAINT psite_posbilldnvoid_c01 CHECK (((dnibilltype)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSDepRefBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillitem ADD CONSTRAINT psite_pbitem_siassrtbasis_c01 CHECK (((siassortmentbasis)::text = ANY (ARRAY[('P'::character varying)::text, ('A'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillitem ADD CONSTRAINT psite_posbillitem_c02 CHECK ((taxregime = ANY (ARRAY['V'::bpchar, 'G'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT psite_pbitm_prk_siassrtbss_c01 CHECK (((siassortmentbasis)::text = ANY (ARRAY[('P'::character varying)::text, ('A'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillitem_park ADD CONSTRAINT psite_posbillitem_park_c02 CHECK ((taxregime = ANY (ARRAY['V'::bpchar, 'G'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbillitemvoid ADD CONSTRAINT psite_posbillitemvoid_c02 CHECK ((taxregime = ANY (ARRAY['V'::bpchar, 'G'::bpchar])));
ALTER TABLE psite_posbillmop ADD CONSTRAINT psite_posbillmop_c01 CHECK (((paymentsource)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSGVBill'::character varying)::text, ('POSDepRefBill'::character varying)::text, ('PTCBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillmop ADD CONSTRAINT psite_posbillmop_c02 CHECK (((restrictbenefit)::numeric = ANY (ARRAY['0'::numeric, '1'::numeric]))) NOT VALID;
ALTER TABLE psite_posbillmop ADD CONSTRAINT psite_posbillmop_c03 CHECK (((tpedc)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric])));
ALTER TABLE psite_posbillmop ADD CONSTRAINT psite_posbillmop_c04 CHECK (((isdenoapplicable)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric])));
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT psite_posbillmop_park_c01 CHECK (((paymentsource)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSGVBill'::character varying)::text, ('POSDepRefBill'::character varying)::text, ('PTCBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT psite_posbillmop_park_c02 CHECK (((restrictbenefit)::numeric = ANY (ARRAY['0'::numeric, '1'::numeric]))) NOT VALID;
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT psite_posbillmop_park_c03 CHECK (((tpedc)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_posbillmop_park ADD CONSTRAINT psite_posbillmop_park_c04 CHECK (((isdenoapplicable)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_posbillmopvoid ADD CONSTRAINT psite_posbillmopvoid_c01 CHECK (((paymentsource)::text = ANY (ARRAY[('POSBill'::character varying)::text, ('POSGVBill'::character varying)::text, ('POSDepRefBill'::character varying)::text, ('PTCBill'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_posbillmopvoid ADD CONSTRAINT psite_posbillmopvoid_c02 CHECK (((restrictbenefit)::numeric = ANY (ARRAY['0'::numeric, '1'::numeric]))) NOT VALID;
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_c02 CHECK ((promocleared = ANY (ARRAY['I'::bpchar, 'M'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_c03 CHECK ((posmode = ANY (ARRAY['P'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_c04 CHECK ((roundbasis = ANY (ARRAY['L'::bpchar, 'U'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_c05 CHECK (((roundlimit)::numeric = ANY (ARRAY['2'::numeric, '1'::numeric, '0'::numeric]))) NOT VALID;
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_c06 CHECK ((tpcrmredtype = ANY (ARRAY['P'::bpchar, 'C'::bpchar])));
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_c07 CHECK ((tpcrmcoupontype = ANY (ARRAY['A'::bpchar, 'P'::bpchar])));
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_c08 CHECK (((emrsubmitstatus)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_posbillvoid ADD CONSTRAINT psite_posbillvoid_c09 CHECK (((emrvoidsubmitstatus)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE psite_posgvbill ADD CONSTRAINT psite_posgvbill_c01 CHECK ((discountbasis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_posorder ADD CONSTRAINT psite_posorder_c01 CHECK (((homedeliveryrequired)::numeric = ANY (ARRAY['0'::numeric, '1'::numeric]))) NOT VALID;
ALTER TABLE psite_posorder ADD CONSTRAINT psite_posorder_c02 CHECK (((status)::text = ANY (ARRAY[('P'::character varying)::text, ('C'::character varying)::text, ('I'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_pospaydrop ADD CONSTRAINT psite_pospaydrop_c01 CHECK ((amount > (0)::numeric));
ALTER TABLE psite_pospayinout ADD CONSTRAINT psite_pospayinout_c01 CHECK ((type = ANY (ARRAY['I'::bpchar, 'O'::bpchar])));
ALTER TABLE psite_pospayinout ADD CONSTRAINT psite_pospayinout_c02 CHECK ((amount > (0)::numeric));
ALTER TABLE psite_pospaymop ADD CONSTRAINT psite_pospaymop_c01 CHECK (((source)::text = ANY (ARRAY[('Opening'::character varying)::text, ('Closing'::character varying)::text, ('PayInOut'::character varying)::text, ('PayDrop'::character varying)::text])));
ALTER TABLE psite_pospaymop ADD CONSTRAINT psite_pospaymop_c02 CHECK (((iscountapplicable)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric])));
ALTER TABLE psite_pospaymopcount ADD CONSTRAINT psite_pospaymopcount_c01 CHECK ((perunit_value > (0)::numeric));
ALTER TABLE psite_pospaymopcount ADD CONSTRAINT psite_pospaymopcount_c02 CHECK (((no_of_unit)::numeric > (0)::numeric));
ALTER TABLE psite_posstlm ADD CONSTRAINT c_psite_posstlm_error CHECK ((((status <> 'O'::bpchar) AND (auto_stlm_error IS NULL)) OR (status = 'O'::bpchar)));
ALTER TABLE psite_posstlm ADD CONSTRAINT psite_posstlm_c01 CHECK ((status = ANY (ARRAY['O'::bpchar, 'C'::bpchar, 'R'::bpchar, 'U'::bpchar])));
ALTER TABLE psite_posstlm ADD CONSTRAINT psite_posstlm_c02 CHECK ((validation_state = ANY (ARRAY['P'::bpchar, 'S'::bpchar, 'E'::bpchar])));
ALTER TABLE psite_promo_assign ADD CONSTRAINT psite_promo_assign_check CHECK ((activation_type = ANY (ARRAY['D'::bpchar, 'H'::bpchar])));
ALTER TABLE psite_promo_assign ADD CONSTRAINT psite_promo_assign_ckstat CHECK ((status = ANY (ARRAY['A'::bpchar, 'B'::bpchar, 'C'::bpchar, 'U'::bpchar])));
ALTER TABLE psite_ptcbill ADD CONSTRAINT psite_ptcbill_c01 CHECK ((ptcheadmode = ANY (ARRAY['R'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE psite_ptcbillvoid ADD CONSTRAINT psite_ptcbillvoid_c01 CHECK ((ptcheadmode = ANY (ARRAY['R'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE psite_ptchead ADD CONSTRAINT psite_ptchead_c01 CHECK ((ptcheadmode = ANY (ARRAY['R'::bpchar, 'P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_ptchead ADD CONSTRAINT psite_ptchead_c02 CHECK (((isextinct)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_ptchead_assign ADD CONSTRAINT psite_ptchead_assign_c01 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_reason ADD CONSTRAINT psite_reason_c01 CHECK (((type)::text = ANY (ARRAY[('POSRT'::character varying)::text, ('GRT'::character varying)::text, ('NOS'::character varying)::text, ('VOID'::character varying)::text, ('VOIDDS'::character varying)::text, ('POSORDCNL'::character varying)::text, ('PAYINOUT'::character varying)::text, ('VOIDDEP'::character varying)::text, ('VOIDREF'::character varying)::text])));
ALTER TABLE psite_si_assign ADD CONSTRAINT psite_si_assign_appr_c02 CHECK ((approved = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE psite_si_assign ADD CONSTRAINT psite_si_assign_basis_c01 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE psite_si_assign ADD CONSTRAINT psite_si_assign_status_c02 CHECK ((status = ANY (ARRAY['U'::bpchar, 'A'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT psite_stlm_param_acc_c01 CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar, 'B'::bpchar]))) NOT VALID;
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT psite_stlm_param_acc_c02 CHECK (((auto)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT psite_stlm_param_acc_c03 CHECK (((ismandatory)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_stlm_param_acc ADD CONSTRAINT psite_stlm_param_acc_c04 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_stlm_param_oth ADD CONSTRAINT psite_stlm_param_oth_c01 CHECK (((type)::text = ANY (ARRAY[('NUMBER'::character varying)::text, ('LIST'::character varying)::text, ('STRING'::character varying)::text, ('DATE'::character varying)::text]))) NOT VALID;
ALTER TABLE psite_stlm_param_oth ADD CONSTRAINT psite_stlm_param_oth_c02 CHECK (((ismandatory)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_stlm_param_oth ADD CONSTRAINT psite_stlm_param_oth_c03 CHECK (((isextinct)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_stlm_param_oth ADD CONSTRAINT psite_stlm_param_oth_c04 CHECK (((validatelist)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric]))) NOT VALID;
ALTER TABLE psite_terminal ADD CONSTRAINT psite_terminal_c01 CHECK ((posmode = ANY (ARRAY['P'::bpchar, 'D'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE psite_terminal ADD CONSTRAINT psite_terminal_c02 CHECK (((allowmultidocscheme)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_terminal ADD CONSTRAINT psite_terminal_c03 CHECK (((allowmultireporttemplate)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_terminal ADD CONSTRAINT psite_terminal_c04 CHECK (((allowordermultidocscheme)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE psite_terminal ADD CONSTRAINT psite_terminal_c05 CHECK (((allowordermultireporttemplate)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE pur_price_chart ADD CONSTRAINT c_pur_price_chart_extinct CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvch_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvchg_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvchg_operation_level CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purinvchg ADD CONSTRAINT c_purinvchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE purinvchg ADD CONSTRAINT purinvchg_c01 CHECK ((include_in_tds = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purinvchg_item ADD CONSTRAINT c_purinvchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg_item ADD CONSTRAINT c_purinvchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE purinvchg_item ADD CONSTRAINT c_purinvchg_item_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purinvchg_item ADD CONSTRAINT c_purinvchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg_item ADD CONSTRAINT c_purinvchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purinvchg_item ADD CONSTRAINT c_purinvchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE purinvchg_item ADD CONSTRAINT purinvchg_item_c01 CHECK ((include_in_tds = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purinvdet ADD CONSTRAINT c_purinvdet_grs_dis_tax_net CHECK ((COALESCE(netamt, (0)::numeric) = ((COALESCE(grsamt, (0)::numeric) - COALESCE(discount, (0)::numeric)) + COALESCE(taxamt, (0)::numeric)))) NOT VALID;
ALTER TABLE purinvdet ADD CONSTRAINT c_purinvdet_qty CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purinvdet ADD CONSTRAINT c_purinvdet_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purinvdet ADD CONSTRAINT purinvdet_exbasis_c01 CHECK ((ex_basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE purinvdet ADD CONSTRAINT purinvdet_gst_itc_appl CHECK ((gst_itc_appl = ANY (ARRAY['IP'::bpchar, 'CP'::bpchar, 'NO'::bpchar])));
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_c02 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_c03 CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_c04 CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_c05 CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_c06 CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_c07 CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg ADD CONSTRAINT purinvjrnchg_c08 CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT purinvjrnchg_item_c03 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT purinvjrnchg_item_c04 CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT purinvjrnchg_item_c05 CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT purinvjrnchg_item_c06 CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT purinvjrnchg_item_c07 CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purinvjrnchg_item ADD CONSTRAINT purinvjrnchg_item_c08 CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE purinvjrndet ADD CONSTRAINT purinvjrndet_c01 CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purinvjrndet ADD CONSTRAINT purinvjrndet_gst_itc_appl CHECK ((gst_itc_appl = ANY (ARRAY['IP'::bpchar, 'CP'::bpchar, 'NO'::bpchar])));
ALTER TABLE purinvjrnmain ADD CONSTRAINT purinvjrnmain_c01 CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar])));
ALTER TABLE purinvjrnmain ADD CONSTRAINT purinvjrnmain_c02 CHECK ((jrntype = ANY (ARRAY['D'::bpchar, 'C'::bpchar])));
ALTER TABLE purinvjrnmain ADD CONSTRAINT purinvjrnmain_c03 CHECK ((gstappl = ANY (ARRAY['D'::bpchar, 'C'::bpchar, 'N'::bpchar])));
ALTER TABLE purinvjrnmain ADD CONSTRAINT purinvjrnmain_c04 CHECK ((gl_cc_appl = ANY (ARRAY['N'::bpchar, 'Y'::bpchar])));
ALTER TABLE purinvmain ADD CONSTRAINT c_purinvmain_adjamt_netamt CHECK ((COALESCE(adjamt, (0)::numeric) <= COALESCE(netamt, (0)::numeric))) NOT VALID;
ALTER TABLE purinvmain ADD CONSTRAINT c_purinvmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text]))) NOT VALID;
ALTER TABLE purinvmain ADD CONSTRAINT c_purinvmain_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvmain ADD CONSTRAINT c_purinvmain_gstappl CHECK ((gstappl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purinvmain ADD CONSTRAINT c_purinvmain_netamt CHECK ((COALESCE(netamt, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purinvmain ADD CONSTRAINT c_purinvmain_scheme_docno CHECK ((upper((scheme_docno)::text) <> 'AUTOMATIC'::text)) NOT VALID;
ALTER TABLE purinvmain ADD CONSTRAINT c_purinvmain_sdocno CHECK ((((gstappl = 'Y'::bpchar) AND (length((scheme_docno)::text) <= 16)) OR (COALESCE(gstappl, 'N'::bpchar) <> 'Y'::bpchar)));
ALTER TABLE purinvmain ADD CONSTRAINT c_purinvmain_w_consignment CHECK ((whether_consignment = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purinvmain ADD CONSTRAINT purinvmain_cd_appl CHECK ((cash_discount_applicable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purinvmain ADD CONSTRAINT purinvmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE purordchg ADD CONSTRAINT c_purordchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE purordchg ADD CONSTRAINT c_purordchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE purordchg ADD CONSTRAINT c_purordchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purordchg ADD CONSTRAINT c_purordchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purordchg ADD CONSTRAINT c_purordchg_operation_level CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE purordchg ADD CONSTRAINT c_purordchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purordchg ADD CONSTRAINT c_purordchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purordchg ADD CONSTRAINT c_purordchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE purordchg_item ADD CONSTRAINT c_purordchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE purordchg_item ADD CONSTRAINT c_purordchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE purordchg_item ADD CONSTRAINT c_purordchg_item_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purordchg_item ADD CONSTRAINT c_purordchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purordchg_item ADD CONSTRAINT c_purordchg_item_operation_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE purordchg_item ADD CONSTRAINT c_purordchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purordchg_item ADD CONSTRAINT c_purordchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE purordcnldet ADD CONSTRAINT c_cnl_purorddet_code CHECK (((purorddet_code)::numeric > (0)::numeric)) NOT VALID;
ALTER TABLE purordcnldet ADD CONSTRAINT c_purordcnldet_cnlqty CHECK ((COALESCE(cnlqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purordcnlmain ADD CONSTRAINT c_purordcnlmain_entry_source CHECK (((entry_source_old = 'L'::bpchar) OR (entry_source_old = 'W'::bpchar))) NOT VALID;
ALTER TABLE purordcnlmain ADD CONSTRAINT c_purordcnlmain_entry_src CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text, ('SHIPAPPL'::character varying)::text])));
ALTER TABLE purorddet ADD CONSTRAINT c_purorddet_cnlqty CHECK ((COALESCE(cnlqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purorddet ADD CONSTRAINT c_purorddet_oqty CHECK ((COALESCE(oqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purorddet ADD CONSTRAINT c_purorddet_ordqty CHECK ((COALESCE(ordqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purorddet ADD CONSTRAINT c_purorddet_ordqty_cnlqty_rcqt CHECK (((COALESCE(ordqty, (0)::numeric) - COALESCE(cnlqty, (0)::numeric)) >= COALESCE(rcqty, (0)::numeric))) NOT VALID;
ALTER TABLE purorddet ADD CONSTRAINT c_purorddet_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purorddet ADD CONSTRAINT c_purorddet_rcqty CHECK ((COALESCE(rcqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purorddet ADD CONSTRAINT purorddet_exbasis_c01 CHECK ((ex_basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE purordmain ADD CONSTRAINT c_purordmain_enable_lgt_track CHECK (((enable_lgt_track)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric]))) NOT VALID;
ALTER TABLE purordmain ADD CONSTRAINT c_purordmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE purordmain ADD CONSTRAINT c_purordmain_shipstatus CHECK (((shipstatus)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric, (2)::numeric, (3)::numeric, (4)::numeric, (5)::numeric]))) NOT VALID;
ALTER TABLE purordmain ADD CONSTRAINT c_purordmain_stat CHECK ((stat = ANY (ARRAY['T'::bpchar, 'P'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purordmain ADD CONSTRAINT c_purordmain_whether_consign CHECK ((whether_consignment = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purordset ADD CONSTRAINT purordset_c01 CHECK (((COALESCE(qty, (0)::numeric) - COALESCE(cnlqty, (0)::numeric)) >= COALESCE(rcqty, (0)::numeric)));
ALTER TABLE purreqdet ADD CONSTRAINT c_purreqdet_req_tfp CHECK ((COALESCE(reqqty, (0)::numeric) >= COALESCE(tfpqty, (0)::numeric))) NOT VALID;
ALTER TABLE purreqmain ADD CONSTRAINT c_purreqmain_reqdt_duedate CHECK ((duedate >= reqdt)) NOT VALID;
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_operation_level CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purrtchg ADD CONSTRAINT c_purrtchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE purrtchg_item ADD CONSTRAINT c_purrtchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE purrtchg_item ADD CONSTRAINT c_purrtchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE purrtchg_item ADD CONSTRAINT c_purrtchg_item_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE purrtchg_item ADD CONSTRAINT c_purrtchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purrtchg_item ADD CONSTRAINT c_purrtchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purrtchg_item ADD CONSTRAINT c_purrtchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE purrtdet ADD CONSTRAINT c_purrtdet_grs_dis_tax_net CHECK ((COALESCE(netamt, (0)::numeric) = ((COALESCE(grsamt, (0)::numeric) - COALESCE(discount, (0)::numeric)) + COALESCE(taxamt, (0)::numeric)))) NOT VALID;
ALTER TABLE purrtdet ADD CONSTRAINT c_purrtdet_qty CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purrtdet ADD CONSTRAINT c_purrtdet_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purrtdet ADD CONSTRAINT purrtdet_exbasis_c01 CHECK ((ex_basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE purrtdet ADD CONSTRAINT purrtdet_gst_itc_appl CHECK ((gst_itc_appl = ANY (ARRAY['IP'::bpchar, 'CP'::bpchar, 'NO'::bpchar])));
ALTER TABLE purrtmain ADD CONSTRAINT c_purrtmain_adjamt_netamt CHECK ((COALESCE(adjamt, (0)::numeric) <= COALESCE(netamt, (0)::numeric))) NOT VALID;
ALTER TABLE purrtmain ADD CONSTRAINT c_purrtmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE purrtmain ADD CONSTRAINT c_purrtmain_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purrtmain ADD CONSTRAINT c_purrtmain_gstappl CHECK ((gstappl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar, 'C'::bpchar])));
ALTER TABLE purrtmain ADD CONSTRAINT c_purrtmain_netamt CHECK ((COALESCE(netamt, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE purrtmain ADD CONSTRAINT c_purrtmain_sdocno CHECK ((((gstappl <> 'N'::bpchar) AND (length((scheme_docno)::text) <= 16)) OR (COALESCE(gstappl, 'N'::bpchar) = 'N'::bpchar)));
ALTER TABLE purrtmain ADD CONSTRAINT purrtmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE purservice ADD CONSTRAINT c_purservice_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purservice ADD CONSTRAINT c_purservice_gst_itc_appl CHECK ((gst_itc_appl = ANY (ARRAY['IP'::bpchar, 'CP'::bpchar, 'NO'::bpchar])));
ALTER TABLE purservice ADD CONSTRAINT c_purservicemain_service_type CHECK ((service_type = ANY (ARRAY['J'::bpchar, 'L'::bpchar, 'O'::bpchar, 'C'::bpchar, 'A'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purservice ADD CONSTRAINT c_purservicemain_track_qty CHECK ((track_qty = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg ADD CONSTRAINT c_pursrvchg_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg ADD CONSTRAINT c_pursrvchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE pursrvchg ADD CONSTRAINT c_pursrvchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvchg ADD CONSTRAINT c_pursrvchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE pursrvchg ADD CONSTRAINT c_pursrvchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg ADD CONSTRAINT c_pursrvchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE pursrvchg ADD CONSTRAINT pursrvchg_include_in_tds CHECK ((include_in_tds = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg_item ADD CONSTRAINT c_pursrvchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg_item ADD CONSTRAINT c_pursrvchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE pursrvchg_item ADD CONSTRAINT c_pursrvchg_item_incl_tds CHECK ((include_in_tds = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg_item ADD CONSTRAINT c_pursrvchg_item_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvchg_item ADD CONSTRAINT c_pursrvchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg_item ADD CONSTRAINT c_pursrvchg_item_op_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg_item ADD CONSTRAINT c_pursrvchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE pursrvchg_item ADD CONSTRAINT c_pursrvchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE pursrvdet ADD CONSTRAINT c_pursrvdet_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvjrnchg ADD CONSTRAINT c_pursrvjrnchg_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvjrnchg ADD CONSTRAINT c_pursrvjrnchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE pursrvjrnchg ADD CONSTRAINT c_pursrvjrnchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvjrnchg ADD CONSTRAINT c_pursrvjrnchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE pursrvjrnchg ADD CONSTRAINT c_pursrvjrnchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE pursrvjrnchg ADD CONSTRAINT c_pursrvjrnchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT c_pursjchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT c_pursrvjrnchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar])));
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT c_pursrvjrnchg_item_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT c_pursrvjrnchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT c_pursrvjrnchg_item_op_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar])));
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT c_pursrvjrnchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar])));
ALTER TABLE pursrvjrnchg_item ADD CONSTRAINT c_pursrvjrnchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE pursrvjrndet ADD CONSTRAINT c_pursrvjrndet_gl_cc_apl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvjrndet ADD CONSTRAINT pursrvjrndet_c01 CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric));
ALTER TABLE pursrvjrnmain ADD CONSTRAINT c_pursrvjrnmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE pursrvjrnmain ADD CONSTRAINT c_pursrvjrnmain_scheme_docno CHECK ((upper((scheme_docno)::text) <> 'AUTOMATIC'::text)) NOT VALID;
ALTER TABLE pursrvjrnmain ADD CONSTRAINT c_pursrvjrnmain_sdocno CHECK ((((gstappl = ANY (ARRAY['D'::bpchar, 'C'::bpchar])) AND (length((scheme_docno)::text) <= 16)) OR (COALESCE(gstappl, 'N'::bpchar) <> ALL (ARRAY['D'::bpchar, 'C'::bpchar]))));
ALTER TABLE pursrvjrnmain ADD CONSTRAINT pursrvjrnmain_c01 CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar]))) NOT VALID;
ALTER TABLE pursrvjrnmain ADD CONSTRAINT pursrvjrnmain_c02 CHECK ((jrntype = ANY (ARRAY['D'::bpchar, 'C'::bpchar])));
ALTER TABLE pursrvjrnmain ADD CONSTRAINT pursrvjrnmain_c03 CHECK ((gstappl = ANY (ARRAY['D'::bpchar, 'C'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvjrnmain ADD CONSTRAINT pursrvjrnmain_c04 CHECK ((gl_cc_appl = ANY (ARRAY['N'::bpchar, 'Y'::bpchar])));
ALTER TABLE pursrvmain ADD CONSTRAINT c_pursrvmain_adjamt_netamt CHECK ((COALESCE(adjamt, (0)::numeric) <= COALESCE(netamt, (0)::numeric))) NOT VALID;
ALTER TABLE pursrvmain ADD CONSTRAINT c_pursrvmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE pursrvmain ADD CONSTRAINT c_pursrvmain_gstappl CHECK ((gstappl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvmain ADD CONSTRAINT c_pursrvmain_netamt CHECK ((COALESCE(netamt, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE pursrvmain ADD CONSTRAINT c_pursrvmain_sdocno CHECK ((((gstappl = 'Y'::bpchar) AND (length((scheme_docno)::text) <= 16)) OR (COALESCE(gstappl, 'N'::bpchar) <> 'Y'::bpchar)));
ALTER TABLE pursrvmain ADD CONSTRAINT c_pursrvmain_type CHECK ((type = ANY (ARRAY['J'::bpchar, 'L'::bpchar, 'O'::bpchar, 'C'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvmain ADD CONSTRAINT pursrvmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE pursrvmain ADD CONSTRAINT pursrvmain_tds_app CHECK ((tds_app = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvord_schedule ADD CONSTRAINT c_invgrtdet_rtinvqty CHECK ((COALESCE(ordqty, (0)::numeric) >= (COALESCE(invqty, (0)::numeric) - COALESCE(cnlqty, (0)::numeric)))) NOT VALID;
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_include_in_tds CHECK ((include_in_tds = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_operation_level CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg ADD CONSTRAINT c_pursrvordchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE pursrvordchg_item ADD CONSTRAINT c_pursrvordchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg_item ADD CONSTRAINT c_pursrvordchg_item_gst_comp CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE pursrvordchg_item ADD CONSTRAINT c_pursrvordchg_item_incl_tds CHECK ((include_in_tds = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg_item ADD CONSTRAINT c_pursrvordchg_item_isreverse CHECK ((isreverse = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE pursrvordchg_item ADD CONSTRAINT c_pursrvordchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg_item ADD CONSTRAINT c_pursrvordchg_item_op_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg_item ADD CONSTRAINT c_pursrvordchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordchg_item ADD CONSTRAINT c_pursrvordchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE pursrvorddet ADD CONSTRAINT c_pursrvorddet_service_type CHECK ((service_type = ANY (ARRAY['J'::bpchar, 'L'::bpchar, 'O'::bpchar, 'C'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvorddet ADD CONSTRAINT c_pursrvorddet_track_qty CHECK ((track_qty = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE pursrvordmain ADD CONSTRAINT c_pursrvordmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE pursrvordmain ADD CONSTRAINT c_pursrvordmain_status CHECK ((status = ANY (ARRAY['P'::bpchar, 'N'::bpchar, 'T'::bpchar]))) NOT VALID;
ALTER TABLE purtermdet ADD CONSTRAINT c_purtermdet_include_in_tds CHECK ((include_in_tds = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purtermdet ADD CONSTRAINT c_purtermdet_operation_level CHECK ((operation_level = ANY (ARRAY['H'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE purtermdet ADD CONSTRAINT c_purtermdet_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE purtermmain ADD CONSTRAINT c_purtermmain_headlevischange CHECK ((header_level_ischangeable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE purtermmain ADD CONSTRAINT c_purtermmain_linelevischange CHECK ((line_level_ischangeable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE reportlayout ADD CONSTRAINT reportlayout_c01 CHECK ((printingmode = ANY (ARRAY['T'::bpchar, 'G'::bpchar]))) NOT VALID;
ALTER TABLE reportlayout ADD CONSTRAINT reportlayout_c02 CHECK ((layoutowner = ANY (ARRAY['H'::bpchar, 'S'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_agcomm CHECK ((agcomm = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_cd CHECK ((cd = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salchg ADD CONSTRAINT c_salchg_gst_glcode CHECK ((((source = 'G'::bpchar) AND (glcode IS NULL)) OR (source <> 'G'::bpchar)));
ALTER TABLE salchg ADD CONSTRAINT c_salchg_gst_slcode CHECK ((((source = 'G'::bpchar) AND (slcode IS NULL)) OR (source <> 'G'::bpchar)));
ALTER TABLE salchg ADD CONSTRAINT c_salchg_ischangeableininv CHECK ((is_changeable_in_invoice = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_issystem CHECK ((issystem = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE salchg ADD CONSTRAINT c_salchg_istax CHECK ((istax = ANY (ARRAY['N'::bpchar, 'Y'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_operation_level CHECK ((operation_level = ANY (ARRAY['H'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_roundoff CHECK ((roundoff = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salchg ADD CONSTRAINT c_salchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salchg ADD CONSTRAINT c_salchg_taxable CHECK ((taxable = ANY (ARRAY['T'::bpchar, 'S'::bpchar, 'O'::bpchar]))) NOT VALID;
ALTER TABLE salcreditrating ADD CONSTRAINT c_salcreditrating_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salcsdet ADD CONSTRAINT c_salcsdet_taxregime CHECK ((taxregime = ANY (ARRAY['V'::bpchar, 'G'::bpchar]))) NOT VALID;
ALTER TABLE salcsdet ADD CONSTRAINT salcsdet_c01 CHECK (((isdamaged)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE salcsdet ADD CONSTRAINT salcsdet_c02 CHECK (((issecondarysupply)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric])));
ALTER TABLE salcsdet ADD CONSTRAINT salcsdet_c03 CHECK ((secondarysupplytaxpolicy = ANY (ARRAY['I'::bpchar, 'P'::bpchar, 'M'::bpchar, NULL::bpchar])));
ALTER TABLE salcsmain ADD CONSTRAINT salcsmain_c01 CHECK (((csno)::numeric > (0)::numeric)) NOT VALID;
ALTER TABLE salcsmain ADD CONSTRAINT salcsmain_c02 CHECK ((status = ANY (ARRAY['O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE salcsmain ADD CONSTRAINT salcsmain_c03 CHECK (((channeltype)::text = ANY (ARRAY[('RTL'::character varying)::text, ('ETL'::character varying)::text])));
ALTER TABLE salcsmain ADD CONSTRAINT salcsmain_c04 CHECK (((isbillingshippingsame)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE salcsmain ADD CONSTRAINT salcsmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE salcsmop ADD CONSTRAINT salcsmop_c01 CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg ADD CONSTRAINT c_salinvchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg ADD CONSTRAINT c_salinvchg_gl_cc_appl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg ADD CONSTRAINT c_salinvchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salinvchg ADD CONSTRAINT c_salinvchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg ADD CONSTRAINT c_salinvchg_operation_level CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg ADD CONSTRAINT c_salinvchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg ADD CONSTRAINT c_salinvchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salinvchg_item ADD CONSTRAINT c_salinvchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg_item ADD CONSTRAINT c_salinvchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salinvchg_item ADD CONSTRAINT c_salinvchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg_item ADD CONSTRAINT c_salinvchg_item_operation_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg_item ADD CONSTRAINT c_salinvchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salinvchg_item ADD CONSTRAINT c_salinvchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salinvdet ADD CONSTRAINT c_salinvdet_invqty CHECK ((COALESCE(invqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salinvdet ADD CONSTRAINT c_salinvdet_invqty_rtqty CHECK ((COALESCE(invqty, (0)::numeric) >= COALESCE(rtqty, (0)::numeric))) NOT VALID;
ALTER TABLE salinvdet ADD CONSTRAINT c_salinvdet_rtqty CHECK ((COALESCE(rtqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salinvdet ADD CONSTRAINT salinvdet_exbasis_c01 CHECK ((ex_basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar])));
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_c02 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_c03 CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_c04 CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_c05 CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_c06 CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_c07 CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg ADD CONSTRAINT salinvjrnchg_c08 CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT salinvjrnchg_item_c03 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT salinvjrnchg_item_c04 CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT salinvjrnchg_item_c05 CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT salinvjrnchg_item_c06 CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT salinvjrnchg_item_c07 CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salinvjrnchg_item ADD CONSTRAINT salinvjrnchg_item_c08 CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salinvjrndet ADD CONSTRAINT salinvjrndet_c01 CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salinvjrnmain ADD CONSTRAINT c_salinvjrnmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE salinvjrnmain ADD CONSTRAINT salinvjrnmain_c01 CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar])));
ALTER TABLE salinvjrnmain ADD CONSTRAINT salinvjrnmain_c02 CHECK ((jrntype = ANY (ARRAY['D'::bpchar, 'C'::bpchar])));
ALTER TABLE salinvjrnmain ADD CONSTRAINT salinvjrnmain_c03 CHECK ((gstappl = ANY (ARRAY['D'::bpchar, 'C'::bpchar, 'N'::bpchar])));
ALTER TABLE salinvjrnmain ADD CONSTRAINT salinvjrnmain_c04 CHECK ((gl_cc_appl = ANY (ARRAY['N'::bpchar, 'Y'::bpchar])));
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_adjamt_netamt CHECK ((COALESCE(adjamt, (0)::numeric) <= COALESCE(netamt, (0)::numeric))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_discount_basis CHECK ((discount_basis = ANY (ARRAY['B'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_discount_mode CHECK (((discount_mode IS NULL) OR (discount_mode = ANY (ARRAY['U'::bpchar, 'D'::bpchar])))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_gl_cc_appl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_gstappl CHECK ((gstappl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_incl_vat_in_dist CHECK ((incl_vat_in_dist = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_netamt CHECK ((COALESCE(netamt, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_pricetype CHECK ((pricetype = ANY (ARRAY['M'::bpchar, 'W'::bpchar, 'C'::bpchar, 'L'::bpchar, 'R'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_saletype CHECK ((saletype = ANY (ARRAY['O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salinvmain_sdocno CHECK ((((gstappl = 'Y'::bpchar) AND (length((scheme_docno)::text) <= 16)) OR (COALESCE(gstappl, 'N'::bpchar) <> 'Y'::bpchar)));
ALTER TABLE salinvmain ADD CONSTRAINT c_salnvmain_formapp CHECK ((formapp = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT c_salnvmain_issecondary CHECK ((issecondary = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salinvmain ADD CONSTRAINT salinvmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE salordchg ADD CONSTRAINT c_salordchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salordchg ADD CONSTRAINT c_salordchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salordchg ADD CONSTRAINT c_salordchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salordchg ADD CONSTRAINT c_salordchg_op_lev CHECK ((operation_level = ANY (ARRAY['H'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE salordchg ADD CONSTRAINT c_salordchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salordchg ADD CONSTRAINT c_salordchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salordchg ADD CONSTRAINT c_salordchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salordchg_item ADD CONSTRAINT c_salordchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salordchg_item ADD CONSTRAINT c_salordchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salordchg_item ADD CONSTRAINT c_salordchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salordchg_item ADD CONSTRAINT c_salordchg_item_operation_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar]))) NOT VALID;
ALTER TABLE salordchg_item ADD CONSTRAINT c_salordchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salordchg_item ADD CONSTRAINT c_salordchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salordcnldet ADD CONSTRAINT c_salordcnldet_cnlqty CHECK ((COALESCE(cnlqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salordcnlmain ADD CONSTRAINT c_salordcnlmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_cnlqty CHECK ((COALESCE(cnlqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_dqty CHECK ((COALESCE(dqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_invqty CHECK ((COALESCE(invqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_invqty_dqty CHECK ((COALESCE(invqty, (0)::numeric) <= COALESCE(dqty, (0)::numeric))) NOT VALID;
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_oqty CHECK ((COALESCE(oqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_ordqty CHECK ((COALESCE(ordqty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_ordqty_cnlqty_dqty CHECK (((COALESCE(ordqty, (0)::numeric) - COALESCE(cnlqty, (0)::numeric)) >= COALESCE(dqty, (0)::numeric))) NOT VALID;
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_ordqty_oqty CHECK ((COALESCE(ordqty, (0)::numeric) >= COALESCE(oqty, (0)::numeric))) NOT VALID;
ALTER TABLE salorddet ADD CONSTRAINT c_salorddet_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_disc_basis CHECK ((discount_basis = ANY (ARRAY['B'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_disc_mode CHECK (((discount_mode IS NULL) OR (discount_mode = ANY (ARRAY['U'::bpchar, 'D'::bpchar])))) NOT VALID;
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text, ('POSORDER'::character varying)::text])));
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_hold CHECK ((ishold = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_incl_vat_in_dist CHECK ((incl_vat_in_dist = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_pricetype CHECK ((pricetype = ANY (ARRAY['M'::bpchar, 'W'::bpchar, 'C'::bpchar, 'L'::bpchar, 'R'::bpchar, 'F'::bpchar]))) NOT VALID;
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_reserve_inv CHECK ((reserve_inv = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_saletype CHECK ((saletype = ANY (ARRAY['O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE salordmain ADD CONSTRAINT c_salordmain_stat CHECK ((stat = ANY (ARRAY['T'::bpchar, 'P'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salpricelistdet ADD CONSTRAINT c_salpricelistdet_excp_basis CHECK ((exception_basis = ANY (ARRAY['P'::bpchar, 'F'::bpchar])));
ALTER TABLE salpricelistdet ADD CONSTRAINT c_salpricelistdet_price CHECK ((COALESCE(price, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salpricelistmain ADD CONSTRAINT c_salprclstmain_incl_vat_disc CHECK ((include_vat_in_discount = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salpricelistmain ADD CONSTRAINT c_salprclstmn_net_prc_rnd_lmt CHECK ((net_price_round_limit = ANY (ARRAY['U'::bpchar, 'L'::bpchar, 'R'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salpricelistmain ADD CONSTRAINT c_salpricelistmain_disc_basis CHECK ((discount_basis = ANY (ARRAY['B'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salpricelistmain ADD CONSTRAINT c_salpricelistmain_disc_mode CHECK ((discount_mode = ANY (ARRAY['U'::bpchar, 'D'::bpchar]))) NOT VALID;
ALTER TABLE salpricelistmain ADD CONSTRAINT c_salpricelistmain_price_type CHECK ((price_type = ANY (ARRAY['L'::bpchar, 'M'::bpchar, 'W'::bpchar, 'R'::bpchar, 'C'::bpchar])));
ALTER TABLE salreqdet ADD CONSTRAINT c_salreqdet_req_pkg CHECK ((COALESCE(reqqty, (0)::numeric) >= COALESCE(pkgqty, (0)::numeric))) NOT VALID;
ALTER TABLE salrtchg ADD CONSTRAINT c_salrtchg_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salrtchg ADD CONSTRAINT c_salrtchg_gl_cc_appl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salrtchg ADD CONSTRAINT c_salrtchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salrtchg ADD CONSTRAINT c_salrtchg_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salrtchg ADD CONSTRAINT c_salrtchg_operation_level CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'H'::bpchar]))) NOT VALID;
ALTER TABLE salrtchg ADD CONSTRAINT c_salrtchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salrtchg ADD CONSTRAINT c_salrtchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salrtchg_item ADD CONSTRAINT c_salrtchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE salrtchg_item ADD CONSTRAINT c_salrtchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salrtchg_item ADD CONSTRAINT c_salrtchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salrtchg_item ADD CONSTRAINT c_salrtchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE salrtchg_item ADD CONSTRAINT c_salrtchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salrtdet ADD CONSTRAINT c_salrtdet_qty CHECK ((COALESCE(qty, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salrtdet ADD CONSTRAINT salrtdet_exbasis_c01 CHECK ((ex_basis = ANY (ARRAY['M'::bpchar, 'R'::bpchar, 'L'::bpchar])));
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_adjamt_netamt CHECK ((COALESCE(adjamt, (0)::numeric) <= COALESCE(netamt, (0)::numeric))) NOT VALID;
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_agnst_site_doc CHECK ((agnst_mng_site_document = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_gl_cc_appl CHECK ((gl_cc_appl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_gstappl CHECK ((gstappl = ANY (ARRAY['C'::bpchar, 'N'::bpchar])));
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_issecondary CHECK ((issecondary = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_netamt CHECK ((COALESCE(netamt, (0)::numeric) >= (0)::numeric)) NOT VALID;
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_saletype CHECK ((saletype = ANY (ARRAY['O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE salrtmain ADD CONSTRAINT c_salrtmain_sdocno CHECK ((((gstappl <> 'N'::bpchar) AND (length((scheme_docno)::text) <= 16)) OR (COALESCE(gstappl, 'N'::bpchar) = 'N'::bpchar)));
ALTER TABLE salrtmain ADD CONSTRAINT salrtmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar, 'R'::bpchar]))) NOT VALID;
ALTER TABLE salrtreason ADD CONSTRAINT salrtreason_c01 CHECK ((pos_default = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salrtreason ADD CONSTRAINT salrtreason_c02 CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE salsrvchg ADD CONSTRAINT c_salsrvchg_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salsrvchg ADD CONSTRAINT c_salsrvchg_rate CHECK ((COALESCE(rate, (0)::numeric) >= (0)::numeric));
ALTER TABLE salsrvchg ADD CONSTRAINT c_salsrvchg_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar])));
ALTER TABLE salsrvchg ADD CONSTRAINT c_salsrvchg_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salsrvchg_item ADD CONSTRAINT c_salsrvchg_item_basis CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar])));
ALTER TABLE salsrvchg_item ADD CONSTRAINT c_salsrvchg_item_chgamt CHECK (((basis <> 'P'::bpchar) OR (((basis = 'P'::bpchar) AND (sign = '-'::bpchar) AND (((('-1'::integer)::numeric * round(((COALESCE(appamt, (0)::numeric) * COALESCE(rate, (0)::numeric)) / (100)::numeric), 2)) + COALESCE(roundoff_adj_amt, (0)::numeric)) = COALESCE(chgamt, (0)::numeric))) OR ((basis = 'P'::bpchar) AND (sign = '+'::bpchar) AND ((round(((COALESCE(appamt, (0)::numeric) * COALESCE(rate, (0)::numeric)) / (100)::numeric), 2) + COALESCE(roundoff_adj_amt, (0)::numeric)) = COALESCE(chgamt, (0)::numeric))))));
ALTER TABLE salsrvchg_item ADD CONSTRAINT c_salsrvchg_item_gst_component CHECK ((gst_component = ANY (ARRAY['IGST'::bpchar, 'SGST'::bpchar, 'CGST'::bpchar, 'CESS'::bpchar])));
ALTER TABLE salsrvchg_item ADD CONSTRAINT c_salsrvchg_item_istax CHECK ((istax = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE salsrvchg_item ADD CONSTRAINT c_salsrvchg_item_op_lvl CHECK ((operation_level = ANY (ARRAY['L'::bpchar, 'I'::bpchar])));
ALTER TABLE salsrvchg_item ADD CONSTRAINT c_salsrvchg_item_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar])));
ALTER TABLE salsrvchg_item ADD CONSTRAINT c_salsrvchg_item_source CHECK ((source = ANY (ARRAY['F'::bpchar, 'V'::bpchar, 'E'::bpchar, 'G'::bpchar])));
ALTER TABLE salsrvmain ADD CONSTRAINT c_salsrvmain_adjamt_netamt CHECK ((COALESCE(adjamt, (0)::numeric) <= COALESCE(netamt, (0)::numeric)));
ALTER TABLE salsrvmain ADD CONSTRAINT c_salsrvmain_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE salsrvmain ADD CONSTRAINT c_salsrvmain_gstappl CHECK ((gstappl = ANY (ARRAY['Y'::bpchar, 'N'::bpchar])));
ALTER TABLE salsrvmain ADD CONSTRAINT c_salsrvmain_netamt CHECK ((COALESCE(netamt, (0)::numeric) >= (0)::numeric));
ALTER TABLE salsrvmain ADD CONSTRAINT c_salsrvmain_sdocno CHECK ((((gstappl = 'Y'::bpchar) AND (length((scheme_docno)::text) <= 16)) OR (COALESCE(gstappl, 'N'::bpchar) <> 'Y'::bpchar)));
ALTER TABLE salsrvmain ADD CONSTRAINT salsrvmain_release_status CHECK ((release_status = ANY (ARRAY['U'::bpchar, 'P'::bpchar, 'R'::bpchar])));
ALTER TABLE salssdet ADD CONSTRAINT c_salssdet_taxregime CHECK ((taxregime = ANY (ARRAY['V'::bpchar, 'G'::bpchar])));
ALTER TABLE salssdet ADD CONSTRAINT salssdet_c01 CHECK (((isdamaged)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE salssdet ADD CONSTRAINT salssdet_c02 CHECK (((issecondarysupply)::numeric = ANY (ARRAY[(0)::numeric, (1)::numeric])));
ALTER TABLE salssdet ADD CONSTRAINT salssdet_c03 CHECK ((secondarysupplytaxpolicy = ANY (ARRAY['I'::bpchar, 'P'::bpchar, 'M'::bpchar])));
ALTER TABLE salssmain ADD CONSTRAINT salssmain_c01 CHECK (((ssno)::numeric > (0)::numeric)) NOT VALID;
ALTER TABLE salssmain ADD CONSTRAINT salssmain_c02 CHECK ((status = ANY (ARRAY['O'::bpchar, 'C'::bpchar]))) NOT VALID;
ALTER TABLE salssmain ADD CONSTRAINT salssmain_c03 CHECK (((channeltype)::text = ANY (ARRAY[('RTL'::character varying)::text, ('ETL'::character varying)::text]))) NOT VALID;
ALTER TABLE salssmain ADD CONSTRAINT salssmain_c04 CHECK (((isbillingshippingsame)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE saltermdet ADD CONSTRAINT c_saltermdet_operation_level CHECK ((operation_level = ANY (ARRAY['H'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE saltermdet ADD CONSTRAINT c_saltermdet_sign CHECK ((sign = ANY (ARRAY['+'::bpchar, '-'::bpchar]))) NOT VALID;
ALTER TABLE saltermmain ADD CONSTRAINT c_saltermmain_ext CHECK ((ext = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE saltermmain ADD CONSTRAINT c_saltermmain_headlevischange CHECK ((header_level_ischangeable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE saltermmain ADD CONSTRAINT c_saltermmain_linelevischange CHECK ((line_level_ischangeable = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE si_allocation ADD CONSTRAINT c_si_allocation_blockgroup CHECK ((blockgroup = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE si_allocation_det ADD CONSTRAINT si_alloc_det_appr_c02 CHECK ((approved = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE si_allocation_det ADD CONSTRAINT si_alloc_det_basis_c01 CHECK ((basis = ANY (ARRAY['P'::bpchar, 'A'::bpchar]))) NOT VALID;
ALTER TABLE si_assortment ADD CONSTRAINT c_si_assortment_entry_source CHECK (((entry_source)::text = ANY (ARRAY[('DESKTOP'::character varying)::text, ('WEB'::character varying)::text, ('SAP'::character varying)::text, ('INF'::character varying)::text, ('NAV'::character varying)::text, ('EBS'::character varying)::text, ('API'::character varying)::text, ('EXCEL'::character varying)::text])));
ALTER TABLE si_assortment ADD CONSTRAINT si_assortment_extinct_c01 CHECK ((extinct = ANY (ARRAY['Y'::bpchar, 'N'::bpchar]))) NOT VALID;
ALTER TABLE si_assortment_exclude ADD CONSTRAINT si_asmt_excl_prc_rng_c01 CHECK ((price_range_basis = ANY (ARRAY['M'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE si_assortment_include ADD CONSTRAINT si_asmt_incl_prc_rng_c01 CHECK ((price_range_basis = ANY (ARRAY['M'::bpchar, 'L'::bpchar]))) NOT VALID;
ALTER TABLE tax_recalc_history ADD CONSTRAINT tax_recalc_history_c01 CHECK ((status = ANY (ARRAY['S'::bpchar, 'PS'::bpchar, 'ES'::bpchar, 'PH'::bpchar, 'EH'::bpchar]))) NOT VALID;
ALTER TABLE tender_master ADD CONSTRAINT tender_master_c01 CHECK (((isextinct)::numeric = ANY (ARRAY[(1)::numeric, (0)::numeric])));
ALTER TABLE udfconfigdetail ADD CONSTRAINT chk_udfconfgdetail_datatype CHECK (((datatype)::text = ANY (ARRAY[('String'::character varying)::text, ('FixedList'::character varying)::text, ('EditableList'::character varying)::text, ('Date'::character varying)::text, ('Numeric'::character varying)::text, ('Memo'::character varying)::text])));
ALTER TABLE web_print_preference ADD CONSTRAINT c_web_printbarcode_prefer CHECK (((barcode_preference)::text = ANY (ARRAY[('D'::character varying)::text, ('N'::character varying)::text])));
ALTER TABLE web_print_preference ADD CONSTRAINT c_web_printdoc_prefer CHECK (((doc_preference)::text = ANY (ARRAY[('D'::character varying)::text, ('P'::character varying)::text, ('N'::character varying)::text])));
																					

--Indexes
CREATE UNIQUE INDEX IF NOT EXISTS p_invgst_einvoice_code ON main.invgst_einvoice USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgst_einvoice_01 ON main.invgst_einvoice USING btree (transaction_code, transaction_table);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgst_einvoice_02 ON main.invgst_einvoice USING btree (irn);
CREATE UNIQUE INDEX IF NOT EXISTS pk_psite_salesperson ON main.psite_salesperson USING btree (id, admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS invmiscmain_deleted_u01 ON main.invmiscmain_deleted USING btree (misccode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvmain_deleted_u01 ON main.purinvmain_deleted USING btree (invcode);
CREATE UNIQUE INDEX IF NOT EXISTS purrtmain_deleted_u01 ON main.purrtmain_deleted USING btree (rtcode);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvmain_deleted_u01 ON main.pursrvmain_deleted USING btree (srvcode);
CREATE UNIQUE INDEX IF NOT EXISTS salcsmain_deleted_u01 ON main.salcsmain_deleted USING btree (cscode);
CREATE UNIQUE INDEX IF NOT EXISTS salcsmain_deleted_u02 ON main.salcsmain_deleted USING btree ((
CASE
    WHEN (intg_invoiceid IS NOT NULL) THEN ((ecode)::text || (intg_invoiceid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS salinvmain_deleted_u01 ON main.salinvmain_deleted USING btree (invcode);
CREATE UNIQUE INDEX IF NOT EXISTS salrtmain_deleted_u01 ON main.salrtmain_deleted USING btree (rtcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_log_tag_agg_logname_consumer ON main.log_tag_agg USING btree (logname, consumer);
CREATE UNIQUE INDEX IF NOT EXISTS i_invstock_intra_log_seq ON main.invstock_intra_log USING btree (logseq);
CREATE UNIQUE INDEX IF NOT EXISTS u_admautotask_01 ON main.admautotask USING btree (activity);
CREATE UNIQUE INDEX IF NOT EXISTS u_admautotask_det_01 ON main.admautotask_det USING btree (activity, activity_parameter);
CREATE UNIQUE INDEX IF NOT EXISTS u_tag_keyword ON main.admcfg_metadata USING btree (tag, keyword);
CREATE UNIQUE INDEX IF NOT EXISTS ers_module_pk ON main.admmodule USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS ers_module_u01 ON main.admmodule USING btree (modname);
CREATE UNIQUE INDEX IF NOT EXISTS admprn_barcode_pk ON main.admprn_barcode USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS admprn_barcode_uk01 ON main.admprn_barcode USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS apidatasync_error_log_pk ON main.apidatasync_error_log USING btree (code);
CREATE INDEX IF NOT EXISTS aud2_invitem_i01 ON main.aud2_invitem USING btree (transaction_id);
CREATE INDEX IF NOT EXISTS aud2_invitem_i02 ON main.aud2_invitem USING btree (action_subtype);
CREATE INDEX IF NOT EXISTS aud2_invitem_i03 ON main.aud2_invitem USING btree (icode);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_invitem_ui01 ON main.aud2_invitem USING btree (icode, transaction_id);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_table_ddl_log_object_name_key ON main.aud2_table_ddl_log USING btree (object_name);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_transaction_u01 ON main.aud2_transaction USING btree (transaction_id, module_shortcode, header_key_value);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_transaction_table_transaction_id_table_name_key ON main.aud2_transaction_table USING btree (transaction_id, table_name);
CREATE UNIQUE INDEX IF NOT EXISTS aud_module_pk ON main.aud_module USING btree (shortcode);
CREATE UNIQUE INDEX IF NOT EXISTS aud_purge_det_pk ON main.aud_purge_det USING btree (id);
CREATE INDEX IF NOT EXISTS aud_purge_det_lk01 ON main.aud_purge_det USING btree (aud_purge_id);
CREATE UNIQUE INDEX IF NOT EXISTS aud_tab_col_pk ON main.aud_tab_col USING btree (table_name, update_of_column);
CREATE UNIQUE INDEX IF NOT EXISTS aud_table_pk ON main.aud_table USING btree (module_shortcode, table_name);
CREATE UNIQUE INDEX IF NOT EXISTS aud_table_ddl_log_u01 ON main.aud_table_ddl_log USING btree (object_name);
CREATE UNIQUE INDEX IF NOT EXISTS aud_transaction_u01 ON main.aud_transaction USING btree (transaction_id, module_type);
CREATE UNIQUE INDEX IF NOT EXISTS aud_transaction_table_u01 ON main.aud_transaction_table USING btree (transaction_id, table_name);
CREATE UNIQUE INDEX IF NOT EXISTS u_gvno ON main.capillary_gv_sync_custom USING btree (gvno);
CREATE INDEX IF NOT EXISTS i_prdjobstatus_01 ON main.prdjobstatus USING btree (code);
CREATE INDEX IF NOT EXISTS i_prdjobstatus_02 ON main.prdjobstatus USING btree (jobcode, docmain_code, docdetail_code, assembly_icode, ass_saitem_code, operation_seq, prcode, doctype, rectype);
CREATE INDEX IF NOT EXISTS i_cogs_diff_posting_01 ON main.cogs_diff_posting USING btree (icode);
CREATE INDEX IF NOT EXISTS i_cogs_diff_posting_02 ON main.cogs_diff_posting USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS i_cogs_diff_posting_03 ON main.cogs_diff_posting USING btree (stockcode);
CREATE UNIQUE INDEX IF NOT EXISTS concurrency_error_u01 ON main.concurrency_error USING btree (table_name, errorcode);
CREATE UNIQUE INDEX IF NOT EXISTS customtype_pk ON main.customtype USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS customtype_u01 ON main.customtype USING btree (interfacetype, concretetype, registeredname);
CREATE UNIQUE INDEX IF NOT EXISTS deps_saved_ddl_pkey ON main.deps_saved_ddl USING btree (deps_id);
CREATE INDEX IF NOT EXISTS dim_item_mv_i01 ON main.dim_item_mv USING btree (division);
CREATE INDEX IF NOT EXISTS dim_item_mv_i02 ON main.dim_item_mv USING btree (section);
CREATE INDEX IF NOT EXISTS dim_item_mv_i03 ON main.dim_item_mv USING btree (department);
CREATE INDEX IF NOT EXISTS dim_item_mv_i04 ON main.dim_item_mv USING btree (cat1);
CREATE INDEX IF NOT EXISTS dim_item_mv_i05 ON main.dim_item_mv USING btree (cat2);
CREATE INDEX IF NOT EXISTS dim_item_mv_i06 ON main.dim_item_mv USING btree (cat3);
CREATE INDEX IF NOT EXISTS dim_item_mv_i07 ON main.dim_item_mv USING btree (cat4);
CREATE INDEX IF NOT EXISTS dim_item_mv_i08 ON main.dim_item_mv USING btree (cat5);
CREATE INDEX IF NOT EXISTS dim_item_mv_i09 ON main.dim_item_mv USING btree (cat6);
CREATE UNIQUE INDEX IF NOT EXISTS ds_job_queue_pk ON main.ds_job_queue USING btree (sitecode);
CREATE UNIQUE INDEX IF NOT EXISTS ds_dashboard_pk ON main.ds_pos_statistics USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS dxreceive2_pk ON main.dxreceive2 USING btree (evtqueueid, sendercuid);
CREATE INDEX IF NOT EXISTS i_dxreceive2_requestid ON main.dxreceive2 USING btree (requestid);
CREATE INDEX IF NOT EXISTS i_dxreceive2_status ON main.dxreceive2 USING btree (status);
CREATE UNIQUE INDEX IF NOT EXISTS ex_mdreportdata_u01 ON main.ex_mdreportdata USING btree (shortcode);
CREATE UNIQUE INDEX IF NOT EXISTS ex_mdreportfilterconfig_u02 ON main.ex_mdreportfilterconfig USING btree (shortcode, display_order);
CREATE UNIQUE INDEX IF NOT EXISTS ex_report_config_pk ON main.ex_report_config USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS findoc_age_slab_pkey ON main.findoc_age_slab USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_dl_queue_pkey ON main.gds2_event_dl_queue USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_webhook_success_pkey ON main.gds2_webhook_success USING btree (id);
CREATE INDEX IF NOT EXISTS i_global_invitem ON main.global_invitem USING btree (icode);
CREATE INDEX IF NOT EXISTS i1 ON main.global_invitem_rate USING btree (seq);
CREATE INDEX IF NOT EXISTS i2 ON main.global_invitem_rate USING btree (icode);
CREATE INDEX IF NOT EXISTS i3 ON main.global_invitem_rate USING btree (dtfrom);
CREATE INDEX IF NOT EXISTS i4 ON main.global_invitem_rate USING btree (dtto);
CREATE UNIQUE INDEX IF NOT EXISTS pk_globalitemshow ON main.global_item_show USING btree (code, userid, itemtype);
CREATE INDEX IF NOT EXISTS global_rate_pool_01 ON main.global_rate_pool USING btree (admsite_code, icode, entdt, stockcode);
CREATE INDEX IF NOT EXISTS global_rate_pool_i01 ON main.global_rate_pool USING btree (icode);
CREATE INDEX IF NOT EXISTS global_rate_pool_old_i01 ON main.global_rate_pool_old USING btree (icode);
CREATE INDEX IF NOT EXISTS global_search_ids_i01 ON main.global_search_ids USING btree (char_id);
CREATE INDEX IF NOT EXISTS global_search_ids_i02 ON main.global_search_ids USING btree (upper((char_id)::text));
CREATE UNIQUE INDEX IF NOT EXISTS grc_authorize_trap_pk ON main.grc_authorize_trap USING btree (grccode);
CREATE UNIQUE INDEX IF NOT EXISTS grt_authorize_trap_pk ON main.grt_authorize_trap USING btree (grtcode);
CREATE UNIQUE INDEX IF NOT EXISTS hflock_source_table_key ON main.hflock USING btree (source_table);
CREATE UNIQUE INDEX IF NOT EXISTS hfserver_pk ON main.hfserver USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS inbound_api_log_pk ON main.inbound_api_log USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$article_pk ON main.int$article USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$article ON main.int$article USING btree (article_name, terminalname);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$costcenter_sitecode ON main.int$costcenter USING btree (ref_admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$costcenter_sitename ON main.int$costcenter USING btree (ref_admsite_name);
CREATE UNIQUE INDEX IF NOT EXISTS int$customer_code_pk01 ON main.int$customer USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$gift_voucher_code_pk01 ON main.int$gift_voucher USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$gift_voucher_tnm_gvn_u01 ON main.int$gift_voucher USING btree (terminalname, gvno, denomination, validity_days, expireson, allocate_site);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$grc_alt_item ON main.int$grc_alt_item USING btree (icode, barcode, article_name, cname1, cname2, cname3, cname4, cname5, cname6, partyname, taxname, rate, mrp, listed_mrp, expiry_date, shrtname, terminalname);
CREATE UNIQUE INDEX IF NOT EXISTS int$gvallocation_uk01 ON main.int$gvallocation USING btree (gvno);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$item ON main.int$item USING btree (barcode, article_name, cname1, cname2, cname3, cname4, cname5, cname6, desc1, desc2, desc3, partyname, taxname, rate, mrp, listed_mrp, expiry_date, shrtname, terminalname);
CREATE UNIQUE INDEX IF NOT EXISTS int$item_serial_code_pk01 ON main.int$item_serial USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$modify_item_code_pk01 ON main.int$modify_item USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$modify_item ON main.int$modify_item USING btree (icode, barcode, article_name, cname1, cname2, cname3, cname4, cname5, cname6, partyname, taxname, rate, rsp, mrp, expiry_date, shrtname, terminalname);
CREATE UNIQUE INDEX IF NOT EXISTS int$price_chart_code_pk01 ON main.int$price_chart USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$price_chart_tnmiccnedt_u01 ON main.int$price_chart USING btree (terminalname, icode, sitename, eff_date, rsp, mrp);
CREATE UNIQUE INDEX IF NOT EXISTS int$ret_invoice_code_pk01 ON main.int$ret_invoice USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$routegrp_code_pk01 ON main.int$routegrp USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$routegrp_tnm_rtgrpicdefdt ON main.int$routegrp USING btree (terminalname, routegrp_code, icode, eff_date);
CREATE UNIQUE INDEX IF NOT EXISTS int$selectarticle_code_pk01 ON main.int$selectarticle USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$socnl_article_code_pk01 ON main.int$socnl_article USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$socnl_article_tsiteinvart ON main.int$socnl_article USING btree (terminalname, siteshrtname, articlecode);
CREATE INDEX IF NOT EXISTS int$socnl_article_lk01 ON main.int$socnl_article USING btree (articlecode);
CREATE UNIQUE INDEX IF NOT EXISTS int$socnl_barcode_code_pk01 ON main.int$socnl_barcode USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$socnl_barcode_tsiteinvart ON main.int$socnl_barcode USING btree (terminalname, sitecode, barcode);
CREATE INDEX IF NOT EXISTS int$socnl_barcode_lk01 ON main.int$socnl_barcode USING btree (barcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$special_item ON main.int$special_item USING btree (barcode, article_name, cname1, cname2, cname3, cname4, cname5, cname6, partyname, taxname, rate, mrp, listed_mrp, expiry_date, terminalname, price_terms, price_basis, invmetal_code, net_weight, grs_weight, job_cost_basis, certificate_no);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$special_item_cert_no ON main.int$special_item USING btree (certificate_no);
CREATE UNIQUE INDEX IF NOT EXISTS int$srvord_stsch_code_pk01 ON main.int$srvord_stsch USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS int$ss_price_list_code_pk01 ON main.int$ss_price_list USING btree (code);
CREATE INDEX IF NOT EXISTS i_int$stg_apvchimport_userid ON main.int$stg_apvchimport USING btree (userid);
CREATE INDEX IF NOT EXISTS int$stg_article_userid ON main.int$stg_article USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_arvchimport_userid ON main.int$stg_arvchimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_binmaster_userid ON main.int$stg_binmaster USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_brsimport_userid ON main.int$stg_brsimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_cjrn_lineno ON main.int$stg_cjrn USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_int$stg_cjrn_userid ON main.int$stg_cjrn USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_item_userid ON main.int$stg_createitem USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_item_all_fld_lineno ON main.int$stg_createitem_all_fld USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_int$stg_item_all_fld_userid ON main.int$stg_createitem_all_fld USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_itemimport_userid ON main.int$stg_createitemimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$createpo_userid ON main.int$stg_createpo USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_custimport_userid ON main.int$stg_custimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_dc_adhoc_userid ON main.int$stg_dc_adhoc USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$dc_agnst_ord_userid ON main.int$stg_dc_agnst_ord USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_djrn_lineno ON main.int$stg_djrn USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_int$stg_djrn_userid ON main.int$stg_djrn USING btree (userid);
CREATE INDEX IF NOT EXISTS i_lineno_int$stg_docadj ON main.int$stg_docadj USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_userid_int$stg_docadj ON main.int$stg_docadj USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_ecomfulfilbyk_userid ON main.int$stg_ecomfulfilbyk USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_ecomowned_userid ON main.int$stg_ecomowned USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_finopdoc_userid ON main.int$stg_finopdoc USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_finsloutag_userid ON main.int$stg_finsloutag USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_genjrnimport_userid ON main.int$stg_genjrnimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_genvchimport_userid ON main.int$stg_genvchimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_giftvoucher_userid ON main.int$stg_giftvoucher USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_glimport_userid ON main.int$stg_glimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_crgrcadhoc_userid ON main.int$stg_grcadhoc USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_grcord_userid ON main.int$stg_grcord USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_gstrates_userid ON main.int$stg_gstrates USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_gvallocation_userid ON main.int$stg_gvallocation USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_hsnsacmast_userid ON main.int$stg_hsnsacmast USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_invcostadj_userid ON main.int$stg_invcostadj USING btree (userid);
CREATE INDEX IF NOT EXISTS i_stg_invgst_einv_lineno ON main.int$stg_invgst_einv USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_stg_invgst_einv_userid ON main.int$stg_invgst_einv USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_ipjrnimport_uid ON main.int$stg_ipjrnimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_m_rangeminmax_userid ON main.int$stg_m_rangeminmax USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_mngsiteimport_userid ON main.int$stg_mngsiteimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_mrulealloc_userid ON main.int$stg_mrulealloc USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_orgunmgtag_userid ON main.int$stg_orgunmgtag USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_partygstupd_userid ON main.int$stg_partygstupd USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_poscustomer_userid ON main.int$stg_poscustomer USING btree (userid);
CREATE INDEX IF NOT EXISTS int$stg_price_control_userid ON main.int$stg_price_control USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_prmoastincl_userid ON main.int$stg_prmoastincl USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_processmaster_userid ON main.int$stg_processmaster USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_pur_srv_inv_lineno ON main.int$stg_pur_srv_inv USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_int$stg_pur_srv_inv_userid ON main.int$stg_pur_srv_inv USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_rangeminmaxw_userid ON main.int$stg_rangeminmaxw USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_sal_plst_exp_lineno ON main.int$stg_sal_plst_exp USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_int$stg_sal_plst_exp_userid ON main.int$stg_sal_plst_exp USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_sal_pricelist_userid ON main.int$stg_sal_pricelist USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_srv_inv_userid ON main.int$stg_sal_srv_inv USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_srv_inv_ahoc_userid ON main.int$stg_sal_srv_inv_adhoc USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_site_stk_trn_userid ON main.int$stg_site_stk_trn USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_sitegstupdate_userid ON main.int$stg_sitegstupdate USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_so_barcode_lineno ON main.int$stg_so_barcode USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_int$stg_so_barcode_userid ON main.int$stg_so_barcode USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_socnl_lineno ON main.int$stg_socnl USING btree (lineno);
CREATE INDEX IF NOT EXISTS i_int$stg_socnl_userid ON main.int$stg_socnl USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_srvord_sch_userid ON main.int$stg_srvord_schedule USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_storfrancon_userid ON main.int$stg_storfrancon USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_storfranout_userid ON main.int$stg_storfranout USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_storfranoutpl_userid ON main.int$stg_storfranoutpl USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_storfrncnpl_userid ON main.int$stg_storfrncnpl USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_storunmown_userid ON main.int$stg_storunmown USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_suplierimport_userid ON main.int$stg_suplierimport USING btree (userid);
CREATE INDEX IF NOT EXISTS i_int$stg_umngstimport_userid ON main.int$stg_umngsitimport USING btree (userid);
CREATE UNIQUE INDEX IF NOT EXISTS invbingrplev_prompt_pk ON main.invbingrplev_prompt USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invbingrplev_prompt_u01 ON main.invbingrplev_prompt USING btree (lev, admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS invbingrplev_prompt_u02 ON main.invbingrplev_prompt USING btree (prompt, admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invcostpool ON main.invcostpool USING btree (seq);
CREATE UNIQUE INDEX IF NOT EXISTS u_invcostpool_01 ON main.invcostpool USING btree (enttype, subenttype, consider_qty_sign, fifo_level, pool);
CREATE UNIQUE INDEX IF NOT EXISTS invcostpool_mix_u01 ON main.invcostpool_mix USING btree (enttype, subenttype, consider_qty_sign, pool);
CREATE UNIQUE INDEX IF NOT EXISTS pk_invitem_history_code ON main.invitem_history USING btree (code);
CREATE INDEX IF NOT EXISTS invitem_his_icode_dtfr_dtto ON main.invitem_history USING btree (icode, ((dtfr)::date), ((dtto)::date));
CREATE INDEX IF NOT EXISTS invitem_history_articlecode ON main.invitem_history USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS invitem_history_ccode1 ON main.invitem_history USING btree (ccode1);
CREATE INDEX IF NOT EXISTS invitem_history_ccode2 ON main.invitem_history USING btree (ccode2);
CREATE INDEX IF NOT EXISTS invitem_history_ccode3 ON main.invitem_history USING btree (ccode3);
CREATE INDEX IF NOT EXISTS invitem_history_ccode4 ON main.invitem_history USING btree (ccode4);
CREATE INDEX IF NOT EXISTS invitem_history_ccode5 ON main.invitem_history USING btree (ccode5);
CREATE INDEX IF NOT EXISTS invitem_history_ccode6 ON main.invitem_history USING btree (ccode6);
CREATE INDEX IF NOT EXISTS invitem_history_ecode ON main.invitem_history USING btree (ecode);
CREATE INDEX IF NOT EXISTS invitem_history_grpcode ON main.invitem_history USING btree (grpcode);
CREATE INDEX IF NOT EXISTS invitem_history_i01 ON main.invitem_history USING btree (icode);
CREATE INDEX IF NOT EXISTS invitem_history_i02 ON main.invitem_history USING btree (barcode);
CREATE INDEX IF NOT EXISTS invitem_history_unitname ON main.invitem_history USING btree (unitname);
CREATE UNIQUE INDEX IF NOT EXISTS invitem_audit_pk ON main.invitem_audit USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invstock_age_slab_pkey ON main.invstock_age_slab USING btree (code);
CREATE INDEX IF NOT EXISTS i2_invstock_onh_article_agg ON main.invstock_onhand_article_agg USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS i_invstock_onh_article_agg ON main.invstock_onhand_article_agg USING btree (key);
CREATE INDEX IF NOT EXISTS i_invstock_onhand_val_icode_ou ON main.invstock_onhand_snap_val_ou USING btree (icode);
CREATE INDEX IF NOT EXISTS i_invstock_stag_type ON main.invstock_staging USING btree (type);
CREATE INDEX IF NOT EXISTS i_invstock_staging ON main.invstock_staging USING btree (stockcode);
CREATE INDEX IF NOT EXISTS invval_migration_det_e_i01 ON main.invval_migration_det_err USING btree (terminal_name);
CREATE INDEX IF NOT EXISTS invval_migration_det_e_i02 ON main.invval_migration_det_err USING btree (lineno);
CREATE INDEX IF NOT EXISTS invval_migration_det_s_i01 ON main.invval_migration_det_staging USING btree (terminal_name);
CREATE INDEX IF NOT EXISTS invval_migration_det_s_i02 ON main.invval_migration_det_staging USING btree (lineno);
CREATE INDEX IF NOT EXISTS invval_migration_det_s_i03 ON main.invval_migration_det_staging USING btree (site_shrtname);
CREATE INDEX IF NOT EXISTS invval_migration_det_s_i04 ON main.invval_migration_det_staging USING btree (barcode);
CREATE INDEX IF NOT EXISTS invval_migration_det_s_i05 ON main.invval_migration_det_staging USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invval_migration_det_s_i06 ON main.invval_migration_det_staging USING btree (icode);
CREATE INDEX IF NOT EXISTS invval_migration_det_s_i07 ON main.invval_migration_det_staging USING btree (admou_code);
CREATE UNIQUE INDEX IF NOT EXISTS mdschedulejob_pk ON main.mdschedulejob USING btree (job_name);
CREATE UNIQUE INDEX IF NOT EXISTS mdwinservices_pk ON main.mdwinservices USING btree (service_name);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$contacts_category_pk ON main.nfs$contacts_category USING btree (category);
CREATE UNIQUE INDEX IF NOT EXISTS plugin_execution_history_pk ON main.plugin_execution_history USING btree (code);
CREATE INDEX IF NOT EXISTS i_prd_invitem_icode ON main.prd_invitem USING btree (icode);
CREATE INDEX IF NOT EXISTS i_jobord_stats_ass_icode ON main.prd_jobord_stats_summary USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS i_jobord_stats_pcode ON main.prd_jobord_stats_summary USING btree (pcode);
CREATE INDEX IF NOT EXISTS i_jobord_stats_prcode ON main.prd_jobord_stats_summary USING btree (prcode);
CREATE INDEX IF NOT EXISTS i_jobord_stats_saitem_code ON main.prd_jobord_stats_summary USING btree (ass_saitem_code);
CREATE INDEX IF NOT EXISTS i_jobord_stats_site_code ON main.prd_jobord_stats_summary USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS i_jobord_stats_summary_lotcode ON main.prd_jobord_stats_summary USING btree (lotcode);
CREATE INDEX IF NOT EXISTS i_jobord_stats_summary_lvl ON main.prd_jobord_stats_summary USING btree (lvl);
CREATE UNIQUE INDEX IF NOT EXISTS psite_emr_bill_resubmit_pk ON main.psite_emr_bill_resubmit USING btree (admsite_code, billno, billdate, ecode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_recposbillcn_pk ON main.psite_recposbillcn USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_servicejob_pk ON main.psite_servicejob USING btree (sys_shortcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_web_event_archive_pkey ON main.psite_web_event_archive USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_webconfig_pk ON main.psite_webconfig USING btree (code);
CREATE INDEX IF NOT EXISTS i_sales_plan_icode ON main.sales_plan USING btree (icode);
CREATE INDEX IF NOT EXISTS i_sales_plan_terminal ON main.sales_plan USING btree (terminal);
CREATE UNIQUE INDEX IF NOT EXISTS salinv_authorize_trap_pk ON main.salinv_authorize_trap USING btree (invcode);
CREATE UNIQUE INDEX IF NOT EXISTS salord_authorize_trap_pk ON main.salord_authorize_trap USING btree (ordcode);
CREATE INDEX IF NOT EXISTS i_temp_admcosting ON main.temp_admcosting USING btree (icode, loccode);
CREATE INDEX IF NOT EXISTS i_temp_alloc_article ON main.temp_alloc_article USING btree (code);
CREATE INDEX IF NOT EXISTS temp_alloc_customer_i01 ON main.temp_alloc_customer USING btree (code);
CREATE INDEX IF NOT EXISTS temp_alloc_customer_i02 ON main.temp_alloc_customer USING btree (customer_code);
CREATE INDEX IF NOT EXISTS i_temp_alloc_item ON main.temp_alloc_item USING btree (code);
CREATE INDEX IF NOT EXISTS i_temp_cogs_dt_stock_01 ON main.temp_cogs_dt_stock USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_diff_costamt_dtto_i01 ON main.temp_diff_costamt_dtto USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS temp_diff_costamt_dtto_i02 ON main.temp_diff_costamt_dtto USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_diff_costamt_dtto_old_i01 ON main.temp_diff_costamt_dtto_old USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS temp_diff_costamt_dtto_old_i02 ON main.temp_diff_costamt_dtto_old USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_diff_costamt_itm_i01 ON main.temp_diff_costamt_itm USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS temp_diff_costamt_itm_i02 ON main.temp_diff_costamt_itm USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_difference_i01 ON main.temp_difference USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS temp_difference_i02 ON main.temp_difference USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_fifo_in_stock ON main.temp_fifo_in_stock USING btree (admou_code, admsite_code, icode, entdt);
CREATE INDEX IF NOT EXISTS i_temp_fifo_in_stock_01 ON main.temp_fifo_in_stock USING btree (stockcode, fifo_level);
CREATE INDEX IF NOT EXISTS i_temp_fifo_in_stock_02 ON main.temp_fifo_in_stock USING btree (ref_family_code);
CREATE INDEX IF NOT EXISTS temp_fifo_in_stock_site_i01 ON main.temp_fifo_in_stock_site USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_fifo_inpool_stkmove_i01 ON main.temp_fifo_inpool_stkmove USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_fifo_inpool_stkmove_i02 ON main.temp_fifo_inpool_stkmove USING btree (reporttype);
CREATE INDEX IF NOT EXISTS inpool_stkmove_old_i01 ON main.temp_fifo_inpool_stkmove_old USING btree (icode);
CREATE INDEX IF NOT EXISTS inpool_stkmove_old_i02 ON main.temp_fifo_inpool_stkmove_old USING btree (reporttype);
CREATE INDEX IF NOT EXISTS temp_fifo_inpool_stkmovegp_i01 ON main.temp_fifo_inpool_stkmovegp USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_fifo_inpool_stkmovegp_i02 ON main.temp_fifo_inpool_stkmovegp USING btree (reporttype);
CREATE INDEX IF NOT EXISTS inpool_stkgp_old_i01 ON main.temp_fifo_inpool_stkmovegp_old USING btree (icode);
CREATE INDEX IF NOT EXISTS inpool_stkgp_old_i02 ON main.temp_fifo_inpool_stkmovegp_old USING btree (reporttype);
CREATE INDEX IF NOT EXISTS temp_fifo_stock_stkmove_i01 ON main.temp_fifo_stock_stkmove USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_fifo_stock_stkmove_i02 ON main.temp_fifo_stock_stkmove USING btree (reporttype);
CREATE INDEX IF NOT EXISTS stock_stkmove_old_i01 ON main.temp_fifo_stock_stkmove_old USING btree (icode);
CREATE INDEX IF NOT EXISTS stock_stkmove_old_i02 ON main.temp_fifo_stock_stkmove_old USING btree (reporttype);
CREATE INDEX IF NOT EXISTS temp_fifo_stock_stkmovegp_i01 ON main.temp_fifo_stock_stkmovegp USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_fifo_stock_stkmovegp_i02 ON main.temp_fifo_stock_stkmovegp USING btree (reporttype);
CREATE INDEX IF NOT EXISTS stock_stkgp_old_i01 ON main.temp_fifo_stock_stkmovegp_old USING btree (icode);
CREATE INDEX IF NOT EXISTS stock_stkgp_old_i02 ON main.temp_fifo_stock_stkmovegp_old USING btree (reporttype);
CREATE UNIQUE INDEX IF NOT EXISTS temp_invdcso_check_pk ON main.temp_invdcso_check USING btree (salorddet_code);
CREATE INDEX IF NOT EXISTS i_temp_invitem ON main.temp_invitem USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_invstock_admsite_code ON main.temp_invstock USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS i_temp_invstock_composite1 ON main.temp_invstock USING btree (icode, admou_code, issecondary);
CREATE INDEX IF NOT EXISTS i_temp_invstock_composite2 ON main.temp_invstock USING btree (admou_code, admsite_code, icode, entdt, stockcode);
CREATE INDEX IF NOT EXISTS i_temp_invstock_enttype ON main.temp_invstock USING btree (enttype);
CREATE INDEX IF NOT EXISTS i_temp_invstock_ers_code ON main.temp_invstock USING btree (ers_code);
CREATE INDEX IF NOT EXISTS i_temp_invstock_issecondary ON main.temp_invstock USING btree (issecondary);
CREATE INDEX IF NOT EXISTS i_temp_invstock_stockcode ON main.temp_invstock USING btree (stockcode);
CREATE INDEX IF NOT EXISTS i_temp_invstock_diff_all_01 ON main.temp_invstock_diff_all USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_invstock_diff_all_02 ON main.temp_invstock_diff_all USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS i_temp_invstock_diff_all_03 ON main.temp_invstock_diff_all USING btree (admou_code);
CREATE INDEX IF NOT EXISTS i_temp_invstock_diff_all_04 ON main.temp_invstock_diff_all USING btree (loccode);
CREATE INDEX IF NOT EXISTS i_temp_invstock_site_date ON main.temp_invstock_site_date USING btree (admsite_code, icode);
CREATE INDEX IF NOT EXISTS i_temp_item_dt_stock ON main.temp_item_dt_stock USING btree (admou_code, admsite_code, icode, dt);
CREATE INDEX IF NOT EXISTS i_temp_item_sale_stock ON main.temp_item_sale_stock USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_item_sale_stock_rate ON main.temp_item_sale_stock_rate USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_itempool_cogs_01 ON main.temp_itempool_cogs USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_itempool_cogs_02 ON main.temp_itempool_cogs USING btree (noninventory);
CREATE INDEX IF NOT EXISTS i_temp_itempool_cogs_03 ON main.temp_itempool_cogs USING btree (material_type);
CREATE INDEX IF NOT EXISTS temp_salinvdet_staging_lk01 ON main.temp_salinvdet_staging USING btree (invdcdet_code);
CREATE INDEX IF NOT EXISTS temp_salinvdet_staging_lk02 ON main.temp_salinvdet_staging USING btree (dccode);
CREATE INDEX IF NOT EXISTS temp_salinvdet_staging_lk03 ON main.temp_salinvdet_staging USING btree (code);
CREATE INDEX IF NOT EXISTS temp_site_max_date_i01 ON main.temp_site_max_date USING btree (admou_code, admsite_code, icode, dt);
CREATE INDEX IF NOT EXISTS temp_stk_prdwipdet_i01 ON main.temp_stk_prdwipdet USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_prdwipdet_i02 ON main.temp_stk_prdwipdet USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_prdwipdet_i03 ON main.temp_stk_prdwipdet USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_i01 ON main.temp_stk_psite_grcitem USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_i02 ON main.temp_stk_psite_grcitem USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_i03 ON main.temp_stk_psite_grcitem USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_1_i01 ON main.temp_stk_psite_grcitem_1 USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_1_i02 ON main.temp_stk_psite_grcitem_1 USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_1_i03 ON main.temp_stk_psite_grcitem_1 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_2_i01 ON main.temp_stk_psite_grcitem_2 USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_2_i02 ON main.temp_stk_psite_grcitem_2 USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grcitem_2_i03 ON main.temp_stk_psite_grcitem_2 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grtitem_i01 ON main.temp_stk_psite_grtitem USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grtitem_i02 ON main.temp_stk_psite_grtitem USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grtitem_i03 ON main.temp_stk_psite_grtitem USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grtitem_2_i01 ON main.temp_stk_psite_grtitem_2 USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grtitem_2_i02 ON main.temp_stk_psite_grtitem_2 USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_psite_grtitem_2_i03 ON main.temp_stk_psite_grtitem_2 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_salinvdet_i01 ON main.temp_stk_salinvdet USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_salinvdet_i02 ON main.temp_stk_salinvdet USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_salinvdet_i03 ON main.temp_stk_salinvdet USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_salinvdet_1_i01 ON main.temp_stk_salinvdet_1 USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_salinvdet_1_i02 ON main.temp_stk_salinvdet_1 USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_salinvdet_1_i03 ON main.temp_stk_salinvdet_1 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_i01 ON main.temp_stk_salrtdet USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_i02 ON main.temp_stk_salrtdet USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_i03 ON main.temp_stk_salrtdet USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_1_i01 ON main.temp_stk_salrtdet_1 USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_1_i02 ON main.temp_stk_salrtdet_1 USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_1_i03 ON main.temp_stk_salrtdet_1 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_2_i01 ON main.temp_stk_salrtdet_2 USING btree (enttype);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_2_i02 ON main.temp_stk_salrtdet_2 USING btree (subenttype);
CREATE INDEX IF NOT EXISTS temp_stk_salrtdet_2_i03 ON main.temp_stk_salrtdet_2 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS i_temp_stkage_pool_02 ON main.temp_stkage_pool USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_stkage_pool_ou_02 ON main.temp_stkage_pool_ou USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_stkage_rate_01 ON main.temp_stkage_rate USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_stkage_rate_ou_01 ON main.temp_stkage_rate_ou USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_stkpntwiseage_pool ON main.temp_stkpntwiseage_pool USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_stkpntwiseage_rate ON main.temp_stkpntwiseage_rate USING btree (icode);
CREATE INDEX IF NOT EXISTS i_temp_track_progress_01 ON main.temp_track_progress USING btree (calculating_stockcode);
CREATE INDEX IF NOT EXISTS i_temp_track_progress_02 ON main.temp_track_progress USING btree (outentry_stockcode);
CREATE INDEX IF NOT EXISTS i_temp_track_progress_03 ON main.temp_track_progress USING btree (icode);
CREATE INDEX IF NOT EXISTS temp_transaction_update_i01 ON main.temp_transaction_update USING btree (tablename);
CREATE INDEX IF NOT EXISTS temp_upd_stk_grc_1_i01 ON main.temp_upd_stk_grc_1 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_upd_stk_grc_2_i01 ON main.temp_upd_stk_grc_2 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_upd_stk_grt_2_i01 ON main.temp_upd_stk_grt_2 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_upd_stk_inv_1_i01 ON main.temp_upd_stk_inv_1 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_upd_stk_srt_1_i01 ON main.temp_upd_stk_srt_1 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS temp_upd_stk_srt_2_i01 ON main.temp_upd_stk_srt_2 USING btree (stockcode);
CREATE INDEX IF NOT EXISTS i_temp_val_item_ou ON main.temp_val_item_ou USING btree (icode);
CREATE UNIQUE INDEX IF NOT EXISTS int$custparval_tnm_sitarticdsh ON main.int$custparval USING btree (terminalname, site_shortname, assrt_code, icode, param_shortcode, period_type);
CREATE UNIQUE INDEX IF NOT EXISTS mdpivotreporttype_pk ON main.mdpivotreporttype USING btree (subcategory);
CREATE UNIQUE INDEX IF NOT EXISTS promo_assign_u01 ON main.psite_promo_assign USING btree (admsite_code, priority);
CREATE UNIQUE INDEX IF NOT EXISTS promo_assign_u02 ON main.psite_promo_assign USING btree (ho_matching_code);
CREATE UNIQUE INDEX IF NOT EXISTS table1_pk ON main.psite_promo_assign USING btree (code);
CREATE INDEX IF NOT EXISTS psite_promo_assign_lk01 ON main.psite_promo_assign USING btree (allocatedby);
CREATE INDEX IF NOT EXISTS psite_promo_assign_lk02 ON main.psite_promo_assign USING btree (approvedby);
CREATE INDEX IF NOT EXISTS psite_promo_assign_lk03 ON main.psite_promo_assign USING btree (closedby);
CREATE INDEX IF NOT EXISTS psite_promo_assign_lk04 ON main.psite_promo_assign USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_promo_assign_lk05 ON main.psite_promo_assign USING btree (promo_code);
CREATE INDEX IF NOT EXISTS psite_promo_assign_lk06 ON main.psite_promo_assign USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS salrtreason_pk ON main.salrtreason USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS prdjobbom_pk ON main.prdjobbom USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdjobbom_jc_ai_lc_seq_ci ON main.prdjobbom USING btree (jobcode, prdjobdet_code, assembly_icode, ass_saitem_code, lotcode, operation_seq, component_icode, com_saitem_code, job_assembly_icode, jrcdet_code);
CREATE INDEX IF NOT EXISTS indx_jai_prdjobbom ON main.prdjobbom USING btree (job_assembly_icode);
CREATE INDEX IF NOT EXISTS prdjobbom_lk01 ON main.prdjobbom USING btree (alt_grpcode);
CREATE INDEX IF NOT EXISTS prdjobbom_lk02 ON main.prdjobbom USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdjobbom_lk03 ON main.prdjobbom USING btree (component_icode);
CREATE INDEX IF NOT EXISTS prdjobbom_lk04 ON main.prdjobbom USING btree (issue_loccode);
CREATE INDEX IF NOT EXISTS prdjobbom_lk05 ON main.prdjobbom USING btree (jobcode);
CREATE INDEX IF NOT EXISTS prdjobbom_lk06 ON main.prdjobbom USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdjobbom_lk07 ON main.prdjobbom USING btree (prdjobdet_code);
CREATE INDEX IF NOT EXISTS prdjobbom_lk08 ON main.prdjobbom USING btree (com_saitem_code);
CREATE INDEX IF NOT EXISTS prdjobbom_lk09 ON main.prdjobbom USING btree (jrcdet_code);
CREATE INDEX IF NOT EXISTS prdjobbom_lk10 ON main.prdjobbom USING btree (ass_saitem_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_alloc_posmail_pk ON main.psite_alloc_posmail USING btree (code);
CREATE INDEX IF NOT EXISTS psite_alloc_posmail_lk01 ON main.psite_alloc_posmail USING btree (psite_allocation_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_alloc_rep_hdrfooter_pk ON main.psite_alloc_rep_headerfooter USING btree (code);
CREATE INDEX IF NOT EXISTS psite_alloc_rep_headerfoo_lk01 ON main.psite_alloc_rep_headerfooter USING btree (psite_allocation_code);
CREATE UNIQUE INDEX IF NOT EXISTS sms_account_pkey ON main.sms_account USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS invgrcdet_pk ON main.invgrcdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgrcdet_dataversion ON main.invgrcdet USING btree (dataversion);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgrcdet_grccd_icode_pd_rt ON main.invgrcdet USING btree (grccode, icode, acrate, po_code, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invgrcdet_lk01 ON main.invgrcdet USING btree (grccode);
CREATE INDEX IF NOT EXISTS invgrcdet_lk02 ON main.invgrcdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invgrcdet_lk03 ON main.invgrcdet USING btree (loccode);
CREATE INDEX IF NOT EXISTS invgrcdet_lk04 ON main.invgrcdet USING btree (ordcode);
CREATE INDEX IF NOT EXISTS invgrcdet_lk05 ON main.invgrcdet USING btree (ycode);
CREATE INDEX IF NOT EXISTS invgrcdet_lk06 ON main.invgrcdet USING btree (poicode);
CREATE INDEX IF NOT EXISTS invgrcdet_lk07 ON main.invgrcdet USING btree (excisemain_code);
CREATE INDEX IF NOT EXISTS u_invgrcdet_po_erscode ON main.invgrcdet USING btree (po_code);
CREATE UNIQUE INDEX IF NOT EXISTS invgrtdet_pk ON main.invgrtdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgrtdet_grtcd_grccd_icd_rt ON main.invgrtdet USING btree (grtcode, icode, rate, invgrcdet_code, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invgrtdet_lk01 ON main.invgrtdet USING btree (grccode);
CREATE INDEX IF NOT EXISTS invgrtdet_lk02 ON main.invgrtdet USING btree (grtcode);
CREATE INDEX IF NOT EXISTS invgrtdet_lk03 ON main.invgrtdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invgrtdet_lk04 ON main.invgrtdet USING btree (loccode);
CREATE INDEX IF NOT EXISTS invgrtdet_lk05 ON main.invgrtdet USING btree (ycode);
CREATE INDEX IF NOT EXISTS invgrtdet_lk06 ON main.invgrtdet USING btree (invgrcdet_code);
CREATE INDEX IF NOT EXISTS invgrtdet_lk07 ON main.invgrtdet USING btree (excisemain_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdjobdet_pk ON main.prdjobdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_det_jcode_lcode_aicode_sai ON main.prdjobdet USING btree (jobcode, assembly_icode, lotcode, ass_saitem_code);
CREATE INDEX IF NOT EXISTS prdjobdet_lk01 ON main.prdjobdet USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdjobdet_lk02 ON main.prdjobdet USING btree (jobcode);
CREATE INDEX IF NOT EXISTS prdjobdet_lk03 ON main.prdjobdet USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdjobdet_lk04 ON main.prdjobdet USING btree (ass_saitem_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdjrcbom_code ON main.prdjrcbom USING btree (code);
CREATE INDEX IF NOT EXISTS i_prdjrcbom_job_aicode ON main.prdjrcbom USING btree (job_assembly_icode);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk01 ON main.prdjrcbom USING btree (jrccode);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk02 ON main.prdjrcbom USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk03 ON main.prdjrcbom USING btree (jobcode);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk04 ON main.prdjrcbom USING btree (jobdet_code);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk05 ON main.prdjrcbom USING btree (jobbom_code);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk06 ON main.prdjrcbom USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk07 ON main.prdjrcbom USING btree (component_icode);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk08 ON main.prdjrcbom USING btree (ass_saitem_code);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk09 ON main.prdjrcbom USING btree (com_saitem_code);
CREATE INDEX IF NOT EXISTS prdjrcbom_lk10 ON main.prdjrcbom USING btree (jrcdet_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdjrcdet_pk ON main.prdjrcdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdjrcdet_jrcjoblotaicode ON main.prdjrcdet USING btree (jrccode, jobcode, lotcode, assembly_icode, job_assembly_icode, ass_saitem_code, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS i_jrc_ai_job_code ON main.prdjrcdet USING btree (jrccode, assembly_icode, COALESCE((ass_saitem_code)::numeric, (0)::numeric), jobcode);
CREATE INDEX IF NOT EXISTS prdjrcdet_lk01 ON main.prdjrcdet USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdjrcdet_lk02 ON main.prdjrcdet USING btree (jobcode);
CREATE INDEX IF NOT EXISTS prdjrcdet_lk03 ON main.prdjrcdet USING btree (jobdet_code);
CREATE INDEX IF NOT EXISTS prdjrcdet_lk04 ON main.prdjrcdet USING btree (jrccode);
CREATE INDEX IF NOT EXISTS prdjrcdet_lk05 ON main.prdjrcdet USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdjrcdet_lk06 ON main.prdjrcdet USING btree (receive_loccode);
CREATE INDEX IF NOT EXISTS prdjrcdet_lk07 ON main.prdjrcdet USING btree (job_assembly_icode);
CREATE INDEX IF NOT EXISTS prdjrcdet_lk08 ON main.prdjrcdet USING btree (ass_saitem_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdwipclrdet_pk ON main.prdwipclrdet USING btree (code);
CREATE INDEX IF NOT EXISTS prdwipclrdet_lk01 ON main.prdwipclrdet USING btree (ass_saitem_code);
CREATE INDEX IF NOT EXISTS prdwipclrdet_lk02 ON main.prdwipclrdet USING btree (loccode);
CREATE INDEX IF NOT EXISTS prdwipclrdet_lk03 ON main.prdwipclrdet USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdwipclrdet_lk04 ON main.prdwipclrdet USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdwipclrdet_lk05 ON main.prdwipclrdet USING btree (prc_assembly_icode);
CREATE INDEX IF NOT EXISTS prdwipclrdet_lk06 ON main.prdwipclrdet USING btree (rec_assembly_icode);
CREATE INDEX IF NOT EXISTS prdwipclrdet_lk07 ON main.prdwipclrdet USING btree (wipclrmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS admattached_files_pk ON main.admattached_files USING btree (code);
CREATE INDEX IF NOT EXISTS admattached_files_lk01 ON main.admattached_files USING btree (uploadedby_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_admcity_code ON main.admcity USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_admcity_ctname ON main.admcity USING btree (ctname);
CREATE INDEX IF NOT EXISTS admcity_lk01 ON main.admcity USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS admcmpprof_lk01 ON main.admcmpprof USING btree (pos_roundoff_glcode);
CREATE INDEX IF NOT EXISTS admcmpprof_lk02 ON main.admcmpprof USING btree (profit_loss_glcode);
CREATE INDEX IF NOT EXISTS admcmpprof_lk03 ON main.admcmpprof USING btree (cash_discount_glcode);
CREATE UNIQUE INDEX IF NOT EXISTS admcmptax_u01 ON main.admcmptax USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS pk_admcmptax ON main.admcmptax USING btree (code);
CREATE INDEX IF NOT EXISTS admcmptax_lk01 ON main.admcmptax USING btree (ecode);
CREATE INDEX IF NOT EXISTS admcmptax_lk02 ON main.admcmptax USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS admcurrency_pk ON main.admcurrency USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS admcurrency_u01 ON main.admcurrency USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS admcurrency_u02 ON main.admcurrency USING btree (shortcode);
CREATE UNIQUE INDEX IF NOT EXISTS admcurrency_u03 ON main.admcurrency USING btree (symbol);
CREATE INDEX IF NOT EXISTS admcurrency_lk01 ON main.admcurrency USING btree (createdby);
CREATE INDEX IF NOT EXISTS admcurrency_lk02 ON main.admcurrency USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS admcurrency_rate_pk ON main.admcurrency_rate USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS admcurrency_rate_u01 ON main.admcurrency_rate USING btree (admcurrency_code, effdate);
CREATE INDEX IF NOT EXISTS admcurrency_rate_lk01 ON main.admcurrency_rate USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS admcurrency_rate_lk02 ON main.admcurrency_rate USING btree (createdby);
CREATE INDEX IF NOT EXISTS admcurrency_rate_lk03 ON main.admcurrency_rate USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS admdaybook_pk ON main.admdaybook USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_admdaybook_saledt ON main.admdaybook USING btree (saledt);
CREATE INDEX IF NOT EXISTS admdaybook_lk01 ON main.admdaybook USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS admgstin_pk ON main.admgstin USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS admgstin_u01 ON main.admgstin USING btree (ppob);
CREATE UNIQUE INDEX IF NOT EXISTS admgstin_uk ON main.admgstin USING btree (gstin_no);
CREATE INDEX IF NOT EXISTS admgstin_lk02 ON main.admgstin USING btree (cess_input_glcode);
CREATE INDEX IF NOT EXISTS admgstin_lk03 ON main.admgstin USING btree (cess_input_slcode);
CREATE INDEX IF NOT EXISTS admgstin_lk04 ON main.admgstin USING btree (cess_output_glcode);
CREATE INDEX IF NOT EXISTS admgstin_lk05 ON main.admgstin USING btree (cess_output_slcode);
CREATE INDEX IF NOT EXISTS admgstin_lk06 ON main.admgstin USING btree (cgst_input_glcode);
CREATE INDEX IF NOT EXISTS admgstin_lk07 ON main.admgstin USING btree (cgst_input_slcode);
CREATE INDEX IF NOT EXISTS admgstin_lk08 ON main.admgstin USING btree (cgst_output_glcode);
CREATE INDEX IF NOT EXISTS admgstin_lk09 ON main.admgstin USING btree (cgst_output_slcode);
CREATE INDEX IF NOT EXISTS admgstin_lk10 ON main.admgstin USING btree (createdby);
CREATE INDEX IF NOT EXISTS admgstin_lk11 ON main.admgstin USING btree (igst_input_glcode);
CREATE INDEX IF NOT EXISTS admgstin_lk12 ON main.admgstin USING btree (igst_input_slcode);
CREATE INDEX IF NOT EXISTS admgstin_lk13 ON main.admgstin USING btree (igst_output_glcode);
CREATE INDEX IF NOT EXISTS admgstin_lk14 ON main.admgstin USING btree (igst_output_slcode);
CREATE INDEX IF NOT EXISTS admgstin_lk15 ON main.admgstin USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS admgstin_lk16 ON main.admgstin USING btree (sgst_input_glcode);
CREATE INDEX IF NOT EXISTS admgstin_lk17 ON main.admgstin USING btree (sgst_input_slcode);
CREATE INDEX IF NOT EXISTS admgstin_lk18 ON main.admgstin USING btree (sgst_output_glcode);
CREATE INDEX IF NOT EXISTS admgstin_lk19 ON main.admgstin USING btree (sgst_output_slcode);
CREATE INDEX IF NOT EXISTS admgstin_lk20 ON main.admgstin USING btree (admou_code);
CREATE INDEX IF NOT EXISTS admgstin_lk21 ON main.admgstin USING btree (admgststate_code);
CREATE UNIQUE INDEX IF NOT EXISTS admgstjrnreason_pk ON main.admgstjrnreason USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS admlastdoc_pk ON main.admlastdoc USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS admlastdoc_u01 ON main.admlastdoc USING btree (menucode, doccode, ycode, mcode, entdt, admou_code, admsite_code, cmpcode, mdmenushortcode);
CREATE INDEX IF NOT EXISTS admlastdoc_lk01 ON main.admlastdoc USING btree (doccode);
CREATE INDEX IF NOT EXISTS admlastdoc_lk02 ON main.admlastdoc USING btree (ycode);
CREATE INDEX IF NOT EXISTS admlastdoc_lk03 ON main.admlastdoc USING btree (admou_code);
CREATE INDEX IF NOT EXISTS admlastdoc_lk04 ON main.admlastdoc USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS admlastdoc_lk05 ON main.admlastdoc USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS admlastdoc_lk06 ON main.admlastdoc USING btree (mdmenushortcode);
CREATE UNIQUE INDEX IF NOT EXISTS admlastno_pk ON main.admlastno USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_admlastno_table_name_ycode ON main.admlastno USING btree (table_name, ycode);
CREATE INDEX IF NOT EXISTS admlastno_lk01 ON main.admlastno USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS admlastordno_pk ON main.admlastordno USING btree (code);
CREATE INDEX IF NOT EXISTS admlastordno_lk01 ON main.admlastordno USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS p_admou_code ON main.admou USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_admou_name ON main.admou USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS u_admou_shrtname ON main.admou USING btree (shrtname);
CREATE INDEX IF NOT EXISTS admou_lk01 ON main.admou USING btree (admcmptax_code);
CREATE INDEX IF NOT EXISTS admou_lk02 ON main.admou USING btree (inloccode);
CREATE INDEX IF NOT EXISTS admou_lk03 ON main.admou USING btree (outloccode);
CREATE INDEX IF NOT EXISTS admou_lk04 ON main.admou USING btree (pkgloccode);
CREATE INDEX IF NOT EXISTS admou_lk05 ON main.admou USING btree (transferin_glcode);
CREATE INDEX IF NOT EXISTS admou_lk06 ON main.admou USING btree (transferin_slcode);
CREATE INDEX IF NOT EXISTS admou_lk07 ON main.admou USING btree (transferout_glcode);
CREATE INDEX IF NOT EXISTS admou_lk08 ON main.admou USING btree (transferout_slcode);
CREATE INDEX IF NOT EXISTS admou_lk09 ON main.admou USING btree (transitdiff_glcode);
CREATE INDEX IF NOT EXISTS admou_lk10 ON main.admou USING btree (transitdiff_slcode);
CREATE INDEX IF NOT EXISTS admou_lk11 ON main.admou USING btree (transit_glcode);
CREATE INDEX IF NOT EXISTS admou_lk12 ON main.admou USING btree (transit_slcode);
CREATE INDEX IF NOT EXISTS admou_lk13 ON main.admou USING btree (creditnote_glcode);
CREATE INDEX IF NOT EXISTS admou_lk14 ON main.admou USING btree (gvcontrol_glcode);
CREATE INDEX IF NOT EXISTS admou_lk15 ON main.admou USING btree (gvdiscount_glcode);
CREATE INDEX IF NOT EXISTS admou_lk16 ON main.admou USING btree (redemption_glcode);
CREATE INDEX IF NOT EXISTS admou_lk17 ON main.admou USING btree (roundoff_glcode);
CREATE INDEX IF NOT EXISTS admou_lk18 ON main.admou USING btree (debitnote_glcode);
CREATE INDEX IF NOT EXISTS admou_lk19 ON main.admou USING btree (consignmentsale_glcode);
CREATE INDEX IF NOT EXISTS admou_lk20 ON main.admou USING btree (consignmentsale_slcode);
CREATE INDEX IF NOT EXISTS admou_lk21 ON main.admou USING btree (default_ho_site);
CREATE UNIQUE INDEX IF NOT EXISTS admou_docscheme_pk ON main.admou_docscheme USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_admou_dcschm_doc_oucode_site ON main.admou_docscheme USING btree (admou_code, admsite_code, doccode);
CREATE INDEX IF NOT EXISTS admou_docscheme_lk01 ON main.admou_docscheme USING btree (admou_code);
CREATE INDEX IF NOT EXISTS admou_docscheme_lk02 ON main.admou_docscheme USING btree (doccode);
CREATE INDEX IF NOT EXISTS admou_docscheme_lk03 ON main.admou_docscheme USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_admou_month_code ON main.admou_month USING btree (code);
CREATE INDEX IF NOT EXISTS admou_month_lk01 ON main.admou_month USING btree (admmonth_code);
CREATE INDEX IF NOT EXISTS admou_month_lk02 ON main.admou_month USING btree (admou_code);
CREATE INDEX IF NOT EXISTS admou_month_lk03 ON main.admou_month USING btree (fin_month_modified_by);
CREATE INDEX IF NOT EXISTS admou_month_lk04 ON main.admou_month USING btree (inv_month_modified_by);
CREATE UNIQUE INDEX IF NOT EXISTS p_admou_year_code ON main.admou_year USING btree (code);
CREATE INDEX IF NOT EXISTS admou_year_lk01 ON main.admou_year USING btree (admou_code);
CREATE INDEX IF NOT EXISTS admou_year_lk02 ON main.admou_year USING btree (admyear_closed_by);
CREATE INDEX IF NOT EXISTS admou_year_lk03 ON main.admou_year USING btree (admyear_code);
CREATE UNIQUE INDEX IF NOT EXISTS admpriv_pk ON main.admpriv USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_admpriv_role_menu ON main.admpriv USING btree (rlcode, menucode);
CREATE INDEX IF NOT EXISTS admpriv_lk01 ON main.admpriv USING btree (rlcode);
CREATE UNIQUE INDEX IF NOT EXISTS admquicklaunch_pk ON main.admquicklaunch USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_admquicklaunch_profcode ON main.admquicklaunch USING btree (profcode);
CREATE UNIQUE INDEX IF NOT EXISTS admsite_psite_u01 ON main.admsite USING btree (psite_key);
CREATE UNIQUE INDEX IF NOT EXISTS admsite_psite_u02 ON main.admsite USING btree (sitedocin);
CREATE UNIQUE INDEX IF NOT EXISTS p_admsite_code ON main.admsite USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_admsite_slcode_name ON main.admsite USING btree (slcode, name);
CREATE INDEX IF NOT EXISTS admsite_lk01 ON main.admsite USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS admsite_lk02 ON main.admsite USING btree (psite_admcmptax_code);
CREATE INDEX IF NOT EXISTS admsite_lk03 ON main.admsite USING btree (psite_transit_loccode);
CREATE INDEX IF NOT EXISTS admsite_lk04 ON main.admsite USING btree (slcode);
CREATE INDEX IF NOT EXISTS admsite_lk05 ON main.admsite USING btree (store_loccode);
CREATE INDEX IF NOT EXISTS admsite_lk06 ON main.admsite USING btree (termcode);
CREATE INDEX IF NOT EXISTS admsite_lk07 ON main.admsite USING btree (trpcode);
CREATE INDEX IF NOT EXISTS admsite_lk08 ON main.admsite USING btree (psite_allocation_code);
CREATE INDEX IF NOT EXISTS admsite_lk09 ON main.admsite USING btree (psite_group_code);
CREATE INDEX IF NOT EXISTS admsite_lk10 ON main.admsite USING btree (psite_localpolicy_code);
CREATE INDEX IF NOT EXISTS admsite_lk11 ON main.admsite USING btree (psite_promo_allocation_code);
CREATE INDEX IF NOT EXISTS admsite_lk12 ON main.admsite USING btree (admou_code);
CREATE INDEX IF NOT EXISTS admsite_lk13 ON main.admsite USING btree (pricelist_code);
CREATE INDEX IF NOT EXISTS admsite_lk14 ON main.admsite USING btree (inloccode);
CREATE INDEX IF NOT EXISTS admsite_lk15 ON main.admsite USING btree (outloccode);
CREATE INDEX IF NOT EXISTS admsite_lk16 ON main.admsite USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS admsite_lk17 ON main.admsite USING btree (psite_si_allocation_code);
CREATE INDEX IF NOT EXISTS admsite_lk18 ON main.admsite USING btree (salformcode);
CREATE INDEX IF NOT EXISTS admsite_lk19 ON main.admsite USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS admsite_lk20 ON main.admsite USING btree (default_picklist_rule);
CREATE INDEX IF NOT EXISTS admsite_lk21 ON main.admsite USING btree (admgstin_code);
CREATE INDEX IF NOT EXISTS admsite_lk22 ON main.admsite USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS admsite_lk23 ON main.admsite USING btree (ship_cp_category_code);
CREATE INDEX IF NOT EXISTS admsite_lk24 ON main.admsite USING btree (ship_cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS admsite_lk25 ON main.admsite USING btree (admisd_code);
CREATE INDEX IF NOT EXISTS admsite_lk26 ON main.admsite USING btree (ctname);
CREATE INDEX IF NOT EXISTS admsite_lk27 ON main.admsite USING btree (floorloccode);
CREATE INDEX IF NOT EXISTS i_admsite_sitetype ON main.admsite USING btree (sitetype);
CREATE UNIQUE INDEX IF NOT EXISTS admsite_ou_pk ON main.admsite_ou USING btree (code);
CREATE INDEX IF NOT EXISTS admsite_ou_lk01 ON main.admsite_ou USING btree (admou_code);
CREATE INDEX IF NOT EXISTS admsite_ou_lk02 ON main.admsite_ou USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS admsite_ou_lk03 ON main.admsite_ou USING btree (termcode);
CREATE INDEX IF NOT EXISTS admsite_ou_lk04 ON main.admsite_ou USING btree (repln_admsite_code);
CREATE INDEX IF NOT EXISTS admsite_ou_lk05 ON main.admsite_ou USING btree (pricelist_code);
CREATE INDEX IF NOT EXISTS admsite_ou_lk06 ON main.admsite_ou USING btree (transit_via_admsite_code);
CREATE INDEX IF NOT EXISTS admsite_ou_lk07 ON main.admsite_ou USING btree (formcode);
CREATE INDEX IF NOT EXISTS admsite_ou_lk08 ON main.admsite_ou USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS admsite_ou_lk09 ON main.admsite_ou USING btree (return_pricelist_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_admyear_ycode ON main.admyear USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS u_admyear_yname ON main.admyear USING btree (yname);
CREATE UNIQUE INDEX IF NOT EXISTS psite_allocation_detail_pkey ON main.psite_allocation_detail USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_allocation_detail_u01 ON main.psite_allocation_detail USING btree (psite_allocation_code, allocation_type, refcode);
CREATE INDEX IF NOT EXISTS psite_allocation_detail_lk01 ON main.psite_allocation_detail USING btree (psite_allocation_code);
CREATE UNIQUE INDEX IF NOT EXISTS invarticle_pk ON main.invarticle USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invarticle_u01 ON main.invarticle USING btree (name);
CREATE INDEX IF NOT EXISTS invarticle_lk01 ON main.invarticle USING btree (grpcode);
CREATE INDEX IF NOT EXISTS invarticle_lk02 ON main.invarticle USING btree (invattr1_code);
CREATE INDEX IF NOT EXISTS invarticle_lk03 ON main.invarticle USING btree (invattr2_code);
CREATE INDEX IF NOT EXISTS invarticle_lk04 ON main.invarticle USING btree (invattr3_code);
CREATE INDEX IF NOT EXISTS invarticle_lk05 ON main.invarticle USING btree (invattr4_code);
CREATE INDEX IF NOT EXISTS invarticle_lk06 ON main.invarticle USING btree (invattr5_code);
CREATE INDEX IF NOT EXISTS invarticle_lk07 ON main.invarticle USING btree (invattr6_code);
CREATE INDEX IF NOT EXISTS invarticle_lk08 ON main.invarticle USING btree (invmmrule_code);
CREATE INDEX IF NOT EXISTS invarticle_lk09 ON main.invarticle USING btree (taxcode);
CREATE UNIQUE INDEX IF NOT EXISTS promo_assortment_exclude_pk ON main.promo_assortment_exclude USING btree (code);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk01 ON main.promo_assortment_exclude USING btree (assortment_code);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk02 ON main.promo_assortment_exclude USING btree (ccode1);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk03 ON main.promo_assortment_exclude USING btree (ccode2);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk04 ON main.promo_assortment_exclude USING btree (ccode3);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk05 ON main.promo_assortment_exclude USING btree (ccode4);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk06 ON main.promo_assortment_exclude USING btree (ccode5);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk07 ON main.promo_assortment_exclude USING btree (ccode6);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk08 ON main.promo_assortment_exclude USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk09 ON main.promo_assortment_exclude USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk10 ON main.promo_assortment_exclude USING btree (icode);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk11 ON main.promo_assortment_exclude USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS promo_assortment_exclude_lk12 ON main.promo_assortment_exclude USING btree (section_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS promo_assortment_include_pk ON main.promo_assortment_include USING btree (code);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk01 ON main.promo_assortment_include USING btree (assortment_code);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk02 ON main.promo_assortment_include USING btree (ccode1);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk03 ON main.promo_assortment_include USING btree (ccode2);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk04 ON main.promo_assortment_include USING btree (ccode3);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk05 ON main.promo_assortment_include USING btree (ccode4);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk06 ON main.promo_assortment_include USING btree (ccode5);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk07 ON main.promo_assortment_include USING btree (ccode6);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk08 ON main.promo_assortment_include USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk09 ON main.promo_assortment_include USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk10 ON main.promo_assortment_include USING btree (icode);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk11 ON main.promo_assortment_include USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS promo_assortment_include_lk12 ON main.promo_assortment_include USING btree (section_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_aud_login ON main.aud_events USING btree (code);
CREATE INDEX IF NOT EXISTS aud_events_lk01 ON main.aud_events USING btree (ecode);
CREATE UNIQUE INDEX IF NOT EXISTS backup_history_pk ON main.backup_history USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS p_tablecogs_run_log_code ON main.cogs_run_log USING btree (code);
CREATE INDEX IF NOT EXISTS cogs_run_log_lk01 ON main.cogs_run_log USING btree (admou_month_code);
CREATE INDEX IF NOT EXISTS cogs_run_log_lk02 ON main.cogs_run_log USING btree (run_by);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_channel_pk ON main.connected_app_channel USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_channel_lk01 ON main.connected_app_channel USING btree (connected_app_id);
CREATE INDEX IF NOT EXISTS connected_app_channel_lk02 ON main.connected_app_channel USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_customer_pk ON main.connected_app_customer USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_customer_u01 ON main.connected_app_customer USING btree (connected_app_id, slcode);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_expense_pk ON main.connected_app_expense USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_expense_lk01 ON main.connected_app_expense USING btree (connected_app_id);
CREATE INDEX IF NOT EXISTS connected_app_expense_lk02 ON main.connected_app_expense USING btree (expense_glcode);
CREATE INDEX IF NOT EXISTS connected_app_expense_lk03 ON main.connected_app_expense USING btree (expense_master_code);
CREATE INDEX IF NOT EXISTS connected_app_expense_lk04 ON main.connected_app_expense USING btree (expense_slcode);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_assrt_include_pk ON main.connected_app_assrt_include USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk01 ON main.connected_app_assrt_include USING btree (ccode1);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk02 ON main.connected_app_assrt_include USING btree (ccode2);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk03 ON main.connected_app_assrt_include USING btree (ccode3);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk04 ON main.connected_app_assrt_include USING btree (ccode4);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk05 ON main.connected_app_assrt_include USING btree (ccode5);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk06 ON main.connected_app_assrt_include USING btree (ccode6);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk07 ON main.connected_app_assrt_include USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk08 ON main.connected_app_assrt_include USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk09 ON main.connected_app_assrt_include USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS connected_app_assrt_inclu_lk10 ON main.connected_app_assrt_include USING btree (section_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS connected_assrt_include_u01 ON main.connected_app_assrt_include USING btree (connected_app_id, icode);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_site_pk ON main.connected_app_site USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_site_u01 ON main.connected_app_site USING btree (connected_app_id, admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_tender_pk ON main.connected_app_tender USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_tender_lk01 ON main.connected_app_tender USING btree (connected_app_id);
CREATE INDEX IF NOT EXISTS connected_app_tender_lk03 ON main.connected_app_tender USING btree (tender_master_code);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_transporter_pk ON main.connected_app_transporter USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_transporter_lk01 ON main.connected_app_transporter USING btree (connected_app_id);
CREATE INDEX IF NOT EXISTS connected_app_transporter_lk02 ON main.connected_app_transporter USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS custompatch_pk ON main.custompatch USING btree (patchid);
CREATE UNIQUE INDEX IF NOT EXISTS custompatchcirculation_pk ON main.custompatchcirculation USING btree (patchcirculationid);
CREATE INDEX IF NOT EXISTS custompatchcirculation_lk01 ON main.custompatchcirculation USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS custompatchcirculation_lk02 ON main.custompatchcirculation USING btree (patchid);
CREATE UNIQUE INDEX IF NOT EXISTS depthsnchangelog_pk ON main.depthsnchangelog USING btree (code);
CREATE INDEX IF NOT EXISTS depthsnchangelog_lk01 ON main.depthsnchangelog USING btree (createdby);
CREATE INDEX IF NOT EXISTS depthsnchangelog_lk02 ON main.depthsnchangelog USING btree (grpcode);
CREATE INDEX IF NOT EXISTS depthsnchangelog_lk03 ON main.depthsnchangelog USING btree (invhsnsacmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_discount_pk ON main.psite_discount USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_discount_i01 ON main.psite_discount USING btree (upper((name)::text));
CREATE INDEX IF NOT EXISTS psite_discount_lk01 ON main.psite_discount USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_discount_lk02 ON main.psite_discount USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS psite_emrtransaction_log_pk ON main.psite_emrtransaction_log USING btree (code);
CREATE INDEX IF NOT EXISTS psite_emrtransaction_log_lk01 ON main.psite_emrtransaction_log USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS ewaybill_cancel_history_pk ON main.ewaybill_cancellation_history USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS excisedet_pk ON main.excisedet USING btree (code);
CREATE INDEX IF NOT EXISTS excisedet_lk01 ON main.excisedet USING btree (excisemain_code);
CREATE UNIQUE INDEX IF NOT EXISTS expense_master_pk ON main.expense_master USING btree (code);
CREATE INDEX IF NOT EXISTS expense_master_lk01 ON main.expense_master USING btree (createdbyid);
CREATE INDEX IF NOT EXISTS expense_master_lk02 ON main.expense_master USING btree (lastmodifiedbyid);
CREATE UNIQUE INDEX IF NOT EXISTS fincostop_pk ON main.fincostop USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS fincostop_u01 ON main.fincostop USING btree (glcode, slcode, costcode, admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS u_fincostop_u01 ON main.fincostop USING btree (admsite_code, glcode, slcode, ycode);
CREATE INDEX IF NOT EXISTS fincostop_lk01 ON main.fincostop USING btree (glcode);
CREATE INDEX IF NOT EXISTS fincostop_lk02 ON main.fincostop USING btree (slcode);
CREATE INDEX IF NOT EXISTS fincostop_lk03 ON main.fincostop USING btree (costcode);
CREATE INDEX IF NOT EXISTS fincostop_lk04 ON main.fincostop USING btree (ycode);
CREATE INDEX IF NOT EXISTS fincostop_lk05 ON main.fincostop USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS finopdoc_pk ON main.finopdoc USING btree (entcode);
CREATE UNIQUE INDEX IF NOT EXISTS finopdoc_u01 ON main.finopdoc USING btree (entno, enttype);
CREATE INDEX IF NOT EXISTS finopdoc_lk01 ON main.finopdoc USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS finopdoc_lk02 ON main.finopdoc USING btree (agcode);
CREATE INDEX IF NOT EXISTS finopdoc_lk03 ON main.finopdoc USING btree (ref_admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS finchqdet_pk ON main.finchqdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_finchqdet_bookcode_chqno ON main.finchqdet USING btree (bookcode, chqno);
CREATE UNIQUE INDEX IF NOT EXISTS u_finchqdet_gl_chqno ON main.finchqdet USING btree (glcode, chqno);
CREATE INDEX IF NOT EXISTS finchqdet_lk01 ON main.finchqdet USING btree (bookcode);
CREATE INDEX IF NOT EXISTS finchqdet_lk02 ON main.finchqdet USING btree (vchcode);
CREATE INDEX IF NOT EXISTS i_finchqdet_glcode ON main.finchqdet USING btree (glcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_finchqmain_bookcode ON main.finchqmain USING btree (bookcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_finchqmain_bookno_ycode ON main.finchqmain USING btree (bookno, ycode);
CREATE INDEX IF NOT EXISTS finchqmain_lk01 ON main.finchqmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS finchqmain_lk02 ON main.finchqmain USING btree (glcode);
CREATE INDEX IF NOT EXISTS finchqmain_lk03 ON main.finchqmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS finchqmain_lk04 ON main.finchqmain USING btree (admsite_code_owner);
CREATE UNIQUE INDEX IF NOT EXISTS fincosttag_pk ON main.fincosttag USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_fincosttag_composite ON main.fincosttag USING btree (entcode, glcode, slcode, admsite_code, postcode, ref_admsite_code);
CREATE INDEX IF NOT EXISTS fincosttag_lk01 ON main.fincosttag USING btree (costcode);
CREATE INDEX IF NOT EXISTS fincosttag_lk02 ON main.fincosttag USING btree (enttype);
CREATE INDEX IF NOT EXISTS fincosttag_lk03 ON main.fincosttag USING btree (glcode);
CREATE INDEX IF NOT EXISTS fincosttag_lk04 ON main.fincosttag USING btree (slcode);
CREATE INDEX IF NOT EXISTS fincosttag_lk05 ON main.fincosttag USING btree (ycode);
CREATE INDEX IF NOT EXISTS fincosttag_lk06 ON main.fincosttag USING btree (postcode);
CREATE INDEX IF NOT EXISTS fincosttag_lk07 ON main.fincosttag USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS fincosttag_lk08 ON main.fincosttag USING btree (ref_admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS fincosttag_check_pk ON main.fincosttag_check USING btree (entcode);
CREATE UNIQUE INDEX IF NOT EXISTS finglbud_pk ON main.finglbud USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_finglbud_gl_cost_sl_mcode ON main.finglbud USING btree (glcode, costcode, slcode, mcode, admou_code);
CREATE INDEX IF NOT EXISTS finglbud_lk01 ON main.finglbud USING btree (glcode);
CREATE INDEX IF NOT EXISTS finglbud_lk02 ON main.finglbud USING btree (mcode);
CREATE INDEX IF NOT EXISTS finglbud_lk03 ON main.finglbud USING btree (slcode);
CREATE INDEX IF NOT EXISTS finglbud_lk04 ON main.finglbud USING btree (costcode);
CREATE UNIQUE INDEX IF NOT EXISTS finglop_pk ON main.finglop USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_finslop_gl_ycode_ou ON main.finglop USING btree (glcode, ycode, admou_code);
CREATE INDEX IF NOT EXISTS finglop_lk01 ON main.finglop USING btree (glcode);
CREATE INDEX IF NOT EXISTS finglop_lk02 ON main.finglop USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS finjrndet_pk ON main.finjrndet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_finjrndet_jrncode_glcode_slc ON main.finjrndet USING btree (jrncode, glcode, slcode);
CREATE INDEX IF NOT EXISTS finjrndet_lk01 ON main.finjrndet USING btree (glcode);
CREATE INDEX IF NOT EXISTS finjrndet_lk02 ON main.finjrndet USING btree (jrncode);
CREATE INDEX IF NOT EXISTS finjrndet_lk03 ON main.finjrndet USING btree (slcode);
CREATE INDEX IF NOT EXISTS finjrndet_lk04 ON main.finjrndet USING btree (ycode);
CREATE INDEX IF NOT EXISTS finjrndet_lk05 ON main.finjrndet USING btree (tdssrccode);
CREATE INDEX IF NOT EXISTS finjrndet_lk06 ON main.finjrndet USING btree (tdstypecode);
CREATE INDEX IF NOT EXISTS finjrndet_lk07 ON main.finjrndet USING btree (ref_admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_finjrnmain_jrncode ON main.finjrnmain USING btree (jrncode);
CREATE INDEX IF NOT EXISTS finjrnmain_lk01 ON main.finjrnmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS finjrnmain_lk02 ON main.finjrnmain USING btree (glcode);
CREATE INDEX IF NOT EXISTS finjrnmain_lk03 ON main.finjrnmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS finjrnmain_lk04 ON main.finjrnmain USING btree (slcode);
CREATE INDEX IF NOT EXISTS finjrnmain_lk05 ON main.finjrnmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS finjrnmain_lk06 ON main.finjrnmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS finjrnmain_lk07 ON main.finjrnmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS finjrnmain_lk08 ON main.finjrnmain USING btree (ref_admsite_code);
CREATE INDEX IF NOT EXISTS finjrnmain_lk09 ON main.finjrnmain USING btree (adv_voucher_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_finnar_narcode ON main.finnar USING btree (narcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_finnar_nartext_glcode ON main.finnar USING btree (nartext, glcode);
CREATE INDEX IF NOT EXISTS finnar_lk01 ON main.finnar USING btree (glcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_finpost_postcode ON main.finpost USING btree (postcode);
CREATE INDEX IF NOT EXISTS finpost_lk01 ON main.finpost USING btree (enttype);
CREATE INDEX IF NOT EXISTS finpost_lk02 ON main.finpost USING btree (glcode);
CREATE INDEX IF NOT EXISTS finpost_lk03 ON main.finpost USING btree (slcode);
CREATE INDEX IF NOT EXISTS finpost_lk04 ON main.finpost USING btree (ycode);
CREATE INDEX IF NOT EXISTS finpost_lk05 ON main.finpost USING btree (chgcode);
CREATE INDEX IF NOT EXISTS finpost_lk06 ON main.finpost USING btree (tdssrccode);
CREATE INDEX IF NOT EXISTS finpost_lk07 ON main.finpost USING btree (tdstypecode);
CREATE INDEX IF NOT EXISTS finpost_lk08 ON main.finpost USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS finpost_lk09 ON main.finpost USING btree (ecode);
CREATE INDEX IF NOT EXISTS finpost_lk10 ON main.finpost USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS finpost_lk11 ON main.finpost USING btree (ref_admsite_code);
CREATE INDEX IF NOT EXISTS finpost_lk12 ON main.finpost USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS i_finpost_composite ON main.finpost USING btree (entcode, enttype);
CREATE INDEX IF NOT EXISTS i_finpost_release_status ON main.finpost USING btree (release_status);
CREATE INDEX IF NOT EXISTS i_scheme_docno_finpost ON main.finpost USING btree (upper((scheme_docno)::text));
CREATE UNIQUE INDEX IF NOT EXISTS p_finpost_check_entcode ON main.finpost_check USING btree (entcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_finsl_slcode ON main.finsl USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_finsl_slid ON main.finsl USING btree (slid);
CREATE INDEX IF NOT EXISTS finsl_lk01 ON main.finsl USING btree (agcode);
CREATE INDEX IF NOT EXISTS finsl_lk02 ON main.finsl USING btree (bctname);
CREATE INDEX IF NOT EXISTS finsl_lk03 ON main.finsl USING btree (clscode);
CREATE INDEX IF NOT EXISTS finsl_lk04 ON main.finsl USING btree (glcode);
CREATE INDEX IF NOT EXISTS finsl_lk05 ON main.finsl USING btree (inloccode);
CREATE INDEX IF NOT EXISTS finsl_lk06 ON main.finsl USING btree (outloccode);
CREATE INDEX IF NOT EXISTS finsl_lk07 ON main.finsl USING btree (pricelistcode);
CREATE INDEX IF NOT EXISTS finsl_lk08 ON main.finsl USING btree (saltermcode);
CREATE INDEX IF NOT EXISTS finsl_lk09 ON main.finsl USING btree (taxcode);
CREATE INDEX IF NOT EXISTS finsl_lk10 ON main.finsl USING btree (tdssrccode);
CREATE INDEX IF NOT EXISTS finsl_lk11 ON main.finsl USING btree (trpcode);
CREATE INDEX IF NOT EXISTS finsl_lk12 ON main.finsl USING btree (crcode);
CREATE INDEX IF NOT EXISTS finsl_lk13 ON main.finsl USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS finsl_lk14 ON main.finsl USING btree (purchase_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk15 ON main.finsl USING btree (purchase_return_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk16 ON main.finsl USING btree (purchase_return_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk17 ON main.finsl USING btree (purchase_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk18 ON main.finsl USING btree (consignment_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk19 ON main.finsl USING btree (consignment_sales_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk20 ON main.finsl USING btree (consignment_sales_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk21 ON main.finsl USING btree (consignment_trnsfr_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk22 ON main.finsl USING btree (consignment_trnsfr_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk23 ON main.finsl USING btree (sales_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk24 ON main.finsl USING btree (sales_return_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk25 ON main.finsl USING btree (sales_return_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk26 ON main.finsl USING btree (sales_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk27 ON main.finsl USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS finsl_lk28 ON main.finsl USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS finsl_lk29 ON main.finsl USING btree (purtermmain_code);
CREATE INDEX IF NOT EXISTS finsl_lk30 ON main.finsl USING btree (vatexp_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk31 ON main.finsl USING btree (vatexp_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk32 ON main.finsl USING btree (consignment_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk33 ON main.finsl USING btree (transitdiff_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk34 ON main.finsl USING btree (transitdiff_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk35 ON main.finsl USING btree (transit_glcode);
CREATE INDEX IF NOT EXISTS finsl_lk36 ON main.finsl USING btree (transit_slcode);
CREATE INDEX IF NOT EXISTS finsl_lk37 ON main.finsl USING btree (admcmptax_code);
CREATE INDEX IF NOT EXISTS finsl_lk38 ON main.finsl USING btree (purformcode);
CREATE INDEX IF NOT EXISTS finsl_lk39 ON main.finsl USING btree (salformcode);
CREATE INDEX IF NOT EXISTS finsl_lk40 ON main.finsl USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS finsl_lk41 ON main.finsl USING btree (sctname);
CREATE INDEX IF NOT EXISTS finsl_lk42 ON main.finsl USING btree (cp_category_code);
CREATE INDEX IF NOT EXISTS finsl_lk43 ON main.finsl USING btree (cp_gstin_state_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_finsl_gl_code ON main.finsl_gl USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_finsl_gl_slcode_glcode ON main.finsl_gl USING btree (slcode, glcode);
CREATE INDEX IF NOT EXISTS finsl_gl_lk01 ON main.finsl_gl USING btree (glcode);
CREATE INDEX IF NOT EXISTS finsl_gl_lk02 ON main.finsl_gl USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_finsl_gl_site_code ON main.finsl_gl_site USING btree (code);
CREATE INDEX IF NOT EXISTS finsl_gl_site_lk01 ON main.finsl_gl_site USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS finsl_gl_site_lk02 ON main.finsl_gl_site USING btree (finsl_gl_code);
CREATE UNIQUE INDEX IF NOT EXISTS finsl_ou_site_pk ON main.finsl_ou_site USING btree (code);
CREATE INDEX IF NOT EXISTS finsl_ou_site_i01 ON main.finsl_ou_site USING btree (transit_via_admsite_code);
CREATE INDEX IF NOT EXISTS finsl_ou_site_lk01 ON main.finsl_ou_site USING btree (finsl_ou_code);
CREATE INDEX IF NOT EXISTS finsl_ou_site_lk02 ON main.finsl_ou_site USING btree (site_code);
CREATE INDEX IF NOT EXISTS finsl_ou_site_lk03 ON main.finsl_ou_site USING btree (termcode);
CREATE INDEX IF NOT EXISTS finsl_ou_site_lk04 ON main.finsl_ou_site USING btree (pricelistcode);
CREATE INDEX IF NOT EXISTS finsl_ou_site_lk05 ON main.finsl_ou_site USING btree (salformcode);
CREATE INDEX IF NOT EXISTS finsl_ou_site_lk06 ON main.finsl_ou_site USING btree (saltradegrp_code);
CREATE UNIQUE INDEX IF NOT EXISTS finslop_pk ON main.finslop USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_finslop_sl_gl_ycode_ou ON main.finslop USING btree (slcode, glcode, ycode, admou_code);
CREATE INDEX IF NOT EXISTS finslop_lk01 ON main.finslop USING btree (glcode);
CREATE INDEX IF NOT EXISTS finslop_lk02 ON main.finslop USING btree (slcode);
CREATE INDEX IF NOT EXISTS finslop_lk03 ON main.finslop USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS fintag_pk ON main.fintag USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_fintag_postcode1_postcode2 ON main.fintag USING btree (postcode1, postcode2);
CREATE INDEX IF NOT EXISTS fintag_lk01 ON main.fintag USING btree (ecode);
CREATE INDEX IF NOT EXISTS fintag_lk02 ON main.fintag USING btree (enttype1);
CREATE INDEX IF NOT EXISTS fintag_lk03 ON main.fintag USING btree (enttype2);
CREATE INDEX IF NOT EXISTS fintag_lk04 ON main.fintag USING btree (postcode1);
CREATE INDEX IF NOT EXISTS fintag_lk05 ON main.fintag USING btree (postcode2);
CREATE INDEX IF NOT EXISTS fintag_lk06 ON main.fintag USING btree (slcode);
CREATE INDEX IF NOT EXISTS fintag_lk07 ON main.fintag USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS fintax_range_code_pk ON main.fintax_range USING btree (code);
CREATE INDEX IF NOT EXISTS fintax_range_lk01 ON main.fintax_range USING btree (taxdetcode);
CREATE INDEX IF NOT EXISTS fintax_range_lk02 ON main.fintax_range USING btree (purtax_glcode);
CREATE INDEX IF NOT EXISTS fintax_range_lk03 ON main.fintax_range USING btree (purtax_slcode);
CREATE INDEX IF NOT EXISTS fintax_range_lk04 ON main.fintax_range USING btree (saltax_glcode);
CREATE INDEX IF NOT EXISTS fintax_range_lk05 ON main.fintax_range USING btree (saltax_slcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_fintaxdet_taxdetcode ON main.fintaxdet USING btree (taxdetcode);
CREATE INDEX IF NOT EXISTS fintaxdet_lk01 ON main.fintaxdet USING btree (admcmptax_code);
CREATE INDEX IF NOT EXISTS fintaxdet_lk02 ON main.fintaxdet USING btree (taxcode);
CREATE INDEX IF NOT EXISTS fintaxdet_lk03 ON main.fintaxdet USING btree (purtax_glcode);
CREATE INDEX IF NOT EXISTS fintaxdet_lk04 ON main.fintaxdet USING btree (purtax_slcode);
CREATE INDEX IF NOT EXISTS fintaxdet_lk05 ON main.fintaxdet USING btree (saltax_glcode);
CREATE INDEX IF NOT EXISTS fintaxdet_lk06 ON main.fintaxdet USING btree (saltax_slcode);
CREATE INDEX IF NOT EXISTS fintaxdet_lk07 ON main.fintaxdet USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS fintaxdet_lk08 ON main.fintaxdet USING btree (formcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_fintaxmain_taxcode ON main.fintaxmain USING btree (taxcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_fintaxmain_taxname ON main.fintaxmain USING btree (taxname);
CREATE UNIQUE INDEX IF NOT EXISTS fintdsdet_pk ON main.fintdsdet USING btree (code);
CREATE INDEX IF NOT EXISTS fintdsdet_lk01 ON main.fintdsdet USING btree (jrncode);
CREATE INDEX IF NOT EXISTS fintdsdet_lk02 ON main.fintdsdet USING btree (tdscode);
CREATE INDEX IF NOT EXISTS fintdsdet_lk03 ON main.fintdsdet USING btree (vchcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_fintdssrc_tdssrccode ON main.fintdssrc USING btree (tdssrccode);
CREATE UNIQUE INDEX IF NOT EXISTS u_fintdssrc_tdssrcname ON main.fintdssrc USING btree (tdssrcname);
CREATE INDEX IF NOT EXISTS fintdssrc_lk01 ON main.fintdssrc USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS fintdstag_pk ON main.fintdstag USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_fintdssrc_type_src_dtfr ON main.fintdstag USING btree (fintdstypesrc_code, dtfr);
CREATE INDEX IF NOT EXISTS fintdstag_lk01 ON main.fintdstag USING btree (tdssrccode);
CREATE INDEX IF NOT EXISTS fintdstag_lk02 ON main.fintdstag USING btree (tdstypecode);
CREATE INDEX IF NOT EXISTS fintdstag_lk03 ON main.fintdstag USING btree (fintdstypesrc_code);
CREATE INDEX IF NOT EXISTS fintdstag_lk04 ON main.fintdstag USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_fintdstype_tdstypecode ON main.fintdstype USING btree (tdstypecode);
CREATE UNIQUE INDEX IF NOT EXISTS u_fintdstype_tdsname ON main.fintdstype USING btree (tdsname);
CREATE INDEX IF NOT EXISTS fintdstype_lk01 ON main.fintdstype USING btree (tdsglcode);
CREATE INDEX IF NOT EXISTS fintdstype_lk02 ON main.fintdstype USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS fintdstype_lk03 ON main.fintdstype USING btree (tdsslcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_fintds_srccode ON main.fintdstypesrc USING btree (code);
CREATE INDEX IF NOT EXISTS fintdstypesrc_lk01 ON main.fintdstypesrc USING btree (tdstypecode);
CREATE INDEX IF NOT EXISTS fintdstypesrc_lk02 ON main.fintdstypesrc USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS finvchdet_pk ON main.finvchdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_finvchdet_vchcode_glcode_slc ON main.finvchdet USING btree (vchcode, glcode, slcode);
CREATE INDEX IF NOT EXISTS finvchdet_lk01 ON main.finvchdet USING btree (glcode);
CREATE INDEX IF NOT EXISTS finvchdet_lk02 ON main.finvchdet USING btree (slcode);
CREATE INDEX IF NOT EXISTS finvchdet_lk03 ON main.finvchdet USING btree (vchcode);
CREATE INDEX IF NOT EXISTS finvchdet_lk04 ON main.finvchdet USING btree (ycode);
CREATE INDEX IF NOT EXISTS finvchdet_lk05 ON main.finvchdet USING btree (bookcode);
CREATE INDEX IF NOT EXISTS finvchdet_lk06 ON main.finvchdet USING btree (ref_admsite_code);
CREATE INDEX IF NOT EXISTS finvchdet_lk07 ON main.finvchdet USING btree (tdsglcode);
CREATE INDEX IF NOT EXISTS finvchdet_lk08 ON main.finvchdet USING btree (tdsslcode);
CREATE INDEX IF NOT EXISTS finvchdet_lk09 ON main.finvchdet USING btree (tdssrccode);
CREATE INDEX IF NOT EXISTS finvchdet_lk10 ON main.finvchdet USING btree (tdstypecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_finvchmain_vchcode ON main.finvchmain USING btree (vchcode);
CREATE INDEX IF NOT EXISTS finvchmain_lk01 ON main.finvchmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS finvchmain_lk02 ON main.finvchmain USING btree (glcode);
CREATE INDEX IF NOT EXISTS finvchmain_lk03 ON main.finvchmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS finvchmain_lk04 ON main.finvchmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS finvchmain_lk05 ON main.finvchmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS finvchmain_lk06 ON main.finvchmain USING btree (release_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_batch_pk ON main.gds2_event_queue_data USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_event_queue_data_lk01 ON main.gds2_event_queue_data USING btree (event_id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_track_pk ON main.gds2_event_track USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_track_u01 ON main.gds2_event_track USING btree (event_id, refcode, dispatch_session_id, connected_app_code);
CREATE UNIQUE INDEX IF NOT EXISTS pk_gds2_out_log_db_rest ON main.gds2_out_log_db USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_out_log_db_lk01 ON main.gds2_out_log_db USING btree (gds2_subscription_id);
CREATE UNIQUE INDEX IF NOT EXISTS pk_gds2_out_log_rest ON main.gds2_out_log_api USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_out_log_api_lk01 ON main.gds2_out_log_api USING btree (gds2_subscription_id);
CREATE UNIQUE INDEX IF NOT EXISTS u_gds_inbound_queue ON main.gds_inbound_queue USING btree (ackid, entityid);
CREATE INDEX IF NOT EXISTS gds_inbound_queue_i01 ON main.gds_inbound_queue USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS gds_inbound_transactionlog_pk ON main.gds_inbound_transactionlog USING btree (id);
CREATE INDEX IF NOT EXISTS gds_inbound_transactionlo_lk01 ON main.gds_inbound_transactionlog USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS code_pk ON main.psite_global_appuser_assign USING btree (code);
CREATE INDEX IF NOT EXISTS psite_global_appuser_assi_lk01 ON main.psite_global_appuser_assign USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_global_appuser_assi_lk02 ON main.psite_global_appuser_assign USING btree (psite_global_appuser_id);
CREATE INDEX IF NOT EXISTS psite_global_appuser_assi_lk03 ON main.psite_global_appuser_assign USING btree (psite_global_localpolicy_id);
CREATE INDEX IF NOT EXISTS psite_global_appuser_assi_lk04 ON main.psite_global_appuser_assign USING btree (psite_global_role_id);
CREATE UNIQUE INDEX IF NOT EXISTS psite_global_appuser_pk ON main.psite_global_appuser USING btree (id);
CREATE INDEX IF NOT EXISTS psite_global_appuser_lk01 ON main.psite_global_appuser USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_global_appuser_lk02 ON main.psite_global_appuser USING btree (ctname);
CREATE INDEX IF NOT EXISTS psite_global_appuser_lk03 ON main.psite_global_appuser USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS psite_global_salesperson_pk ON main.psite_global_salesperson USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_global_salesperson_u01 ON main.psite_global_salesperson USING btree (spno);
CREATE INDEX IF NOT EXISTS psite_global_salesperson_lk01 ON main.psite_global_salesperson USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_global_salesperson_lk02 ON main.psite_global_salesperson USING btree (ctname);
CREATE INDEX IF NOT EXISTS psite_global_salesperson_lk03 ON main.psite_global_salesperson USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS gridstate_pkey ON main.gridstate USING btree (id);
CREATE INDEX IF NOT EXISTS gridstate_lk01 ON main.gridstate USING btree (userid);
CREATE UNIQUE INDEX IF NOT EXISTS u_gst_chk_sdno_ycode_gstin ON main.gst_docno_check USING btree (scheme_docno, ycode, admgstin_code);
CREATE INDEX IF NOT EXISTS gst_docno_check_lk01 ON main.gst_docno_check USING btree (admgstin_code);
CREATE INDEX IF NOT EXISTS gst_docno_check_lk02 ON main.gst_docno_check USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS gst_docno_check_lk03 ON main.gst_docno_check USING btree (doccode);
CREATE INDEX IF NOT EXISTS gst_docno_check_lk04 ON main.gst_docno_check USING btree (enttype);
CREATE INDEX IF NOT EXISTS gst_docno_check_lk05 ON main.gst_docno_check USING btree (ycode);
CREATE INDEX IF NOT EXISTS i_gst_dc_chk_ent_code_ycode ON main.gst_docno_check USING btree (enttype, entcode, ycode);
CREATE UNIQUE INDEX IF NOT EXISTS gstupload_staging_pk ON main.gstupload_staging USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS gvbooklet_pk ON main.gvbooklet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS gvbooklet_u01 ON main.gvbooklet USING btree (bookletno);
CREATE INDEX IF NOT EXISTS gvbooklet_lk01 ON main.gvbooklet USING btree (createdby);
CREATE INDEX IF NOT EXISTS gvbooklet_lk02 ON main.gvbooklet USING btree (gvcategory_code);
CREATE INDEX IF NOT EXISTS gvbooklet_lk03 ON main.gvbooklet USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS gvcategory_pk ON main.gvcategory USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS gvcategory_u01 ON main.gvcategory USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS gvcategory_u02 ON main.gvcategory USING btree (prefix, suffix);
CREATE INDEX IF NOT EXISTS gvcategory_lk01 ON main.gvcategory USING btree (createdby);
CREATE INDEX IF NOT EXISTS gvcategory_lk02 ON main.gvcategory USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS gvissue_journal_pk ON main.gvissue_journal USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS gvissue_journal_u01 ON main.gvissue_journal USING btree (scheme_docno, docdate, createdby, admsite_code);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk01 ON main.gvissue_journal USING btree (admou_code);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk02 ON main.gvissue_journal USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk03 ON main.gvissue_journal USING btree (createdby);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk04 ON main.gvissue_journal USING btree (customer_slcode);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk05 ON main.gvissue_journal USING btree (debtor_glcode);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk06 ON main.gvissue_journal USING btree (gvcontrol_glcode);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk07 ON main.gvissue_journal USING btree (gvdiscount_glcode);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk08 ON main.gvissue_journal USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS gvissue_journal_lk09 ON main.gvissue_journal USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS gvissue_journal_u02 ON main.gvissue_journal USING btree ((
CASE
    WHEN (intgrefid IS NOT NULL) THEN ((createdby)::text || (intgrefid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS gvleaves_pk ON main.gvleaves USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS gvleaves_u01 ON main.gvleaves USING btree (gvno);
CREATE UNIQUE INDEX IF NOT EXISTS gvleaves_u02 ON main.gvleaves USING btree (gvno_udf);
CREATE INDEX IF NOT EXISTS gvleaves_lk01 ON main.gvleaves USING btree (allocate_admsite_code);
CREATE INDEX IF NOT EXISTS gvleaves_lk02 ON main.gvleaves USING btree (createdby);
CREATE INDEX IF NOT EXISTS gvleaves_lk03 ON main.gvleaves USING btree (gvbooklet_code);
CREATE INDEX IF NOT EXISTS gvleaves_lk04 ON main.gvleaves USING btree (gvcategory_code);
CREATE INDEX IF NOT EXISTS gvleaves_lk05 ON main.gvleaves USING btree (gvissue_journal_code);
CREATE INDEX IF NOT EXISTS gvleaves_lk06 ON main.gvleaves USING btree (issued_admsite_code);
CREATE INDEX IF NOT EXISTS gvleaves_lk07 ON main.gvleaves USING btree (issued_psite_posgvbill_code);
CREATE INDEX IF NOT EXISTS gvleaves_lk08 ON main.gvleaves USING btree (redeemed_admsite_code);
CREATE INDEX IF NOT EXISTS gvleaves_u03 ON main.gvleaves USING btree (COALESCE(gvno_udf, gvno));
CREATE UNIQUE INDEX IF NOT EXISTS hfcounter_pk ON main.hfcounter USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS hfhash_pk ON main.hfhash USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS hfhash_u01 ON main.hfhash USING btree (key, field);
CREATE UNIQUE INDEX IF NOT EXISTS hfjob_pk ON main.hfjob USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS hfjobparameter_pk ON main.hfjobparameter USING btree (id);
CREATE INDEX IF NOT EXISTS hfjobparameter_lk01 ON main.hfjobparameter USING btree (jobid);
CREATE UNIQUE INDEX IF NOT EXISTS hfjobqueue_pk ON main.hfjobqueue USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS hflist_pk ON main.hflist USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS hfset_pk ON main.hfset USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS hfstate_pk ON main.hfstate USING btree (id);
CREATE INDEX IF NOT EXISTS hfstate_lk01 ON main.hfstate USING btree (jobid);
CREATE UNIQUE INDEX IF NOT EXISTS hrdemp_ou_pk ON main.hrdemp_ou USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_emp_site_code_hrdemp_ou ON main.hrdemp_ou USING btree (hrdemp_code, admsite_code);
CREATE INDEX IF NOT EXISTS hrdemp_ou_lk01 ON main.hrdemp_ou USING btree (admou_code);
CREATE INDEX IF NOT EXISTS hrdemp_ou_lk02 ON main.hrdemp_ou USING btree (hrdemp_code);
CREATE INDEX IF NOT EXISTS hrdemp_ou_lk03 ON main.hrdemp_ou USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_in_purord_key ON main.in_purord USING btree (key);
CREATE UNIQUE INDEX IF NOT EXISTS invdcdet_pk ON main.invdcdet USING btree (code);
CREATE INDEX IF NOT EXISTS invdcdet_lk01 ON main.invdcdet USING btree (dccode);
CREATE INDEX IF NOT EXISTS invdcdet_lk02 ON main.invdcdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invdcdet_lk03 ON main.invdcdet USING btree (ordcode);
CREATE INDEX IF NOT EXISTS invdcdet_lk04 ON main.invdcdet USING btree (soicode);
CREATE INDEX IF NOT EXISTS invdcdet_lk05 ON main.invdcdet USING btree (salorddet_code);
CREATE INDEX IF NOT EXISTS invdcdet_lk06 ON main.invdcdet USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invdcdet_lk07 ON main.invdcdet USING btree (invpicklistdet_code);
CREATE UNIQUE INDEX IF NOT EXISTS int$class_role_dataversion_uk ON main.int$class_role USING btree (dataversion);
CREATE UNIQUE INDEX IF NOT EXISTS int$class_role_pk ON main.int$class_role USING btree (code);
CREATE INDEX IF NOT EXISTS int$class_role_lk01 ON main.int$class_role USING btree (classname);
CREATE INDEX IF NOT EXISTS int$class_role_lk02 ON main.int$class_role USING btree (roleid);
CREATE UNIQUE INDEX IF NOT EXISTS int$mapping_pk ON main.int$mapping USING btree (code);
CREATE INDEX IF NOT EXISTS int$mapping_lk01 ON main.int$mapping USING btree (classname);
CREATE INDEX IF NOT EXISTS int$mapping_lk02 ON main.int$mapping USING btree (metadata_code);
CREATE UNIQUE INDEX IF NOT EXISTS int$tagged_file_pk ON main.int$tagged_file USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$tagged_file ON main.int$tagged_file USING btree (classname, filename, doctype);
CREATE INDEX IF NOT EXISTS int$tagged_file_lk01 ON main.int$tagged_file USING btree (classname);
CREATE UNIQUE INDEX IF NOT EXISTS invageing_pk ON main.invageing USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invarticle_finsl_mm_pk ON main.invarticle_finsl_mm USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invarticle_finsl_mm_u01 ON main.invarticle_finsl_mm USING btree (slcode, invarticle_code);
CREATE INDEX IF NOT EXISTS invarticle_finsl_mm_lk01 ON main.invarticle_finsl_mm USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS invarticle_finsl_mm_lk02 ON main.invarticle_finsl_mm USING btree (invmmrule_code);
CREATE INDEX IF NOT EXISTS invarticle_finsl_mm_lk03 ON main.invarticle_finsl_mm USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS invattr1_pk ON main.invattr1 USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invattr1_u01 ON main.invattr1 USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS invattr2_pk ON main.invattr2 USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invattr2_u01 ON main.invattr2 USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS invattr3_pk ON main.invattr3 USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invattr3_u01 ON main.invattr3 USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS invattr4_pk ON main.invattr4 USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invattr4_u01 ON main.invattr4 USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS invattr5_pk ON main.invattr5 USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invattr5_u01 ON main.invattr5 USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS invattr6_pk ON main.invattr6 USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invattr6_u01 ON main.invattr6 USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS invbatch_serial_pk ON main.invbatch_serial USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invbin_pk ON main.invbin USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invbin_u01 ON main.invbin USING btree (admsite_code, seqno);
CREATE INDEX IF NOT EXISTS invbin_lk01 ON main.invbin USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invbin_lk02 ON main.invbin USING btree (createdby);
CREATE INDEX IF NOT EXISTS invbin_lk03 ON main.invbin USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS invbin_lk04 ON main.invbin USING btree (assortment_code);
CREATE INDEX IF NOT EXISTS invbin_lk05 ON main.invbin USING btree (invbingrp_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS invbinadjdet_pk ON main.invbinadjdet USING btree (code);
CREATE INDEX IF NOT EXISTS invbinadjdet_lk01 ON main.invbinadjdet USING btree (binadjmain_code);
CREATE INDEX IF NOT EXISTS invbinadjdet_lk02 ON main.invbinadjdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invbinadjdet_lk03 ON main.invbinadjdet USING btree (in_invbin_code);
CREATE INDEX IF NOT EXISTS invbinadjdet_lk04 ON main.invbinadjdet USING btree (out_invbin_code);
CREATE UNIQUE INDEX IF NOT EXISTS invbinadjmain_pk ON main.invbinadjmain USING btree (code);
CREATE INDEX IF NOT EXISTS invbinadjmain_lk01 ON main.invbinadjmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invbinadjmain_lk02 ON main.invbinadjmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS invbinadjmain_lk03 ON main.invbinadjmain USING btree (createdby);
CREATE INDEX IF NOT EXISTS invbinadjmain_lk04 ON main.invbinadjmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invbinadjmain_lk05 ON main.invbinadjmain USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS invbinadjmain_lk06 ON main.invbinadjmain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invbinadjmain_lk07 ON main.invbinadjmain USING btree (postedby);
CREATE INDEX IF NOT EXISTS invbinadjmain_lk08 ON main.invbinadjmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS invbincount_lock_u01 ON main.invbincount_lock USING btree (invbin_code);
CREATE UNIQUE INDEX IF NOT EXISTS invbincountdet_pk ON main.invbincountdet USING btree (code);
CREATE INDEX IF NOT EXISTS invbincountdet_lk01 ON main.invbincountdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invbincountdet_lk02 ON main.invbincountdet USING btree (invbincountmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS invbincountmain_pk ON main.invbincountmain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invbincountmain_u01 ON main.invbincountmain USING btree (guid);
CREATE INDEX IF NOT EXISTS invbincountmain_lk01 ON main.invbincountmain USING btree (createdby);
CREATE INDEX IF NOT EXISTS invbincountmain_lk02 ON main.invbincountmain USING btree (invbin_code);
CREATE UNIQUE INDEX IF NOT EXISTS invbingrp_pk ON main.invbingrp USING btree (grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS invbingrp_u01 ON main.invbingrp USING btree (grpcode, parcode);
CREATE UNIQUE INDEX IF NOT EXISTS invbingrp_u02 ON main.invbingrp USING btree (grpname, admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invstock ON main.invstock USING btree (stockcode);
CREATE INDEX IF NOT EXISTS i_invstock ON main.invstock USING btree (icode, loccode, entdt, ycode);
CREATE INDEX IF NOT EXISTS i_invstock_detail_ers_code ON main.invstock USING btree (detail_code);
CREATE INDEX IF NOT EXISTS i_invstock_entcode_enttype ON main.invstock USING btree (entcode, enttype);
CREATE INDEX IF NOT EXISTS i_invstock_entdt ON main.invstock USING btree (entdt);
CREATE INDEX IF NOT EXISTS i_invstock_enttype_det_erscode ON main.invstock USING btree (enttype, detail_code);
CREATE INDEX IF NOT EXISTS i_invstock_family_code ON main.invstock USING btree (ref_family_code);
CREATE INDEX IF NOT EXISTS i_invstock_icode_dt_site_suc ON main.invstock USING btree (icode, entdt, admsite_code, site_upd_cost);
CREATE INDEX IF NOT EXISTS i_invstock_icode_oucode ON main.invstock USING btree (icode, admou_code);
CREATE INDEX IF NOT EXISTS i_invstock_icode_updcost_entdt ON main.invstock USING btree (icode, entdt, upd_cost);
CREATE INDEX IF NOT EXISTS i_invstock_issecondary ON main.invstock USING btree (issecondary);
CREATE INDEX IF NOT EXISTS i_invstock_onhold_document ON main.invstock USING btree (COALESCE(onhold_document, 'N'::bpchar));
CREATE INDEX IF NOT EXISTS i_invstock_refdiscode ON main.invstock USING btree (refdiscode);
CREATE INDEX IF NOT EXISTS i_invstock_subenttype ON main.invstock USING btree (subenttype);
CREATE INDEX IF NOT EXISTS i_invstock_updcost_icode_dt_ou ON main.invstock USING btree (upd_cost, icode, entdt, admou_code);
CREATE INDEX IF NOT EXISTS i_invstock_ycode_entdt_loccode ON main.invstock USING btree (ycode, entdt, loccode);
CREATE INDEX IF NOT EXISTS invstock_lk01 ON main.invstock USING btree (enttype);
CREATE INDEX IF NOT EXISTS invstock_lk02 ON main.invstock USING btree (icode);
CREATE INDEX IF NOT EXISTS invstock_lk03 ON main.invstock USING btree (loccode);
CREATE INDEX IF NOT EXISTS invstock_lk04 ON main.invstock USING btree (refcmpcode);
CREATE INDEX IF NOT EXISTS invstock_lk05 ON main.invstock USING btree (refdeptcode);
CREATE INDEX IF NOT EXISTS invstock_lk06 ON main.invstock USING btree (refglcode);
CREATE INDEX IF NOT EXISTS invstock_lk07 ON main.invstock USING btree (refloccode);
CREATE INDEX IF NOT EXISTS invstock_lk08 ON main.invstock USING btree (refpcode);
CREATE INDEX IF NOT EXISTS invstock_lk09 ON main.invstock USING btree (refprcode);
CREATE INDEX IF NOT EXISTS invstock_lk10 ON main.invstock USING btree (ycode);
CREATE INDEX IF NOT EXISTS invstock_lk11 ON main.invstock USING btree (refpkgcode);
CREATE INDEX IF NOT EXISTS invstock_lk12 ON main.invstock USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invstock_lk13 ON main.invstock USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invstock_lk14 ON main.invstock USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS invstock_lk15 ON main.invstock USING btree (invbin_code);
CREATE UNIQUE INDEX IF NOT EXISTS invbinstock_onhand_pk ON main.invbinstock_onhand USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invbinstock_onhand_u01 ON main.invbinstock_onhand USING btree (admsite_code, loccode, invbin_code, icode, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invbinstock_onhand_lk01 ON main.invbinstock_onhand USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invbinstock_onhand_lk02 ON main.invbinstock_onhand USING btree (icode);
CREATE INDEX IF NOT EXISTS invbinstock_onhand_lk03 ON main.invbinstock_onhand USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invbinstock_onhand_lk04 ON main.invbinstock_onhand USING btree (loccode);
CREATE UNIQUE INDEX IF NOT EXISTS invbinstock_onhand_serial_pk ON main.invbinstock_onhand_serial USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invbinstock_onhand_serial_u01 ON main.invbinstock_onhand_serial USING btree (admsite_code, loccode, invbin_code, icode, invbatch_serial_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invcat1_ccode ON main.invcat1 USING btree (ccode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invcat1_cname ON main.invcat1 USING btree (cname);
CREATE INDEX IF NOT EXISTS i_invcat1_upper_cname ON main.invcat1 USING btree (upper((cname)::text));
CREATE UNIQUE INDEX IF NOT EXISTS p_invcat2_ccode ON main.invcat2 USING btree (ccode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invcat2_cname ON main.invcat2 USING btree (cname);
CREATE INDEX IF NOT EXISTS i_invcat2_upper_cname ON main.invcat2 USING btree (upper((cname)::text));
CREATE UNIQUE INDEX IF NOT EXISTS p_invcat3_ccode ON main.invcat3 USING btree (ccode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invcat3_cname ON main.invcat3 USING btree (cname);
CREATE INDEX IF NOT EXISTS i_invcat3_upper_cname ON main.invcat3 USING btree (upper((cname)::text));
CREATE UNIQUE INDEX IF NOT EXISTS p_invcat4_ccode ON main.invcat4 USING btree (ccode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invcat4_cname ON main.invcat4 USING btree (cname);
CREATE INDEX IF NOT EXISTS i_invcat4_upper_cname ON main.invcat4 USING btree (upper((cname)::text));
CREATE UNIQUE INDEX IF NOT EXISTS p_invcat5_ccode ON main.invcat5 USING btree (ccode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invcat5_cname ON main.invcat5 USING btree (cname);
CREATE INDEX IF NOT EXISTS i_invcat5_upper_cname ON main.invcat5 USING btree (upper((cname)::text));
CREATE UNIQUE INDEX IF NOT EXISTS p_invcat6_ccode ON main.invcat6 USING btree (ccode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invcat6_cname ON main.invcat6 USING btree (cname);
CREATE INDEX IF NOT EXISTS i_invcat6_upper_cname ON main.invcat6 USING btree (upper((cname)::text));
CREATE UNIQUE INDEX IF NOT EXISTS p_invcostadj_code ON main.invcostadj USING btree (code);
CREATE INDEX IF NOT EXISTS invcostadj_lk01 ON main.invcostadj USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invcostadj_lk02 ON main.invcostadj USING btree (created_by);
CREATE INDEX IF NOT EXISTS invcostadj_lk03 ON main.invcostadj USING btree (admmonth_code);
CREATE INDEX IF NOT EXISTS invcostadj_lk04 ON main.invcostadj USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invcostadj_lk05 ON main.invcostadj USING btree (icode);
CREATE INDEX IF NOT EXISTS invcostadj_lk06 ON main.invcostadj USING btree (loccode);
CREATE UNIQUE INDEX IF NOT EXISTS p_invdcmain_dccode ON main.invdcmain USING btree (dccode);
CREATE INDEX IF NOT EXISTS invdcmain_lk01 ON main.invdcmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invdcmain_lk02 ON main.invdcmain USING btree (inloccode);
CREATE INDEX IF NOT EXISTS invdcmain_lk03 ON main.invdcmain USING btree (invcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk04 ON main.invdcmain USING btree (ordcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk05 ON main.invdcmain USING btree (outloccode);
CREATE INDEX IF NOT EXISTS invdcmain_lk06 ON main.invdcmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk07 ON main.invdcmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invdcmain_lk08 ON main.invdcmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk09 ON main.invdcmain USING btree (trpcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk10 ON main.invdcmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invdcmain_lk11 ON main.invdcmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invdcmain_lk12 ON main.invdcmain USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk13 ON main.invdcmain USING btree (cnlecode);
CREATE INDEX IF NOT EXISTS invdcmain_lk14 ON main.invdcmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invdcmain_lk15 ON main.invdcmain USING btree (pricelistcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk16 ON main.invdcmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS invdcmain_lk17 ON main.invdcmain USING btree (transferin_rtcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk18 ON main.invdcmain USING btree (linked_dccode);
CREATE INDEX IF NOT EXISTS invdcmain_lk19 ON main.invdcmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk20 ON main.invdcmain USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS invdcmain_lk21 ON main.invdcmain USING btree (intgcode);
CREATE INDEX IF NOT EXISTS invdcmain_lk22 ON main.invdcmain USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_invgatein_code ON main.invgatein USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgatein_gateinno ON main.invgatein USING btree (gateinno, ycode);
CREATE INDEX IF NOT EXISTS invgatein_lk01 ON main.invgatein USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invgatein_lk02 ON main.invgatein USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS invgatein_lk03 ON main.invgatein USING btree (cncode);
CREATE INDEX IF NOT EXISTS invgatein_lk04 ON main.invgatein USING btree (ecode);
CREATE INDEX IF NOT EXISTS invgatein_lk05 ON main.invgatein USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS invgatein_lk06 ON main.invgatein USING btree (lgtcode);
CREATE INDEX IF NOT EXISTS invgatein_lk07 ON main.invgatein USING btree (loccode);
CREATE INDEX IF NOT EXISTS invgatein_lk08 ON main.invgatein USING btree (ycode);
CREATE INDEX IF NOT EXISTS invgatein_lk09 ON main.invgatein USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invgatein_lk10 ON main.invgatein USING btree (admsite_code_owner);
CREATE UNIQUE INDEX IF NOT EXISTS invgrcchg_pk ON main.invgrcchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgrcchg_grc_chg_rate ON main.invgrcchg USING btree (grccode, chgcode, rate, formulae, sign);
CREATE INDEX IF NOT EXISTS invgrcchg_lk01 ON main.invgrcchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS invgrcchg_lk02 ON main.invgrcchg USING btree (grccode);
CREATE UNIQUE INDEX IF NOT EXISTS invgrcchg_item_pk ON main.invgrcchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS invgrcchg_item_lk01 ON main.invgrcchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS invgrcchg_item_lk02 ON main.invgrcchg_item USING btree (grccode);
CREATE INDEX IF NOT EXISTS invgrcchg_item_lk03 ON main.invgrcchg_item USING btree (invgrcdet_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invgrcmain_grccode ON main.invgrcmain USING btree (grccode);
CREATE INDEX IF NOT EXISTS i_invgrcmain_grcdt ON main.invgrcmain USING btree (grcdt);
CREATE INDEX IF NOT EXISTS invgrcmain_lk01 ON main.invgrcmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk02 ON main.invgrcmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk03 ON main.invgrcmain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk04 ON main.invgrcmain USING btree (ordcmpcode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk05 ON main.invgrcmain USING btree (ordcode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk06 ON main.invgrcmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk07 ON main.invgrcmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk08 ON main.invgrcmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk09 ON main.invgrcmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invgrcmain_lk10 ON main.invgrcmain USING btree (invgatein_code);
CREATE INDEX IF NOT EXISTS invgrcmain_lk11 ON main.invgrcmain USING btree (lgtcode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk12 ON main.invgrcmain USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS invgrcmain_lk13 ON main.invgrcmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk14 ON main.invgrcmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS invgrcmain_lk15 ON main.invgrcmain USING btree (admsite_code_in);
CREATE INDEX IF NOT EXISTS invgrcmain_lk16 ON main.invgrcmain USING btree (auth_ecode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk17 ON main.invgrcmain USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS invgrcmain_lk18 ON main.invgrcmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk19 ON main.invgrcmain USING btree (intgcode);
CREATE INDEX IF NOT EXISTS invgrcmain_lk20 ON main.invgrcmain USING btree (purtermcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_invgrp_grpcode ON main.invgrp USING btree (grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgrp_grpname_parcode ON main.invgrp USING btree (grpname, parcode);
CREATE INDEX IF NOT EXISTS invgrp_idx01 ON main.invgrp USING btree (lev1grpname);
CREATE INDEX IF NOT EXISTS invgrp_idx02 ON main.invgrp USING btree (lev2grpname);
CREATE INDEX IF NOT EXISTS invgrp_idx03 ON main.invgrp USING btree (lev);
CREATE INDEX IF NOT EXISTS invgrp_lk01 ON main.invgrp USING btree (taxcode);
CREATE INDEX IF NOT EXISTS invgrp_lk02 ON main.invgrp USING btree (parcode);
CREATE INDEX IF NOT EXISTS invgrp_lk03 ON main.invgrp USING btree (routecode);
CREATE INDEX IF NOT EXISTS invgrp_lk04 ON main.invgrp USING btree (excisemain_code);
CREATE INDEX IF NOT EXISTS invgrp_lk05 ON main.invgrp USING btree (invhsnsacmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS invgrtchg_pk ON main.invgrtchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgrtchg_grc_chg_rate ON main.invgrtchg USING btree (grtcode, chgcode, rate, formulae, sign);
CREATE INDEX IF NOT EXISTS invgrtchg_lk01 ON main.invgrtchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS invgrtchg_lk02 ON main.invgrtchg USING btree (grtcode);
CREATE UNIQUE INDEX IF NOT EXISTS invgrtchg_item_pk ON main.invgrtchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS invgrtchg_item_lk01 ON main.invgrtchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS invgrtchg_item_lk02 ON main.invgrtchg_item USING btree (grtcode);
CREATE INDEX IF NOT EXISTS invgrtchg_item_lk03 ON main.invgrtchg_item USING btree (invgrtdet_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invgrtmain_grtcode ON main.invgrtmain USING btree (grtcode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk01 ON main.invgrtmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk02 ON main.invgrtmain USING btree (grccode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk03 ON main.invgrtmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk04 ON main.invgrtmain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk05 ON main.invgrtmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk06 ON main.invgrtmain USING btree (rtcode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk07 ON main.invgrtmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk08 ON main.invgrtmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk09 ON main.invgrtmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invgrtmain_lk10 ON main.invgrtmain USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS invgrtmain_lk11 ON main.invgrtmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk12 ON main.invgrtmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS invgrtmain_lk13 ON main.invgrtmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invgrtmain_lk14 ON main.invgrtmain USING btree (auth_ecode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk15 ON main.invgrtmain USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS invgrtmain_lk16 ON main.invgrtmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk17 ON main.invgrtmain USING btree (intgcode);
CREATE INDEX IF NOT EXISTS invgrtmain_lk18 ON main.invgrtmain USING btree (purtermcode);
CREATE UNIQUE INDEX IF NOT EXISTS invgstaddcessrate_pkey ON main.invgstaddcessrate USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgstaddcess_rate_state ON main.invgstaddcessrate USING btree (invgstrate_code, gststatecode, effective_date);
CREATE INDEX IF NOT EXISTS invgstaddcessrate_lk01 ON main.invgstaddcessrate USING btree (ecode);
CREATE INDEX IF NOT EXISTS invgstaddcessrate_lk02 ON main.invgstaddcessrate USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS invgstrate_pk ON main.invgstrate USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invgstrate_uk ON main.invgstrate USING btree (tax_name);
CREATE INDEX IF NOT EXISTS invgstrate_lk01 ON main.invgstrate USING btree (createdby);
CREATE INDEX IF NOT EXISTS invgstrate_lk02 ON main.invgstrate USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS invhsnsacdet_pk ON main.invhsnsacdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invhsnsacdet_u01 ON main.invhsnsacdet USING btree (invhsnsacmain_code, effective_date);
CREATE INDEX IF NOT EXISTS invhsnsacdet_lk01 ON main.invhsnsacdet USING btree (invgstrate_code);
CREATE INDEX IF NOT EXISTS invhsnsacdet_lk02 ON main.invhsnsacdet USING btree (invhsnsacmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS invhsnsacmain_pk ON main.invhsnsacmain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invhsnsacmain_uk ON main.invhsnsacmain USING btree (hsn_sac_code);
CREATE INDEX IF NOT EXISTS invhsnsacmain_lk01 ON main.invhsnsacmain USING btree (createdby);
CREATE INDEX IF NOT EXISTS invhsnsacmain_lk02 ON main.invhsnsacmain USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS invhsnsacslab_pk ON main.invhsnsacslab USING btree (code);
CREATE INDEX IF NOT EXISTS invhsnsacslab_lk01 ON main.invhsnsacslab USING btree (invgstrate_code);
CREATE INDEX IF NOT EXISTS invhsnsacslab_lk02 ON main.invhsnsacslab USING btree (invhsnsacdet_code);
CREATE INDEX IF NOT EXISTS invhsnsacslab_lk03 ON main.invhsnsacslab USING btree (invhsnsacmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS invitem_barcode ON main.invitem USING btree (barcode);
CREATE UNIQUE INDEX IF NOT EXISTS invitem_certificate_no_u01 ON main.invitem USING btree (certificate_no);
CREATE UNIQUE INDEX IF NOT EXISTS p_invitem_icode ON main.invitem USING btree (icode);
CREATE INDEX IF NOT EXISTS i_invitem_barcode_fnc_based ON main.invitem USING btree (COALESCE(barcode, icode));
CREATE INDEX IF NOT EXISTS i_invitem_barrq ON main.invitem USING btree (barrq);
CREATE INDEX IF NOT EXISTS i_invitem_ccode_fnc_based ON main.invitem USING btree (COALESCE((ccode1)::numeric, (0)::numeric), COALESCE((ccode2)::numeric, (0)::numeric), COALESCE((ccode3)::numeric, (0)::numeric), COALESCE((ccode4)::numeric, (0)::numeric), COALESCE((ccode5)::numeric, (0)::numeric), COALESCE((ccode6)::numeric, (0)::numeric));
CREATE INDEX IF NOT EXISTS i_invitem_considerasfree ON main.invitem USING btree (considerasfree);
CREATE INDEX IF NOT EXISTS i_invitem_considerinorder ON main.invitem USING btree (considerinorder);
CREATE INDEX IF NOT EXISTS i_invitem_ext ON main.invitem USING btree (ext);
CREATE INDEX IF NOT EXISTS i_invitem_icode_article ON main.invitem USING btree (icode, invarticle_code);
CREATE INDEX IF NOT EXISTS i_invitem_icode_grpcode ON main.invitem USING btree (icode, grpcode);
CREATE INDEX IF NOT EXISTS i_invitem_interface ON main.invitem USING btree (COALESCE(cname1, '0'::character varying), COALESCE(cname2, '0'::character varying), COALESCE(cname3, '0'::character varying), COALESCE(cname4, '0'::character varying), COALESCE(cname5, '0'::character varying), COALESCE(cname6, '0'::character varying), COALESCE(mrp, (0)::numeric), COALESCE(listed_mrp, (0)::numeric), COALESCE((grpcode)::numeric, (0)::numeric), COALESCE((invarticle_code)::numeric, (0)::numeric), COALESCE((taxcode)::numeric, (0)::numeric), COALESCE(noninventory, 'N'::bpchar), expiry_date);
CREATE INDEX IF NOT EXISTS i_invitem_isservice ON main.invitem USING btree (isservice);
CREATE INDEX IF NOT EXISTS i_invitem_noninventory ON main.invitem USING btree (noninventory);
CREATE INDEX IF NOT EXISTS i_invitem_partycode ON main.invitem USING btree (partycode);
CREATE INDEX IF NOT EXISTS i_invitem_partyname ON main.invitem USING btree (partyname);
CREATE INDEX IF NOT EXISTS i_invitem_pos_mulprice_action ON main.invitem USING btree (pos_multiprice_action);
CREATE INDEX IF NOT EXISTS i_invitem_stkplancode ON main.invitem USING btree (stkplancode);
CREATE INDEX IF NOT EXISTS i_invitem_upper_barcode ON main.invitem USING btree (upper((barcode)::text));
CREATE INDEX IF NOT EXISTS i_invitem_upper_icode ON main.invitem USING btree (upper((icode)::text));
CREATE INDEX IF NOT EXISTS i_invitem_upper_icode_barcode ON main.invitem USING btree (upper((icode)::text), upper((barcode)::text));
CREATE INDEX IF NOT EXISTS invitem_desc1 ON main.invitem USING btree (desc1);
CREATE INDEX IF NOT EXISTS invitem_desc2 ON main.invitem USING btree (desc2);
CREATE INDEX IF NOT EXISTS invitem_desc3 ON main.invitem USING btree (desc3);
CREATE INDEX IF NOT EXISTS invitem_desc4 ON main.invitem USING btree (desc4);
CREATE INDEX IF NOT EXISTS invitem_desc5 ON main.invitem USING btree (desc5);
CREATE INDEX IF NOT EXISTS invitem_desc6 ON main.invitem USING btree (desc6);
CREATE INDEX IF NOT EXISTS invitem_lk01 ON main.invitem USING btree (ccode1);
CREATE INDEX IF NOT EXISTS invitem_lk02 ON main.invitem USING btree (ccode2);
CREATE INDEX IF NOT EXISTS invitem_lk03 ON main.invitem USING btree (ccode3);
CREATE INDEX IF NOT EXISTS invitem_lk04 ON main.invitem USING btree (ccode4);
CREATE INDEX IF NOT EXISTS invitem_lk05 ON main.invitem USING btree (ccode5);
CREATE INDEX IF NOT EXISTS invitem_lk06 ON main.invitem USING btree (ccode6);
CREATE INDEX IF NOT EXISTS invitem_lk07 ON main.invitem USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS invitem_lk08 ON main.invitem USING btree (grpcode);
CREATE INDEX IF NOT EXISTS invitem_lk10 ON main.invitem USING btree (taxcode);
CREATE INDEX IF NOT EXISTS invitem_lk11 ON main.invitem USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS invitem_lk12 ON main.invitem USING btree (invmetal_code);
CREATE INDEX IF NOT EXISTS invitem_lk13 ON main.invitem USING btree (costsheet_code);
CREATE INDEX IF NOT EXISTS invitem_lk14 ON main.invitem USING btree (routecode);
CREATE INDEX IF NOT EXISTS invitem_lk15 ON main.invitem USING btree (invhsnsacmain_code);
CREATE INDEX IF NOT EXISTS invitem_lk16 ON main.invitem USING btree (glcode);
CREATE INDEX IF NOT EXISTS invitem_lk17 ON main.invitem USING btree (slcode);
CREATE INDEX IF NOT EXISTS invitem_unitname ON main.invitem USING btree (unitname);
CREATE UNIQUE INDEX IF NOT EXISTS invitem_price_pk ON main.invitem_price USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invitem_price_u01 ON main.invitem_price USING btree (admsite_code, icode, effective_date, mrp, rsp, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invitem_price_lk01 ON main.invitem_price USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invitem_price_lk02 ON main.invitem_price USING btree (createdby);
CREATE INDEX IF NOT EXISTS invitem_price_lk03 ON main.invitem_price USING btree (icode);
CREATE INDEX IF NOT EXISTS invitem_price_lk04 ON main.invitem_price USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS p_invitemlastinward_code ON main.invitemlastinward USING btree (code);
CREATE INDEX IF NOT EXISTS i_invitemlastinward_01 ON main.invitemlastinward USING btree (subenttype);
CREATE INDEX IF NOT EXISTS i_invitemlastinward_02 ON main.invitemlastinward USING btree (transaction_date);
CREATE INDEX IF NOT EXISTS invitemlastinward_lk01 ON main.invitemlastinward USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invitemlastinward_lk02 ON main.invitemlastinward USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invitemlastinward_lk03 ON main.invitemlastinward USING btree (enttype);
CREATE INDEX IF NOT EXISTS invitemlastinward_lk04 ON main.invitemlastinward USING btree (icode);
CREATE UNIQUE INDEX IF NOT EXISTS invitemop_pk ON main.invitemop USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_invitemop_composite ON main.invitemop USING btree (icode, loccode, orate, ycode, pcode, admsite_code, psite_stockpoint_code, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invitemop_lk01 ON main.invitemop USING btree (icode);
CREATE INDEX IF NOT EXISTS invitemop_lk02 ON main.invitemop USING btree (loccode);
CREATE INDEX IF NOT EXISTS invitemop_lk03 ON main.invitemop USING btree (ycode);
CREATE INDEX IF NOT EXISTS invitemop_lk04 ON main.invitemop USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invitemop_lk05 ON main.invitemop USING btree (pcode);
CREATE INDEX IF NOT EXISTS invitemop_lk06 ON main.invitemop USING btree (psite_stockpoint_code);
CREATE UNIQUE INDEX IF NOT EXISTS invlgtnote_pk ON main.invlgtnote USING btree (lgtcode);
CREATE UNIQUE INDEX IF NOT EXISTS invlgtnote_u01 ON main.invlgtnote USING btree (lgtno, lgttype, ycode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk01 ON main.invlgtnote USING btree (cncode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk02 ON main.invlgtnote USING btree (ecode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk03 ON main.invlgtnote USING btree (srvcode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk04 ON main.invlgtnote USING btree (stfr);
CREATE INDEX IF NOT EXISTS invlgtnote_lk05 ON main.invlgtnote USING btree (stto);
CREATE INDEX IF NOT EXISTS invlgtnote_lk06 ON main.invlgtnote USING btree (trpcode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk07 ON main.invlgtnote USING btree (ycode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk08 ON main.invlgtnote USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk09 ON main.invlgtnote USING btree (loccode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk10 ON main.invlgtnote USING btree (permitcode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk11 ON main.invlgtnote USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS invlgtnote_lk12 ON main.invlgtnote USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invlgtnote_lk13 ON main.invlgtnote USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invlgtnote_lk14 ON main.invlgtnote USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS invlgtnote_lk15 ON main.invlgtnote USING btree (pursrvdet_code);
CREATE INDEX IF NOT EXISTS invlgtnote_lk16 ON main.invlgtnote USING btree (cancelledby);
CREATE INDEX IF NOT EXISTS invlgtnote_lk17 ON main.invlgtnote USING btree (issuedby);
CREATE INDEX IF NOT EXISTS invlgtnote_lk18 ON main.invlgtnote USING btree (issuedto);
CREATE UNIQUE INDEX IF NOT EXISTS p_invlgtin_ship_ad_cnl_code ON main.invlgtin_shipment_advice_cnl USING btree (code);
CREATE INDEX IF NOT EXISTS invlgtin_shipment_advice__lk01 ON main.invlgtin_shipment_advice_cnl USING btree (lgtincode);
CREATE INDEX IF NOT EXISTS invlgtin_shipment_advice__lk02 ON main.invlgtin_shipment_advice_cnl USING btree (shipcode);
CREATE INDEX IF NOT EXISTS invltgin_shipment_advice_lk01 ON main.invltgin_shipment_advice USING btree (lgtincode);
CREATE INDEX IF NOT EXISTS invltgin_shipment_advice_lk02 ON main.invltgin_shipment_advice USING btree (shipcode);
CREATE UNIQUE INDEX IF NOT EXISTS invltgin_shipment_advice_pk ON main.invltgin_shipment_advice USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invmetal_rate_date_mcode_u01 ON main.invmetal_rate USING btree (effective_date, invmetal_code);
CREATE UNIQUE INDEX IF NOT EXISTS invmetal_rate_pk ON main.invmetal_rate USING btree (code);
CREATE INDEX IF NOT EXISTS invmetal_rate_lk01 ON main.invmetal_rate USING btree (invmetal_code);
CREATE UNIQUE INDEX IF NOT EXISTS invmiscmain_pk ON main.invmiscmain USING btree (misccode);
CREATE UNIQUE INDEX IF NOT EXISTS invmiscmain_u01 ON main.invmiscmain USING btree (scheme_docno, miscdt, creation_ecode, admsite_code);
CREATE INDEX IF NOT EXISTS invmiscmain_lk01 ON main.invmiscmain USING btree (creation_ecode);
CREATE INDEX IF NOT EXISTS invmiscmain_lk02 ON main.invmiscmain USING btree (deptcode);
CREATE INDEX IF NOT EXISTS invmiscmain_lk03 ON main.invmiscmain USING btree (last_modified_ecode);
CREATE INDEX IF NOT EXISTS invmiscmain_lk04 ON main.invmiscmain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invmiscmain_lk05 ON main.invmiscmain USING btree (reqcode);
CREATE INDEX IF NOT EXISTS invmiscmain_lk06 ON main.invmiscmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invmiscmain_lk07 ON main.invmiscmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invmiscmain_lk08 ON main.invmiscmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invmiscmain_lk09 ON main.invmiscmain USING btree (admsite_cc);
CREATE INDEX IF NOT EXISTS invmiscmain_lk10 ON main.invmiscmain USING btree (auth_ecode);
CREATE INDEX IF NOT EXISTS invmiscmain_lk11 ON main.invmiscmain USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS invmiscmain_lk12 ON main.invmiscmain USING btree (intgcode);
CREATE UNIQUE INDEX IF NOT EXISTS invmiscdet_pk ON main.invmiscdet USING btree (miscdetcode);
CREATE INDEX IF NOT EXISTS invmiscdet_lk01 ON main.invmiscdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invmiscdet_lk02 ON main.invmiscdet USING btree (misccode);
CREATE INDEX IF NOT EXISTS invmiscdet_lk03 ON main.invmiscdet USING btree (reqdetcode);
CREATE INDEX IF NOT EXISTS invmiscdet_lk04 ON main.invmiscdet USING btree (reqcode);
CREATE UNIQUE INDEX IF NOT EXISTS invpicklistcancel_pk ON main.invpicklistcancel USING btree (code);
CREATE INDEX IF NOT EXISTS invpicklistcancel_lk01 ON main.invpicklistcancel USING btree (cancelledby);
CREATE INDEX IF NOT EXISTS invpicklistcancel_lk02 ON main.invpicklistcancel USING btree (icode);
CREATE INDEX IF NOT EXISTS invpicklistcancel_lk03 ON main.invpicklistcancel USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invpicklistcancel_lk04 ON main.invpicklistcancel USING btree (invpicklistdet_code);
CREATE INDEX IF NOT EXISTS invpicklistcancel_lk05 ON main.invpicklistcancel USING btree (invreservedet_code);
CREATE UNIQUE INDEX IF NOT EXISTS invpicklistconfirmcnl_pk ON main.invpicklistconfirmcnl USING btree (code);
CREATE INDEX IF NOT EXISTS invpicklistconfirmcnl_lk01 ON main.invpicklistconfirmcnl USING btree (canceledby);
CREATE INDEX IF NOT EXISTS invpicklistconfirmcnl_lk02 ON main.invpicklistconfirmcnl USING btree (icode);
CREATE INDEX IF NOT EXISTS invpicklistconfirmcnl_lk03 ON main.invpicklistconfirmcnl USING btree (invpicklistdet_code);
CREATE INDEX IF NOT EXISTS invpicklistconfirmcnl_lk04 ON main.invpicklistconfirmcnl USING btree (invpicklistmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS invpicklistconfirmdet_pk ON main.invpicklistconfirmdet USING btree (code);
CREATE INDEX IF NOT EXISTS invpicklistconfirmdet_lk01 ON main.invpicklistconfirmdet USING btree (createdby);
CREATE INDEX IF NOT EXISTS invpicklistconfirmdet_lk02 ON main.invpicklistconfirmdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invpicklistconfirmdet_lk03 ON main.invpicklistconfirmdet USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invpicklistconfirmdet_lk04 ON main.invpicklistconfirmdet USING btree (invpicklistdet_code);
CREATE INDEX IF NOT EXISTS invpicklistconfirmdet_lk05 ON main.invpicklistconfirmdet USING btree (invpicklistmain_code);
CREATE INDEX IF NOT EXISTS invpicklistconfirmdet_lk06 ON main.invpicklistconfirmdet USING btree (invreservedet_code);
CREATE INDEX IF NOT EXISTS invpicklistconfirmdet_lk07 ON main.invpicklistconfirmdet USING btree (invreservemain_code);
CREATE INDEX IF NOT EXISTS invpicklistconfirmdet_lk08 ON main.invpicklistconfirmdet USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS invpicklistdet_pk ON main.invpicklistdet USING btree (code);
CREATE INDEX IF NOT EXISTS invpicklistdet_lk01 ON main.invpicklistdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invpicklistdet_lk02 ON main.invpicklistdet USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invpicklistdet_lk03 ON main.invpicklistdet USING btree (invpicklistmain_code);
CREATE INDEX IF NOT EXISTS invpicklistdet_lk04 ON main.invpicklistdet USING btree (invreservedet_code);
CREATE INDEX IF NOT EXISTS invpicklistdet_lk05 ON main.invpicklistdet USING btree (invreservemain_code);
CREATE INDEX IF NOT EXISTS invpicklistdet_lk06 ON main.invpicklistdet USING btree (retailorddet_code);
CREATE UNIQUE INDEX IF NOT EXISTS invpicklistmain_pk ON main.invpicklistmain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invpicklistmain_u01 ON main.invpicklistmain USING btree (guid);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk01 ON main.invpicklistmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk02 ON main.invpicklistmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk03 ON main.invpicklistmain USING btree (assigned_to);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk04 ON main.invpicklistmain USING btree (createdby);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk05 ON main.invpicklistmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk06 ON main.invpicklistmain USING btree (lastconfirmedby);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk07 ON main.invpicklistmain USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk08 ON main.invpicklistmain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invpicklistmain_lk09 ON main.invpicklistmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS invpicklistmain_u02 ON main.invpicklistmain USING btree ((
CASE
    WHEN (intgbatchid IS NOT NULL) THEN ((createdby)::text || (intgbatchid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS invputdet_pk ON main.invputdet USING btree (code);
CREATE INDEX IF NOT EXISTS invputdet_lk01 ON main.invputdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invputdet_lk02 ON main.invputdet USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invputdet_lk03 ON main.invputdet USING btree (invputmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS invputmain_pk ON main.invputmain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invputmain_u01 ON main.invputmain USING btree (guid);
CREATE INDEX IF NOT EXISTS invputmain_lk01 ON main.invputmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invputmain_lk02 ON main.invputmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS invputmain_lk03 ON main.invputmain USING btree (createdby);
CREATE INDEX IF NOT EXISTS invputmain_lk04 ON main.invputmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invputmain_lk05 ON main.invputmain USING btree (inloccode);
CREATE INDEX IF NOT EXISTS invputmain_lk06 ON main.invputmain USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS invputmain_lk07 ON main.invputmain USING btree (outloccode);
CREATE INDEX IF NOT EXISTS invputmain_lk08 ON main.invputmain USING btree (postedby);
CREATE INDEX IF NOT EXISTS invputmain_lk09 ON main.invputmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS invreqdet_pk ON main.invreqdet USING btree (reqdetcode);
CREATE INDEX IF NOT EXISTS invreqdet_lk01 ON main.invreqdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invreqdet_lk02 ON main.invreqdet USING btree (reqcode);
CREATE UNIQUE INDEX IF NOT EXISTS invreqmain_pk ON main.invreqmain USING btree (reqcode);
CREATE UNIQUE INDEX IF NOT EXISTS invreqmain_u01 ON main.invreqmain USING btree (reqno, ycode);
CREATE INDEX IF NOT EXISTS invreqmain_lk01 ON main.invreqmain USING btree (creation_ecode);
CREATE INDEX IF NOT EXISTS invreqmain_lk02 ON main.invreqmain USING btree (deptcode);
CREATE INDEX IF NOT EXISTS invreqmain_lk03 ON main.invreqmain USING btree (last_modified_ecode);
CREATE INDEX IF NOT EXISTS invreqmain_lk04 ON main.invreqmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invreqmain_lk05 ON main.invreqmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invreqmain_lk06 ON main.invreqmain USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS invreservecancel_pk ON main.invreservecancel USING btree (code);
CREATE INDEX IF NOT EXISTS invreservecancel_lk01 ON main.invreservecancel USING btree (cancelledby);
CREATE INDEX IF NOT EXISTS invreservecancel_lk02 ON main.invreservecancel USING btree (icode);
CREATE INDEX IF NOT EXISTS invreservecancel_lk03 ON main.invreservecancel USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invreservecancel_lk04 ON main.invreservecancel USING btree (invreservedet_code);
CREATE INDEX IF NOT EXISTS invreservecancel_lk05 ON main.invreservecancel USING btree (orddet_code);
CREATE INDEX IF NOT EXISTS invreservecancel_lk06 ON main.invreservecancel USING btree (retailorddet_code);
CREATE UNIQUE INDEX IF NOT EXISTS invreservedet_pk ON main.invreservedet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invreservedet_u01 ON main.invreservedet USING btree (invreservemain_code, orddet_code, invbin_code, retailorddet_code, channel_b2c_orderdetid, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invreservedet_lk01 ON main.invreservedet USING btree (icode);
CREATE INDEX IF NOT EXISTS invreservedet_lk02 ON main.invreservedet USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invreservedet_lk03 ON main.invreservedet USING btree (invreservemain_code);
CREATE UNIQUE INDEX IF NOT EXISTS invreservemain_pk ON main.invreservemain USING btree (code);
CREATE INDEX IF NOT EXISTS invreservemain_lk01 ON main.invreservemain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invreservemain_lk02 ON main.invreservemain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS invreservemain_lk03 ON main.invreservemain USING btree (createdby);
CREATE INDEX IF NOT EXISTS invreservemain_lk04 ON main.invreservemain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invreservemain_lk05 ON main.invreservemain USING btree (picklist_rule_code);
CREATE INDEX IF NOT EXISTS invreservemain_lk06 ON main.invreservemain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS invsetdet_pk ON main.invsetdet USING btree (code);
CREATE INDEX IF NOT EXISTS invsetdet_lk01 ON main.invsetdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invsetdet_lk02 ON main.invsetdet USING btree (setcode);
CREATE UNIQUE INDEX IF NOT EXISTS invsetmain_pk ON main.invsetmain USING btree (setcode);
CREATE INDEX IF NOT EXISTS invsetmain_lk01 ON main.invsetmain USING btree (creator_cmpcode);
CREATE INDEX IF NOT EXISTS invsetmain_lk02 ON main.invsetmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invsetmain_lk03 ON main.invsetmain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invsetmain_lk04 ON main.invsetmain USING btree (intgcode);
CREATE INDEX IF NOT EXISTS invsetmain_lk05 ON main.invsetmain USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS invsitestfdet_pk ON main.invsitestfdet USING btree (code);
CREATE INDEX IF NOT EXISTS invsitestfdet_lk01 ON main.invsitestfdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invsitestfdet_lk02 ON main.invsitestfdet USING btree (stfcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_invsitestfmain_pk ON main.invsitestfmain USING btree (stfcode);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk01 ON main.invsitestfmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk02 ON main.invsitestfmain USING btree (admsite_code_in);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk03 ON main.invsitestfmain USING btree (admsite_code_out);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk04 ON main.invsitestfmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk05 ON main.invsitestfmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk06 ON main.invsitestfmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk07 ON main.invsitestfmain USING btree (slcode);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk08 ON main.invsitestfmain USING btree (store_loccode_in);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk09 ON main.invsitestfmain USING btree (store_loccode_out);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk10 ON main.invsitestfmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invsitestfmain_lk11 ON main.invsitestfmain USING btree (admou_code_in);
CREATE UNIQUE INDEX IF NOT EXISTS invstfdet_pk ON main.invstfdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invstfdet_u01 ON main.invstfdet USING btree (stfcode, icode, stfrate, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invstfdet_lk01 ON main.invstfdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invstfdet_lk02 ON main.invstfdet USING btree (inloccode);
CREATE INDEX IF NOT EXISTS invstfdet_lk03 ON main.invstfdet USING btree (outloccode);
CREATE INDEX IF NOT EXISTS invstfdet_lk04 ON main.invstfdet USING btree (stfcode);
CREATE INDEX IF NOT EXISTS invstfdet_lk05 ON main.invstfdet USING btree (ycode);
CREATE INDEX IF NOT EXISTS invstfdet_lk06 ON main.invstfdet USING btree (excisemain_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invstfmain_stfcode ON main.invstfmain USING btree (stfcode);
CREATE INDEX IF NOT EXISTS invstfmain_lk01 ON main.invstfmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invstfmain_lk02 ON main.invstfmain USING btree (inlgtcode);
CREATE INDEX IF NOT EXISTS invstfmain_lk03 ON main.invstfmain USING btree (inloccode);
CREATE INDEX IF NOT EXISTS invstfmain_lk04 ON main.invstfmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS invstfmain_lk05 ON main.invstfmain USING btree (outlgtcode);
CREATE INDEX IF NOT EXISTS invstfmain_lk06 ON main.invstfmain USING btree (outloccode);
CREATE INDEX IF NOT EXISTS invstfmain_lk07 ON main.invstfmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invstfmain_lk08 ON main.invstfmain USING btree (slcode);
CREATE INDEX IF NOT EXISTS invstfmain_lk09 ON main.invstfmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invstfmain_lk10 ON main.invstfmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invstfmain_lk11 ON main.invstfmain USING btree (invgatein_code);
CREATE INDEX IF NOT EXISTS invstfmain_lk12 ON main.invstfmain USING btree (admou_code_in);
CREATE INDEX IF NOT EXISTS invstfmain_lk13 ON main.invstfmain USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS invstkadjdet_pk ON main.invstkadjdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invstkadjdet_u01 ON main.invstkadjdet USING btree (stkadjcode, icode, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invstkadjdet_lk01 ON main.invstkadjdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invstkadjdet_lk02 ON main.invstkadjdet USING btree (loccode);
CREATE INDEX IF NOT EXISTS invstkadjdet_lk03 ON main.invstkadjdet USING btree (stkadjcode);
CREATE INDEX IF NOT EXISTS invstkadjdet_lk04 ON main.invstkadjdet USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS invstkadjmain_pk ON main.invstkadjmain USING btree (stkadjcode);
CREATE UNIQUE INDEX IF NOT EXISTS invstkadjmain_u01 ON main.invstkadjmain USING btree (stkadjno, ycode);
CREATE INDEX IF NOT EXISTS invstkadjmain_lk01 ON main.invstkadjmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invstkadjmain_lk02 ON main.invstkadjmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS invstkadjmain_lk03 ON main.invstkadjmain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invstkadjmain_lk04 ON main.invstkadjmain USING btree (stkplancode);
CREATE INDEX IF NOT EXISTS invstkadjmain_lk05 ON main.invstkadjmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invstkadjmain_lk06 ON main.invstkadjmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invstkadjmain_lk07 ON main.invstkadjmain USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS invstkentdet_pk ON main.invstkentdet USING btree (code);
CREATE INDEX IF NOT EXISTS invstkentdet_lk01 ON main.invstkentdet USING btree (icode);
CREATE INDEX IF NOT EXISTS invstkentdet_lk02 ON main.invstkentdet USING btree (stkentcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_invstkentmain_stkentcode ON main.invstkentmain USING btree (stkentcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invstkentmain_stkentno_ycode ON main.invstkentmain USING btree (stkentno, ycode);
CREATE INDEX IF NOT EXISTS invstkentmain_lk01 ON main.invstkentmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invstkentmain_lk02 ON main.invstkentmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS invstkentmain_lk03 ON main.invstkentmain USING btree (stkplancode);
CREATE INDEX IF NOT EXISTS invstkentmain_lk04 ON main.invstkentmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invstkentmain_lk05 ON main.invstkentmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invstkentmain_lk06 ON main.invstkentmain USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS invstkplandet_pk ON main.invstkplandet USING btree (code);
CREATE INDEX IF NOT EXISTS invstkplandet_lk01 ON main.invstkplandet USING btree (ccode1);
CREATE INDEX IF NOT EXISTS invstkplandet_lk02 ON main.invstkplandet USING btree (ccode2);
CREATE INDEX IF NOT EXISTS invstkplandet_lk03 ON main.invstkplandet USING btree (ccode3);
CREATE INDEX IF NOT EXISTS invstkplandet_lk04 ON main.invstkplandet USING btree (ccode4);
CREATE INDEX IF NOT EXISTS invstkplandet_lk05 ON main.invstkplandet USING btree (ccode5);
CREATE INDEX IF NOT EXISTS invstkplandet_lk06 ON main.invstkplandet USING btree (ccode6);
CREATE INDEX IF NOT EXISTS invstkplandet_lk07 ON main.invstkplandet USING btree (grpcode);
CREATE INDEX IF NOT EXISTS invstkplandet_lk08 ON main.invstkplandet USING btree (icode);
CREATE INDEX IF NOT EXISTS invstkplandet_lk09 ON main.invstkplandet USING btree (stkplancode);
CREATE INDEX IF NOT EXISTS invstkplandet_lk10 ON main.invstkplandet USING btree (invarticle_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invstkplanitem_code ON main.invstkplanitem USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_stkplnitem_loc_grp_art_icode ON main.invstkplanitem USING btree (stkplancode, loccode, icode, lev1grpcode, lev2grpcode, grpcode, invarticle_code, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS invstkplanitem_i01 ON main.invstkplanitem USING btree (loccode, icode);
CREATE INDEX IF NOT EXISTS invstkplanitem_lk01 ON main.invstkplanitem USING btree (stkplancode);
CREATE UNIQUE INDEX IF NOT EXISTS invstkplnitem_u01 ON main.invstkplanitem USING btree (stkplancode, loccode, icode, lev1grpcode, lev2grpcode, grpcode, invarticle_code, COALESCE(invbatch_serial_code, ('-10'::integer)::bigint));
CREATE UNIQUE INDEX IF NOT EXISTS p_invstkplanmain_stkplancode ON main.invstkplanmain USING btree (stkplancode);
CREATE INDEX IF NOT EXISTS invstkplanmain_lk01 ON main.invstkplanmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS invstkplanmain_lk02 ON main.invstkplanmain USING btree (loccode);
CREATE INDEX IF NOT EXISTS invstkplanmain_lk03 ON main.invstkplanmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS invstkplanmain_lk04 ON main.invstkplanmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invstkplanmain_lk05 ON main.invstkplanmain USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS invstock_intra_pk ON main.invstock_intra USING btree (stockcode);
CREATE UNIQUE INDEX IF NOT EXISTS invtakedet_pk ON main.invtakedet USING btree (code);
CREATE INDEX IF NOT EXISTS invtakedet_lk01 ON main.invtakedet USING btree (icode);
CREATE INDEX IF NOT EXISTS invtakedet_lk02 ON main.invtakedet USING btree (invbin_code);
CREATE INDEX IF NOT EXISTS invtakedet_lk03 ON main.invtakedet USING btree (invtakemain_code);
CREATE UNIQUE INDEX IF NOT EXISTS invtakemain_pk ON main.invtakemain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invtakemain_u01 ON main.invtakemain USING btree (guid);
CREATE INDEX IF NOT EXISTS invtakemain_lk01 ON main.invtakemain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invtakemain_lk02 ON main.invtakemain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS invtakemain_lk03 ON main.invtakemain USING btree (createdby);
CREATE INDEX IF NOT EXISTS invtakemain_lk04 ON main.invtakemain USING btree (doccode);
CREATE INDEX IF NOT EXISTS invtakemain_lk05 ON main.invtakemain USING btree (inloccode);
CREATE INDEX IF NOT EXISTS invtakemain_lk06 ON main.invtakemain USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS invtakemain_lk07 ON main.invtakemain USING btree (outloccode);
CREATE INDEX IF NOT EXISTS invtakemain_lk08 ON main.invtakemain USING btree (postedby);
CREATE INDEX IF NOT EXISTS invtakemain_lk09 ON main.invtakemain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS invval_migration_det_pk ON main.invval_migration_det USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invval_migration_det_u01 ON main.invval_migration_det USING btree (admsite_code, icode, admmonth_last_date);
CREATE INDEX IF NOT EXISTS invval_migration_det_lk01 ON main.invval_migration_det USING btree (admmonth_code);
CREATE INDEX IF NOT EXISTS invval_migration_det_lk02 ON main.invval_migration_det USING btree (invval_migration_main_code);
CREATE UNIQUE INDEX IF NOT EXISTS invval_migration_main_pk ON main.invval_migration_main USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invval_migration_main_u01 ON main.invval_migration_main USING btree (admsite_code, admmonth_last_date);
CREATE INDEX IF NOT EXISTS invval_migration_main_lk01 ON main.invval_migration_main USING btree (admmonth_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_localpolicy_pk ON main.psite_localpolicy USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_localpolicy_i01 ON main.psite_localpolicy USING btree (upper((name)::text));
CREATE INDEX IF NOT EXISTS psite_localpolicy_lk01 ON main.psite_localpolicy USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_localpolicy_lk02 ON main.psite_localpolicy USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS lpbenefit_pk ON main.lpbenefit USING btree (code);
CREATE INDEX IF NOT EXISTS lpbenefit_lk01 ON main.lpbenefit USING btree (createdby);
CREATE INDEX IF NOT EXISTS lpbenefit_lk02 ON main.lpbenefit USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS lpbenefit_exp_detail_pk ON main.lpbenefit_exp_detail USING btree (code);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk01 ON main.lpbenefit_exp_detail USING btree (ccode1);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk02 ON main.lpbenefit_exp_detail USING btree (ccode2);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk03 ON main.lpbenefit_exp_detail USING btree (ccode3);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk04 ON main.lpbenefit_exp_detail USING btree (ccode4);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk05 ON main.lpbenefit_exp_detail USING btree (ccode5);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk06 ON main.lpbenefit_exp_detail USING btree (ccode6);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk07 ON main.lpbenefit_exp_detail USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk08 ON main.lpbenefit_exp_detail USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk09 ON main.lpbenefit_exp_detail USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk10 ON main.lpbenefit_exp_detail USING btree (lpbenefit_code);
CREATE INDEX IF NOT EXISTS lpbenefit_exp_detail_lk11 ON main.lpbenefit_exp_detail USING btree (section_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS lpcard_pk ON main.lpcard USING btree (cardno);
CREATE INDEX IF NOT EXISTS lpcard_lk01 ON main.lpcard USING btree (createdby);
CREATE INDEX IF NOT EXISTS lpcard_lk02 ON main.lpcard USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS lpcard_lk03 ON main.lpcard USING btree (lpcard_type_code);
CREATE INDEX IF NOT EXISTS lpcard_lk04 ON main.lpcard USING btree (allocated_admsite_code);
CREATE INDEX IF NOT EXISTS lpcard_lk05 ON main.lpcard USING btree (psite_customer_code);
CREATE UNIQUE INDEX IF NOT EXISTS lpcard_benefit_discount_pk ON main.lpcard_benefit_discount USING btree (code);
CREATE INDEX IF NOT EXISTS lpcard_benefit_discount_lk01 ON main.lpcard_benefit_discount USING btree (cardno);
CREATE INDEX IF NOT EXISTS lpcard_benefit_discount_lk02 ON main.lpcard_benefit_discount USING btree (lpbenefit_code);
CREATE UNIQUE INDEX IF NOT EXISTS lpcard_benefit_point_pk ON main.lpcard_benefit_point USING btree (code);
CREATE INDEX IF NOT EXISTS lpcard_benefit_point_lk01 ON main.lpcard_benefit_point USING btree (cardno);
CREATE INDEX IF NOT EXISTS lpcard_benefit_point_lk02 ON main.lpcard_benefit_point USING btree (lpbenefit_code);
CREATE UNIQUE INDEX IF NOT EXISTS lpcard_distribution_u01 ON main.lpcard_distribution USING btree (cardno, admsite_code);
CREATE INDEX IF NOT EXISTS lpcard_distribution_lk01 ON main.lpcard_distribution USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS lpcard_point_pk ON main.lpcard_point USING btree (code);
CREATE INDEX IF NOT EXISTS lpcard_point_lk01 ON main.lpcard_point USING btree (cardno);
CREATE UNIQUE INDEX IF NOT EXISTS lpcard_type_pk ON main.lpcard_type USING btree (code);
CREATE INDEX IF NOT EXISTS lpcard_type_lk01 ON main.lpcard_type USING btree (createdby);
CREATE INDEX IF NOT EXISTS lpcard_type_lk02 ON main.lpcard_type USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS mailjob_pk ON main.mailjob USING btree (code);
CREATE INDEX IF NOT EXISTS mailjob_lk01 ON main.mailjob USING btree (mailjobtype_code);
CREATE INDEX IF NOT EXISTS mailjob_lk02 ON main.mailjob USING btree (mailserver_code);
CREATE UNIQUE INDEX IF NOT EXISTS mailjobfilter_pk ON main.mailjobfilter USING btree (code);
CREATE INDEX IF NOT EXISTS mailjobfilter_lk01 ON main.mailjobfilter USING btree (mailjobtype_param_code);
CREATE INDEX IF NOT EXISTS mailjobfilter_lk02 ON main.mailjobfilter USING btree (mailjob_code);
CREATE UNIQUE INDEX IF NOT EXISTS mailjobfilter_multiple_pk ON main.mailjobfilter_multiple USING btree (code);
CREATE INDEX IF NOT EXISTS mailjobfilter_multiple_lk01 ON main.mailjobfilter_multiple USING btree (mailjobfilter_code);
CREATE UNIQUE INDEX IF NOT EXISTS mailjobtype_param_pk ON main.mailjobtype_param USING btree (code);
CREATE INDEX IF NOT EXISTS mailjobtype_param_lk01 ON main.mailjobtype_param USING btree (mailjobtype_code);
CREATE UNIQUE INDEX IF NOT EXISTS mailoccurence_event_pk ON main.mailoccurence_event USING btree (code);
CREATE INDEX IF NOT EXISTS mailoccurence_event_lk01 ON main.mailoccurence_event USING btree (mailjob_code);
CREATE UNIQUE INDEX IF NOT EXISTS mailserver_pk ON main.mailserver USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_masterpolicy_pk ON main.psite_masterpolicy USING btree (sys_policysettingcode);
CREATE INDEX IF NOT EXISTS psite_masterpolicy_lk01 ON main.psite_masterpolicy USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_masterpolicy_lk02 ON main.psite_masterpolicy USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS mdapi_pk ON main.mdapi USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS mdcustomerconfig_pk ON main.mdcustomerconfig USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS mdgstreturn_pk ON main.mdgstreturn USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS mdlist_pk ON main.mdlist USING btree (id);
CREATE INDEX IF NOT EXISTS mdlist_lk01 ON main.mdlist USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS mdlistcriteria_pk ON main.mdlistcriteria USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS u_mdlist_criterianame_dto_name ON main.mdlistcriteria USING btree (criterianame, dto_name, mdlistid);
CREATE INDEX IF NOT EXISTS mdlistcriteria_lk01 ON main.mdlistcriteria USING btree (mdlistid);
CREATE UNIQUE INDEX IF NOT EXISTS mdlistdetail_pk ON main.mdlistdetail USING btree (id);
CREATE INDEX IF NOT EXISTS mdlistdetail_lk01 ON main.mdlistdetail USING btree (mdlistid);
CREATE UNIQUE INDEX IF NOT EXISTS mdtype_pk ON main.mdtype USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS mdtype_u01 ON main.mdtype USING btree (interfacetype, concretetype, registeredname);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mop_pk ON main.psite_mop USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mop_u02 ON main.psite_mop USING btree (shortcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mop_i01 ON main.psite_mop USING btree (upper((name)::text));
CREATE INDEX IF NOT EXISTS psite_mop_lk01 ON main.psite_mop USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS psite_mop_lk02 ON main.psite_mop USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_mop_lk03 ON main.psite_mop USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$postasks_alloc_pk ON main.nfs$postasks_alloc USING btree (code);
CREATE INDEX IF NOT EXISTS nfs$postasks_alloc_lk01 ON main.nfs$postasks_alloc USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS nfs$postasks_alloc_lk02 ON main.nfs$postasks_alloc USING btree (nfs$tasks_code);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$task_filter_pk ON main.nfs$task_filter USING btree (code);
CREATE INDEX IF NOT EXISTS nfs$task_filter_lk01 ON main.nfs$task_filter USING btree (nfs$tasks_code);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$tasks_pk ON main.nfs$tasks USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$tasks_u01 ON main.nfs$tasks USING btree (name);
CREATE INDEX IF NOT EXISTS nfs$tasks_lk01 ON main.nfs$tasks USING btree (nfs$events_code);
CREATE INDEX IF NOT EXISTS operation_log_lk01 ON main.operation_log USING btree (ecode);
CREATE INDEX IF NOT EXISTS operation_log_lk02 ON main.operation_log USING btree (modulecode);
CREATE INDEX IF NOT EXISTS operation_log_lk03 ON main.operation_log USING btree (sitecode);
CREATE INDEX IF NOT EXISTS operation_log_lk04 ON main.operation_log USING btree (slcode);
CREATE INDEX IF NOT EXISTS operation_log_lk05 ON main.operation_log USING btree (terminalname);
CREATE UNIQUE INDEX IF NOT EXISTS psite_webdb_configuration_pk ON main.psite_webdb_configuration USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS pk_pivotreportlayout ON main.pivotreportlayout USING btree (layoutid);
CREATE UNIQUE INDEX IF NOT EXISTS psite_plugin_pk ON main.psite_plugin USING btree (code);
CREATE INDEX IF NOT EXISTS psite_plugin_lk01 ON main.psite_plugin USING btree (plugintypes_code);
CREATE INDEX IF NOT EXISTS psite_plugin_lk02 ON main.psite_plugin USING btree (pluginvendor_code);
CREATE UNIQUE INDEX IF NOT EXISTS posjournal_pk ON main.posjournal USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS posjournal_u01 ON main.posjournal USING btree (scheme_docno, docdate, createdby, admsite_code);
CREATE INDEX IF NOT EXISTS posjournal_lk01 ON main.posjournal USING btree (admou_code);
CREATE INDEX IF NOT EXISTS posjournal_lk02 ON main.posjournal USING btree (createdby);
CREATE INDEX IF NOT EXISTS posjournal_lk03 ON main.posjournal USING btree (customer_slcode);
CREATE INDEX IF NOT EXISTS posjournal_lk04 ON main.posjournal USING btree (debtor_glcode);
CREATE INDEX IF NOT EXISTS posjournal_lk05 ON main.posjournal USING btree (doccode);
CREATE INDEX IF NOT EXISTS posjournal_lk06 ON main.posjournal USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS posjournal_lk07 ON main.posjournal USING btree (ycode);
CREATE INDEX IF NOT EXISTS posjournal_lk08 ON main.posjournal USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS posjournal_lk09 ON main.posjournal USING btree (retailordmain_ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS posjournal_u02 ON main.posjournal USING btree ((
CASE
    WHEN (intgrefid IS NOT NULL) THEN ((createdby)::text || (intgrefid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS prd_wiptrack_pk ON main.prd_wiptrack USING btree (code);
CREATE INDEX IF NOT EXISTS prd_wiptrack_lk02 ON main.prd_wiptrack USING btree (ecode);
CREATE UNIQUE INDEX IF NOT EXISTS prdbomdet_pk ON main.prdbomdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdbomdet_bom_seq_ci_pr_code ON main.prdbomdet USING btree (bomcode, operation_seq, component_icode, prcode, com_saitem_code, bomoperation_code, is_ass_item);
CREATE INDEX IF NOT EXISTS prdbomdet_lk01 ON main.prdbomdet USING btree (alt_grpcode);
CREATE INDEX IF NOT EXISTS prdbomdet_lk02 ON main.prdbomdet USING btree (bomcode);
CREATE INDEX IF NOT EXISTS prdbomdet_lk03 ON main.prdbomdet USING btree (component_icode);
CREATE INDEX IF NOT EXISTS prdbomdet_lk04 ON main.prdbomdet USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdbomdet_lk06 ON main.prdbomdet USING btree (com_saitem_code);
CREATE INDEX IF NOT EXISTS prdbomdet_lk07 ON main.prdbomdet USING btree (bomoperation_code);
CREATE INDEX IF NOT EXISTS prdbomdet_lk08 ON main.prdbomdet USING btree (bomver_code);
CREATE INDEX IF NOT EXISTS prdbomdet_lk09 ON main.prdbomdet USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdbomdet_lk10 ON main.prdbomdet USING btree (ass_saitem_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdbommain_code ON main.prdbommain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdbommain_assicode_rtcd ON main.prdbommain USING btree (assembly_icode, routecode);
CREATE INDEX IF NOT EXISTS prdbommain_lk01 ON main.prdbommain USING btree (routecode);
CREATE INDEX IF NOT EXISTS prdbommain_lk02 ON main.prdbommain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdbommain_lk03 ON main.prdbommain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdbommain_lk04 ON main.prdbommain USING btree (assembly_icode);
CREATE UNIQUE INDEX IF NOT EXISTS prdbomop_code_pk ON main.prdbomoperation USING btree (code);
CREATE INDEX IF NOT EXISTS prdbomoperation_lk01 ON main.prdbomoperation USING btree (bomcode);
CREATE INDEX IF NOT EXISTS prdbomoperation_lk02 ON main.prdbomoperation USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdbomoperation_lk03 ON main.prdbomoperation USING btree (ass_saitem_code);
CREATE INDEX IF NOT EXISTS prdbomoperation_lk04 ON main.prdbomoperation USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdbomoperation_lk05 ON main.prdbomoperation USING btree (bomver_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdbomver_code ON main.prdbomver USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdbomver_bom_no_code ON main.prdbomver USING btree (bom_version_no, bomcode);
CREATE INDEX IF NOT EXISTS i_prdbomver_bomcode ON main.prdbomver USING btree (bomcode);
CREATE INDEX IF NOT EXISTS prdbomver_lk01 ON main.prdbomver USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdbomver_lk02 ON main.prdbomver USING btree (approv_ecode);
CREATE INDEX IF NOT EXISTS prdbomver_lk03 ON main.prdbomver USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS prdcostsheetbom_pk ON main.prdcostsheetbom USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdcsbom_cscode_opseq_cicode ON main.prdcostsheetbom USING btree (costsheet_code, operation_seq, component_icode);
CREATE INDEX IF NOT EXISTS prdcostsheetbom_lk01 ON main.prdcostsheetbom USING btree (component_icode);
CREATE INDEX IF NOT EXISTS prdcostsheetbom_lk02 ON main.prdcostsheetbom USING btree (costsheet_code);
CREATE INDEX IF NOT EXISTS prdcostsheetbom_lk03 ON main.prdcostsheetbom USING btree (csop_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdcostsheetoperation_pk ON main.prdcostsheetoperation USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdcsop_cscode_opseq ON main.prdcostsheetoperation USING btree (costsheet_code, operation_seq);
CREATE INDEX IF NOT EXISTS prdcostsheetoperation_lk01 ON main.prdcostsheetoperation USING btree (costsheet_code);
CREATE INDEX IF NOT EXISTS prdcostsheetoperation_lk02 ON main.prdcostsheetoperation USING btree (prcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdcshead_code ON main.prdcostsheethead USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdcshead_id ON main.prdcostsheethead USING btree (id);
CREATE INDEX IF NOT EXISTS prdcostsheethead_lk01 ON main.prdcostsheethead USING btree (approved_ecode);
CREATE INDEX IF NOT EXISTS prdcostsheethead_lk02 ON main.prdcostsheethead USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdcostsheethead_lk03 ON main.prdcostsheethead USING btree (grpcode);
CREATE INDEX IF NOT EXISTS prdcostsheethead_lk04 ON main.prdcostsheethead USING btree (imagecode);
CREATE INDEX IF NOT EXISTS prdcostsheethead_lk05 ON main.prdcostsheethead USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdcostsheethead_lk06 ON main.prdcostsheethead USING btree (routecode);
CREATE INDEX IF NOT EXISTS prdcostsheethead_lk07 ON main.prdcostsheethead USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS prdis_pk ON main.prdis USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdis_ordcode_icode ON main.prdis USING btree (ordcode, icode, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS prdis_lk01 ON main.prdis USING btree (icode);
CREATE INDEX IF NOT EXISTS prdis_lk02 ON main.prdis USING btree (loccode);
CREATE INDEX IF NOT EXISTS prdis_lk03 ON main.prdis USING btree (ordcode);
CREATE INDEX IF NOT EXISTS prdis_lk04 ON main.prdis USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdis_lk05 ON main.prdis USING btree (psite_stockpoint_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdjobcnldet_code ON main.prdjobcnldet USING btree (code);
CREATE INDEX IF NOT EXISTS prdjobcnldet_lk01 ON main.prdjobcnldet USING btree (prdjobmain_code);
CREATE INDEX IF NOT EXISTS prdjobcnldet_lk02 ON main.prdjobcnldet USING btree (prdjobdet_code);
CREATE INDEX IF NOT EXISTS prdjobcnldet_lk03 ON main.prdjobcnldet USING btree (icode);
CREATE INDEX IF NOT EXISTS prdjobcnldet_lk04 ON main.prdjobcnldet USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdjobcnldet_lk05 ON main.prdjobcnldet USING btree (cnlcode);
CREATE INDEX IF NOT EXISTS prdjobcnldet_lk06 ON main.prdjobcnldet USING btree (ass_saitem_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdjobcnlmain_code ON main.prdjobcnlmain USING btree (code);
CREATE INDEX IF NOT EXISTS prdjobcnlmain_lk01 ON main.prdjobcnlmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS prdjobcnlmain_lk02 ON main.prdjobcnlmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdjobcnlmain_lk03 ON main.prdjobcnlmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdjobcnlmain_lk04 ON main.prdjobcnlmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS prdjobcnlmain_lk05 ON main.prdjobcnlmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdjobcnlmain_lk06 ON main.prdjobcnlmain USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdjobmain_code ON main.prdjobmain USING btree (code);
CREATE INDEX IF NOT EXISTS i01_prdjobmain ON main.prdjobmain USING btree (prd_wiptrack_code);
CREATE INDEX IF NOT EXISTS prdjobmain_lk01 ON main.prdjobmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS prdjobmain_lk02 ON main.prdjobmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS prdjobmain_lk03 ON main.prdjobmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdjobmain_lk04 ON main.prdjobmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdjobmain_lk05 ON main.prdjobmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS prdjobmain_lk06 ON main.prdjobmain USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdjobmain_lk07 ON main.prdjobmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdjobmain_lk08 ON main.prdjobmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS prdjobmain_lk09 ON main.prdjobmain USING btree (jobber_loccode);
CREATE INDEX IF NOT EXISTS prdjobmain_lk10 ON main.prdjobmain USING btree (auth_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdjrcmain_code ON main.prdjrcmain USING btree (code);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk01 ON main.prdjrcmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk02 ON main.prdjrcmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk03 ON main.prdjrcmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk04 ON main.prdjrcmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk05 ON main.prdjrcmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk06 ON main.prdjrcmain USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk07 ON main.prdjrcmain USING btree (srvcode);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk08 ON main.prdjrcmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk09 ON main.prdjrcmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk10 ON main.prdjrcmain USING btree (invgatein_code);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk11 ON main.prdjrcmain USING btree (lgtcode);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk12 ON main.prdjrcmain USING btree (pursrvdet_code);
CREATE INDEX IF NOT EXISTS prdjrcmain_lk13 ON main.prdjrcmain USING btree (prd_wiptrack_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdlotbom_pk ON main.prdlotbom USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdlotbom_lotaicodeseqcicode ON main.prdlotbom USING btree (lotcode, prcode, assembly_icode, operation_seq, component_icode, ass_saitem_code, com_saitem_code, is_ass_item);
CREATE INDEX IF NOT EXISTS prdlotbom_07 ON main.prdlotbom USING btree (ass_saitem_code);
CREATE INDEX IF NOT EXISTS prdlotbom_08 ON main.prdlotbom USING btree (com_saitem_code);
CREATE INDEX IF NOT EXISTS prdlotbom_lk01 ON main.prdlotbom USING btree (alt_grpcode);
CREATE INDEX IF NOT EXISTS prdlotbom_lk02 ON main.prdlotbom USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdlotbom_lk03 ON main.prdlotbom USING btree (component_icode);
CREATE INDEX IF NOT EXISTS prdlotbom_lk04 ON main.prdlotbom USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdlotbom_lk05 ON main.prdlotbom USING btree (lotop_code);
CREATE INDEX IF NOT EXISTS prdlotbom_lk06 ON main.prdlotbom USING btree (prcode);
CREATE UNIQUE INDEX IF NOT EXISTS prdlotdet_pk ON main.prdlotdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdlotdet_lotcode_aicode ON main.prdlotdet USING btree (lotcode, assembly_icode);
CREATE INDEX IF NOT EXISTS prdlotdet_lk01 ON main.prdlotdet USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdlotdet_lk02 ON main.prdlotdet USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdlotdet_lk03 ON main.prdlotdet USING btree (prdmplanalloc_code);
CREATE INDEX IF NOT EXISTS prdlotdet_lk04 ON main.prdlotdet USING btree (bomver_code);
CREATE INDEX IF NOT EXISTS prdlotdet_lk05 ON main.prdlotdet USING btree (routecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdlotmain_code ON main.prdlotmain USING btree (code);
CREATE INDEX IF NOT EXISTS prdlotmain_lk01 ON main.prdlotmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS prdlotmain_lk02 ON main.prdlotmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS prdlotmain_lk03 ON main.prdlotmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdlotmain_lk04 ON main.prdlotmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdlotmain_lk05 ON main.prdlotmain USING btree (ordcode);
CREATE INDEX IF NOT EXISTS prdlotmain_lk06 ON main.prdlotmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdlotmain_lk07 ON main.prdlotmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS prdlotmain_lk08 ON main.prdlotmain USING btree (routegrp_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdlotoperation_pk ON main.prdlotoperation USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdlotop_lotcode_aitem_opseq ON main.prdlotoperation USING btree (lotcode, assembly_icode, operation_seq, prcode, ass_saitem_code);
CREATE INDEX IF NOT EXISTS indx_prdlotoperation_lk06 ON main.prdlotoperation USING btree (lotcode, prcode, operation_seq, assembly_icode);
CREATE INDEX IF NOT EXISTS prdlotoperation_lk01 ON main.prdlotoperation USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdlotoperation_lk02 ON main.prdlotoperation USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdlotoperation_lk03 ON main.prdlotoperation USING btree (lotdet_code);
CREATE INDEX IF NOT EXISTS prdlotoperation_lk04 ON main.prdlotoperation USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdlotoperation_lk05 ON main.prdlotoperation USING btree (ass_saitem_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdmplanalloc_code_pk ON main.prdmplanalloc USING btree (code);
CREATE INDEX IF NOT EXISTS prdmplanalloc_lk01 ON main.prdmplanalloc USING btree (prdmplandet_code);
CREATE INDEX IF NOT EXISTS prdmplanalloc_lk02 ON main.prdmplanalloc USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdmplanalloc_lk03 ON main.prdmplanalloc USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdmplandet_code_pk ON main.prdmplandet USING btree (code);
CREATE INDEX IF NOT EXISTS prdmplandet_lk01 ON main.prdmplandet USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdmplandet_lk02 ON main.prdmplandet USING btree (plancode);
CREATE UNIQUE INDEX IF NOT EXISTS prdmplanmain_code_pk ON main.prdmplanmain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdmplanmain_entno_ycode ON main.prdmplanmain USING btree (entno, ycode);
CREATE INDEX IF NOT EXISTS prdmplanmain_lk01 ON main.prdmplanmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS prdmplanmain_lk02 ON main.prdmplanmain USING btree (ordcode);
CREATE INDEX IF NOT EXISTS prdmplanmain_lk03 ON main.prdmplanmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdmplanmain_lk04 ON main.prdmplanmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS prdmplanmain_lk05 ON main.prdmplanmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS prdmplanmain_lk06 ON main.prdmplanmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdmplanmain_lk07 ON main.prdmplanmain USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdord_ordcode ON main.prdord USING btree (ordcode);
CREATE INDEX IF NOT EXISTS prdord_lk01 ON main.prdord USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdord_lk02 ON main.prdord USING btree (pcode);
CREATE INDEX IF NOT EXISTS prdord_lk03 ON main.prdord USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdord_lk04 ON main.prdord USING btree (prvordcode);
CREATE INDEX IF NOT EXISTS prdord_lk05 ON main.prdord USING btree (srvcode);
CREATE INDEX IF NOT EXISTS prdord_lk06 ON main.prdord USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdord_lk07 ON main.prdord USING btree (admou_code);
CREATE INDEX IF NOT EXISTS prdord_lk08 ON main.prdord USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS prdord_lk09 ON main.prdord USING btree (doccode);
CREATE INDEX IF NOT EXISTS prdord_lk10 ON main.prdord USING btree (auth_ecode);
CREATE INDEX IF NOT EXISTS prdord_lk11 ON main.prdord USING btree (pursrvdet_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdrc_pk ON main.prdrc USING btree (code);
CREATE INDEX IF NOT EXISTS prdrc_lk01 ON main.prdrc USING btree (icode);
CREATE INDEX IF NOT EXISTS prdrc_lk02 ON main.prdrc USING btree (loccode);
CREATE INDEX IF NOT EXISTS prdrc_lk03 ON main.prdrc USING btree (ordcode);
CREATE INDEX IF NOT EXISTS prdrc_lk04 ON main.prdrc USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdrc_lk05 ON main.prdrc USING btree (psite_stockpoint_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdroutedet_pk ON main.prdroutedet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdroutedet_routecode_opseq ON main.prdroutedet USING btree (routecode, operation_seq);
CREATE INDEX IF NOT EXISTS prdroutedet_lk01 ON main.prdroutedet USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdroutedet_lk02 ON main.prdroutedet USING btree (routecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdroutegrpdet_code ON main.prdroutegrpdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_rtgrpdet_icode_grp_effdt ON main.prdroutegrpdet USING btree (icode, routegrp_code, eff_date, routecode);
CREATE INDEX IF NOT EXISTS i_routegrp_routecode ON main.prdroutegrpdet USING btree (routecode);
CREATE INDEX IF NOT EXISTS prdroutegrpdet_lk01 ON main.prdroutegrpdet USING btree (icode);
CREATE INDEX IF NOT EXISTS prdroutegrpdet_lk02 ON main.prdroutegrpdet USING btree (routegrp_code);
CREATE UNIQUE INDEX IF NOT EXISTS prdwipclrmain_pk ON main.prdwipclrmain USING btree (code);
CREATE INDEX IF NOT EXISTS prdwipclrmain_lk01 ON main.prdwipclrmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdwipclrmain_lk02 ON main.prdwipclrmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdwipclrmain_lk03 ON main.prdwipclrmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdwipclrmain_lk04 ON main.prdwipclrmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS prdwipclrmain_lk05 ON main.prdwipclrmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS prdwipclrmain_lk06 ON main.prdwipclrmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS prdwipclrmain_lk07 ON main.prdwipclrmain USING btree (loccode);
CREATE UNIQUE INDEX IF NOT EXISTS prdwipdet_pk ON main.prdwipdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdwipdet_wtc_ci_jc_lc_ai ON main.prdwipdet USING btree (wiptxn_code, component_icode, jobcode, lotcode, assembly_icode, ass_saitem_code, com_saitem_code, job_assembly_icode, jobbom_code, invbatch_serial_code);
CREATE INDEX IF NOT EXISTS i_prdwipdet_family_code ON main.prdwipdet USING btree (ref_family_code);
CREATE INDEX IF NOT EXISTS indx_jai_prdwipdet ON main.prdwipdet USING btree (job_assembly_icode);
CREATE INDEX IF NOT EXISTS prdwipdet_09 ON main.prdwipdet USING btree (ass_saitem_code);
CREATE INDEX IF NOT EXISTS prdwipdet_10 ON main.prdwipdet USING btree (com_saitem_code);
CREATE INDEX IF NOT EXISTS prdwipdet_lk01 ON main.prdwipdet USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdwipdet_lk02 ON main.prdwipdet USING btree (component_icode);
CREATE INDEX IF NOT EXISTS prdwipdet_lk03 ON main.prdwipdet USING btree (jobbom_code);
CREATE INDEX IF NOT EXISTS prdwipdet_lk04 ON main.prdwipdet USING btree (jobcode);
CREATE INDEX IF NOT EXISTS prdwipdet_lk05 ON main.prdwipdet USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdwipdet_lk06 ON main.prdwipdet USING btree (wiptxn_code);
CREATE INDEX IF NOT EXISTS prdwipdet_lk07 ON main.prdwipdet USING btree (wip_loccode);
CREATE INDEX IF NOT EXISTS prdwipdet_lk08 ON main.prdwipdet USING btree (cnlcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdwipmain_code ON main.prdwipmain USING btree (code);
CREATE INDEX IF NOT EXISTS prdwipmain_lk01 ON main.prdwipmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS prdwipmain_lk02 ON main.prdwipmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS prdwipmain_lk03 ON main.prdwipmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdwipmain_lk04 ON main.prdwipmain USING btree (jobcode);
CREATE INDEX IF NOT EXISTS prdwipmain_lk05 ON main.prdwipmain USING btree (jrccode);
CREATE INDEX IF NOT EXISTS prdwipmain_lk06 ON main.prdwipmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdwipmain_lk07 ON main.prdwipmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS prdwipmain_lk08 ON main.prdwipmain USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdwipmain_lk09 ON main.prdwipmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS prdwipmain_lk10 ON main.prdwipmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS prdwipmain_lk11 ON main.prdwipmain USING btree (invgatein_code);
CREATE INDEX IF NOT EXISTS prdwipmain_lk12 ON main.prdwipmain USING btree (lgtcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdwiptrans_code ON main.prdwiptrans USING btree (code);
CREATE INDEX IF NOT EXISTS i01_prdwiptrans ON main.prdwiptrans USING btree (prd_wiptrack_code);
CREATE INDEX IF NOT EXISTS i_prdwiptrans_txn_date ON main.prdwiptrans USING btree (txn_date);
CREATE INDEX IF NOT EXISTS i_trans_item_ers_cicode ON main.prdwiptrans USING btree (txn_type, item_type, det_code, component_icode);
CREATE INDEX IF NOT EXISTS indx_prdwiptrans_lk14 ON main.prdwiptrans USING btree (lotcode, prcode, operation_seq, assembly_icode, admsite_code);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk01 ON main.prdwiptrans USING btree (assembly_icode);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk02 ON main.prdwiptrans USING btree (component_icode);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk03 ON main.prdwiptrans USING btree (jobcode);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk04 ON main.prdwiptrans USING btree (lotcode);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk05 ON main.prdwiptrans USING btree (pcode);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk06 ON main.prdwiptrans USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk07 ON main.prdwiptrans USING btree (wiptxn_code);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk08 ON main.prdwiptrans USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk09 ON main.prdwiptrans USING btree (cnlcode);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk10 ON main.prdwiptrans USING btree (jobber_loccode);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk11 ON main.prdwiptrans USING btree (ass_saitem_code);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk12 ON main.prdwiptrans USING btree (com_saitem_code);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk13 ON main.prdwiptrans USING btree (wipclr_code);
CREATE INDEX IF NOT EXISTS prdwiptrans_lk15 ON main.prdwiptrans USING btree (admou_code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_alloc_det_alcd_prty_u01 ON main.promo_allocation_det USING btree (allocation_code, priority);
CREATE UNIQUE INDEX IF NOT EXISTS promo_allocation_det_pk ON main.promo_allocation_det USING btree (code);
CREATE INDEX IF NOT EXISTS promo_allocation_det_lk01 ON main.promo_allocation_det USING btree (allocatedby);
CREATE INDEX IF NOT EXISTS promo_allocation_det_lk02 ON main.promo_allocation_det USING btree (allocation_code);
CREATE INDEX IF NOT EXISTS promo_allocation_det_lk03 ON main.promo_allocation_det USING btree (approvedby);
CREATE INDEX IF NOT EXISTS promo_allocation_det_lk04 ON main.promo_allocation_det USING btree (closedby);
CREATE INDEX IF NOT EXISTS promo_allocation_det_lk05 ON main.promo_allocation_det USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS promo_allocation_det_lk06 ON main.promo_allocation_det USING btree (promo_code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_assort_name_cmpcode_u01 ON main.promo_assortment USING btree (cmpcode, name);
CREATE UNIQUE INDEX IF NOT EXISTS promo_assortment_code_pk ON main.promo_assortment USING btree (code);
CREATE INDEX IF NOT EXISTS promo_assortment_i01 ON main.promo_assortment USING btree (ho_promo_assortment_code);
CREATE INDEX IF NOT EXISTS promo_assortment_lk01 ON main.promo_assortment USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS promo_assortment_lk02 ON main.promo_assortment USING btree (admsite_code_owner);
CREATE UNIQUE INDEX IF NOT EXISTS promo_buy_pk ON main.promo_buy USING btree (code);
CREATE INDEX IF NOT EXISTS promo_buy_lk01 ON main.promo_buy USING btree (assortment_code);
CREATE INDEX IF NOT EXISTS promo_buy_lk02 ON main.promo_buy USING btree (promo_code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_lastno_pk ON main.promo_lastno USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_master_code_pk ON main.promo_master USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_master_name_cmpcode_u02 ON main.promo_master USING btree (cmpcode, name);
CREATE UNIQUE INDEX IF NOT EXISTS promo_master_no_u01 ON main.promo_master USING btree (no);
CREATE INDEX IF NOT EXISTS promo_master_i01 ON main.promo_master USING btree (ho_promo_master_code);
CREATE INDEX IF NOT EXISTS promo_master_lk01 ON main.promo_master USING btree (buy_assortment_code);
CREATE INDEX IF NOT EXISTS promo_master_lk02 ON main.promo_master USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS promo_master_lk03 ON main.promo_master USING btree (creation_usercode);
CREATE INDEX IF NOT EXISTS promo_master_lk04 ON main.promo_master USING btree (modification_usercode);
CREATE INDEX IF NOT EXISTS promo_master_lk05 ON main.promo_master USING btree (admsite_code_owner);
CREATE UNIQUE INDEX IF NOT EXISTS promo_voucher_code_pk ON main.promo_voucher USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_voucher_name_u01 ON main.promo_voucher USING btree (name);
CREATE INDEX IF NOT EXISTS promo_voucher_lk01 ON main.promo_voucher USING btree (doccode);
CREATE UNIQUE INDEX IF NOT EXISTS pk_psite_alloc_item_code ON main.psite_alloc_item USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_alloc_item_u01 ON main.psite_alloc_item USING btree (admsite_code, icode);
CREATE INDEX IF NOT EXISTS psite_alloc_item_lk01 ON main.psite_alloc_item USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_alloc_item_lk02 ON main.psite_alloc_item USING btree (icode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_allocation_pk ON main.psite_allocation USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_allocation_i01 ON main.psite_allocation USING btree (upper((name)::text));
CREATE INDEX IF NOT EXISTS psite_allocation_lk01 ON main.psite_allocation USING btree (createdby);
CREATE UNIQUE INDEX IF NOT EXISTS psite_appsetting_pk ON main.psite_appsetting USING btree (sys_shortcode);
CREATE INDEX IF NOT EXISTS psite_appsetting_lk01 ON main.psite_appsetting USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS psite_coupon_assign_pk ON main.psite_coupon_assign USING btree (code);
CREATE INDEX IF NOT EXISTS psite_coupon_assign_lk01 ON main.psite_coupon_assign USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_coupon_assign_lk02 ON main.psite_coupon_assign USING btree (couponoffer_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_coupon_u01 ON main.psite_couponoffer USING btree (shortcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_couponoffer_pk ON main.psite_couponoffer USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_customer_pk ON main.psite_customer USING btree (code);
CREATE INDEX IF NOT EXISTS psite_customer_lk01 ON main.psite_customer USING btree (lpcardno);
CREATE INDEX IF NOT EXISTS psite_customer_lk02 ON main.psite_customer USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS psite_customer_lk03 ON main.psite_customer USING btree (admisd_code);
CREATE INDEX IF NOT EXISTS psite_customer_lk04 ON main.psite_customer USING btree (mobile);
CREATE UNIQUE INDEX IF NOT EXISTS psite_customer_dist_pk ON main.psite_customer_dist USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_customer_dist_u01 ON main.psite_customer_dist USING btree (psite_customer_code, admsite_code);
CREATE INDEX IF NOT EXISTS psite_customer_dist_lk01 ON main.psite_customer_dist USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_customer_dist_lk02 ON main.psite_customer_dist USING btree (psite_customer_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_discountblocklist_pk ON main.psite_discountblocklist USING btree (code);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk01 ON main.psite_discountblocklist USING btree (ccode1);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk02 ON main.psite_discountblocklist USING btree (ccode2);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk03 ON main.psite_discountblocklist USING btree (ccode3);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk04 ON main.psite_discountblocklist USING btree (ccode4);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk05 ON main.psite_discountblocklist USING btree (ccode5);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk06 ON main.psite_discountblocklist USING btree (ccode6);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk07 ON main.psite_discountblocklist USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk08 ON main.psite_discountblocklist USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk09 ON main.psite_discountblocklist USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk10 ON main.psite_discountblocklist USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk11 ON main.psite_discountblocklist USING btree (psite_discount_code);
CREATE INDEX IF NOT EXISTS psite_discountblocklist_lk12 ON main.psite_discountblocklist USING btree (section_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_docscheme_pk ON main.psite_docscheme USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_docscheme_i01 ON main.psite_docscheme USING btree (upper((name)::text));
CREATE INDEX IF NOT EXISTS psite_docscheme_lk01 ON main.psite_docscheme USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_docscheme_lk02 ON main.psite_docscheme USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_docscheme_detail_lk01 ON main.psite_docscheme_detail USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_docscheme_detail_lk02 ON main.psite_docscheme_detail USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_emrfeedback_log_pk ON main.psite_emrsubmit_queue USING btree (code);
CREATE INDEX IF NOT EXISTS i_psite_emrsubmit_queue ON main.psite_emrsubmit_queue USING btree (transactionguid);
CREATE UNIQUE INDEX IF NOT EXISTS p_psev_code ON main.psite_event USING btree (code);
CREATE INDEX IF NOT EXISTS i_psiteevent_dxsend2id ON main.psite_event USING btree (dxsend2id);
CREATE INDEX IF NOT EXISTS psite_event_lk01 ON main.psite_event USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_event_lk02 ON main.psite_event USING btree (eventtype);
CREATE UNIQUE INDEX IF NOT EXISTS psite_global_localpoldet_pk ON main.psite_global_localpolicydetail USING btree (id);
CREATE INDEX IF NOT EXISTS psite_global_localpolicyd_lk01 ON main.psite_global_localpolicydetail USING btree (localpolicyid);
CREATE INDEX IF NOT EXISTS psite_global_localpolicyd_lk02 ON main.psite_global_localpolicydetail USING btree (sys_policysettingcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_global_localpolicy_pk ON main.psite_global_localpolicy USING btree (id);
CREATE INDEX IF NOT EXISTS psite_global_localpolicy_lk01 ON main.psite_global_localpolicy USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_global_localpolicy_lk02 ON main.psite_global_localpolicy USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS psite_global_role_pk ON main.psite_global_role USING btree (id);
CREATE INDEX IF NOT EXISTS psite_global_role_lk01 ON main.psite_global_role USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_global_role_lk02 ON main.psite_global_role USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_global_role_lk03 ON main.psite_global_role USING btree (localpolicyid);
CREATE UNIQUE INDEX IF NOT EXISTS psite_global_rolemenu_pk ON main.psite_global_rolemenu USING btree (id);
CREATE INDEX IF NOT EXISTS psite_global_rolemenu_lk01 ON main.psite_global_rolemenu USING btree (mdmenuid);
CREATE INDEX IF NOT EXISTS psite_global_rolemenu_lk02 ON main.psite_global_rolemenu USING btree (roleid);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grc_pk ON main.psite_grc USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grc_u01 ON main.psite_grc USING btree (docno, docdt, createdbyid, admsite_code);
CREATE INDEX IF NOT EXISTS i_psite_grc_sitecode_docdt ON main.psite_grc USING btree (admsite_code, docdt);
CREATE INDEX IF NOT EXISTS psite_grc_lk01 ON main.psite_grc USING btree (admou_code);
CREATE INDEX IF NOT EXISTS psite_grc_lk02 ON main.psite_grc USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_grc_lk03 ON main.psite_grc USING btree (invcode);
CREATE INDEX IF NOT EXISTS psite_grc_lk04 ON main.psite_grc USING btree (psite_transit_loccode);
CREATE INDEX IF NOT EXISTS psite_grc_lk05 ON main.psite_grc USING btree (slcode);
CREATE INDEX IF NOT EXISTS psite_grc_lk06 ON main.psite_grc USING btree (store_loccode);
CREATE INDEX IF NOT EXISTS psite_grc_lk07 ON main.psite_grc USING btree (psite_grt_code);
CREATE INDEX IF NOT EXISTS psite_grc_lk08 ON main.psite_grc USING btree (repln_admsite_code);
CREATE INDEX IF NOT EXISTS psite_grc_lk09 ON main.psite_grc USING btree (transferin_glcode);
CREATE INDEX IF NOT EXISTS psite_grc_lk10 ON main.psite_grc USING btree (transferin_slcode);
CREATE INDEX IF NOT EXISTS psite_grc_lk11 ON main.psite_grc USING btree (transitdiff_glcode);
CREATE INDEX IF NOT EXISTS psite_grc_lk12 ON main.psite_grc USING btree (transitdiff_slcode);
CREATE INDEX IF NOT EXISTS psite_grc_lk13 ON main.psite_grc USING btree (transit_glcode);
CREATE INDEX IF NOT EXISTS psite_grc_lk14 ON main.psite_grc USING btree (transit_slcode);
CREATE INDEX IF NOT EXISTS psite_grc_lk15 ON main.psite_grc USING btree (dam_psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_grc_lk16 ON main.psite_grc USING btree (rec_psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_grc_lk17 ON main.psite_grc USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grcchg_pk ON main.psite_grcchg USING btree (code);
CREATE INDEX IF NOT EXISTS psite_grcchg_lk01 ON main.psite_grcchg USING btree (charge_code);
CREATE INDEX IF NOT EXISTS psite_grcchg_lk02 ON main.psite_grcchg USING btree (psite_grc_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grcitem_pk ON main.psite_grcitem USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grcitem_u01 ON main.psite_grcitem USING btree (salinvdet_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grcitem_u02 ON main.psite_grcitem USING btree (psite_grtitem_code);
CREATE INDEX IF NOT EXISTS i_psite_grcitem_family_code ON main.psite_grcitem USING btree (ref_family_code);
CREATE INDEX IF NOT EXISTS psite_grcitem_lk01 ON main.psite_grcitem USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_grcitem_lk02 ON main.psite_grcitem USING btree (dccode);
CREATE INDEX IF NOT EXISTS psite_grcitem_lk03 ON main.psite_grcitem USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_grcitem_lk04 ON main.psite_grcitem USING btree (psite_grc_code);
CREATE INDEX IF NOT EXISTS psite_grcitem_lk06 ON main.psite_grcitem USING btree (glcode);
CREATE INDEX IF NOT EXISTS psite_grcitem_lk07 ON main.psite_grcitem USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_group_pk ON main.psite_group USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_group_i01 ON main.psite_group USING btree (parentcode, upper((name)::text));
CREATE INDEX IF NOT EXISTS psite_group_lk01 ON main.psite_group USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_group_lk02 ON main.psite_group USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_group_lk03 ON main.psite_group USING btree (parentcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grt_pk ON main.psite_grt USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grt_u01 ON main.psite_grt USING btree (docno, docdt, createdbyid, admsite_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk01 ON main.psite_grt USING btree (admou_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk02 ON main.psite_grt USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk03 ON main.psite_grt USING btree (psite_intransit_loccode);
CREATE INDEX IF NOT EXISTS psite_grt_lk04 ON main.psite_grt USING btree (repln_admou_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk05 ON main.psite_grt USING btree (slcode);
CREATE INDEX IF NOT EXISTS psite_grt_lk06 ON main.psite_grt USING btree (store_loccode);
CREATE INDEX IF NOT EXISTS psite_grt_lk07 ON main.psite_grt USING btree (repln_admsite_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk08 ON main.psite_grt USING btree (transferout_glcode);
CREATE INDEX IF NOT EXISTS psite_grt_lk09 ON main.psite_grt USING btree (transferout_slcode);
CREATE INDEX IF NOT EXISTS psite_grt_lk10 ON main.psite_grt USING btree (transit_glcode);
CREATE INDEX IF NOT EXISTS psite_grt_lk11 ON main.psite_grt USING btree (transit_slcode);
CREATE INDEX IF NOT EXISTS psite_grt_lk12 ON main.psite_grt USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk13 ON main.psite_grt USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk14 ON main.psite_grt USING btree (return_pricelist_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk15 ON main.psite_grt USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk16 ON main.psite_grt USING btree (owner_gstin_state_code);
CREATE INDEX IF NOT EXISTS psite_grt_lk17 ON main.psite_grt USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grt_u02 ON main.psite_grt USING btree ((
CASE
    WHEN (intgrefid IS NOT NULL) THEN ((createdbyid)::text || (intgrefid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS psite_grtitem_pk ON main.psite_grtitem USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grtitem_u01 ON main.psite_grtitem USING btree (packetitemid);
CREATE INDEX IF NOT EXISTS i_psite_grtitem_family_code ON main.psite_grtitem USING btree (ref_family_code);
CREATE INDEX IF NOT EXISTS psite_grtitem_lk01 ON main.psite_grtitem USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_grtitem_lk02 ON main.psite_grtitem USING btree (psite_grt_code);
CREATE INDEX IF NOT EXISTS psite_grtitem_lk03 ON main.psite_grtitem USING btree (salorddet_code);
CREATE INDEX IF NOT EXISTS psite_grtitem_lk04 ON main.psite_grtitem USING btree (glcode);
CREATE INDEX IF NOT EXISTS psite_grtitem_lk05 ON main.psite_grtitem USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_localpolicydetail_pk ON main.psite_localpolicydetail USING btree (code);
CREATE INDEX IF NOT EXISTS psite_localpolicydetail_lk01 ON main.psite_localpolicydetail USING btree (localpolicycode);
CREATE INDEX IF NOT EXISTS psite_localpolicydetail_lk02 ON main.psite_localpolicydetail USING btree (sys_policysettingcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mop_assign_pk ON main.psite_mop_assign USING btree (code);
CREATE INDEX IF NOT EXISTS psite_mop_assign_lk01 ON main.psite_mop_assign USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_mop_assign_lk02 ON main.psite_mop_assign USING btree (mop_glcode);
CREATE INDEX IF NOT EXISTS psite_mop_assign_lk03 ON main.psite_mop_assign USING btree (mop_slcode);
CREATE INDEX IF NOT EXISTS psite_mop_assign_lk04 ON main.psite_mop_assign USING btree (psite_mop_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_packet_pk ON main.psite_packet USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS psite_packet_u01 ON main.psite_packet USING btree (packetno, packetdate, createdby, admsite_code);
CREATE INDEX IF NOT EXISTS psite_packet_lk01 ON main.psite_packet USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_packet_lk02 ON main.psite_packet USING btree (salrtmain_rtcode);
CREATE INDEX IF NOT EXISTS psite_packet_lk03 ON main.psite_packet USING btree (in_psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_packet_lk04 ON main.psite_packet USING btree (out_psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_packet_lk05 ON main.psite_packet USING btree (repln_admsite_code);
CREATE INDEX IF NOT EXISTS psite_packet_lk06 ON main.psite_packet USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_packet_u02 ON main.psite_packet USING btree ((
CASE
    WHEN (intgrefid IS NOT NULL) THEN ((createdby)::text || (intgrefid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS psite_packetitem_pk ON main.psite_packetitem USING btree (id);
CREATE INDEX IF NOT EXISTS psite_packetitem_lk01 ON main.psite_packetitem USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_packetitem_lk02 ON main.psite_packetitem USING btree (salorddet_code);
CREATE INDEX IF NOT EXISTS psite_packetitem_lk03 ON main.psite_packetitem USING btree (salordmain_ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_pluginalloc_pk ON main.psite_pluginalloc USING btree (code);
CREATE INDEX IF NOT EXISTS psite_pluginalloc_lk01 ON main.psite_pluginalloc USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_pluginalloc_lk02 ON main.psite_pluginalloc USING btree (pluginconfig_code);
CREATE INDEX IF NOT EXISTS psite_pluginalloc_lk03 ON main.psite_pluginalloc USING btree (plugin_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_pluginconfigrepo_pk ON main.psite_pluginconfigrepo USING btree (code);
CREATE INDEX IF NOT EXISTS psite_pluginconfigrepo_lk01 ON main.psite_pluginconfigrepo USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_pluginconfigrepo_lk02 ON main.psite_pluginconfigrepo USING btree (plugin_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posapiconfig_pk ON main.psite_posapiconfig USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbill_pk ON main.psite_posbill USING btree (code);
CREATE INDEX IF NOT EXISTS i_posbill_entdt_sitecode ON main.psite_posbill USING btree (admsite_code, ((billdate)::date));
CREATE INDEX IF NOT EXISTS i_psite_posbill_guid ON main.psite_posbill USING btree (guid);
CREATE INDEX IF NOT EXISTS psite_posbill_i01 ON main.psite_posbill USING btree (((billdate)::date));
CREATE INDEX IF NOT EXISTS psite_posbill_lk01 ON main.psite_posbill USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk02 ON main.psite_posbill USING btree (mpsite_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk03 ON main.psite_posbill USING btree (store_loccode);
CREATE INDEX IF NOT EXISTS psite_posbill_lk04 ON main.psite_posbill USING btree (lpbenefit_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk05 ON main.psite_posbill USING btree (lpbenefit_point_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk06 ON main.psite_posbill USING btree (lpcardno);
CREATE INDEX IF NOT EXISTS psite_posbill_lk07 ON main.psite_posbill USING btree (lpcard_benefit_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk08 ON main.psite_posbill USING btree (lpcard_benefit_point_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk09 ON main.psite_posbill USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk10 ON main.psite_posbill USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk11 ON main.psite_posbill USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk12 ON main.psite_posbill USING btree (owner_gstin_state_code);
CREATE INDEX IF NOT EXISTS psite_posbill_lk13 ON main.psite_posbill USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbill_u01 ON main.psite_posbill USING btree (admsite_code, ((billdate)::date), billno);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbill_u02 ON main.psite_posbill USING btree (COALESCE(guid, code), admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillcnop_pk ON main.psite_posbillcnop USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillcnop_u01 ON main.psite_posbillcnop USING btree (cnno, admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillcnop_lk01 ON main.psite_posbillcnop USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillcnop_lk02 ON main.psite_posbillcnop USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_posbillcnop_lk03 ON main.psite_posbillcnop USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_posbillcnop_lk04 ON main.psite_posbillcnop USING btree (psite_customer_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbilldnop_pk ON main.psite_posbilldnop USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbilldnop_u01 ON main.psite_posbilldnop USING btree (dnno, admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbilldnop_lk01 ON main.psite_posbilldnop USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbilldnop_lk02 ON main.psite_posbilldnop USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_posbilldnop_lk03 ON main.psite_posbilldnop USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_posbilldnop_lk04 ON main.psite_posbilldnop USING btree (psite_customer_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillitem_park_pk ON main.psite_posbillitem_park USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillitem_park_lk01 ON main.psite_posbillitem_park USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillitem_park_lk02 ON main.psite_posbillitem_park USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_posbillitem_park_lk03 ON main.psite_posbillitem_park USING btree (ipsite_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbillitem_park_lk04 ON main.psite_posbillitem_park USING btree (orderitemid);
CREATE INDEX IF NOT EXISTS psite_posbillitem_park_lk05 ON main.psite_posbillitem_park USING btree (psite_posbill_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posorder_pk ON main.psite_posorder USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posorder_lk01 ON main.psite_posorder USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posorder_lk02 ON main.psite_posorder USING btree (salordmain_ordcode);
CREATE INDEX IF NOT EXISTS psite_posorder_lk03 ON main.psite_posorder USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posordercancel_pk ON main.psite_posordercancel USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posordercancel_lk01 ON main.psite_posordercancel USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posordercancel_lk02 ON main.psite_posordercancel USING btree (icode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posplugin_hook_map_pk ON main.psite_posplugin_hook_map USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posplugin_hook_map_lk01 ON main.psite_posplugin_hook_map USING btree (hooktype_code);
CREATE INDEX IF NOT EXISTS psite_posplugin_hook_map_lk02 ON main.psite_posplugin_hook_map USING btree (plugin_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posstlm_pk ON main.psite_posstlm USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posstlm_u01 ON main.psite_posstlm USING btree (admsite_code, stlmfor);
CREATE INDEX IF NOT EXISTS psite_posstlm_lk01 ON main.psite_posstlm USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posstlm_lk02 ON main.psite_posstlm USING btree (psite_reason_code);
CREATE INDEX IF NOT EXISTS psite_posstlm_lk03 ON main.psite_posstlm USING btree (ho_settledby);
CREATE UNIQUE INDEX IF NOT EXISTS psite_ptchead_pk ON main.psite_ptchead USING btree (code);
CREATE INDEX IF NOT EXISTS psite_ptchead_lk01 ON main.psite_ptchead USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_ptchead_lk02 ON main.psite_ptchead USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS psite_ptchead_u01 ON main.psite_ptchead USING btree (upper((name)::text));
CREATE UNIQUE INDEX IF NOT EXISTS psite_ptchead_assign_pk ON main.psite_ptchead_assign USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_ptchead_assign_u01 ON main.psite_ptchead_assign USING btree (admsite_code, psite_ptchead_code);
CREATE INDEX IF NOT EXISTS psite_ptchead_assign_lk01 ON main.psite_ptchead_assign USING btree (glcode);
CREATE INDEX IF NOT EXISTS psite_ptchead_assign_lk02 ON main.psite_ptchead_assign USING btree (slcode);
CREATE INDEX IF NOT EXISTS psite_ptchead_assign_lk03 ON main.psite_ptchead_assign USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_ptchead_assign_lk04 ON main.psite_ptchead_assign USING btree (psite_ptchead_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_reason_pk ON main.psite_reason USING btree (code);
CREATE INDEX IF NOT EXISTS psite_reason_lk01 ON main.psite_reason USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_reason_lk02 ON main.psite_reason USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS code_salesperson_pk ON main.psite_salesperson_assign USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_salesperson_assign_u01 ON main.psite_salesperson_assign USING btree (psite_global_salesperson_code, admsite_code);
CREATE INDEX IF NOT EXISTS psite_salesperson_assign_lk01 ON main.psite_salesperson_assign USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_salesperson_assign_lk02 ON main.psite_salesperson_assign USING btree (psite_global_salesperson_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_si_ass_pk ON main.psite_si_assign USING btree (code);
CREATE INDEX IF NOT EXISTS assort_assign_u01 ON main.psite_si_assign USING btree (admsite_code, priority);
CREATE INDEX IF NOT EXISTS psite_si_assign_lk01 ON main.psite_si_assign USING btree (allocatedby);
CREATE INDEX IF NOT EXISTS psite_si_assign_lk02 ON main.psite_si_assign USING btree (approvedby);
CREATE INDEX IF NOT EXISTS psite_si_assign_lk03 ON main.psite_si_assign USING btree (closedby);
CREATE INDEX IF NOT EXISTS psite_si_assign_lk04 ON main.psite_si_assign USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_si_assign_lk05 ON main.psite_si_assign USING btree (assortment_code);
CREATE INDEX IF NOT EXISTS psite_si_assign_lk06 ON main.psite_si_assign USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_stfdoc_pk ON main.psite_stfdoc USING btree (code);
CREATE INDEX IF NOT EXISTS psite_stfdoc_lk01 ON main.psite_stfdoc USING btree (in_psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_stfdoc_lk02 ON main.psite_stfdoc USING btree (out_psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_stfdoc_lk03 ON main.psite_stfdoc USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS pk_stfitem_code ON main.psite_stfitem USING btree (code);
CREATE INDEX IF NOT EXISTS psite_stfitem_lk01 ON main.psite_stfitem USING btree (psite_stfdoc_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_stlm_param_acc_pk ON main.psite_stlm_param_acc USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_stlm_param_acc_i01 ON main.psite_stlm_param_acc USING btree (upper((name)::text));
CREATE INDEX IF NOT EXISTS psite_stlm_param_acc_lk01 ON main.psite_stlm_param_acc USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_stlm_param_acc_lk02 ON main.psite_stlm_param_acc USING btree (glcode);
CREATE INDEX IF NOT EXISTS psite_stlm_param_acc_lk03 ON main.psite_stlm_param_acc USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS psite_stlm_param_acc_lk04 ON main.psite_stlm_param_acc USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_stlm_param_oth_pk ON main.psite_stlm_param_oth USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_stlm_param_oth_i01 ON main.psite_stlm_param_oth USING btree (upper((name)::text));
CREATE INDEX IF NOT EXISTS psite_stlm_param_oth_lk01 ON main.psite_stlm_param_oth USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_stlm_param_oth_lk02 ON main.psite_stlm_param_oth USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS p_pswev_code ON main.psite_web_event USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_pswev_composite ON main.psite_web_event USING btree (eventtype, refcode);
CREATE INDEX IF NOT EXISTS psite_web_event_lk01 ON main.psite_web_event USING btree (eventtype);
CREATE UNIQUE INDEX IF NOT EXISTS pur_price_chart_pk ON main.pur_price_chart USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS pur_price_chart_u01 ON main.pur_price_chart USING btree (pcode, icode, effective_date);
CREATE INDEX IF NOT EXISTS pur_price_chart_icode ON main.pur_price_chart USING btree (icode);
CREATE INDEX IF NOT EXISTS pur_price_chart_lk01 ON main.pur_price_chart USING btree (ecode);
CREATE INDEX IF NOT EXISTS pur_price_chart_lk02 ON main.pur_price_chart USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS pur_price_chart_pcode ON main.pur_price_chart USING btree (pcode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvchg_pk ON main.purinvchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS purinvchg_u01 ON main.purinvchg USING btree (invcode, chgcode, rate, sign, glcode, gl_cc_appl, slcode, basis, istax, source, formulae);
CREATE INDEX IF NOT EXISTS purinvchg_lk01 ON main.purinvchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purinvchg_lk02 ON main.purinvchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS purinvchg_lk03 ON main.purinvchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS purinvchg_lk04 ON main.purinvchg USING btree (invcode);
CREATE INDEX IF NOT EXISTS purinvchg_lk05 ON main.purinvchg USING btree (ycode);
CREATE INDEX IF NOT EXISTS purinvchg_lk06 ON main.purinvchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvchg_item_pk ON main.purinvchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS purinvchg_item_lk01 ON main.purinvchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purinvchg_item_lk02 ON main.purinvchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS purinvchg_item_lk03 ON main.purinvchg_item USING btree (invcode);
CREATE INDEX IF NOT EXISTS purinvchg_item_lk04 ON main.purinvchg_item USING btree (purinvdet_code);
CREATE INDEX IF NOT EXISTS purinvchg_item_lk05 ON main.purinvchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvdet_pk ON main.purinvdet USING btree (code);
CREATE INDEX IF NOT EXISTS purinvdet_lk01 ON main.purinvdet USING btree (grccode);
CREATE INDEX IF NOT EXISTS purinvdet_lk02 ON main.purinvdet USING btree (icode);
CREATE INDEX IF NOT EXISTS purinvdet_lk03 ON main.purinvdet USING btree (invcode);
CREATE INDEX IF NOT EXISTS purinvdet_lk04 ON main.purinvdet USING btree (invgrcdet_code);
CREATE INDEX IF NOT EXISTS purinvdet_lk05 ON main.purinvdet USING btree (excisemain_code);
CREATE INDEX IF NOT EXISTS purinvdet_lk06 ON main.purinvdet USING btree (glcode);
CREATE INDEX IF NOT EXISTS purinvdet_lk07 ON main.purinvdet USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvjrnchg_c09 ON main.purinvjrnchg USING btree (jrncode, chgcode, rate, sign, glcode, gl_cc_appl, slcode, basis, istax, source, formulae);
CREATE UNIQUE INDEX IF NOT EXISTS purinvjrnchg_pkey ON main.purinvjrnchg USING btree (code);
CREATE INDEX IF NOT EXISTS purinvjrnchg_lk01 ON main.purinvjrnchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purinvjrnchg_lk02 ON main.purinvjrnchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS purinvjrnchg_lk03 ON main.purinvjrnchg USING btree (jrncode);
CREATE INDEX IF NOT EXISTS purinvjrnchg_lk04 ON main.purinvjrnchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvjrnchg_item_pkey ON main.purinvjrnchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS purinvjrnchg_item_lk01 ON main.purinvjrnchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purinvjrnchg_item_lk02 ON main.purinvjrnchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS purinvjrnchg_item_lk03 ON main.purinvjrnchg_item USING btree (jrncode);
CREATE INDEX IF NOT EXISTS purinvjrnchg_item_lk04 ON main.purinvjrnchg_item USING btree (purinvjrndet_code);
CREATE INDEX IF NOT EXISTS purinvjrnchg_item_lk05 ON main.purinvjrnchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvjrndet_pkey ON main.purinvjrndet USING btree (code);
CREATE INDEX IF NOT EXISTS purinvjrndet_lk01 ON main.purinvjrndet USING btree (icode);
CREATE INDEX IF NOT EXISTS purinvjrndet_lk02 ON main.purinvjrndet USING btree (jrncode);
CREATE INDEX IF NOT EXISTS purinvjrndet_lk03 ON main.purinvjrndet USING btree (purinvdet_code);
CREATE INDEX IF NOT EXISTS purinvjrndet_lk04 ON main.purinvjrndet USING btree (glcode);
CREATE INDEX IF NOT EXISTS purinvjrndet_lk05 ON main.purinvjrndet USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvjrnmain_pk ON main.purinvjrnmain USING btree (jrncode);
CREATE UNIQUE INDEX IF NOT EXISTS purinvjrnmain_u01 ON main.purinvjrnmain USING btree (scheme_docno, jrntype, admsite_code_owner);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk01 ON main.purinvjrnmain USING btree (admgstjrnreason_code);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk02 ON main.purinvjrnmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk03 ON main.purinvjrnmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk04 ON main.purinvjrnmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk05 ON main.purinvjrnmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk06 ON main.purinvjrnmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk07 ON main.purinvjrnmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk08 ON main.purinvjrnmain USING btree (jrnglcode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk09 ON main.purinvjrnmain USING btree (jrnslcode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk10 ON main.purinvjrnmain USING btree (last_modified_by);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk11 ON main.purinvjrnmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk12 ON main.purinvjrnmain USING btree (pglcode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk13 ON main.purinvjrnmain USING btree (purinvmain_code);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk14 ON main.purinvjrnmain USING btree (purtermcode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk15 ON main.purinvjrnmain USING btree (ref_admsite_code);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk16 ON main.purinvjrnmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS purinvjrnmain_lk17 ON main.purinvjrnmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS p_purinvmain_invcode ON main.purinvmain USING btree (invcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk01 ON main.purinvmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk02 ON main.purinvmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS purinvmain_lk03 ON main.purinvmain USING btree (glcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk04 ON main.purinvmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS purinvmain_lk05 ON main.purinvmain USING btree (lgtcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk06 ON main.purinvmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk07 ON main.purinvmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS purinvmain_lk08 ON main.purinvmain USING btree (slcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk09 ON main.purinvmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS purinvmain_lk10 ON main.purinvmain USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS purinvmain_lk11 ON main.purinvmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS purinvmain_lk12 ON main.purinvmain USING btree (pglcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk13 ON main.purinvmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS purinvmain_lk14 ON main.purinvmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk15 ON main.purinvmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS purinvmain_lk16 ON main.purinvmain USING btree (ref_admsite_code);
CREATE INDEX IF NOT EXISTS purinvmain_lk17 ON main.purinvmain USING btree (purtermcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk18 ON main.purinvmain USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS purinvmain_lk19 ON main.purinvmain USING btree (owner_gstin_state_code);
CREATE INDEX IF NOT EXISTS purinvmain_lk20 ON main.purinvmain USING btree (tdsglcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk21 ON main.purinvmain USING btree (tdsslcode);
CREATE INDEX IF NOT EXISTS purinvmain_lk22 ON main.purinvmain USING btree (tdssrccode);
CREATE INDEX IF NOT EXISTS purinvmain_lk23 ON main.purinvmain USING btree (tdstypecode);
CREATE UNIQUE INDEX IF NOT EXISTS purordchg_pk ON main.purordchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_purordchg_ord_chg_rate ON main.purordchg USING btree (ordcode, chgcode, rate);
CREATE INDEX IF NOT EXISTS purordchg_lk01 ON main.purordchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purordchg_lk02 ON main.purordchg USING btree (ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS purordchg_item_pk ON main.purordchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS purordchg_item_lk01 ON main.purordchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purordchg_item_lk02 ON main.purordchg_item USING btree (ordcode);
CREATE INDEX IF NOT EXISTS purordchg_item_lk03 ON main.purordchg_item USING btree (purorddet_code);
CREATE UNIQUE INDEX IF NOT EXISTS purordcnldet_pk ON main.purordcnldet USING btree (code);
CREATE INDEX IF NOT EXISTS purordcnldet_lk01 ON main.purordcnldet USING btree (cnlcode);
CREATE INDEX IF NOT EXISTS purordcnldet_lk02 ON main.purordcnldet USING btree (icode);
CREATE INDEX IF NOT EXISTS purordcnldet_lk03 ON main.purordcnldet USING btree (ordcode);
CREATE INDEX IF NOT EXISTS purordcnldet_lk04 ON main.purordcnldet USING btree (invsetmain_code);
CREATE INDEX IF NOT EXISTS purordcnldet_lk05 ON main.purordcnldet USING btree (purorddet_code);
CREATE UNIQUE INDEX IF NOT EXISTS u_purordcnldet_composite_1 ON main.purordcnldet USING btree (cnlcode, ordcode, icode, rate, invsetmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_purordcnlmain_cnlcode ON main.purordcnlmain USING btree (cnlcode);
CREATE INDEX IF NOT EXISTS purordcnlmain_lk01 ON main.purordcnlmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS purordcnlmain_lk02 ON main.purordcnlmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS purordcnlmain_lk03 ON main.purordcnlmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS purordcnlmain_lk04 ON main.purordcnlmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS purordcnlmain_lk05 ON main.purordcnlmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS purordcnlmain_lk06 ON main.purordcnlmain USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS purorddet_pk ON main.purorddet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_purorddet_ord_icode_set_rate ON main.purorddet USING btree (ordcode, icode, rate, invsetmain_code);
CREATE INDEX IF NOT EXISTS purorddet_lk01 ON main.purorddet USING btree (icode);
CREATE INDEX IF NOT EXISTS purorddet_lk02 ON main.purorddet USING btree (ordcode);
CREATE INDEX IF NOT EXISTS purorddet_lk03 ON main.purorddet USING btree (excisemain_code);
CREATE UNIQUE INDEX IF NOT EXISTS purorddet_delivery_pk ON main.purorddet_delivery USING btree (code);
CREATE INDEX IF NOT EXISTS purorddet_delivery_01 ON main.purorddet_delivery USING btree (purorddet_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_purordmain_ordcode ON main.purordmain USING btree (ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_purordmain_dataversion ON main.purordmain USING btree (dataversion);
CREATE INDEX IF NOT EXISTS purordmain_lk01 ON main.purordmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS purordmain_lk02 ON main.purordmain USING btree (authorcode);
CREATE INDEX IF NOT EXISTS purordmain_lk03 ON main.purordmain USING btree (desccmpcode);
CREATE INDEX IF NOT EXISTS purordmain_lk04 ON main.purordmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS purordmain_lk05 ON main.purordmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS purordmain_lk06 ON main.purordmain USING btree (ordcmpcode);
CREATE INDEX IF NOT EXISTS purordmain_lk07 ON main.purordmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS purordmain_lk08 ON main.purordmain USING btree (trpcode);
CREATE INDEX IF NOT EXISTS purordmain_lk09 ON main.purordmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS purordmain_lk10 ON main.purordmain USING btree (creatorcmpcode);
CREATE INDEX IF NOT EXISTS purordmain_lk11 ON main.purordmain USING btree (txncode);
CREATE INDEX IF NOT EXISTS purordmain_lk12 ON main.purordmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS purordmain_lk13 ON main.purordmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS purordmain_lk14 ON main.purordmain USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS purordmain_lk15 ON main.purordmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS purordmain_lk16 ON main.purordmain USING btree (mrchndsrcode);
CREATE INDEX IF NOT EXISTS purordmain_lk17 ON main.purordmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS purordmain_lk18 ON main.purordmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS purordmain_lk19 ON main.purordmain USING btree (purtermcode);
CREATE INDEX IF NOT EXISTS purordmain_lk20 ON main.purordmain USING btree (intgcode);
CREATE UNIQUE INDEX IF NOT EXISTS purordschedule_pk ON main.purordschedule USING btree (code);
CREATE INDEX IF NOT EXISTS purordschedule_lk01 ON main.purordschedule USING btree (ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS purordset_code_pk ON main.purordset USING btree (code);
CREATE INDEX IF NOT EXISTS purordset_lk01 ON main.purordset USING btree (invsetmain_code);
CREATE INDEX IF NOT EXISTS purordset_lk02 ON main.purordset USING btree (ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS purordshipdet_pk ON main.purordshipdet USING btree (code);
CREATE INDEX IF NOT EXISTS purordshipdet_lk01 ON main.purordshipdet USING btree (icode);
CREATE INDEX IF NOT EXISTS purordshipdet_lk02 ON main.purordshipdet USING btree (shipcode);
CREATE INDEX IF NOT EXISTS purordshipdet_lk03 ON main.purordshipdet USING btree (invsetmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS purreqdet_pk ON main.purreqdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_purreqdet_reqcode_icode ON main.purreqdet USING btree (reqcode, icode);
CREATE INDEX IF NOT EXISTS purreqdet_lk01 ON main.purreqdet USING btree (icode);
CREATE INDEX IF NOT EXISTS purreqdet_lk02 ON main.purreqdet USING btree (reqcode);
CREATE UNIQUE INDEX IF NOT EXISTS purrtchg_pk ON main.purrtchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS purrtchg_u01 ON main.purrtchg USING btree (rtcode, chgcode, rate, glcode, slcode, formulae, sign, istax, source, basis);
CREATE INDEX IF NOT EXISTS purrtchg_lk01 ON main.purrtchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purrtchg_lk02 ON main.purrtchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS purrtchg_lk03 ON main.purrtchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS purrtchg_lk04 ON main.purrtchg USING btree (rtcode);
CREATE INDEX IF NOT EXISTS purrtchg_lk05 ON main.purrtchg USING btree (ycode);
CREATE INDEX IF NOT EXISTS purrtchg_lk06 ON main.purrtchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS purrtchg_item_pk ON main.purrtchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS purrtchg_item_lk01 ON main.purrtchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purrtchg_item_lk02 ON main.purrtchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS purrtchg_item_lk03 ON main.purrtchg_item USING btree (purrtdet_code);
CREATE INDEX IF NOT EXISTS purrtchg_item_lk04 ON main.purrtchg_item USING btree (rtcode);
CREATE INDEX IF NOT EXISTS purrtchg_item_lk05 ON main.purrtchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS purrtdet_pk ON main.purrtdet USING btree (code);
CREATE INDEX IF NOT EXISTS purrtdet_lk01 ON main.purrtdet USING btree (grtcode);
CREATE INDEX IF NOT EXISTS purrtdet_lk02 ON main.purrtdet USING btree (icode);
CREATE INDEX IF NOT EXISTS purrtdet_lk03 ON main.purrtdet USING btree (rtcode);
CREATE INDEX IF NOT EXISTS purrtdet_lk04 ON main.purrtdet USING btree (invgrtdet_code);
CREATE INDEX IF NOT EXISTS purrtdet_lk05 ON main.purrtdet USING btree (excisemain_code);
CREATE INDEX IF NOT EXISTS purrtdet_lk06 ON main.purrtdet USING btree (glcode);
CREATE INDEX IF NOT EXISTS purrtdet_lk07 ON main.purrtdet USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_purrtmain_rtcode ON main.purrtmain USING btree (rtcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk01 ON main.purrtmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk02 ON main.purrtmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS purrtmain_lk03 ON main.purrtmain USING btree (glcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk04 ON main.purrtmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS purrtmain_lk05 ON main.purrtmain USING btree (lgtcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk06 ON main.purrtmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk07 ON main.purrtmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS purrtmain_lk08 ON main.purrtmain USING btree (slcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk09 ON main.purrtmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS purrtmain_lk10 ON main.purrtmain USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS purrtmain_lk11 ON main.purrtmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS purrtmain_lk12 ON main.purrtmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS purrtmain_lk13 ON main.purrtmain USING btree (pglcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk14 ON main.purrtmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS purrtmain_lk15 ON main.purrtmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk16 ON main.purrtmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS purrtmain_lk17 ON main.purrtmain USING btree (ref_admsite_code);
CREATE INDEX IF NOT EXISTS purrtmain_lk18 ON main.purrtmain USING btree (purtermcode);
CREATE INDEX IF NOT EXISTS purrtmain_lk19 ON main.purrtmain USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS purrtmain_lk20 ON main.purrtmain USING btree (owner_gstin_state_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_pursrv_schedule_code ON main.pursrv_schedule USING btree (code);
CREATE INDEX IF NOT EXISTS pursrv_schedule_lk01 ON main.pursrv_schedule USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS pursrv_schedule_lk02 ON main.pursrv_schedule USING btree (pursrvdet_code);
CREATE INDEX IF NOT EXISTS pursrv_schedule_lk03 ON main.pursrv_schedule USING btree (pursrvmain_code);
CREATE INDEX IF NOT EXISTS pursrv_schedule_lk04 ON main.pursrv_schedule USING btree (pursrvorddet_code);
CREATE INDEX IF NOT EXISTS pursrv_schedule_lk05 ON main.pursrv_schedule USING btree (pursrvord_schedule_code);
CREATE INDEX IF NOT EXISTS pursrv_schedule_lk06 ON main.pursrv_schedule USING btree (servicecode);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvchg_pk ON main.pursrvchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_pursrvchg_chg_rate_tds ON main.pursrvchg USING btree (srvcode, chgcode, rate, glcode, slcode, formulae, istax, source, basis, include_in_tds);
CREATE INDEX IF NOT EXISTS pursrvchg_lk01 ON main.pursrvchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS pursrvchg_lk02 ON main.pursrvchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS pursrvchg_lk03 ON main.pursrvchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS pursrvchg_lk04 ON main.pursrvchg USING btree (srvcode);
CREATE INDEX IF NOT EXISTS pursrvchg_lk05 ON main.pursrvchg USING btree (ycode);
CREATE INDEX IF NOT EXISTS pursrvchg_lk06 ON main.pursrvchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvchg_item_pk ON main.pursrvchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS pursrvchg_item_lk01 ON main.pursrvchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS pursrvchg_item_lk02 ON main.pursrvchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS pursrvchg_item_lk03 ON main.pursrvchg_item USING btree (pursrvdet_code);
CREATE INDEX IF NOT EXISTS pursrvchg_item_lk04 ON main.pursrvchg_item USING btree (slcode);
CREATE INDEX IF NOT EXISTS pursrvchg_item_lk05 ON main.pursrvchg_item USING btree (srvcode);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvdet_pk ON main.pursrvdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_pursrvdet_srv_service_gl_slc ON main.pursrvdet USING btree (servicecode, glcode, slcode, srvcode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk01 ON main.pursrvdet USING btree (glcode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk02 ON main.pursrvdet USING btree (servicecode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk03 ON main.pursrvdet USING btree (slcode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk04 ON main.pursrvdet USING btree (srvcode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk05 ON main.pursrvdet USING btree (ycode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk06 ON main.pursrvdet USING btree (taxcode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk07 ON main.pursrvdet USING btree (tdsglcode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk08 ON main.pursrvdet USING btree (tdsslcode);
CREATE INDEX IF NOT EXISTS pursrvdet_lk09 ON main.pursrvdet USING btree (tdstypecode);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvjrnchg_pk ON main.pursrvjrnchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_pursrvjrnchg_chg_rate_tds ON main.pursrvjrnchg USING btree (jrncode, chgcode, rate, glcode, slcode, formulae, istax, source, basis);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_lk01 ON main.pursrvjrnchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_lk02 ON main.pursrvjrnchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_lk03 ON main.pursrvjrnchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_lk04 ON main.pursrvjrnchg USING btree (jrncode);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_lk05 ON main.pursrvjrnchg USING btree (slcode);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_lk06 ON main.pursrvjrnchg USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvjrnchg_item_pk ON main.pursrvjrnchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_item_lk01 ON main.pursrvjrnchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_item_lk02 ON main.pursrvjrnchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_item_lk03 ON main.pursrvjrnchg_item USING btree (pursrvjrndet_code);
CREATE INDEX IF NOT EXISTS pursrvjrnchg_item_lk04 ON main.pursrvjrnchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvjrndet_pk ON main.pursrvjrndet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_pursrvjrndet_srvc_srv_gl_slc ON main.pursrvjrndet USING btree (servicecode, glcode, slcode, jrncode, pursrvdet_code);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvjrnmain_pk ON main.pursrvjrnmain USING btree (jrncode);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk01 ON main.pursrvjrnmain USING btree (admgstjrnreason_code);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk02 ON main.pursrvjrnmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk03 ON main.pursrvjrnmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk04 ON main.pursrvjrnmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk05 ON main.pursrvjrnmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk06 ON main.pursrvjrnmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk07 ON main.pursrvjrnmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk08 ON main.pursrvjrnmain USING btree (last_modified_by);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk09 ON main.pursrvjrnmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk10 ON main.pursrvjrnmain USING btree (pursrvmain_code);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk11 ON main.pursrvjrnmain USING btree (purtermcode);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk12 ON main.pursrvjrnmain USING btree (ref_admsite_code);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk13 ON main.pursrvjrnmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS pursrvjrnmain_lk14 ON main.pursrvjrnmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS p_pursrvmain_srvcode ON main.pursrvmain USING btree (srvcode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk01 ON main.pursrvmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk02 ON main.pursrvmain USING btree (jrncode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk03 ON main.pursrvmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk04 ON main.pursrvmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk05 ON main.pursrvmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk06 ON main.pursrvmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS pursrvmain_lk07 ON main.pursrvmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk08 ON main.pursrvmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS pursrvmain_lk09 ON main.pursrvmain USING btree (tdsglcode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk10 ON main.pursrvmain USING btree (tdsslcode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk11 ON main.pursrvmain USING btree (tdssrccode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk12 ON main.pursrvmain USING btree (tdstypecode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk13 ON main.pursrvmain USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS pursrvmain_lk14 ON main.pursrvmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS pursrvmain_lk15 ON main.pursrvmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk16 ON main.pursrvmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk17 ON main.pursrvmain USING btree (ref_admsite_code);
CREATE INDEX IF NOT EXISTS pursrvmain_lk18 ON main.pursrvmain USING btree (purtermcode);
CREATE INDEX IF NOT EXISTS pursrvmain_lk19 ON main.pursrvmain USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS pursrvmain_lk20 ON main.pursrvmain USING btree (owner_gstin_state_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_pursrvord_schedule_code ON main.pursrvord_schedule USING btree (code);
CREATE INDEX IF NOT EXISTS pursrvord_schedule_lk01 ON main.pursrvord_schedule USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS pursrvord_schedule_lk02 ON main.pursrvord_schedule USING btree (cnl_ecode);
CREATE INDEX IF NOT EXISTS pursrvord_schedule_lk03 ON main.pursrvord_schedule USING btree (pursrvorddet_code);
CREATE INDEX IF NOT EXISTS pursrvord_schedule_lk04 ON main.pursrvord_schedule USING btree (pursrvordmain_code);
CREATE INDEX IF NOT EXISTS pursrvord_schedule_lk05 ON main.pursrvord_schedule USING btree (servicecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_pursrvordchg_code ON main.pursrvordchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_pursrvordchg_ord_chg_rt_tds ON main.pursrvordchg USING btree (pursrvordmain_code, chgcode, rate, include_in_tds);
CREATE INDEX IF NOT EXISTS pursrvordchg_lk01 ON main.pursrvordchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS pursrvordchg_lk02 ON main.pursrvordchg USING btree (pursrvordmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS pursrvordchg_item_pk ON main.pursrvordchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS pursrvordchg_item_lk01 ON main.pursrvordchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS pursrvordchg_item_lk02 ON main.pursrvordchg_item USING btree (pursrvorddet_code);
CREATE INDEX IF NOT EXISTS pursrvordchg_item_lk03 ON main.pursrvordchg_item USING btree (pursrvordmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_pursrvorddet_code ON main.pursrvorddet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_pursrvorddt_servicecd_ordcd ON main.pursrvorddet USING btree (servicecode, pursrvordmain_code);
CREATE INDEX IF NOT EXISTS pursrvorddet_lk01 ON main.pursrvorddet USING btree (glcode);
CREATE INDEX IF NOT EXISTS pursrvorddet_lk02 ON main.pursrvorddet USING btree (slcode);
CREATE INDEX IF NOT EXISTS pursrvorddet_lk03 ON main.pursrvorddet USING btree (taxcode);
CREATE INDEX IF NOT EXISTS pursrvorddet_lk04 ON main.pursrvorddet USING btree (tdstypecode);
CREATE INDEX IF NOT EXISTS pursrvorddet_lk05 ON main.pursrvorddet USING btree (pursrvordmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_pursrvordmain_code ON main.pursrvordmain USING btree (ordcode);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk01 ON main.pursrvordmain USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk02 ON main.pursrvordmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk03 ON main.pursrvordmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk04 ON main.pursrvordmain USING btree (authorcode);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk05 ON main.pursrvordmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk06 ON main.pursrvordmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk07 ON main.pursrvordmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk08 ON main.pursrvordmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk09 ON main.pursrvordmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk10 ON main.pursrvordmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk11 ON main.pursrvordmain USING btree (tdssrc_code);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk12 ON main.pursrvordmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS pursrvordmain_lk13 ON main.pursrvordmain USING btree (purtermcode);
CREATE UNIQUE INDEX IF NOT EXISTS purtermdet_pk ON main.purtermdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_purtermdet_termcode_chgcode ON main.purtermdet USING btree (purtermmain_code, chgcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_purtermdet_termcodeoplvlseq ON main.purtermdet USING btree (purtermmain_code, operation_level, seq);
CREATE INDEX IF NOT EXISTS purtermdet_lk01 ON main.purtermdet USING btree (chgcode);
CREATE INDEX IF NOT EXISTS purtermdet_lk02 ON main.purtermdet USING btree (purtermmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS pv_filter_criteria_pk ON main.pv_filter_criteria USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS pv_filter_criteria_value_pk ON main.pv_filter_criteria_value USING btree (code);
CREATE INDEX IF NOT EXISTS pv_filter_criteria_value_lk01 ON main.pv_filter_criteria_value USING btree (criteria_code);
CREATE UNIQUE INDEX IF NOT EXISTS pk_reportlayout ON main.reportlayout USING btree (layoutid);
CREATE INDEX IF NOT EXISTS reportlayout_lk01 ON main.reportlayout USING btree (createdbyid);
CREATE INDEX IF NOT EXISTS reportlayout_lk02 ON main.reportlayout USING btree (lastmodifiedbyid);
CREATE UNIQUE INDEX IF NOT EXISTS rolemenu_pk ON main.rolemenu USING btree (id);
CREATE INDEX IF NOT EXISTS rolemenu_lk01 ON main.rolemenu USING btree (mdmenuid);
CREATE INDEX IF NOT EXISTS rolemenu_lk02 ON main.rolemenu USING btree (roleid);
CREATE INDEX IF NOT EXISTS rolemenu_lk03 ON main.rolemenu USING btree (mdmenushortcode);
CREATE UNIQUE INDEX IF NOT EXISTS rolemenuoperation_pk ON main.rolemenuoperation USING btree (id);
CREATE INDEX IF NOT EXISTS rolemenuoperation_lk01 ON main.rolemenuoperation USING btree (mdappoperationid);
CREATE INDEX IF NOT EXISTS rolemenuoperation_lk02 ON main.rolemenuoperation USING btree (rolemenuid);
CREATE UNIQUE INDEX IF NOT EXISTS p_salchg_salchgcode ON main.salchg USING btree (salchgcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_salchg_salchgname ON main.salchg USING btree (salchgname);
CREATE INDEX IF NOT EXISTS salchg_lk01 ON main.salchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS salchg_lk02 ON main.salchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS salchg_lk03 ON main.salchg USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS salchg_lk04 ON main.salchg USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS salchg_lk05 ON main.salchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salcsdet_pk ON main.salcsdet USING btree (code);
CREATE INDEX IF NOT EXISTS salcsdet_lk01 ON main.salcsdet USING btree (cscode);
CREATE INDEX IF NOT EXISTS salcsdet_lk02 ON main.salcsdet USING btree (icode);
CREATE INDEX IF NOT EXISTS salcsdet_lk03 ON main.salcsdet USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS salcsdet_lk04 ON main.salcsdet USING btree (glcode);
CREATE INDEX IF NOT EXISTS salcsdet_lk05 ON main.salcsdet USING btree (slcode);
CREATE INDEX IF NOT EXISTS salcsdet_lk06 ON main.salcsdet USING btree (intg_refinvoicedetid);
CREATE INDEX IF NOT EXISTS salcsdet_lk07 ON main.salcsdet USING btree (invpicklistmain_code);
CREATE INDEX IF NOT EXISTS salcsdet_lk08 ON main.salcsdet USING btree (secondarysupplyparenticode);
CREATE UNIQUE INDEX IF NOT EXISTS p_salcsmain_cscode ON main.salcsmain USING btree (cscode);
CREATE UNIQUE INDEX IF NOT EXISTS salcsmain_u02 ON main.salcsmain USING btree (scheme_docno, csdate, ecode, admsite_code);
CREATE INDEX IF NOT EXISTS i_salcsmain_site_owner ON main.salcsmain USING btree (admsite_code_owner);
CREATE UNIQUE INDEX IF NOT EXISTS salcsmain_idx01 ON main.salcsmain USING btree (((csdate)::date), scheme_docno, admsite_code, gds_entity_id);
CREATE INDEX IF NOT EXISTS salcsmain_lk01 ON main.salcsmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS salcsmain_lk02 ON main.salcsmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk03 ON main.salcsmain USING btree (debtors_glcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk04 ON main.salcsmain USING btree (consignment_glcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk05 ON main.salcsmain USING btree (consignment_trnsfr_glcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk06 ON main.salcsmain USING btree (consignment_trnsfr_slcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk07 ON main.salcsmain USING btree (consignment_sales_glcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk08 ON main.salcsmain USING btree (consignment_sales_slcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk09 ON main.salcsmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS salcsmain_lk10 ON main.salcsmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS salcsmain_lk11 ON main.salcsmain USING btree (outloccode);
CREATE INDEX IF NOT EXISTS salcsmain_lk12 ON main.salcsmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS salcsmain_lk13 ON main.salcsmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salcsmain_lk14 ON main.salcsmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS salcsmain_lk15 ON main.salcsmain USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS salcsmain_lk16 ON main.salcsmain USING btree (roundoff_glcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk17 ON main.salcsmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS salcsmain_lk18 ON main.salcsmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS salcsmain_lk19 ON main.salcsmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS salcsmain_lk20 ON main.salcsmain USING btree (psite_customer_code);
CREATE INDEX IF NOT EXISTS salcsmain_lk21 ON main.salcsmain USING btree (gds_entity_id);
CREATE INDEX IF NOT EXISTS salcsmain_lk22 ON main.salcsmain USING btree (order_admsite_code);
CREATE INDEX IF NOT EXISTS salcsmain_lk23 ON main.salcsmain USING btree (damaged_loccode);
CREATE INDEX IF NOT EXISTS salcsmain_lk24 ON main.salcsmain USING btree (intg_refinvoiceid);
CREATE INDEX IF NOT EXISTS salcsmain_lk25 ON main.salcsmain USING btree (return_loccode);
CREATE UNIQUE INDEX IF NOT EXISTS salcsmain_u01 ON main.salcsmain USING btree ((
CASE
    WHEN (intg_invoiceid IS NOT NULL) THEN ((ecode)::text || (intg_invoiceid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS salinvchg_pk ON main.salinvchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_salinvchg_inv_chg_rate ON main.salinvchg USING btree (invcode, salchgcode, rate, sign, glcode, gl_cc_appl, slcode, basis, istax, source, formulae);
CREATE INDEX IF NOT EXISTS salinvchg_lk01 ON main.salinvchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS salinvchg_lk02 ON main.salinvchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS salinvchg_lk03 ON main.salinvchg USING btree (invcode);
CREATE INDEX IF NOT EXISTS salinvchg_lk04 ON main.salinvchg USING btree (salchgcode);
CREATE INDEX IF NOT EXISTS salinvchg_lk05 ON main.salinvchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salinvchg_item_pk ON main.salinvchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS salinvchg_item_lk01 ON main.salinvchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS salinvchg_item_lk02 ON main.salinvchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS salinvchg_item_lk03 ON main.salinvchg_item USING btree (invcode);
CREATE INDEX IF NOT EXISTS salinvchg_item_lk04 ON main.salinvchg_item USING btree (salinvdet_code);
CREATE INDEX IF NOT EXISTS salinvchg_item_lk05 ON main.salinvchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salinvdet_pk ON main.salinvdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS salinvdet_u01 ON main.salinvdet USING btree (invdcdet_code);
CREATE INDEX IF NOT EXISTS i_salinvdet_family_code ON main.salinvdet USING btree (ref_family_code);
CREATE INDEX IF NOT EXISTS salinvdet_lk01 ON main.salinvdet USING btree (dccode);
CREATE INDEX IF NOT EXISTS salinvdet_lk02 ON main.salinvdet USING btree (icode);
CREATE INDEX IF NOT EXISTS salinvdet_lk03 ON main.salinvdet USING btree (invcode);
CREATE INDEX IF NOT EXISTS salinvdet_lk04 ON main.salinvdet USING btree (outloccode);
CREATE INDEX IF NOT EXISTS salinvdet_lk05 ON main.salinvdet USING btree (excisemain_code);
CREATE UNIQUE INDEX IF NOT EXISTS salinvdet_consolidate_pk ON main.salinvdet_consolidate USING btree (code);
CREATE INDEX IF NOT EXISTS salinvdet_consolidate_lk01 ON main.salinvdet_consolidate USING btree (icode);
CREATE INDEX IF NOT EXISTS salinvdet_consolidate_lk02 ON main.salinvdet_consolidate USING btree (invcode);
CREATE INDEX IF NOT EXISTS salinvdet_consolidate_lk03 ON main.salinvdet_consolidate USING btree (outloccode);
CREATE UNIQUE INDEX IF NOT EXISTS salinvjrnchg_c09 ON main.salinvjrnchg USING btree (jrncode, salchgcode, rate, sign, glcode, gl_cc_appl, slcode, basis, istax, source, formulae);
CREATE UNIQUE INDEX IF NOT EXISTS salinvjrnchg_pkey ON main.salinvjrnchg USING btree (code);
CREATE INDEX IF NOT EXISTS salinvjrnchg_lk01 ON main.salinvjrnchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS salinvjrnchg_lk02 ON main.salinvjrnchg USING btree (jrncode);
CREATE INDEX IF NOT EXISTS salinvjrnchg_lk03 ON main.salinvjrnchg USING btree (salchgcode);
CREATE INDEX IF NOT EXISTS salinvjrnchg_lk04 ON main.salinvjrnchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salinvjrnchg_item_pkey ON main.salinvjrnchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS salinvjrnchg_item_lk01 ON main.salinvjrnchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS salinvjrnchg_item_lk02 ON main.salinvjrnchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS salinvjrnchg_item_lk03 ON main.salinvjrnchg_item USING btree (jrncode);
CREATE INDEX IF NOT EXISTS salinvjrnchg_item_lk04 ON main.salinvjrnchg_item USING btree (salinvjrndet_code);
CREATE INDEX IF NOT EXISTS salinvjrnchg_item_lk05 ON main.salinvjrnchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salinvjrndet_pkey ON main.salinvjrndet USING btree (code);
CREATE INDEX IF NOT EXISTS salinvjrndet_lk01 ON main.salinvjrndet USING btree (icode);
CREATE INDEX IF NOT EXISTS salinvjrndet_lk02 ON main.salinvjrndet USING btree (jrncode);
CREATE INDEX IF NOT EXISTS salinvjrndet_lk03 ON main.salinvjrndet USING btree (salinvdet_code);
CREATE INDEX IF NOT EXISTS salinvjrndet_lk04 ON main.salinvjrndet USING btree (glcode);
CREATE INDEX IF NOT EXISTS salinvjrndet_lk05 ON main.salinvjrndet USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salinvjrnmain_pk ON main.salinvjrnmain USING btree (jrncode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk03 ON main.salinvjrnmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk01 ON main.salinvjrnmain USING btree (admgstjrnreason_code);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk02 ON main.salinvjrnmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk04 ON main.salinvjrnmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk05 ON main.salinvjrnmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk06 ON main.salinvjrnmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk07 ON main.salinvjrnmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk08 ON main.salinvjrnmain USING btree (jrnglcode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk09 ON main.salinvjrnmain USING btree (jrnslcode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk10 ON main.salinvjrnmain USING btree (last_modified_by);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk11 ON main.salinvjrnmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk12 ON main.salinvjrnmain USING btree (pglcode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk13 ON main.salinvjrnmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk14 ON main.salinvjrnmain USING btree (salinvmain_code);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk15 ON main.salinvjrnmain USING btree (saltermcode);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk16 ON main.salinvjrnmain USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS salinvjrnmain_lk17 ON main.salinvjrnmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS p_salinvmain_invcode ON main.salinvmain USING btree (invcode);
CREATE UNIQUE INDEX IF NOT EXISTS salinvmain_u01 ON main.salinvmain USING btree (scheme_docno, docdt, ecode, admsite_code_owner);
CREATE INDEX IF NOT EXISTS salinvmain_lk01 ON main.salinvmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk02 ON main.salinvmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salinvmain_lk03 ON main.salinvmain USING btree (glcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk04 ON main.salinvmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS salinvmain_lk05 ON main.salinvmain USING btree (lgtcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk06 ON main.salinvmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk07 ON main.salinvmain USING btree (saltermcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk08 ON main.salinvmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS salinvmain_lk09 ON main.salinvmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS salinvmain_lk10 ON main.salinvmain USING btree (trpcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk11 ON main.salinvmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS salinvmain_lk12 ON main.salinvmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS salinvmain_lk13 ON main.salinvmain USING btree (inloccode);
CREATE INDEX IF NOT EXISTS salinvmain_lk14 ON main.salinvmain USING btree (pglcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk15 ON main.salinvmain USING btree (slcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk16 ON main.salinvmain USING btree (admou_code_in);
CREATE INDEX IF NOT EXISTS salinvmain_lk17 ON main.salinvmain USING btree (authorize_ecode);
CREATE INDEX IF NOT EXISTS salinvmain_lk18 ON main.salinvmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS salinvmain_lk19 ON main.salinvmain USING btree (pslcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk20 ON main.salinvmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk21 ON main.salinvmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS salinvmain_lk22 ON main.salinvmain USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS salinvmain_lk23 ON main.salinvmain USING btree (pricelistcode);
CREATE INDEX IF NOT EXISTS salinvmain_lk24 ON main.salinvmain USING btree (intgcode);
CREATE UNIQUE INDEX IF NOT EXISTS salordchg_pk ON main.salordchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_salordchg_ordcd_chgcd_rate ON main.salordchg USING btree (ordcode, chgcode, rate);
CREATE INDEX IF NOT EXISTS salordchg_lk01 ON main.salordchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS salordchg_lk02 ON main.salordchg USING btree (ordcode);
CREATE INDEX IF NOT EXISTS salordchg_lk03 ON main.salordchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS salordchg_lk04 ON main.salordchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salordchg_item_pk ON main.salordchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS salordchg_item_lk01 ON main.salordchg_item USING btree (ordcode);
CREATE INDEX IF NOT EXISTS salordchg_item_lk02 ON main.salordchg_item USING btree (salorddet_code);
CREATE INDEX IF NOT EXISTS salordchg_item_lk03 ON main.salordchg_item USING btree (salchgcode);
CREATE INDEX IF NOT EXISTS salordchg_item_lk04 ON main.salordchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS salordchg_item_lk05 ON main.salordchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salordcnldet_pk ON main.salordcnldet USING btree (code);
CREATE INDEX IF NOT EXISTS salordcnldet_lk01 ON main.salordcnldet USING btree (cnlcode);
CREATE INDEX IF NOT EXISTS salordcnldet_lk02 ON main.salordcnldet USING btree (icode);
CREATE INDEX IF NOT EXISTS salordcnldet_lk03 ON main.salordcnldet USING btree (ordcode);
CREATE INDEX IF NOT EXISTS salordcnldet_lk04 ON main.salordcnldet USING btree (salorddet_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_salordcnlmain_cnlcode ON main.salordcnlmain USING btree (cnlcode);
CREATE INDEX IF NOT EXISTS salordcnlmain_lk01 ON main.salordcnlmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salordcnlmain_lk02 ON main.salordcnlmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS salordcnlmain_lk03 ON main.salordcnlmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS salordcnlmain_lk04 ON main.salordcnlmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS salordcnlmain_lk05 ON main.salordcnlmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS salordcnlmain_lk06 ON main.salordcnlmain USING btree (admsite_code_owner);
CREATE UNIQUE INDEX IF NOT EXISTS salorddet_pk ON main.salorddet USING btree (code);
CREATE INDEX IF NOT EXISTS salorddet_lk01 ON main.salorddet USING btree (icode);
CREATE INDEX IF NOT EXISTS salorddet_lk02 ON main.salorddet USING btree (ordcode);
CREATE INDEX IF NOT EXISTS salorddet_lk03 ON main.salorddet USING btree (excisemain_code);
CREATE INDEX IF NOT EXISTS salorddet_lk04 ON main.salorddet USING btree (chl_master_chlcode);
CREATE INDEX IF NOT EXISTS salorddet_lk05 ON main.salorddet USING btree (chl_order_detailid);
CREATE UNIQUE INDEX IF NOT EXISTS p_salordmain_ordcode ON main.salordmain USING btree (ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS salordmain_u02 ON main.salordmain USING btree (scheme_docno, orddt, ecode, admsite_code_owner);
CREATE INDEX IF NOT EXISTS salordmain_lk01 ON main.salordmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS salordmain_lk02 ON main.salordmain USING btree (authorcode);
CREATE INDEX IF NOT EXISTS salordmain_lk03 ON main.salordmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salordmain_lk04 ON main.salordmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS salordmain_lk05 ON main.salordmain USING btree (trpcode);
CREATE INDEX IF NOT EXISTS salordmain_lk06 ON main.salordmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS salordmain_lk07 ON main.salordmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS salordmain_lk08 ON main.salordmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS salordmain_lk09 ON main.salordmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS salordmain_lk10 ON main.salordmain USING btree (pricelistcode);
CREATE INDEX IF NOT EXISTS salordmain_lk11 ON main.salordmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS salordmain_lk12 ON main.salordmain USING btree (saltermcode);
CREATE INDEX IF NOT EXISTS salordmain_lk13 ON main.salordmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS salordmain_lk14 ON main.salordmain USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS salordmain_lk15 ON main.salordmain USING btree (chl_master_chlcode);
CREATE INDEX IF NOT EXISTS salordmain_lk16 ON main.salordmain USING btree (chl_orderid);
CREATE INDEX IF NOT EXISTS salordmain_lk17 ON main.salordmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS salordmain_lk18 ON main.salordmain USING btree (heldby);
CREATE INDEX IF NOT EXISTS salordmain_lk19 ON main.salordmain USING btree (channel_code);
CREATE UNIQUE INDEX IF NOT EXISTS salordmain_u01 ON main.salordmain USING btree ((
CASE
    WHEN (intgorderid IS NOT NULL) THEN ((ecode)::text || (intgorderid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS salpricelistdet_pk ON main.salpricelistdet USING btree (code);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk01 ON main.salpricelistdet USING btree (icode);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk02 ON main.salpricelistdet USING btree (pricelistcode);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk03 ON main.salpricelistdet USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk04 ON main.salpricelistdet USING btree (ccode1);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk05 ON main.salpricelistdet USING btree (ccode2);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk06 ON main.salpricelistdet USING btree (ccode3);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk07 ON main.salpricelistdet USING btree (ccode4);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk08 ON main.salpricelistdet USING btree (ccode5);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk09 ON main.salpricelistdet USING btree (ccode6);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk10 ON main.salpricelistdet USING btree (dept_grpcode);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk11 ON main.salpricelistdet USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk12 ON main.salpricelistdet USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS salpricelistdet_lk13 ON main.salpricelistdet USING btree (section_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_salpricelistmain_listcode ON main.salpricelistmain USING btree (pricelistcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_salpricelistmain_listname ON main.salpricelistmain USING btree (pricelistname);
CREATE INDEX IF NOT EXISTS salpricelistmain_lk01 ON main.salpricelistmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salpricelistmain_lk02 ON main.salpricelistmain USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS salpricelistmain_lk03 ON main.salpricelistmain USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS salreqdet_pk ON main.salreqdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_salreqdet_reqcode_icode ON main.salreqdet USING btree (reqcode, icode);
CREATE INDEX IF NOT EXISTS salreqdet_lk01 ON main.salreqdet USING btree (icode);
CREATE INDEX IF NOT EXISTS salreqdet_lk02 ON main.salreqdet USING btree (reqcode);
CREATE UNIQUE INDEX IF NOT EXISTS salrtchg_pk ON main.salrtchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_salrtchg_rt_chg_rate ON main.salrtchg USING btree (rtcode, salchgcode, rate, glcode, slcode, formulae, sign, istax, source, basis);
CREATE INDEX IF NOT EXISTS salrtchg_lk01 ON main.salrtchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS salrtchg_lk02 ON main.salrtchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS salrtchg_lk03 ON main.salrtchg USING btree (rtcode);
CREATE INDEX IF NOT EXISTS salrtchg_lk04 ON main.salrtchg USING btree (salchgcode);
CREATE INDEX IF NOT EXISTS salrtchg_lk05 ON main.salrtchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salrtchg_item_pk ON main.salrtchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS salrtchg_item_lk01 ON main.salrtchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS salrtchg_item_lk02 ON main.salrtchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS salrtchg_item_lk03 ON main.salrtchg_item USING btree (rtcode);
CREATE INDEX IF NOT EXISTS salrtchg_item_lk04 ON main.salrtchg_item USING btree (salrtdet_code);
CREATE INDEX IF NOT EXISTS salrtchg_item_lk05 ON main.salrtchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salrtdet_pk ON main.salrtdet USING btree (code);
CREATE INDEX IF NOT EXISTS i_salrtdet_family_code ON main.salrtdet USING btree (ref_family_code);
CREATE INDEX IF NOT EXISTS salrtdet_lk01 ON main.salrtdet USING btree (dccode);
CREATE INDEX IF NOT EXISTS salrtdet_lk02 ON main.salrtdet USING btree (icode);
CREATE INDEX IF NOT EXISTS salrtdet_lk03 ON main.salrtdet USING btree (rtcode);
CREATE INDEX IF NOT EXISTS salrtdet_lk04 ON main.salrtdet USING btree (salinvdet_code);
CREATE INDEX IF NOT EXISTS salrtdet_lk05 ON main.salrtdet USING btree (excisemain_code);
CREATE INDEX IF NOT EXISTS salrtdet_lk06 ON main.salrtdet USING btree (invcode);
CREATE INDEX IF NOT EXISTS salrtdet_lk07 ON main.salrtdet USING btree (transferout_salinvdet_code);
CREATE UNIQUE INDEX IF NOT EXISTS salrtdet_consolidate_pk ON main.salrtdet_consolidate USING btree (code);
CREATE INDEX IF NOT EXISTS salrtdet_consolidate_lk01 ON main.salrtdet_consolidate USING btree (rtcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_salrtmain_rtcode ON main.salrtmain USING btree (rtcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk01 ON main.salrtmain USING btree (agcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk02 ON main.salrtmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salrtmain_lk03 ON main.salrtmain USING btree (glcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk04 ON main.salrtmain USING btree (inloccode);
CREATE INDEX IF NOT EXISTS salrtmain_lk05 ON main.salrtmain USING btree (invcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk06 ON main.salrtmain USING btree (lgtcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk07 ON main.salrtmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk08 ON main.salrtmain USING btree (saltermcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk09 ON main.salrtmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS salrtmain_lk10 ON main.salrtmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS salrtmain_lk11 ON main.salrtmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS salrtmain_lk12 ON main.salrtmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS salrtmain_lk13 ON main.salrtmain USING btree (outloccode);
CREATE INDEX IF NOT EXISTS salrtmain_lk14 ON main.salrtmain USING btree (pglcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk15 ON main.salrtmain USING btree (slcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk16 ON main.salrtmain USING btree (invgatein_code);
CREATE INDEX IF NOT EXISTS salrtmain_lk17 ON main.salrtmain USING btree (admou_code_in);
CREATE INDEX IF NOT EXISTS salrtmain_lk18 ON main.salrtmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS salrtmain_lk19 ON main.salrtmain USING btree (psite_grt_code);
CREATE INDEX IF NOT EXISTS salrtmain_lk20 ON main.salrtmain USING btree (pslcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk21 ON main.salrtmain USING btree (transferout_invcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk22 ON main.salrtmain USING btree (transitdiff_glcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk23 ON main.salrtmain USING btree (transitdiff_slcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk24 ON main.salrtmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk25 ON main.salrtmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS salrtmain_lk26 ON main.salrtmain USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS salrtmain_lk27 ON main.salrtmain USING btree (intgcode);
CREATE INDEX IF NOT EXISTS salrtmain_lk28 ON main.salrtmain USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS salrtmain_lk29 ON main.salrtmain USING btree (owner_gstin_state_code);
CREATE INDEX IF NOT EXISTS salrtmain_lk30 ON main.salrtmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS salrtmain_lk31 ON main.salrtmain USING btree (pricelistcode);
CREATE UNIQUE INDEX IF NOT EXISTS salsrvchg_pk ON main.salsrvchg USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_salsrvchg_chg_rate ON main.salsrvchg USING btree (srvcode, chgcode, rate, glcode, slcode, formulae, istax, source, basis);
CREATE INDEX IF NOT EXISTS salsrvchg_lk01 ON main.salsrvchg USING btree (srvcode);
CREATE INDEX IF NOT EXISTS salsrvchg_lk02 ON main.salsrvchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS salsrvchg_lk03 ON main.salsrvchg USING btree (chgcode);
CREATE INDEX IF NOT EXISTS salsrvchg_lk04 ON main.salsrvchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS salsrvchg_lk05 ON main.salsrvchg USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salsrvchg_item_pk ON main.salsrvchg_item USING btree (code);
CREATE INDEX IF NOT EXISTS salsrvchg_item_lk01 ON main.salsrvchg_item USING btree (srvcode);
CREATE INDEX IF NOT EXISTS salsrvchg_item_lk02 ON main.salsrvchg_item USING btree (salsrvdet_code);
CREATE INDEX IF NOT EXISTS salsrvchg_item_lk03 ON main.salsrvchg_item USING btree (chgcode);
CREATE INDEX IF NOT EXISTS salsrvchg_item_lk04 ON main.salsrvchg_item USING btree (glcode);
CREATE INDEX IF NOT EXISTS salsrvchg_item_lk05 ON main.salsrvchg_item USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS salsrvdet_pk ON main.salsrvdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_salsrvdet_srv_service_gl_slc ON main.salsrvdet USING btree (servicecode, glcode, slcode, srvcode);
CREATE INDEX IF NOT EXISTS salsrvdet_lk01 ON main.salsrvdet USING btree (srvcode);
CREATE INDEX IF NOT EXISTS salsrvdet_lk02 ON main.salsrvdet USING btree (servicecode);
CREATE INDEX IF NOT EXISTS salsrvdet_lk03 ON main.salsrvdet USING btree (glcode);
CREATE INDEX IF NOT EXISTS salsrvdet_lk04 ON main.salsrvdet USING btree (slcode);
CREATE INDEX IF NOT EXISTS salsrvdet_lk05 ON main.salsrvdet USING btree (taxcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_salsrvmain_srvcode ON main.salsrvmain USING btree (srvcode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk01 ON main.salsrvmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS salsrvmain_lk02 ON main.salsrvmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS salsrvmain_lk03 ON main.salsrvmain USING btree (admsite_code_owner);
CREATE INDEX IF NOT EXISTS salsrvmain_lk04 ON main.salsrvmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk05 ON main.salsrvmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk06 ON main.salsrvmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk07 ON main.salsrvmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk08 ON main.salsrvmain USING btree (release_ecode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk09 ON main.salsrvmain USING btree (saltradegrp_code);
CREATE INDEX IF NOT EXISTS salsrvmain_lk10 ON main.salsrvmain USING btree (saltermcode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk11 ON main.salsrvmain USING btree (formcode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk12 ON main.salsrvmain USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS salsrvmain_lk13 ON main.salsrvmain USING btree (owner_gstin_state_code);
CREATE INDEX IF NOT EXISTS salsrvmain_lk14 ON main.salsrvmain USING btree (pglcode);
CREATE INDEX IF NOT EXISTS salsrvmain_lk15 ON main.salsrvmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS salssdet_pk ON main.salssdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS salssdet_u01 ON main.salssdet USING btree (intg_invoicedetid);
CREATE INDEX IF NOT EXISTS salssdet_lk01 ON main.salssdet USING btree (sscode);
CREATE INDEX IF NOT EXISTS salssdet_lk02 ON main.salssdet USING btree (icode);
CREATE INDEX IF NOT EXISTS salssdet_lk03 ON main.salssdet USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS salssdet_lk04 ON main.salssdet USING btree (intg_refinvoicedetid);
CREATE INDEX IF NOT EXISTS salssdet_lk05 ON main.salssdet USING btree (secondarysupplyparenticode);
CREATE UNIQUE INDEX IF NOT EXISTS p_salssmain_sscode ON main.salssmain USING btree (sscode);
CREATE INDEX IF NOT EXISTS salssmain_lk01 ON main.salssmain USING btree (doccode);
CREATE INDEX IF NOT EXISTS salssmain_lk02 ON main.salssmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS salssmain_lk03 ON main.salssmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS salssmain_lk04 ON main.salssmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS salssmain_lk05 ON main.salssmain USING btree (outloccode);
CREATE INDEX IF NOT EXISTS salssmain_lk06 ON main.salssmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS salssmain_lk07 ON main.salssmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salssmain_lk08 ON main.salssmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS salssmain_lk09 ON main.salssmain USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS salssmain_lk10 ON main.salssmain USING btree (psite_customer_code);
CREATE INDEX IF NOT EXISTS salssmain_lk11 ON main.salssmain USING btree (gds_entity_id);
CREATE INDEX IF NOT EXISTS salssmain_lk12 ON main.salssmain USING btree (order_admsite_code);
CREATE INDEX IF NOT EXISTS salssmain_lk13 ON main.salssmain USING btree (damaged_loccode);
CREATE INDEX IF NOT EXISTS salssmain_lk14 ON main.salssmain USING btree (intg_refinvoiceid);
CREATE INDEX IF NOT EXISTS salssmain_lk15 ON main.salssmain USING btree (return_loccode);
CREATE UNIQUE INDEX IF NOT EXISTS salssmain_u01 ON main.salssmain USING btree ((
CASE
    WHEN (intg_invoiceid IS NOT NULL) THEN ((ecode)::text || (intg_invoiceid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS saltermdet_pk ON main.saltermdet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_saltermdet_termcode_chgcode ON main.saltermdet USING btree (saltermcode, chgcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_saltermdet_termcodeoplvlseq ON main.saltermdet USING btree (saltermcode, operation_level, seq);
CREATE INDEX IF NOT EXISTS saltermdet_lk01 ON main.saltermdet USING btree (chgcode);
CREATE INDEX IF NOT EXISTS saltermdet_lk02 ON main.saltermdet USING btree (saltermcode);
CREATE UNIQUE INDEX IF NOT EXISTS si_allocation_code_pk ON main.si_allocation USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS si_allocation_name_u01 ON main.si_allocation USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS si_alloc_det_alcd_prty_u01 ON main.si_allocation_det USING btree (allocation_code, priority);
CREATE INDEX IF NOT EXISTS si_allocation_det_lk01 ON main.si_allocation_det USING btree (allocatedby);
CREATE INDEX IF NOT EXISTS si_allocation_det_lk02 ON main.si_allocation_det USING btree (approvedby);
CREATE INDEX IF NOT EXISTS si_allocation_det_lk03 ON main.si_allocation_det USING btree (assortment_code);
CREATE INDEX IF NOT EXISTS si_allocation_det_lk04 ON main.si_allocation_det USING btree (closedby);
CREATE INDEX IF NOT EXISTS si_allocation_det_lk05 ON main.si_allocation_det USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS si_allocation_det_lk06 ON main.si_allocation_det USING btree (allocation_code);
CREATE UNIQUE INDEX IF NOT EXISTS si_asmt_excl_code_pk ON main.si_assortment_exclude USING btree (code);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk01 ON main.si_assortment_exclude USING btree (assortment_code);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk02 ON main.si_assortment_exclude USING btree (ccode1);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk03 ON main.si_assortment_exclude USING btree (ccode2);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk04 ON main.si_assortment_exclude USING btree (ccode3);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk05 ON main.si_assortment_exclude USING btree (ccode4);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk06 ON main.si_assortment_exclude USING btree (ccode5);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk07 ON main.si_assortment_exclude USING btree (ccode6);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk08 ON main.si_assortment_exclude USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk09 ON main.si_assortment_exclude USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk10 ON main.si_assortment_exclude USING btree (section_grpcode);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk11 ON main.si_assortment_exclude USING btree (icode);
CREATE INDEX IF NOT EXISTS si_assortment_exclude_lk12 ON main.si_assortment_exclude USING btree (invarticle_code);
CREATE UNIQUE INDEX IF NOT EXISTS si_asmt_incl_code_pk ON main.si_assortment_include USING btree (code);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk01 ON main.si_assortment_include USING btree (assortment_code);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk02 ON main.si_assortment_include USING btree (ccode1);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk03 ON main.si_assortment_include USING btree (ccode2);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk04 ON main.si_assortment_include USING btree (ccode3);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk05 ON main.si_assortment_include USING btree (ccode4);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk06 ON main.si_assortment_include USING btree (ccode5);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk07 ON main.si_assortment_include USING btree (ccode6);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk08 ON main.si_assortment_include USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk09 ON main.si_assortment_include USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk10 ON main.si_assortment_include USING btree (section_grpcode);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk11 ON main.si_assortment_include USING btree (icode);
CREATE INDEX IF NOT EXISTS si_assortment_include_lk12 ON main.si_assortment_include USING btree (invarticle_code);
CREATE UNIQUE INDEX IF NOT EXISTS si_assort_name_cmpcode_u01 ON main.si_assortment USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS si_assortment_code_pk ON main.si_assortment USING btree (code);
CREATE INDEX IF NOT EXISTS si_assortment_lk01 ON main.si_assortment USING btree (ecode);
CREATE INDEX IF NOT EXISTS si_assortment_lk02 ON main.si_assortment USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS tax_recalc_history_pk ON main.tax_recalc_history USING btree (requestid);
CREATE INDEX IF NOT EXISTS tax_recalc_history_lk01 ON main.tax_recalc_history USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS tax_recalc_history_lk02 ON main.tax_recalc_history USING btree (createdby);
CREATE UNIQUE INDEX IF NOT EXISTS tender_master_pk ON main.tender_master USING btree (code);
CREATE INDEX IF NOT EXISTS tender_master_lk01 ON main.tender_master USING btree (createdbyid);
CREATE INDEX IF NOT EXISTS tender_master_lk02 ON main.tender_master USING btree (glcode);
CREATE INDEX IF NOT EXISTS tender_master_lk03 ON main.tender_master USING btree (lastmodifiedbyid);
CREATE INDEX IF NOT EXISTS tender_master_lk04 ON main.tender_master USING btree (slcode);
CREATE INDEX IF NOT EXISTS trans_detail_deferred_check_i01 ON main.trans_detail_deferred_check USING btree (trans_id, module_name, refcode);
CREATE UNIQUE INDEX IF NOT EXISTS transactionlock_pk ON main.transactionlock USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS udfconfigdetail_pk ON main.udfconfigdetail USING btree (code);
CREATE INDEX IF NOT EXISTS udfconfigdetail_lk01 ON main.udfconfigdetail USING btree (tablename);
CREATE UNIQUE INDEX IF NOT EXISTS udfparamlist_pk ON main.udfparamlist USING btree (code);
CREATE INDEX IF NOT EXISTS udfparamlist_lk01 ON main.udfparamlist USING btree (tablename);
CREATE INDEX IF NOT EXISTS user_map_vendor_lk01 ON main.user_map_vendor USING btree (mapuser);
CREATE INDEX IF NOT EXISTS user_map_vendor_lk02 ON main.user_map_vendor USING btree (vendorcode);
CREATE UNIQUE INDEX IF NOT EXISTS menudocreport_pk ON main.menudocreport USING btree (code);
CREATE INDEX IF NOT EXISTS menudocreport_lk01 ON main.menudocreport USING btree (createdby);
CREATE INDEX IF NOT EXISTS menudocreport_lk02 ON main.menudocreport USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS menudocreport_lk03 ON main.menudocreport USING btree (menushortcode);
CREATE INDEX IF NOT EXISTS menudocreport_lk04 ON main.menudocreport USING btree (ex_report_master_code);
CREATE UNIQUE INDEX IF NOT EXISTS u_webprntpref_user_menushrtcd ON main.web_print_preference USING btree (user_id, mdmenushortcode);
CREATE UNIQUE INDEX IF NOT EXISTS web_print_preference_pkey ON main.web_print_preference USING btree (code);
CREATE INDEX IF NOT EXISTS web_print_preference_lk01 ON main.web_print_preference USING btree (doc_menudocreport_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_hrdemp_ecode ON main.hrdemp USING btree (ecode);
CREATE UNIQUE INDEX IF NOT EXISTS u_hrdemp_abbre ON main.hrdemp USING btree (abbre);
CREATE UNIQUE INDEX IF NOT EXISTS u_hrdemp_eno ON main.hrdemp USING btree (eno);
CREATE INDEX IF NOT EXISTS hrdemp_lk01 ON main.hrdemp USING btree (deptcode);
CREATE INDEX IF NOT EXISTS hrdemp_lk02 ON main.hrdemp USING btree (profcode);
CREATE INDEX IF NOT EXISTS hrdemp_lk03 ON main.hrdemp USING btree (rlcode);
CREATE UNIQUE INDEX IF NOT EXISTS admcurrency_deno_u01 ON main.admcurrency_deno USING btree (admcurrency_code, perunitvalue);
CREATE INDEX IF NOT EXISTS admcurrency_deno_lk01 ON main.admcurrency_deno USING btree (admcurrency_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_admfunction_functioncode ON main.admfunction USING btree (functioncode);
CREATE UNIQUE INDEX IF NOT EXISTS admdocreport_pk ON main.admdocreport USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS admdocreport_u01 ON main.admdocreport USING btree (functioncode, name);
CREATE UNIQUE INDEX IF NOT EXISTS admdocreport_u02 ON main.admdocreport USING btree (functioncode, seq);
CREATE INDEX IF NOT EXISTS admdocreport_lk01 ON main.admdocreport USING btree (functioncode);
CREATE INDEX IF NOT EXISTS admdocreport_lk02 ON main.admdocreport USING btree (ex_report_master_code);
CREATE UNIQUE INDEX IF NOT EXISTS mdmenu_pk ON main.mdmenu USING btree (sys_shortcode);
CREATE INDEX IF NOT EXISTS mdmenu_lk01 ON main.mdmenu USING btree (sys_mdmenuparentid);
CREATE INDEX IF NOT EXISTS mdmenu_lk02 ON main.mdmenu USING btree (sys_mdmenuparentshortcode);
CREATE UNIQUE INDEX IF NOT EXISTS admmenu_docscheme_u01 ON main.admmenu_docscheme USING btree (menucode, doccode, mdmenushortcode);
CREATE UNIQUE INDEX IF NOT EXISTS admmenudoc_pk ON main.admmenu_docscheme USING btree (code);
CREATE INDEX IF NOT EXISTS admmenu_docscheme_lk01 ON main.admmenu_docscheme USING btree (mdmenushortcode);
CREATE UNIQUE INDEX IF NOT EXISTS admgststate_pk ON main.admgststate USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS p_fingl_glcode ON main.fingl USING btree (glcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_fingl_glname ON main.fingl USING btree (glname);
CREATE INDEX IF NOT EXISTS fingl_lk01 ON main.fingl USING btree (ctname);
CREATE INDEX IF NOT EXISTS fingl_lk02 ON main.fingl USING btree (grpcode);
CREATE INDEX IF NOT EXISTS fingl_lk03 ON main.fingl USING btree (tdssrccode);
CREATE INDEX IF NOT EXISTS fingl_lk04 ON main.fingl USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS fingl_lk05 ON main.fingl USING btree (admsite_code_owner);
CREATE UNIQUE INDEX IF NOT EXISTS admdocscheme_pk ON main.admdocscheme USING btree (doccode);
CREATE UNIQUE INDEX IF NOT EXISTS admdocscheme_u01 ON main.admdocscheme USING btree (cmpcode, docname);
CREATE INDEX IF NOT EXISTS admdocscheme_lk01 ON main.admdocscheme USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_saltermmain_saltermcode ON main.saltermmain USING btree (saltermcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_saltermmain_saltermname ON main.saltermmain USING btree (saltermname);
CREATE INDEX IF NOT EXISTS saltermmain_lk01 ON main.saltermmain USING btree (termgrpcode);
CREATE INDEX IF NOT EXISTS saltermmain_lk02 ON main.saltermmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS saltermmain_lk03 ON main.saltermmain USING btree (sales_glcode);
CREATE INDEX IF NOT EXISTS saltermmain_lk04 ON main.saltermmain USING btree (sales_return_glcode);
CREATE INDEX IF NOT EXISTS saltermmain_lk05 ON main.saltermmain USING btree (sales_return_slcode);
CREATE INDEX IF NOT EXISTS saltermmain_lk06 ON main.saltermmain USING btree (sales_slcode);
CREATE UNIQUE INDEX IF NOT EXISTS promo_allocation_code_pk ON main.promo_allocation USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_allocation_name_u01 ON main.promo_allocation USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS picklist_rule_pk ON main.picklist_rule USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS role_pk ON main.role USING btree (id);
CREATE INDEX IF NOT EXISTS role_lk01 ON main.role USING btree (createdby);
CREATE INDEX IF NOT EXISTS role_lk02 ON main.role USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS role_lk03 ON main.role USING btree (localpolicyid);
CREATE INDEX IF NOT EXISTS role_lk04 ON main.role USING btree (profcode);
CREATE UNIQUE INDEX IF NOT EXISTS appuser_pk ON main.appuser USING btree (id);
CREATE INDEX IF NOT EXISTS appuser_lk01 ON main.appuser USING btree (createdby);
CREATE INDEX IF NOT EXISTS appuser_lk02 ON main.appuser USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS appuser_lk03 ON main.appuser USING btree (roleid);
CREATE INDEX IF NOT EXISTS appuser_lk04 ON main.appuser USING btree (connected_app_id);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_pk ON main.connected_app USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_lk01 ON main.connected_app USING btree (app_id);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_module_pkey ON main.aud2_module USING btree (shortcode);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_module_shortcode_name_header_table_key ON main.aud2_module USING btree (shortcode, name, header_table);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_tab_col_module_shortcode_table_name_exclude_update_of__key ON main.aud2_tab_col USING btree (module_shortcode, table_name, exclude_update_of_column);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_table_module_shortcode_table_name_key ON main.aud2_table USING btree (module_shortcode, table_name);
CREATE UNIQUE INDEX IF NOT EXISTS aud2_table_pkey ON main.aud2_table USING btree (table_name);
CREATE UNIQUE INDEX IF NOT EXISTS aud_purge_pk ON main.aud_purge USING btree (id);
CREATE INDEX IF NOT EXISTS aud_purge_lk01 ON main.aud_purge USING btree (purge_by);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_assrt_exclude_pk ON main.connected_app_assrt_exclude USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk01 ON main.connected_app_assrt_exclude USING btree (ccode1);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk02 ON main.connected_app_assrt_exclude USING btree (ccode2);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk03 ON main.connected_app_assrt_exclude USING btree (ccode3);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk04 ON main.connected_app_assrt_exclude USING btree (ccode4);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk05 ON main.connected_app_assrt_exclude USING btree (ccode5);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk06 ON main.connected_app_assrt_exclude USING btree (ccode6);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk07 ON main.connected_app_assrt_exclude USING btree (connected_app_id);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk08 ON main.connected_app_assrt_exclude USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk09 ON main.connected_app_assrt_exclude USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk10 ON main.connected_app_assrt_exclude USING btree (icode);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk11 ON main.connected_app_assrt_exclude USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS connected_app_assrt_exclu_lk12 ON main.connected_app_assrt_exclude USING btree (section_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_bin_pk ON main.connected_app_bin USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_bin_lk01 ON main.connected_app_bin USING btree (connected_app_id);
CREATE INDEX IF NOT EXISTS connected_app_bin_lk02 ON main.connected_app_bin USING btree (connected_app_site_code);
CREATE INDEX IF NOT EXISTS connected_app_bin_lk03 ON main.connected_app_bin USING btree (invbin_code);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_expenseexcptn_pk ON main.connected_app_expenseexception USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_expenseexce_lk01 ON main.connected_app_expenseexception USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS connected_app_expenseexce_lk02 ON main.connected_app_expenseexception USING btree (channel_code);
CREATE INDEX IF NOT EXISTS connected_app_expenseexce_lk03 ON main.connected_app_expenseexception USING btree (connected_app_expense_code);
CREATE INDEX IF NOT EXISTS connected_app_expenseexce_lk04 ON main.connected_app_expenseexception USING btree (expense_glcode);
CREATE INDEX IF NOT EXISTS connected_app_expenseexce_lk05 ON main.connected_app_expenseexception USING btree (expense_slcode);
CREATE UNIQUE INDEX IF NOT EXISTS mdconnected_app_pk ON main.mdconnected_app USING btree (app_id);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_stockpoint_pk ON main.connected_app_stockpoint USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_stockpoint_lk01 ON main.connected_app_stockpoint USING btree (connected_app_id);
CREATE INDEX IF NOT EXISTS connected_app_stockpoint_lk02 ON main.connected_app_stockpoint USING btree (connected_app_site_code);
CREATE INDEX IF NOT EXISTS connected_app_stockpoint_lk03 ON main.connected_app_stockpoint USING btree (loccode);
CREATE INDEX IF NOT EXISTS connected_app_stockpoint_lk04 ON main.connected_app_stockpoint USING btree (psite_stockpoint_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invloc_loccode ON main.invloc USING btree (loccode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invloc_locname ON main.invloc USING btree (locname);
CREATE INDEX IF NOT EXISTS invloc_lk01 ON main.invloc USING btree (ctname);
CREATE INDEX IF NOT EXISTS invloc_lk02 ON main.invloc USING btree (invlocgrp_code);
CREATE INDEX IF NOT EXISTS invloc_lk04 ON main.invloc USING btree (src_loccode);
CREATE INDEX IF NOT EXISTS invloc_lk05 ON main.invloc USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invloc_lk06 ON main.invloc USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_stockpoint_pk ON main.psite_stockpoint USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS connected_app_tenderexcptn_pk ON main.connected_app_tenderexception USING btree (code);
CREATE INDEX IF NOT EXISTS connected_app_tenderexcep_lk01 ON main.connected_app_tenderexception USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS connected_app_tenderexcep_lk02 ON main.connected_app_tenderexception USING btree (channel_code);
CREATE INDEX IF NOT EXISTS connected_app_tenderexcep_lk03 ON main.connected_app_tenderexception USING btree (connected_app_tender_code);
CREATE INDEX IF NOT EXISTS connected_app_tenderexcep_lk04 ON main.connected_app_tenderexception USING btree (tender_glcode);
CREATE INDEX IF NOT EXISTS connected_app_tenderexcep_lk05 ON main.connected_app_tenderexception USING btree (tender_slcode);
CREATE UNIQUE INDEX IF NOT EXISTS mdlistcriteriadetail_pkey ON main.mdlistcriteriadetail USING btree (id);
CREATE INDEX IF NOT EXISTS mdlistcriteriadetail_lk01 ON main.mdlistcriteriadetail USING btree (fieldid);
CREATE INDEX IF NOT EXISTS mdlistcriteriadetail_lk02 ON main.mdlistcriteriadetail USING btree (listcriteriaid);
CREATE INDEX IF NOT EXISTS mdlistcriteriadetail_lk03 ON main.mdlistcriteriadetail USING btree (operatorid);
CREATE UNIQUE INDEX IF NOT EXISTS mdoperator_pkey ON main.mdoperator USING btree (id);
CREATE INDEX IF NOT EXISTS custompatchdata_lk01 ON main.custompatchdata USING btree (patchid);
CREATE UNIQUE INDEX IF NOT EXISTS ex_report_master_pk ON main.ex_report_master USING btree (code);
CREATE INDEX IF NOT EXISTS ex_report_master_lk01 ON main.ex_report_master USING btree (createdby);
CREATE INDEX IF NOT EXISTS ex_report_master_lk02 ON main.ex_report_master USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS dxsessionlog_pk ON main.dxsessionlog USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS dxreceive_pk ON main.dxreceive USING btree (id);
CREATE INDEX IF NOT EXISTS dxreceive_lk01 ON main.dxreceive USING btree (dxprocesssessionid);
CREATE INDEX IF NOT EXISTS dxreceive_lk02 ON main.dxreceive USING btree (dxreceivesessionid);
CREATE UNIQUE INDEX IF NOT EXISTS dxreceivedata_pk ON main.dxreceivedata USING btree (dxreceiveid);
CREATE INDEX IF NOT EXISTS dxreceivedata_lk01 ON main.dxreceivedata USING btree (dxreceiveid);
CREATE UNIQUE INDEX IF NOT EXISTS dxsessionlog2_pk ON main.dxsessionlog2 USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS dxsend2_pk ON main.dxsend2 USING btree (id);
CREATE INDEX IF NOT EXISTS i_dxsend2_receivercuid ON main.dxsend2 USING btree (receivercuid);
CREATE INDEX IF NOT EXISTS i_dxsend2_status ON main.dxsend2 USING btree (status);
CREATE UNIQUE INDEX IF NOT EXISTS dxsend_pk ON main.dxsend USING btree (id);
CREATE INDEX IF NOT EXISTS dxsend_lk01 ON main.dxsend USING btree (dxcollectionsessionid);
CREATE INDEX IF NOT EXISTS dxsend_lk02 ON main.dxsend USING btree (dxsendsessionid);
CREATE UNIQUE INDEX IF NOT EXISTS dxsenddata_pk ON main.dxsenddata USING btree (dxsendid);
CREATE INDEX IF NOT EXISTS dxsenddata_lk01 ON main.dxsenddata USING btree (dxsendid);
CREATE INDEX IF NOT EXISTS er_lastposbillsyncinfo_lk01 ON main.er_lastposbillsyncinfo USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_event_set_pkey ON main.psite_event_set USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_event_set_det_pkey ON main.psite_event_set_det USING btree (event_set_code, refcode);
CREATE UNIQUE INDEX IF NOT EXISTS ex_folder_master_pk ON main.ex_folder_master USING btree (code);
CREATE INDEX IF NOT EXISTS ex_folder_master_lk01 ON main.ex_folder_master USING btree (createdby);
CREATE INDEX IF NOT EXISTS ex_folder_master_lk02 ON main.ex_folder_master USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS ex_folder_master_lk03 ON main.ex_folder_master USING btree (parentfoldercode);
CREATE UNIQUE INDEX IF NOT EXISTS ex_folder_report_map_pk ON main.ex_folder_report_map USING btree (code);
CREATE INDEX IF NOT EXISTS ex_folder_report_map_lk01 ON main.ex_folder_report_map USING btree (foldercode);
CREATE INDEX IF NOT EXISTS ex_folder_report_map_lk02 ON main.ex_folder_report_map USING btree (reportcode);
CREATE UNIQUE INDEX IF NOT EXISTS ex_template_master_pk ON main.ex_template_master USING btree (code);
CREATE INDEX IF NOT EXISTS ex_template_master_lk01 ON main.ex_template_master USING btree (createdby);
CREATE INDEX IF NOT EXISTS ex_template_master_lk02 ON main.ex_template_master USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS ex_theme_master_pk ON main.ex_theme_master USING btree (code);
CREATE INDEX IF NOT EXISTS ex_theme_master_lk01 ON main.ex_theme_master USING btree (createdby);
CREATE INDEX IF NOT EXISTS ex_theme_master_lk02 ON main.ex_theme_master USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS excisemain_code_pk ON main.excisemain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS excisemain_tariffno_u01 ON main.excisemain USING btree (tariffno);
CREATE INDEX IF NOT EXISTS excisemain_lk01 ON main.excisemain USING btree (ecode);
CREATE INDEX IF NOT EXISTS excisemain_lk02 ON main.excisemain USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_fincost_costcode ON main.fincost USING btree (costcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_fincost_costname ON main.fincost USING btree (costname);
CREATE INDEX IF NOT EXISTS fincost_lk01 ON main.fincost USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_intgmain_intgcode ON main.intgmain USING btree (intgcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_purordshipmain_shipcode ON main.purordshipmain USING btree (shipcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_purordshipmain_ordcode ON main.purordshipmain USING btree (ordcode);
CREATE INDEX IF NOT EXISTS purordshipmain_lk01 ON main.purordshipmain USING btree (cancelledby);
CREATE INDEX IF NOT EXISTS purordshipmain_lk03 ON main.purordshipmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS purordshipmain_lk04 ON main.purordshipmain USING btree (trpcode);
CREATE INDEX IF NOT EXISTS purordshipmain_lk05 ON main.purordshipmain USING btree (shipby);
CREATE UNIQUE INDEX IF NOT EXISTS udfconfig_pk ON main.udfconfig USING btree (tablename);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_entity_pk ON main.gds2_entity USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_entity_lk01 ON main.gds2_entity USING btree (connected_app_code);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_pk ON main.gds2_event_md USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_subscr_pk ON main.gds2_subscr USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_subscr_lk01 ON main.gds2_subscr USING btree (entity_id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_queue_pk ON main.gds2_event_queue USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_event_queue_i01 ON main.gds2_event_queue USING btree (fetch_seq);
CREATE INDEX IF NOT EXISTS gds2_event_queue_lk01 ON main.gds2_event_queue USING btree (subscr_id);
CREATE INDEX IF NOT EXISTS gds2_event_queue_lk02 ON main.gds2_event_queue USING btree (event_id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_queue_u01 ON main.gds2_event_queue USING btree ((
CASE event_id
    WHEN 'INVENTORY_ARTICLE'::text THEN (subscr_id)::numeric
    WHEN 'INVENTORY_BIN'::text THEN (subscr_id)::numeric
    WHEN 'INVENTORY_SITE'::text THEN (subscr_id)::numeric
    ELSE NULL::numeric
END), (
CASE event_id
    WHEN 'INVENTORY_ARTICLE'::text THEN event_id
    WHEN 'INVENTORY_BIN'::text THEN event_id
    WHEN 'INVENTORY_SITE'::text THEN event_id
    ELSE NULL::character varying
END), (
CASE event_id
    WHEN 'INVENTORY_ARTICLE'::text THEN refcode
    WHEN 'INVENTORY_BIN'::text THEN refcode
    WHEN 'INVENTORY_SITE'::text THEN refcode
    ELSE NULL::character varying
END), (
CASE event_id
    WHEN 'INVENTORY_ARTICLE'::text THEN (session_id)::numeric
    WHEN 'INVENTORY_BIN'::text THEN (session_id)::numeric
    WHEN 'INVENTORY_SITE'::text THEN (session_id)::numeric
    ELSE NULL::numeric
END));
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_template_md_pk ON main.gds2_event_template_md USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_event_template_md_lk01 ON main.gds2_event_template_md USING btree (event_id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_event_track_inv_pk ON main.gds2_event_track_inv USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_event_track_inv_lk01 ON main.gds2_event_track_inv USING btree (event_id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_subscr_event_pk ON main.gds2_subscr_event USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_subscr_event_lk01 ON main.gds2_subscr_event USING btree (event_id);
CREATE INDEX IF NOT EXISTS gds2_subscr_event_lk02 ON main.gds2_subscr_event USING btree (event_template_id);
CREATE INDEX IF NOT EXISTS gds2_subscr_event_lk03 ON main.gds2_subscr_event USING btree (subscr_id);
CREATE UNIQUE INDEX IF NOT EXISTS gds2_subscr_session_pkey ON main.gds2_subscr_session USING btree (id);
CREATE INDEX IF NOT EXISTS gds2_subscr_session_lk01 ON main.gds2_subscr_session USING btree (subscr_id);
CREATE UNIQUE INDEX IF NOT EXISTS gvissue_journal_void_pk ON main.gvissue_journal_void USING btree (gvissue_journal_code);
CREATE UNIQUE INDEX IF NOT EXISTS gvissue_journal_void_u01 ON main.gvissue_journal_void USING btree (scheme_docno, docdate, voidby, admsite_code);
CREATE INDEX IF NOT EXISTS gvissue_journal_void_lk01 ON main.gvissue_journal_void USING btree (admou_code);
CREATE INDEX IF NOT EXISTS gvissue_journal_void_lk02 ON main.gvissue_journal_void USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS gvissue_journal_void_lk03 ON main.gvissue_journal_void USING btree (customer_slcode);
CREATE INDEX IF NOT EXISTS gvissue_journal_void_lk04 ON main.gvissue_journal_void USING btree (debtor_glcode);
CREATE INDEX IF NOT EXISTS gvissue_journal_void_lk05 ON main.gvissue_journal_void USING btree (gvcontrol_glcode);
CREATE INDEX IF NOT EXISTS gvissue_journal_void_lk06 ON main.gvissue_journal_void USING btree (gvdiscount_glcode);
CREATE INDEX IF NOT EXISTS gvissue_journal_void_lk07 ON main.gvissue_journal_void USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS gvissue_journal_void_lk08 ON main.gvissue_journal_void USING btree (voidby);
CREATE UNIQUE INDEX IF NOT EXISTS gvissue_journal_void_u02 ON main.gvissue_journal_void USING btree ((
CASE
    WHEN (intgrefid IS NOT NULL) THEN ((voidby)::text || (intgrefid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS gvissue_jrnl_detail_void_pk ON main.gvissue_jrnl_detail_void USING btree (gvissue_journal_detail_code);
CREATE INDEX IF NOT EXISTS gvissue_jrnl_detail_void_lk01 ON main.gvissue_jrnl_detail_void USING btree (gvleaves_code);
CREATE INDEX IF NOT EXISTS gvissue_jrnl_detail_void_lk02 ON main.gvissue_jrnl_detail_void USING btree (voidby);
CREATE UNIQUE INDEX IF NOT EXISTS gvissuepayment_journal_pk ON main.gvissuepayment_journal USING btree (code);
CREATE INDEX IF NOT EXISTS gvissuepayment_journal_lk01 ON main.gvissuepayment_journal USING btree (glcode);
CREATE INDEX IF NOT EXISTS gvissuepayment_journal_lk02 ON main.gvissuepayment_journal USING btree (gvissue_journal_code);
CREATE INDEX IF NOT EXISTS gvissuepayment_journal_lk03 ON main.gvissuepayment_journal USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS gvissuepayment_journal_void_pk ON main.gvissuepayment_journal_void USING btree (gvissuepayment_journal_code);
CREATE INDEX IF NOT EXISTS gvissuepayment_journal_vo_lk01 ON main.gvissuepayment_journal_void USING btree (glcode);
CREATE INDEX IF NOT EXISTS gvissuepayment_journal_vo_lk02 ON main.gvissuepayment_journal_void USING btree (slcode);
CREATE INDEX IF NOT EXISTS gvissuepayment_journal_vo_lk03 ON main.gvissuepayment_journal_void USING btree (voidby);
CREATE UNIQUE INDEX IF NOT EXISTS int$class_pk ON main.int$class USING btree (classname);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$cmc_cmodule_classname ON main.int$caller_module_class USING btree (caller_module, classname);
CREATE INDEX IF NOT EXISTS int$caller_module_class_lk01 ON main.int$caller_module_class USING btree (classname);
CREATE INDEX IF NOT EXISTS int$error_log_lk01 ON main.int$error_log USING btree (userid);
CREATE UNIQUE INDEX IF NOT EXISTS int$history_pk ON main.int$history USING btree (code);
CREATE INDEX IF NOT EXISTS int$history_lk01 ON main.int$history USING btree (classname);
CREATE INDEX IF NOT EXISTS int$history_lk02 ON main.int$history USING btree (importedby);
CREATE UNIQUE INDEX IF NOT EXISTS int$metadata_pk ON main.int$metadata USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_int$metadata_cname_colname ON main.int$metadata USING btree (classname, colname);
CREATE INDEX IF NOT EXISTS int$metadata_lk01 ON main.int$metadata USING btree (classname);
CREATE UNIQUE INDEX IF NOT EXISTS invmmrule_pk ON main.invmmrule USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invmmrule_u01 ON main.invmmrule USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS p_inventtype_enttype ON main.inventtype USING btree (enttype);
CREATE UNIQUE INDEX IF NOT EXISTS u_inventtype_entname ON main.inventtype USING btree (entname);
CREATE UNIQUE INDEX IF NOT EXISTS u_inventtype_prefix ON main.inventtype USING btree (prefix);
CREATE INDEX IF NOT EXISTS inventtype_lk01 ON main.inventtype USING btree (entgrpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_admmonth_mcode ON main.admmonth USING btree (mcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_admmonth_mname_ycode ON main.admmonth USING btree (month_name, ycode);
CREATE INDEX IF NOT EXISTS admmonth_lk01 ON main.admmonth USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS invgrcset_pk ON main.invgrcset USING btree (code);
CREATE INDEX IF NOT EXISTS invgrcset_lk01 ON main.invgrcset USING btree (grccode);
CREATE INDEX IF NOT EXISTS invgrcset_lk02 ON main.invgrcset USING btree (invsetmain_code);
CREATE INDEX IF NOT EXISTS invgrcset_lk03 ON main.invgrcset USING btree (ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_invinpool_code ON main.invinpool USING btree (code);
CREATE INDEX IF NOT EXISTS invinpool_lk01 ON main.invinpool USING btree (enttype);
CREATE UNIQUE INDEX IF NOT EXISTS invmetal_code_pk ON main.invmetal USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invmetal_name_u01 ON main.invmetal USING btree (name);
CREATE INDEX IF NOT EXISTS invmetal_i01 ON main.invmetal USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invpermit_permitcode ON main.invpermit USING btree (permitcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invpermit_pno_yc_pcode_type ON main.invpermit USING btree (permitno, ycode, pcode, permittype);
CREATE INDEX IF NOT EXISTS invpermit_lk01 ON main.invpermit USING btree (ecode);
CREATE INDEX IF NOT EXISTS invpermit_lk02 ON main.invpermit USING btree (pcode);
CREATE INDEX IF NOT EXISTS invpermit_lk03 ON main.invpermit USING btree (ycode);
CREATE INDEX IF NOT EXISTS invpermit_lk04 ON main.invpermit USING btree (admou_code);
CREATE INDEX IF NOT EXISTS invpermit_lk05 ON main.invpermit USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS invpermit_lk06 ON main.invpermit USING btree (loccode);
CREATE INDEX IF NOT EXISTS invpermit_lk07 ON main.invpermit USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invpermit_lk08 ON main.invpermit USING btree (admsite_code_owner);
CREATE UNIQUE INDEX IF NOT EXISTS invlocgrp_pk ON main.invlocgrp USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invlocgrp_u01 ON main.invlocgrp USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS invmmrule_date_pk ON main.invmmrule_date USING btree (code);
CREATE INDEX IF NOT EXISTS invmmrule_date_lk01 ON main.invmmrule_date USING btree (invmmrule_code);
CREATE UNIQUE INDEX IF NOT EXISTS invmmrule_det_pk ON main.invmmrule_det USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS invmmrule_det_u01 ON main.invmmrule_det USING btree (invmmrule_date_code, rule_type);
CREATE INDEX IF NOT EXISTS invmmrule_det_lk01 ON main.invmmrule_det USING btree (invmmrule_code);
CREATE INDEX IF NOT EXISTS invmmrule_det_lk02 ON main.invmmrule_det USING btree (invmmrule_date_code);
CREATE UNIQUE INDEX IF NOT EXISTS invmmrule_exception_pk ON main.invmmrule_exception USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invoutpool_code ON main.invoutpool USING btree (code);
CREATE INDEX IF NOT EXISTS invoutpool_lk01 ON main.invoutpool USING btree (enttype);
CREATE UNIQUE INDEX IF NOT EXISTS p_invoutpool_det_code ON main.invoutpool_det USING btree (code);
CREATE INDEX IF NOT EXISTS invoutpool_det_lk01 ON main.invoutpool_det USING btree (enttype);
CREATE INDEX IF NOT EXISTS invoutpool_det_lk02 ON main.invoutpool_det USING btree (invoutpool_code);
CREATE UNIQUE INDEX IF NOT EXISTS retailorddet_pk ON main.retailorddet USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS retailorddet_u01 ON main.retailorddet USING btree (intgorderdetid);
CREATE INDEX IF NOT EXISTS retailorddet_lk01 ON main.retailorddet USING btree (ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS purordshipset_code_pk ON main.purordshipset USING btree (shipsetcode);
CREATE INDEX IF NOT EXISTS purordshipset_lk01 ON main.purordshipset USING btree (invsetmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS i_invstock_log_seq ON main.invstock_log USING btree (logseq);
CREATE INDEX IF NOT EXISTS i_invstk_onhand_agg_icode ON main.invstock_onhand_agg USING btree (icode);
CREATE INDEX IF NOT EXISTS i_invstk_onhand_agg_loccode ON main.invstock_onhand_agg USING btree (loccode);
CREATE INDEX IF NOT EXISTS i_invstk_onhand_agg_site_code ON main.invstock_onhand_agg USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS i_invstock_onhand_agg_key ON main.invstock_onhand_agg USING btree (key);
CREATE INDEX IF NOT EXISTS i_invstk_onhand_intra_agg_key ON main.invstock_onhand_intra_agg USING btree (key);
CREATE INDEX IF NOT EXISTS i_invstk_onhand_stkpt_agg_ic ON main.invstock_onhand_stockpoint_agg USING btree (icode);
CREATE INDEX IF NOT EXISTS i_invstk_onhand_stkpt_agg_site ON main.invstock_onhand_stockpoint_agg USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS i_invstk_onhand_stkpt_agg_stkp ON main.invstock_onhand_stockpoint_agg USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS i_invstock_onhand_stkpt_agg ON main.invstock_onhand_stockpoint_agg USING btree (key);
CREATE UNIQUE INDEX IF NOT EXISTS lpredemptiontoken_pk ON main.lpredemptiontoken USING btree (code);
CREATE INDEX IF NOT EXISTS lpredemptiontoken_lk01 ON main.lpredemptiontoken USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS lpredemptiontoken_lk02 ON main.lpredemptiontoken USING btree (lpcard_benefit_point_code);
CREATE UNIQUE INDEX IF NOT EXISTS mailbox_pk ON main.mailbox USING btree (code);
CREATE INDEX IF NOT EXISTS mailbox_lk01 ON main.mailbox USING btree (mailjob_code);
CREATE UNIQUE INDEX IF NOT EXISTS mailjobtype_pk ON main.mailjobtype USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS mailjobtype_u01 ON main.mailjobtype USING btree (classname);
CREATE UNIQUE INDEX IF NOT EXISTS mdconnected_api_pk ON main.mdconnected_api USING btree (type, apiid);
CREATE INDEX IF NOT EXISTS mdconnected_api_lk01 ON main.mdconnected_api USING btree (apiid);
CREATE UNIQUE INDEX IF NOT EXISTS mdconnected_event_pk ON main.mdconnected_event USING btree (connected_app_type, gds_event_id);
CREATE INDEX IF NOT EXISTS mdconnected_event_lk01 ON main.mdconnected_event USING btree (gds_template_id);
CREATE UNIQUE INDEX IF NOT EXISTS mdappoperation_pk ON main.mdappoperation USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS mdmenuappoperation_pk ON main.mdmenuappoperation USING btree (sys_mdappoperationid, sys_mdmenushortcode);
CREATE INDEX IF NOT EXISTS mdmenuappoperation_lk01 ON main.mdmenuappoperation USING btree (sys_mdappoperationid);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$events_pk ON main.nfs$events USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$events_u01 ON main.nfs$events USING btree (name);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$events_u02 ON main.nfs$events USING btree (short_name);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$event_vars_u01 ON main.nfs$event_vars USING btree (nfs$events_code, name);
CREATE INDEX IF NOT EXISTS nfs$event_vars_lk01 ON main.nfs$event_vars USING btree (nfs$events_code);
CREATE UNIQUE INDEX IF NOT EXISTS nfs$postasks_pk ON main.nfs$postasks USING btree (nfs$tasks_code);
CREATE INDEX IF NOT EXISTS nfs$postasks_lk01 ON main.nfs$postasks USING btree (nfs$events_code);
CREATE INDEX IF NOT EXISTS nfs$task_filter_multiple_lk01 ON main.nfs$task_filter_multiple USING btree (nfs$task_filter_code);
CREATE INDEX IF NOT EXISTS nfs$task_recipients_lk01 ON main.nfs$task_recipients USING btree (nfs$tasks_code);
CREATE UNIQUE INDEX IF NOT EXISTS omschannel_mop_pk ON main.omschannel_mop USING btree (code);
CREATE INDEX IF NOT EXISTS omschannel_mop_lk01 ON main.omschannel_mop USING btree (channel_code);
CREATE INDEX IF NOT EXISTS omschannel_mop_lk02 ON main.omschannel_mop USING btree (mop_glcode);
CREATE INDEX IF NOT EXISTS omschannel_mop_lk03 ON main.omschannel_mop USING btree (mop_slcode);
CREATE INDEX IF NOT EXISTS omschannel_mop_lk04 ON main.omschannel_mop USING btree (psite_mop_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillmop_park_pk ON main.psite_posbillmop_park USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_park_lk01 ON main.psite_posbillmop_park USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_park_lk02 ON main.psite_posbillmop_park USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_park_lk03 ON main.psite_posbillmop_park USING btree (lpredemptiontoken_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_park_lk04 ON main.psite_posbillmop_park USING btree (psite_mop_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_park_lk05 ON main.psite_posbillmop_park USING btree (psite_ptchead_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillmopvoid_pk ON main.psite_posbillmopvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillmopvoid_lk01 ON main.psite_posbillmopvoid USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopvoid_lk02 ON main.psite_posbillmopvoid USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopvoid_lk03 ON main.psite_posbillmopvoid USING btree (psite_mop_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopvoid_lk04 ON main.psite_posbillmopvoid USING btree (psite_posbillcnvoid_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopvoid_lk05 ON main.psite_posbillmopvoid USING btree (psite_posbillvoid_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopvoid_lk06 ON main.psite_posbillmopvoid USING btree (lpredemptiontoken_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopvoid_lk07 ON main.psite_posbillmopvoid USING btree (psite_ptchead_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillmop_pk ON main.psite_posbillmop USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_lk01 ON main.psite_posbillmop USING btree (admcurrency_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_lk02 ON main.psite_posbillmop USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_lk03 ON main.psite_posbillmop USING btree (psite_mop_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_lk04 ON main.psite_posbillmop USING btree (psite_posbill_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_lk05 ON main.psite_posbillmop USING btree (ref_psite_posbillmop_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_lk06 ON main.psite_posbillmop USING btree (ref_psite_posbill_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_lk07 ON main.psite_posbillmop USING btree (lpredemptiontoken_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_lk08 ON main.psite_posbillmop USING btree (psite_ptchead_code);
CREATE INDEX IF NOT EXISTS psite_posbillmop_site_billdate ON main.psite_posbillmop USING btree (admsite_code, ((billdate)::date));
CREATE UNIQUE INDEX IF NOT EXISTS posjournal_detail_pk ON main.posjournal_detail USING btree (code);
CREATE INDEX IF NOT EXISTS posjournal_detail_lk01 ON main.posjournal_detail USING btree (glcode);
CREATE INDEX IF NOT EXISTS posjournal_detail_lk02 ON main.posjournal_detail USING btree (posjournal_code);
CREATE INDEX IF NOT EXISTS posjournal_detail_lk03 ON main.posjournal_detail USING btree (psite_mop_code);
CREATE INDEX IF NOT EXISTS posjournal_detail_lk04 ON main.posjournal_detail USING btree (slcode);
CREATE INDEX IF NOT EXISTS posjournal_detail_lk05 ON main.posjournal_detail USING btree (psite_ptchead_code);
CREATE INDEX IF NOT EXISTS posjournal_detail_lk06 ON main.posjournal_detail USING btree (expense_master_code);
CREATE INDEX IF NOT EXISTS posjournal_detail_lk07 ON main.posjournal_detail USING btree (tender_master_code);
CREATE UNIQUE INDEX IF NOT EXISTS posjournal_detail_void_pk ON main.posjournal_detail_void USING btree (posjournal_detail_code);
CREATE INDEX IF NOT EXISTS posjournal_detail_void_lk01 ON main.posjournal_detail_void USING btree (expense_master_code);
CREATE INDEX IF NOT EXISTS posjournal_detail_void_lk02 ON main.posjournal_detail_void USING btree (glcode);
CREATE INDEX IF NOT EXISTS posjournal_detail_void_lk03 ON main.posjournal_detail_void USING btree (psite_mop_code);
CREATE INDEX IF NOT EXISTS posjournal_detail_void_lk04 ON main.posjournal_detail_void USING btree (psite_ptchead_code);
CREATE INDEX IF NOT EXISTS posjournal_detail_void_lk05 ON main.posjournal_detail_void USING btree (slcode);
CREATE INDEX IF NOT EXISTS posjournal_detail_void_lk06 ON main.posjournal_detail_void USING btree (tender_master_code);
CREATE UNIQUE INDEX IF NOT EXISTS retailordmain_pk ON main.retailordmain USING btree (ordcode);
CREATE INDEX IF NOT EXISTS retailordmain_lk01 ON main.retailordmain USING btree (admou_code);
CREATE INDEX IF NOT EXISTS retailordmain_lk02 ON main.retailordmain USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS retailordmain_lk03 ON main.retailordmain USING btree (created_by);
CREATE UNIQUE INDEX IF NOT EXISTS retailordmain_u01 ON main.retailordmain USING btree ((
CASE
    WHEN (intgorderid IS NOT NULL) THEN ((created_by)::text || (intgorderid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS posjournal_void_pk ON main.posjournal_void USING btree (posjournal_code);
CREATE UNIQUE INDEX IF NOT EXISTS posjournal_void_u01 ON main.posjournal_void USING btree (scheme_docno, docdate, voidby, admsite_code);
CREATE INDEX IF NOT EXISTS posjournal_void_lk01 ON main.posjournal_void USING btree (admou_code);
CREATE INDEX IF NOT EXISTS posjournal_void_lk02 ON main.posjournal_void USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS posjournal_void_lk03 ON main.posjournal_void USING btree (customer_slcode);
CREATE INDEX IF NOT EXISTS posjournal_void_lk04 ON main.posjournal_void USING btree (debtor_glcode);
CREATE INDEX IF NOT EXISTS posjournal_void_lk05 ON main.posjournal_void USING btree (doccode);
CREATE INDEX IF NOT EXISTS posjournal_void_lk06 ON main.posjournal_void USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS posjournal_void_lk07 ON main.posjournal_void USING btree (voidby);
CREATE INDEX IF NOT EXISTS posjournal_void_lk08 ON main.posjournal_void USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS posjournal_void_u02 ON main.posjournal_void USING btree ((
CASE
    WHEN (intgrefid IS NOT NULL) THEN ((voidby)::text || (intgrefid)::text)
    ELSE NULL::text
END));
CREATE UNIQUE INDEX IF NOT EXISTS prdprrate_pk ON main.prdprrate USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdprrate_prcode_pcode ON main.prdprrate USING btree (prcode, pcode);
CREATE INDEX IF NOT EXISTS prdprrate_lk01 ON main.prdprrate USING btree (pcode);
CREATE INDEX IF NOT EXISTS prdprrate_lk02 ON main.prdprrate USING btree (prcode);
CREATE UNIQUE INDEX IF NOT EXISTS prdprrate_article_pk ON main.prdprrate_article USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS prdprrate_article_u01 ON main.prdprrate_article USING btree (prcode, pcode, invarticle_code);
CREATE INDEX IF NOT EXISTS i_prdprrt_art_pr_art_p_code ON main.prdprrate_article USING btree (invarticle_code, prcode, pcode);
CREATE INDEX IF NOT EXISTS prdprrate_article_lk01 ON main.prdprrate_article USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS prdprrate_article_lk02 ON main.prdprrate_article USING btree (pcode);
CREATE INDEX IF NOT EXISTS prdprrate_article_lk03 ON main.prdprrate_article USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdprrate_article_lk04 ON main.prdprrate_article USING btree (prdprrate_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdpr_prcode ON main.prdpr USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdpr_lk01 ON main.prdpr USING btree (parcode);
CREATE UNIQUE INDEX IF NOT EXISTS prdprrate_item_pk ON main.prdprrate_item USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS prdprrate_item_u01 ON main.prdprrate_item USING btree (prcode, pcode, icode);
CREATE INDEX IF NOT EXISTS i_prdprrt_itm_pr_itm_p_code ON main.prdprrate_item USING btree (icode, prcode, pcode);
CREATE INDEX IF NOT EXISTS prdprrate_item_lk01 ON main.prdprrate_item USING btree (icode);
CREATE INDEX IF NOT EXISTS prdprrate_item_lk02 ON main.prdprrate_item USING btree (pcode);
CREATE INDEX IF NOT EXISTS prdprrate_item_lk03 ON main.prdprrate_item USING btree (prcode);
CREATE INDEX IF NOT EXISTS prdprrate_item_lk04 ON main.prdprrate_item USING btree (prdprrate_code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_appl_code_pk ON main.promo_applicable USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_appl_created_prio_u01 ON main.promo_applicable USING btree (iscreatedbyho, priority);
CREATE INDEX IF NOT EXISTS promo_applicable_i01 ON main.promo_applicable USING btree (allocation_ho_matching_code);
CREATE INDEX IF NOT EXISTS promo_applicable_lk01 ON main.promo_applicable USING btree (allocatedby);
CREATE INDEX IF NOT EXISTS promo_applicable_lk02 ON main.promo_applicable USING btree (approvedby);
CREATE INDEX IF NOT EXISTS promo_applicable_lk03 ON main.promo_applicable USING btree (closedby);
CREATE INDEX IF NOT EXISTS promo_applicable_lk04 ON main.promo_applicable USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS promo_applicable_lk05 ON main.promo_applicable USING btree (promo_code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_slab_slab_code_pk ON main.promo_slab USING btree (slab_code);
CREATE INDEX IF NOT EXISTS promo_slab_lk01 ON main.promo_slab USING btree (get_assortment_code);
CREATE INDEX IF NOT EXISTS promo_slab_lk02 ON main.promo_slab USING btree (get_benefit_code);
CREATE INDEX IF NOT EXISTS promo_slab_lk03 ON main.promo_slab USING btree (promo_code);
CREATE UNIQUE INDEX IF NOT EXISTS promo_benefits_code_pk ON main.promo_benefits USING btree (code);
CREATE INDEX IF NOT EXISTS psite_alloc_article_lk01 ON main.psite_alloc_article USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_alloc_article_lk02 ON main.psite_alloc_article USING btree (invarticle_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_alloc_article_u01 ON main.psite_alloc_article USING btree (admsite_code, invarticle_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_alloc_charge_u01 ON main.psite_alloc_charge USING btree (admsite_code, salchgcode);
CREATE INDEX IF NOT EXISTS psite_alloc_charge_lk01 ON main.psite_alloc_charge USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_alloc_charge_lk02 ON main.psite_alloc_charge USING btree (salchgcode);
CREATE INDEX IF NOT EXISTS psite_alloc_department_lk01 ON main.psite_alloc_department USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_alloc_department_lk02 ON main.psite_alloc_department USING btree (grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_alloc_department_u01 ON main.psite_alloc_department USING btree (admsite_code, grpcode);
CREATE INDEX IF NOT EXISTS psite_alloc_division_lk01 ON main.psite_alloc_division USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_alloc_division_lk02 ON main.psite_alloc_division USING btree (grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_alloc_division_u01 ON main.psite_alloc_division USING btree (admsite_code, grpcode);
CREATE INDEX IF NOT EXISTS psite_alloc_section_lk01 ON main.psite_alloc_section USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_alloc_section_lk02 ON main.psite_alloc_section USING btree (grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_alloc_section_u01 ON main.psite_alloc_section USING btree (admsite_code, grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_auditjournal_pk ON main.psite_auditjournal USING btree (code);
CREATE INDEX IF NOT EXISTS psite_auditjournal_lk01 ON main.psite_auditjournal USING btree (admou_code);
CREATE INDEX IF NOT EXISTS psite_auditjournal_lk02 ON main.psite_auditjournal USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_auditjournal_lk03 ON main.psite_auditjournal USING btree (slcode);
CREATE INDEX IF NOT EXISTS psite_auditjournal_lk04 ON main.psite_auditjournal USING btree (store_loccode);
CREATE INDEX IF NOT EXISTS psite_auditjournal_lk05 ON main.psite_auditjournal USING btree (ycode);
CREATE INDEX IF NOT EXISTS psite_auditjournal_lk06 ON main.psite_auditjournal USING btree (psite_stockpoint_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_auditjournal_assrtmnt_pk ON main.psite_auditjournal_assortment USING btree (code);
CREATE INDEX IF NOT EXISTS psite_auditjournal_assort_lk01 ON main.psite_auditjournal_assortment USING btree (psite_auditjournal_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_auditjournalitem_pk ON main.psite_auditjournalitem USING btree (code);
CREATE INDEX IF NOT EXISTS psite_auditjournalitem_lk01 ON main.psite_auditjournalitem USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_auditjournalitem_lk02 ON main.psite_auditjournalitem USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_auditjournalitem_lk03 ON main.psite_auditjournalitem USING btree (psite_auditjournal_code);
CREATE INDEX IF NOT EXISTS psite_auditjournalitem_lk04 ON main.psite_auditjournalitem USING btree (psite_stockpoint_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_auditplan_pk ON main.psite_auditplan USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_auditplan_u01 ON main.psite_auditplan USING btree (name);
CREATE INDEX IF NOT EXISTS psite_auditplan_lk01 ON main.psite_auditplan USING btree (createdby);
CREATE INDEX IF NOT EXISTS psite_auditplan_lk02 ON main.psite_auditplan USING btree (lastmodifiedby);
CREATE UNIQUE INDEX IF NOT EXISTS psite_auditplan_assign_pk ON main.psite_auditplan_assign USING btree (code);
CREATE INDEX IF NOT EXISTS psite_auditplan_assign_lk01 ON main.psite_auditplan_assign USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_auditplan_assign_lk02 ON main.psite_auditplan_assign USING btree (psite_auditplan_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_auditplan_assortment_pk ON main.psite_auditplan_assortment USING btree (code);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk01 ON main.psite_auditplan_assortment USING btree (ccode1);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk02 ON main.psite_auditplan_assortment USING btree (ccode2);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk03 ON main.psite_auditplan_assortment USING btree (ccode3);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk04 ON main.psite_auditplan_assortment USING btree (ccode4);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk05 ON main.psite_auditplan_assortment USING btree (ccode5);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk06 ON main.psite_auditplan_assortment USING btree (ccode6);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk07 ON main.psite_auditplan_assortment USING btree (department_grpcode);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk08 ON main.psite_auditplan_assortment USING btree (division_grpcode);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk09 ON main.psite_auditplan_assortment USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk10 ON main.psite_auditplan_assortment USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk11 ON main.psite_auditplan_assortment USING btree (psite_auditplan_code);
CREATE INDEX IF NOT EXISTS psite_auditplan_assortmen_lk12 ON main.psite_auditplan_assortment USING btree (section_grpcode);
CREATE INDEX IF NOT EXISTS psite_backuperror_lk01 ON main.psite_backuperror USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_coupon_assrt_pk ON main.psite_coupon_assrt USING btree (code);
CREATE INDEX IF NOT EXISTS psite_coupon_assrt_lk01 ON main.psite_coupon_assrt USING btree (assrt_code);
CREATE INDEX IF NOT EXISTS psite_coupon_assrt_lk02 ON main.psite_coupon_assrt USING btree (couponoffer_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_cus_merge_session_pk ON main.psite_cus_bulk_merge_session USING btree (id);
CREATE INDEX IF NOT EXISTS psite_cus_bulk_merge_sess_lk01 ON main.psite_cus_bulk_merge_session USING btree (createdbyid);
CREATE UNIQUE INDEX IF NOT EXISTS psite_customer_merge_pk ON main.psite_customer_merge USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_customer_merge_u01 ON main.psite_customer_merge USING btree (old_psite_customer_code, new_psite_customer_code);
CREATE INDEX IF NOT EXISTS psite_customer_merge_lk01 ON main.psite_customer_merge USING btree (createdby);
CREATE UNIQUE INDEX IF NOT EXISTS admisdcode_pk ON main.admisd USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS admisdcode_u01 ON main.admisd USING btree (country, isdcode);
CREATE INDEX IF NOT EXISTS psite_day_stlm_acc_lk01 ON main.psite_day_stlm_acc USING btree (mopid);
CREATE UNIQUE INDEX IF NOT EXISTS psite_deliveryslip_pk ON main.psite_deliveryslip USING btree (code);
CREATE INDEX IF NOT EXISTS psite_deliveryslip_lk01 ON main.psite_deliveryslip USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslip_lk02 ON main.psite_deliveryslip USING btree (psite_posbill_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslip_lk03 ON main.psite_deliveryslip USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslip_lk04 ON main.psite_deliveryslip USING btree (psite_docscheme_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslip_lk05 ON main.psite_deliveryslip USING btree (psite_customer_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_deliveryslipitem_pk ON main.psite_deliveryslipitem USING btree (code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitem_lk01 ON main.psite_deliveryslipitem USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitem_lk02 ON main.psite_deliveryslipitem USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitem_lk03 ON main.psite_deliveryslipitem USING btree (ipsite_discount_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitem_lk04 ON main.psite_deliveryslipitem USING btree (psite_deliveryslip_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitem_lk05 ON main.psite_deliveryslipitem USING btree (taxdetcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_deliveryslipitemvoid_pk ON main.psite_deliveryslipitemvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitemvoi_lk01 ON main.psite_deliveryslipitemvoid USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitemvoi_lk02 ON main.psite_deliveryslipitemvoid USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitemvoi_lk03 ON main.psite_deliveryslipitemvoid USING btree (ipsite_discount_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitemvoi_lk04 ON main.psite_deliveryslipitemvoid USING btree (psite_deliveryslipvoid_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipitemvoi_lk05 ON main.psite_deliveryslipitemvoid USING btree (taxdetcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_deliveryslipvoid_pk ON main.psite_deliveryslipvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipvoid_lk01 ON main.psite_deliveryslipvoid USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipvoid_lk02 ON main.psite_deliveryslipvoid USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_deliveryslipvoid_lk03 ON main.psite_deliveryslipvoid USING btree (psite_customer_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_event_archive_pk ON main.psite_event_archive USING btree (code);
CREATE INDEX IF NOT EXISTS psite_event_archive_lk01 ON main.psite_event_archive USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_event_archive_lk02 ON main.psite_event_archive USING btree (dxsendid);
CREATE INDEX IF NOT EXISTS psite_event_archive_lk03 ON main.psite_event_archive USING btree (eventtype);
CREATE UNIQUE INDEX IF NOT EXISTS p_psev_type_eventtype ON main.psite_event_type USING btree (eventtype);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mdmenu_pk ON main.psite_mdmenu USING btree (id);
CREATE INDEX IF NOT EXISTS psite_mdmenu_lk01 ON main.psite_mdmenu USING btree (sys_mdmenuparentid);
CREATE INDEX IF NOT EXISTS psite_global_rolemenuoper_lk01 ON main.psite_global_rolemenuoperation USING btree (mdappoperationid);
CREATE INDEX IF NOT EXISTS psite_global_rolemenuoper_lk02 ON main.psite_global_rolemenuoperation USING btree (rolemenuid);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mdappoperation_pk ON main.psite_mdappoperation USING btree (id);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grcchgitem_pk ON main.psite_grcchgitem USING btree (code);
CREATE INDEX IF NOT EXISTS psite_grcchgitem_lk01 ON main.psite_grcchgitem USING btree (charge_code);
CREATE INDEX IF NOT EXISTS psite_grcchgitem_lk02 ON main.psite_grcchgitem USING btree (psite_grcitem_code);
CREATE INDEX IF NOT EXISTS psite_grcchgitem_lk03 ON main.psite_grcchgitem USING btree (psite_grc_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_fintradegrp_code ON main.fintradegrp USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_fintradegrp_name ON main.fintradegrp USING btree (name);
CREATE INDEX IF NOT EXISTS fintradegrp_lk01 ON main.fintradegrp USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grtchg_pk ON main.psite_grtchg USING btree (code);
CREATE INDEX IF NOT EXISTS psite_grtchg_lk01 ON main.psite_grtchg USING btree (charge_code);
CREATE INDEX IF NOT EXISTS psite_grtchg_lk02 ON main.psite_grtchg USING btree (psite_grt_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_grtchgitem_pk ON main.psite_grtchgitem USING btree (code);
CREATE INDEX IF NOT EXISTS psite_grtchgitem_lk01 ON main.psite_grtchgitem USING btree (charge_code);
CREATE INDEX IF NOT EXISTS psite_grtchgitem_lk02 ON main.psite_grtchgitem USING btree (psite_grtitem_code);
CREATE INDEX IF NOT EXISTS psite_grtchgitem_lk03 ON main.psite_grtchgitem USING btree (psite_grt_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mdmenuappoperation_pk ON main.psite_mdmenuappoperation USING btree (sys_mdappoperationid, sys_mdmenuid);
CREATE INDEX IF NOT EXISTS psite_mdmenuappoperation_lk01 ON main.psite_mdmenuappoperation USING btree (sys_mdappoperationid);
CREATE INDEX IF NOT EXISTS psite_mdmenuappoperation_lk02 ON main.psite_mdmenuappoperation USING btree (sys_mdmenuid);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mdplugintypes_pk ON main.psite_mdplugintypes USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mdplugintypes_uk ON main.psite_mdplugintypes USING btree (eventtype);
CREATE UNIQUE INDEX IF NOT EXISTS psite_mdpluginhooks_pk ON main.psite_mdpluginhooks USING btree (code);
CREATE INDEX IF NOT EXISTS psite_mdpluginhooks_lk01 ON main.psite_mdpluginhooks USING btree (plugintype_code);
CREATE INDEX IF NOT EXISTS psite_posbillitemreturnvo_lk01 ON main.psite_posbillitemreturnvoid USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_pluginvendor_pk ON main.psite_pluginvendor USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbill_park_pk ON main.psite_posbill_park USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk01 ON main.psite_posbill_park USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk02 ON main.psite_posbill_park USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk03 ON main.psite_posbill_park USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk04 ON main.psite_posbill_park USING btree (lpbenefit_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk05 ON main.psite_posbill_park USING btree (lpbenefit_point_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk06 ON main.psite_posbill_park USING btree (lpcardno);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk07 ON main.psite_posbill_park USING btree (lpcard_benefit_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk08 ON main.psite_posbill_park USING btree (lpcard_benefit_point_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk09 ON main.psite_posbill_park USING btree (mpsite_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk10 ON main.psite_posbill_park USING btree (owner_gstin_state_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk11 ON main.psite_posbill_park USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_posbill_park_lk12 ON main.psite_posbill_park USING btree (store_loccode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillcn_pk ON main.psite_posbillcn USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillcn_lk01 ON main.psite_posbillcn USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillcn_lk02 ON main.psite_posbillcn USING btree (cni_psite_posbill_code);
CREATE INDEX IF NOT EXISTS psite_posbillcn_lk03 ON main.psite_posbillcn USING btree (psite_customer_code);
CREATE INDEX IF NOT EXISTS psite_posbillcn_lk04 ON main.psite_posbillcn USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillcnadj_pk ON main.psite_posbillcnadj USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillcnadj_lk01 ON main.psite_posbillcnadj USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillcnadj_lk02 ON main.psite_posbillcnadj USING btree (psite_posbillcn_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillcnvoid_pk ON main.psite_posbillcnvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillcnvoid_lk01 ON main.psite_posbillcnvoid USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillcnvoid_lk02 ON main.psite_posbillcnvoid USING btree (cni_psite_posbillvoid_code);
CREATE INDEX IF NOT EXISTS psite_posbillcnvoid_lk03 ON main.psite_posbillcnvoid USING btree (psite_customer_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbilldn_pk ON main.psite_posbilldn USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbilldn_lk01 ON main.psite_posbilldn USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbilldn_lk02 ON main.psite_posbilldn USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbilldnvoid_pk ON main.psite_posbilldnvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbilldnvoid_lk01 ON main.psite_posbilldnvoid USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillitem_pk ON main.psite_posbillitem USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillitem_lk01 ON main.psite_posbillitem USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillitem_lk02 ON main.psite_posbillitem USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_posbillitem_lk03 ON main.psite_posbillitem USING btree (ipsite_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbillitem_lk04 ON main.psite_posbillitem USING btree (psite_posbill_code);
CREATE INDEX IF NOT EXISTS psite_posbillitem_lk05 ON main.psite_posbillitem USING btree (orderitemid);
CREATE INDEX IF NOT EXISTS psite_posbillitemreturn_lk01 ON main.psite_posbillitemreturn USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillvoid_pk ON main.psite_posbillvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillvoid_lk01 ON main.psite_posbillvoid USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillvoid_lk02 ON main.psite_posbillvoid USING btree (mpsite_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbillvoid_lk03 ON main.psite_posbillvoid USING btree (lpcardno);
CREATE INDEX IF NOT EXISTS psite_posbillvoid_lk04 ON main.psite_posbillvoid USING btree (psite_stockpoint_code);
CREATE INDEX IF NOT EXISTS psite_posbillvoid_lk05 ON main.psite_posbillvoid USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS psite_posbillvoid_lk06 ON main.psite_posbillvoid USING btree (cp_gstin_state_code);
CREATE INDEX IF NOT EXISTS psite_posbillvoid_lk07 ON main.psite_posbillvoid USING btree (owner_gstin_state_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillitemvoid_pk ON main.psite_posbillitemvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillitemvoid_lk01 ON main.psite_posbillitemvoid USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillitemvoid_lk02 ON main.psite_posbillitemvoid USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_posbillitemvoid_lk03 ON main.psite_posbillitemvoid USING btree (ipsite_discount_code);
CREATE INDEX IF NOT EXISTS psite_posbillitemvoid_lk04 ON main.psite_posbillitemvoid USING btree (psite_posbillvoid_code);
CREATE INDEX IF NOT EXISTS psite_posbillitemvoid_lk05 ON main.psite_posbillitemvoid USING btree (orderitemid);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillmopdeno_pk ON main.psite_posbillmopdeno USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillmopdeno_lk01 ON main.psite_posbillmopdeno USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopdeno_lk02 ON main.psite_posbillmopdeno USING btree (psite_posbillmop_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopdeno_lk03 ON main.psite_posbillmopdeno USING btree (psite_posbill_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopdeno_lk04 ON main.psite_posbillmopdeno USING btree (gvleaves_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posbillmopdenovoid_pk ON main.psite_posbillmopdenovoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posbillmopdenovoid_lk01 ON main.psite_posbillmopdenovoid USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopdenovoid_lk02 ON main.psite_posbillmopdenovoid USING btree (psite_posbillmopvoid_code);
CREATE INDEX IF NOT EXISTS psite_posbillmopdenovoid_lk03 ON main.psite_posbillmopdenovoid USING btree (psite_posbillvoid_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posdeprefbill_pk ON main.psite_posdeprefbill USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posdeprefbill_lk01 ON main.psite_posdeprefbill USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posdeprefbill_lk02 ON main.psite_posdeprefbill USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posdeprefbillvoid_pk ON main.psite_posdeprefbillvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posdeprefbillvoid_lk01 ON main.psite_posdeprefbillvoid USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posgvbill_pk ON main.psite_posgvbill USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posgvbill_lk01 ON main.psite_posgvbill USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posgvbill_lk02 ON main.psite_posgvbill USING btree (psite_customer_code);
CREATE INDEX IF NOT EXISTS psite_posgvbill_lk03 ON main.psite_posgvbill USING btree (psite_discount_code);
CREATE INDEX IF NOT EXISTS psite_posgvbill_lk04 ON main.psite_posgvbill USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posgvbilldetail_pk ON main.psite_posgvbilldetail USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posgvbilldetail_lk01 ON main.psite_posgvbilldetail USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posgvbilldetail_lk02 ON main.psite_posgvbilldetail USING btree (gvleaves_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posorderitem_pk ON main.psite_posorderitem USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posorderitem_lk01 ON main.psite_posorderitem USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posorderitem_lk02 ON main.psite_posorderitem USING btree (icode);
CREATE INDEX IF NOT EXISTS psite_posorderitem_lk03 ON main.psite_posorderitem USING btree (psite_posorder_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_pospaydrop_pk ON main.psite_pospaydrop USING btree (code);
CREATE INDEX IF NOT EXISTS psite_pospaydrop_lk01 ON main.psite_pospaydrop USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_pospaydrop_lk02 ON main.psite_pospaydrop USING btree (psite_possession_code);
CREATE INDEX IF NOT EXISTS psite_pospaydrop_lk03 ON main.psite_pospaydrop USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_possession_pk ON main.psite_possession USING btree (code);
CREATE INDEX IF NOT EXISTS psite_possession_lk01 ON main.psite_possession USING btree (admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_pospayinout_pk ON main.psite_pospayinout USING btree (code);
CREATE INDEX IF NOT EXISTS psite_pospayinout_lk01 ON main.psite_pospayinout USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_pospayinout_lk02 ON main.psite_pospayinout USING btree (psite_possession_code);
CREATE INDEX IF NOT EXISTS psite_pospayinout_lk03 ON main.psite_pospayinout USING btree (psite_docscheme_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_pospaymop_pk ON main.psite_pospaymop USING btree (code);
CREATE INDEX IF NOT EXISTS psite_pospaymop_lk01 ON main.psite_pospaymop USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_pospaymop_lk02 ON main.psite_pospaymop USING btree (psite_possession_code);
CREATE INDEX IF NOT EXISTS psite_pospaymop_lk03 ON main.psite_pospaymop USING btree (psite_mop_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_pospaymopcount_pk ON main.psite_pospaymopcount USING btree (code);
CREATE INDEX IF NOT EXISTS psite_pospaymopcount_lk01 ON main.psite_pospaymopcount USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_pospaymopcount_lk02 ON main.psite_pospaymopcount USING btree (psite_pospaymop_code);
CREATE INDEX IF NOT EXISTS psite_pospaymopcount_lk03 ON main.psite_pospaymopcount USING btree (psite_possession_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posreprintbillaudit_pk ON main.psite_posreprintbillaudit USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posreprintbillaudit_lk01 ON main.psite_posreprintbillaudit USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posreprintbillaudit_lk02 ON main.psite_posreprintbillaudit USING btree (psite_posbill_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posrpnbillauditvoid_pk ON main.psite_posreprintbillauditvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posstlmacc_lk01 ON main.psite_posstlmacc USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posstlmacc_lk02 ON main.psite_posstlmacc USING btree (psite_mop_code);
CREATE INDEX IF NOT EXISTS psite_posstlmacc_lk03 ON main.psite_posstlmacc USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS psite_posstlmacc_lk04 ON main.psite_posstlmacc USING btree (psite_stlm_param_acc_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posstlmaudit_ho_pkey ON main.psite_posstlmaudit_ho USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posstlmaudit_ho_lk01 ON main.psite_posstlmaudit_ho USING btree (psite_posstlm_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_posstlmaudit_pos_pk ON main.psite_posstlmaudit_pos USING btree (code);
CREATE INDEX IF NOT EXISTS psite_posstlmaudit_pos_lk01 ON main.psite_posstlmaudit_pos USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS psite_posstlmdetail_lk01 ON main.psite_posstlmdetail USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posstlmdetail_lk02 ON main.psite_posstlmdetail USING btree (psite_mop_code);
CREATE INDEX IF NOT EXISTS psite_posstlmdetail_lk03 ON main.psite_posstlmdetail USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS psite_posstlmdetail_lk04 ON main.psite_posstlmdetail USING btree (psite_ptchead_code);
CREATE INDEX IF NOT EXISTS psite_posstlmoth_lk01 ON main.psite_posstlmoth USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posstlmoth_lk02 ON main.psite_posstlmoth USING btree (psite_posstlm_code);
CREATE INDEX IF NOT EXISTS psite_posstlmoth_lk03 ON main.psite_posstlmoth USING btree (psite_stlm_param_oth_code);
CREATE INDEX IF NOT EXISTS psite_posstlmsession_lk01 ON main.psite_posstlmsession USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_posstlmsession_lk02 ON main.psite_posstlmsession USING btree (psite_possession_code);
CREATE INDEX IF NOT EXISTS psite_posstlmsession_lk03 ON main.psite_posstlmsession USING btree (psite_posstlm_code);
CREATE UNIQUE INDEX IF NOT EXISTS psite_ptcbill_pk ON main.psite_ptcbill USING btree (code);
CREATE INDEX IF NOT EXISTS psite_ptcbill_billdate ON main.psite_ptcbill USING btree (((billdate)::date));
CREATE INDEX IF NOT EXISTS psite_ptcbill_lk01 ON main.psite_ptcbill USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_ptcbill_lk02 ON main.psite_ptcbill USING btree (psite_ptchead_code);
CREATE INDEX IF NOT EXISTS psite_ptcbill_lk03 ON main.psite_ptcbill USING btree (psite_docscheme_code);
CREATE INDEX IF NOT EXISTS psite_ptcbill_site_billdate ON main.psite_ptcbill USING btree (admsite_code, ((billdate)::date));
CREATE UNIQUE INDEX IF NOT EXISTS psite_ptcbillvoid_pk ON main.psite_ptcbillvoid USING btree (code);
CREATE INDEX IF NOT EXISTS psite_ptcbillvoid_lk01 ON main.psite_ptcbillvoid USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_ptcbillvoid_lk02 ON main.psite_ptcbillvoid USING btree (psite_ptchead_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_finchg_chgcode ON main.finchg USING btree (chgcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_finchg_chgname ON main.finchg USING btree (chgname);
CREATE INDEX IF NOT EXISTS finchg_lk01 ON main.finchg USING btree (formcode);
CREATE INDEX IF NOT EXISTS finchg_lk02 ON main.finchg USING btree (glcode);
CREATE INDEX IF NOT EXISTS finchg_lk03 ON main.finchg USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS finchg_lk04 ON main.finchg USING btree (slcode);
CREATE INDEX IF NOT EXISTS finchg_lk05 ON main.finchg USING btree (fintradegrp_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_purtermmain_code ON main.purtermmain USING btree (code);
CREATE INDEX IF NOT EXISTS purtermmain_lk01 ON main.purtermmain USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS purtermmain_lk02 ON main.purtermmain USING btree (purchase_glcode);
CREATE INDEX IF NOT EXISTS purtermmain_lk03 ON main.purtermmain USING btree (purchase_return_glcode);
CREATE INDEX IF NOT EXISTS purtermmain_lk04 ON main.purtermmain USING btree (purchase_return_slcode);
CREATE INDEX IF NOT EXISTS purtermmain_lk05 ON main.purtermmain USING btree (purchase_slcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_finform_formcode ON main.finform USING btree (formcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_finform_formname ON main.finform USING btree (formname);
CREATE INDEX IF NOT EXISTS finform_lk01 ON main.finform USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_service_servicecode ON main.purservice USING btree (servicecode);
CREATE UNIQUE INDEX IF NOT EXISTS u_purservice_servicename ON main.purservice USING btree (servicename);
CREATE INDEX IF NOT EXISTS purservice_lk01 ON main.purservice USING btree (glcode);
CREATE INDEX IF NOT EXISTS purservice_lk02 ON main.purservice USING btree (tdstypecode);
CREATE INDEX IF NOT EXISTS purservice_lk03 ON main.purservice USING btree (cmpcode);
CREATE INDEX IF NOT EXISTS purservice_lk04 ON main.purservice USING btree (slcode);
CREATE INDEX IF NOT EXISTS purservice_lk05 ON main.purservice USING btree (taxcode);
CREATE INDEX IF NOT EXISTS purservice_lk06 ON main.purservice USING btree (invhsnsacmain_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_admterminal_terminalcode ON main.admterminal USING btree (terminalcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_admterminal_ipaddress ON main.admterminal USING btree (ipaddress);
CREATE UNIQUE INDEX IF NOT EXISTS u_admterminal_terminalname ON main.admterminal USING btree (terminalname);
CREATE INDEX IF NOT EXISTS admcfg_lk01 ON main.admcfg USING btree (terminalcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_admcmp_cmpcode ON main.admcmp USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_admcmp_cmpinit ON main.admcmp USING btree (cmpinit);
CREATE UNIQUE INDEX IF NOT EXISTS u_admcmp_cmpname ON main.admcmp USING btree (cmpname);
CREATE UNIQUE INDEX IF NOT EXISTS u_admcmp_itemprefix ON main.admcmp USING btree (itemprefix);
CREATE UNIQUE INDEX IF NOT EXISTS u_admcmp_shrtname ON main.admcmp USING btree (shrtname);
CREATE INDEX IF NOT EXISTS admcmp_lk01 ON main.admcmp USING btree (admcity_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_admlet_letcode ON main.admlet USING btree (letcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_admlet_letno ON main.admlet USING btree (letno);
CREATE INDEX IF NOT EXISTS admlet_lk01 ON main.admlet USING btree (ecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_admlog_logcode ON main.admlog USING btree (logcode);
CREATE INDEX IF NOT EXISTS admlog_lk01 ON main.admlog USING btree (ecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_admmenu_menucode ON main.admmenu USING btree (menucode);
CREATE INDEX IF NOT EXISTS admmenu_lk01 ON main.admmenu USING btree (functioncode);
CREATE INDEX IF NOT EXISTS admmenu_lk02 ON main.admmenu USING btree (parentcode);
CREATE INDEX IF NOT EXISTS admmenu_lk03 ON main.admmenu USING btree (mdmenushortcode);
CREATE INDEX IF NOT EXISTS admou_setting_lk01 ON main.admou_setting USING btree (admou_code_in);
CREATE INDEX IF NOT EXISTS admou_setting_lk02 ON main.admou_setting USING btree (admou_code_out);
CREATE UNIQUE INDEX IF NOT EXISTS p_admrole_rlcode ON main.admrole USING btree (rlcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_admrole_rlname ON main.admrole USING btree (rlname);
CREATE INDEX IF NOT EXISTS admrole_lk01 ON main.admrole USING btree (profcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_admprof_profcode ON main.admprof USING btree (profcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_admprof_profname ON main.admprof USING btree (profname);
CREATE UNIQUE INDEX IF NOT EXISTS p_finenttype_enttype ON main.finenttype USING btree (enttype);
CREATE INDEX IF NOT EXISTS finenttype_lk01 ON main.finenttype USING btree (entgrpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_finentgrp_entgrpcode ON main.finentgrp USING btree (entgrpcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_finentgrp_entgrpname ON main.finentgrp USING btree (entgrpname);
CREATE UNIQUE INDEX IF NOT EXISTS p_fingrp_grpcode ON main.fingrp USING btree (grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_fingrp_grpname_parcode ON main.fingrp USING btree (grpname, parcode);
CREATE INDEX IF NOT EXISTS fingrp_lk01 ON main.fingrp USING btree (parcode);
CREATE UNIQUE INDEX IF NOT EXISTS fingl_site_pk ON main.fingl_site USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_fingl_site ON main.fingl_site USING btree (admsite_code, glcode);
CREATE INDEX IF NOT EXISTS fingl_site_lk01 ON main.fingl_site USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS fingl_site_lk02 ON main.fingl_site USING btree (glcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_admcls_clscode ON main.admcls USING btree (clscode);
CREATE UNIQUE INDEX IF NOT EXISTS u_admcls_clsname ON main.admcls USING btree (clsname);
CREATE INDEX IF NOT EXISTS admcls_lk01 ON main.admcls USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS admgstcategory_pk ON main.admgstcategory USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS p_salcreditrating_crcode ON main.salcreditrating USING btree (crcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_salcreditrating_crname ON main.salcreditrating USING btree (crname);
CREATE INDEX IF NOT EXISTS salcreditrating_lk01 ON main.salcreditrating USING btree (cmpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_finsl_loccode_code ON main.finsl_loccode USING btree (code);
CREATE INDEX IF NOT EXISTS finsl_loccode_lk01 ON main.finsl_loccode USING btree (finsl_ou_code);
CREATE INDEX IF NOT EXISTS finsl_loccode_lk02 ON main.finsl_loccode USING btree (loccode);
CREATE UNIQUE INDEX IF NOT EXISTS finsl_ou_u01 ON main.finsl_ou USING btree (slcode, admsite_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_finsl_ou_code ON main.finsl_ou USING btree (code);
CREATE INDEX IF NOT EXISTS finsl_ou_lk01 ON main.finsl_ou USING btree (admou_code);
CREATE INDEX IF NOT EXISTS finsl_ou_lk02 ON main.finsl_ou USING btree (challan_loccode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk03 ON main.finsl_ou USING btree (invoice_loccode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk04 ON main.finsl_ou USING btree (slcode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk05 ON main.finsl_ou USING btree (termcode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk06 ON main.finsl_ou USING btree (fintradegrp_code);
CREATE INDEX IF NOT EXISTS finsl_ou_lk07 ON main.finsl_ou USING btree (purtermmain_code);
CREATE INDEX IF NOT EXISTS finsl_ou_lk08 ON main.finsl_ou USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS finsl_ou_lk09 ON main.finsl_ou USING btree (pricelistcode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk10 ON main.finsl_ou USING btree (inloccode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk11 ON main.finsl_ou USING btree (outloccode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk12 ON main.finsl_ou USING btree (purformcode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk13 ON main.finsl_ou USING btree (salformcode);
CREATE INDEX IF NOT EXISTS finsl_ou_lk14 ON main.finsl_ou USING btree (saltradegrp_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_fintds_exception_code ON main.fintds_exception USING btree (code);
CREATE INDEX IF NOT EXISTS fintds_exception_lk01 ON main.fintds_exception USING btree (slcode);
CREATE INDEX IF NOT EXISTS fintds_exception_lk02 ON main.fintds_exception USING btree (tdstypecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_fintdsmain_tdscode ON main.fintdsmain USING btree (tdscode);
CREATE UNIQUE INDEX IF NOT EXISTS u_fintdsmain_tdsno_ycode ON main.fintdsmain USING btree (tdsno, ycode);
CREATE INDEX IF NOT EXISTS fintdsmain_lk01 ON main.fintdsmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS fintdsmain_lk02 ON main.fintdsmain USING btree (glcode);
CREATE INDEX IF NOT EXISTS fintdsmain_lk03 ON main.fintdsmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS fintdsmain_lk04 ON main.fintdsmain USING btree (pcode);
CREATE INDEX IF NOT EXISTS fintdsmain_lk05 ON main.fintdsmain USING btree (tdsglcode);
CREATE INDEX IF NOT EXISTS fintdsmain_lk06 ON main.fintdsmain USING btree (ycode);
CREATE INDEX IF NOT EXISTS fintdsmain_lk07 ON main.fintdsmain USING btree (tdsslcode);
CREATE UNIQUE INDEX IF NOT EXISTS finvchdn_pk ON main.finvchdn USING btree (code);
CREATE INDEX IF NOT EXISTS finvchdn_lk01 ON main.finvchdn USING btree (finjrnmain_code);
CREATE INDEX IF NOT EXISTS finvchdn_lk02 ON main.finvchdn USING btree (finvchmain_code);
CREATE INDEX IF NOT EXISTS finvchdn_lk03 ON main.finvchdn USING btree (purinvmain_invcode);
CREATE INDEX IF NOT EXISTS finvchdn_lk04 ON main.finvchdn USING btree (finopdoc_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_hrddept_deptcode ON main.hrddept USING btree (deptcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_hrddept_deptname ON main.hrddept USING btree (deptname);
CREATE UNIQUE INDEX IF NOT EXISTS int$so_wiz_code_pk01 ON main.int$so_wiz USING btree (code);
CREATE INDEX IF NOT EXISTS int$so_wiz_lk01 ON main.int$so_wiz USING btree (articlecode);
CREATE INDEX IF NOT EXISTS int$so_wiz_lk02 ON main.int$so_wiz USING btree (sitecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_inventgrp_entgrpcode ON main.inventgrp USING btree (entgrpcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_inventgrp_entgrpname ON main.inventgrp USING btree (entgrpname);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdroutemain_code ON main.prdroutemain USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdroutemain_name ON main.prdroutemain USING btree (name);
CREATE INDEX IF NOT EXISTS prdroutemain_lk01 ON main.prdroutemain USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdroutemain_lk02 ON main.prdroutemain USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS u_invgrprange_grpname_seq ON main.invgrprange USING btree (grpcode, seq);
CREATE INDEX IF NOT EXISTS invgrprange_lk01 ON main.invgrprange USING btree (grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_invlgtnote_bales_code ON main.invlgtnote_bales USING btree (code);
CREATE INDEX IF NOT EXISTS invlgtnote_bales_lk01 ON main.invlgtnote_bales USING btree (invgatein_code);
CREATE INDEX IF NOT EXISTS invlgtnote_bales_lk02 ON main.invlgtnote_bales USING btree (invlgtnote_code);
CREATE UNIQUE INDEX IF NOT EXISTS p_invmmrule_alloc_code ON main.invmmrule_allocation USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_mmrule_alloc_st_sl_ar_code ON main.invmmrule_allocation USING btree (admsite_code, slcode, invarticle_code);
CREATE INDEX IF NOT EXISTS invmmrule_allocation_lk01 ON main.invmmrule_allocation USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS invmmrule_allocation_lk02 ON main.invmmrule_allocation USING btree (slcode);
CREATE INDEX IF NOT EXISTS invmmrule_allocation_lk03 ON main.invmmrule_allocation USING btree (invarticle_code);
CREATE INDEX IF NOT EXISTS invmmrule_allocation_lk04 ON main.invmmrule_allocation USING btree (invmmrule_code);
CREATE UNIQUE INDEX IF NOT EXISTS invlgtnote_item_pk ON main.invlgtnote_item USING btree (code);
CREATE INDEX IF NOT EXISTS invlgtnote_item_lk01 ON main.invlgtnote_item USING btree (article_code);
CREATE INDEX IF NOT EXISTS invlgtnote_item_lk02 ON main.invlgtnote_item USING btree (dept_grpcode);
CREATE INDEX IF NOT EXISTS invlgtnote_item_lk03 ON main.invlgtnote_item USING btree (div_grpcode);
CREATE INDEX IF NOT EXISTS invlgtnote_item_lk04 ON main.invlgtnote_item USING btree (lgtcode);
CREATE INDEX IF NOT EXISTS invlgtnote_item_lk05 ON main.invlgtnote_item USING btree (sec_grpcode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prd_saitem_code ON main.prd_saitem USING btree (code);
CREATE INDEX IF NOT EXISTS prd_saitem_lk01 ON main.prd_saitem USING btree (ecode);
CREATE INDEX IF NOT EXISTS prd_saitem_lk02 ON main.prd_saitem USING btree (last_access_ecode);
CREATE UNIQUE INDEX IF NOT EXISTS p_prdroutegrp_code ON main.prdroutegrp USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_prdroutegrp_grpname ON main.prdroutegrp USING btree (grpname);
CREATE INDEX IF NOT EXISTS prdroutegrp_lk01 ON main.prdroutegrp USING btree (ecode);
CREATE INDEX IF NOT EXISTS prdroutegrp_lk02 ON main.prdroutegrp USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS prdroutegrp_lk03 ON main.prdroutegrp USING btree (slcode);
CREATE UNIQUE INDEX IF NOT EXISTS psite_event_data_pk ON main.psite_event_data USING btree (eventtype, eventdata);
CREATE INDEX IF NOT EXISTS psite_event_data_lk01 ON main.psite_event_data USING btree (eventtype);
CREATE UNIQUE INDEX IF NOT EXISTS p_psev_tracking_code ON main.psite_event_tracking USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_psev_tracking_composite ON main.psite_event_tracking USING btree (admsite_code, eventtype, refcode);
CREATE INDEX IF NOT EXISTS psite_event_tracking_lk01 ON main.psite_event_tracking USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_event_tracking_lk02 ON main.psite_event_tracking USING btree (eventtype);
CREATE UNIQUE INDEX IF NOT EXISTS p_psev_tracking_code2 ON main.psite_event_tracking2 USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS u_psev_tracking_composite2 ON main.psite_event_tracking2 USING btree (admsite_code, eventtype, refcode);
CREATE INDEX IF NOT EXISTS psite_event_tracking2_lk01 ON main.psite_event_tracking2 USING btree (admsite_code);
CREATE INDEX IF NOT EXISTS psite_event_tracking2_lk02 ON main.psite_event_tracking2 USING btree (eventtype);
CREATE UNIQUE INDEX IF NOT EXISTS p_purreqmain_reqcode ON main.purreqmain USING btree (reqcode);
CREATE INDEX IF NOT EXISTS purreqmain_lk01 ON main.purreqmain USING btree (descmpcode);
CREATE INDEX IF NOT EXISTS purreqmain_lk02 ON main.purreqmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS purreqmain_lk03 ON main.purreqmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS purreqmain_lk04 ON main.purreqmain USING btree (srccmpcode);
CREATE INDEX IF NOT EXISTS purreqmain_lk05 ON main.purreqmain USING btree (txncode);
CREATE INDEX IF NOT EXISTS purreqmain_lk06 ON main.purreqmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS chl_channelmaster_pkey ON main.chl_channelmaster USING btree (code);
CREATE UNIQUE INDEX IF NOT EXISTS chl_mj_orderdetail_pkey ON main.chl_mj_orderdetail USING btree (orderlineid);
CREATE INDEX IF NOT EXISTS chl_mj_orderdetail_lk01 ON main.chl_mj_orderdetail USING btree (orderid);
CREATE UNIQUE INDEX IF NOT EXISTS chl_mj_order_pkey ON main.chl_mj_order USING btree (orderid);
CREATE UNIQUE INDEX IF NOT EXISTS p_salreqmain_reqcode ON main.salreqmain USING btree (reqcode);
CREATE INDEX IF NOT EXISTS salreqmain_lk01 ON main.salreqmain USING btree (descmpcode);
CREATE INDEX IF NOT EXISTS salreqmain_lk02 ON main.salreqmain USING btree (ecode);
CREATE INDEX IF NOT EXISTS salreqmain_lk03 ON main.salreqmain USING btree (last_access_ecode);
CREATE INDEX IF NOT EXISTS salreqmain_lk04 ON main.salreqmain USING btree (srccmpcode);
CREATE INDEX IF NOT EXISTS salreqmain_lk05 ON main.salreqmain USING btree (txncode);
CREATE INDEX IF NOT EXISTS salreqmain_lk06 ON main.salreqmain USING btree (ycode);
CREATE UNIQUE INDEX IF NOT EXISTS p_saltermgrp_termgrpcode ON main.saltermgrp USING btree (termgrpcode);
CREATE UNIQUE INDEX IF NOT EXISTS u_saltermgrp_termgrpname ON main.saltermgrp USING btree (termgrpname);
CREATE INDEX IF NOT EXISTS reportlayoutdata_lk01 ON main.reportlayoutdata USING btree (layoutid);
CREATE UNIQUE INDEX IF NOT EXISTS retailordcancel_pk ON main.retailordcancel USING btree (code);
CREATE INDEX IF NOT EXISTS retailordcancel_lk01 ON main.retailordcancel USING btree (ordcode);
CREATE UNIQUE INDEX IF NOT EXISTS retailordmop_pk ON main.retailordmop USING btree (code);
CREATE INDEX IF NOT EXISTS retailordmop_lk01 ON main.retailordmop USING btree (ordcode);
CREATE INDEX IF NOT EXISTS retailordmop_lk02 ON main.retailordmop USING btree (psite_mop_code);
CREATE UNIQUE INDEX IF NOT EXISTS gds_entity_pk ON main.gds_entity USING btree (entity_id);
CREATE UNIQUE INDEX IF NOT EXISTS salcsmaop_pk ON main.salcsmop USING btree (code);
CREATE INDEX IF NOT EXISTS salcsmop_lk01 ON main.salcsmop USING btree (cscode);
CREATE INDEX IF NOT EXISTS salcsmop_lk02 ON main.salcsmop USING btree (glcode);
CREATE INDEX IF NOT EXISTS salcsmop_lk03 ON main.salcsmop USING btree (psite_mop_code);
CREATE INDEX IF NOT EXISTS salcsmop_lk04 ON main.salcsmop USING btree (slcode);
CREATE INDEX IF NOT EXISTS salcsmop_lk05 ON main.salcsmop USING btree (tender_master_code);
CREATE INDEX IF NOT EXISTS track_item_upd_lk01 ON main.track_item_upd USING btree (ecode);
CREATE INDEX IF NOT EXISTS track_item_upd_lk02 ON main.track_item_upd USING btree (grpcode);
CREATE INDEX IF NOT EXISTS track_item_upd_lk03 ON main.track_item_upd USING btree (terminal);
CREATE INDEX IF NOT EXISTS user_api_lk01 ON main.user_api USING btree (api_code);
CREATE INDEX IF NOT EXISTS user_api_lk02 ON main.user_api USING btree (user_code);
CREATE INDEX IF NOT EXISTS userlistpreffilter_lk01 ON main.userlistpreffilter USING btree (appuserid);
CREATE INDEX IF NOT EXISTS userlistpreffilter_lk02 ON main.userlistpreffilter USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS userlistpreffilter_lk03 ON main.userlistpreffilter USING btree (mdlistid);
CREATE INDEX IF NOT EXISTS userlistprefsortorder_lk01 ON main.userlistprefsortorder USING btree (appuserid);
CREATE INDEX IF NOT EXISTS userlistprefsortorder_lk02 ON main.userlistprefsortorder USING btree (lastmodifiedby);
CREATE INDEX IF NOT EXISTS userlistprefsortorder_lk03 ON main.userlistprefsortorder USING btree (mdlistid);
*/
CALL execute_ddl_statements();

	
UPDATE ROLEMENU
SET MDMENUSHORTCODE = 'Report'
WHERE MDMENUSHORTCODE IN 
('ReportAdmin','ReportHome','ManageReport');

DELETE FROM rolemenuoperation
WHERE ROLEMENUID IN (SELECT ID
        FROM ROLEMENU
        WHERE MDMENUSHORTCODE = 'Report');

DELETE FROM ROLEMENU
WHERE ctid IN (
    SELECT ctid
    FROM (
        SELECT ctid, 
               ROW_NUMBER() OVER (PARTITION BY roleid ORDER BY roleid) 
        AS row_num
        FROM ROLEMENU
        WHERE MDMENUSHORTCODE = 'Report'
    ) AS duplicates
    WHERE row_num > 1
);

DELETE FROM MDMENU WHERE SYS_MDMENUPARENTSHORTCODE = 'Report';

INSERT INTO GDS2_EVENT_MD VALUES('snd.returninvoice.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('snd.returninvoice.revert','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('snd.invoice.revert','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('retail.posgrt.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('retail.posgrt.revert','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('retail.posgrc.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('retail.posgrc.revert','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('snd.salesdebitcreditnote.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('snd.salesdebitcreditnote.deleted','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchaseinvoice.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchaseinvoice.deleted','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchaseserviceinvoice.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchaseserviceinvoice.deleted','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchasereturninvoice.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchasereturninvoice.deleted','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchasedebitcreditnote.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchasedebitcreditnote.deleted','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('snd.serviceinvoice.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('snd.serviceinvoice.deleted','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchaseservicedebitnote.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('procurement.purchaseservicedebitnote.deleted','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('retail.invoice.consignment.deleted','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('retail.posbill.added','Cube event for Site to Site transfer', 0, null, null);
INSERT INTO GDS2_EVENT_MD VALUES('retail.posbill.void','Cube event for Site to Site transfer', 0, null, null);


insert into GDS2_ENTITY(id,name,gds2_version)
values('SYSTEM_CUBE','GDS Entity for system defined Cube(s)',NULL);

DO $$
DECLARE
    returned_id INTEGER;
    descriptions TEXT[] := ARRAY[
       'snd.invoice.added',
       'snd.returninvoice.added',
       'retail.posgrc.added',
       'retail.posgrt.added',
       'snd.invoice.revert',
       'snd.returninvoice.revert',
       'retail.posgrc.revert',
       'retail.posgrt.revert'
    ];
BEGIN
    -- Insert into GDS2_SUBSCR and retrieve the inserted ID
    INSERT INTO GDS2_SUBSCR(entity_id, is_custom_order, is_enabled, created_on, max_active_worker_count)
    VALUES('SYSTEM_CUBE', 0, 1, CURRENT_DATE, 1)
    RETURNING id INTO returned_id;

    -- Loop through the array and insert each description into gds2_subscr_event
    FOR i IN 1 .. array_length(descriptions, 1) LOOP
        INSERT INTO gds2_subscr_event(subscr_id, event_id, sp_name)
        VALUES(returned_id, descriptions[i], 'DB_PRO_SITETOSITEMOVEMENTCONSOLIDATION');
    END LOOP;
END $$;


DO $$
DECLARE
    returned_id INTEGER;
    descriptions TEXT[] := ARRAY[
        'snd.returninvoice.added',
        'snd.returninvoice.revert',
        'snd.invoice.added',
        'snd.invoice.revert',
        'retail.posgrt.added',
        'retail.posgrt.revert',
        'retail.posgrc.added',
        'retail.posgrc.revert',
        'snd.salesdebitcreditnote.added',
        'snd.salesdebitcreditnote.deleted',
        'procurement.purchaseinvoice.added',
        'procurement.purchaseinvoice.deleted',
        'procurement.purchaseserviceinvoice.added',
        'procurement.purchaseserviceinvoice.deleted',
        'procurement.purchasereturninvoice.added',
        'procurement.purchasereturninvoice.deleted',
        'procurement.purchasedebitcreditnote.added',
        'procurement.purchasedebitcreditnote.deleted',
        'snd.serviceinvoice.added',
        'snd.serviceinvoice.deleted',
        'procurement.purchaseservicedebitnote.added',
        'procurement.purchaseservicedebitnote.deleted',
        'retail.invoice.consignment.deleted',
        'retail.invoice.consignment.added',
        'retail.posbill.added',
        'retail.posbill.void'
    ];
BEGIN
    -- Insert into GDS2_SUBSCR and retrieve the inserted ID
    INSERT INTO GDS2_SUBSCR(entity_id, is_custom_order, is_enabled, created_on, max_active_worker_count)
    VALUES('SYSTEM_CUBE', 0, 1, CURRENT_DATE, 1)
    RETURNING id INTO returned_id;

    -- Loop through the array and insert each description into gds2_subscr_event
    FOR i IN 1 .. array_length(descriptions, 1) LOOP
        INSERT INTO gds2_subscr_event(subscr_id, event_id, sp_name)
        VALUES(returned_id, descriptions[i], 'db_pro_compositegstconsolidation');
    END LOOP;
END $$;

DO $$ 
BEGIN 
	RAISE NOTICE 'ADDING DEFERRABLE FOREIGN KEYS';
END $$;

ALTER TABLE FINTAG DROP CONSTRAINT IF EXISTS R_FINTAG_POSTCODE1;
ALTER TABLE FINTAG DROP CONSTRAINT IF EXISTS R_FINTAG_POSTCODE2;
ALTER TABLE FINSL DROP CONSTRAINT IF EXISTS R_FINSL_BCTNAME;
ALTER TABLE FINSL DROP CONSTRAINT IF EXISTS R_FINSL_SCTNAME;
ALTER TABLE INVLOC DROP CONSTRAINT IF EXISTS R_INVLOC_CTNAME;
ALTER TABLE INVLGTNOTE DROP CONSTRAINT IF EXISTS INVLGTNOTE_R04;
ALTER TABLE INVLGTNOTE DROP CONSTRAINT IF EXISTS INVLGTNOTE_R03;
ALTER TABLE FINSL DROP CONSTRAINT IF EXISTS R_FINSL_AGCODE;
ALTER TABLE FINSL DROP CONSTRAINT IF EXISTS R_FINSL_TRPCODE;
ALTER TABLE FINSL DROP CONSTRAINT IF EXISTS R_FINSL_PUR_RETURN_SLCODE;
ALTER TABLE FINSL DROP CONSTRAINT IF EXISTS R_FINSL_PURCHASE_SLCODE;
ALTER TABLE INVARTICLE DROP CONSTRAINT IF EXISTS INVARTICLE_R01;
ALTER TABLE PSITE_GLOBAL_APPUSER DROP CONSTRAINT IF EXISTS PSITE_GLOBAL_APPUSER_R01;
ALTER TABLE PSITE_GLOBAL_SALESPERSON DROP CONSTRAINT IF EXISTS PSITE_GLOBAL_SALESPERSON_R01;
ALTER TABLE FINGL DROP CONSTRAINT IF EXISTS R_FINGL_CTNAME;

-----------------
ALTER TABLE fingl ADD CONSTRAINT
r_fingl_ctname FOREIGN KEY (ctname) REFERENCES admcity
(ctname) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_agcode FOREIGN KEY (agcode) REFERENCES finsl
(slcode) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_bctname FOREIGN KEY (bctname) REFERENCES admcity
(ctname) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_pur_return_slcode FOREIGN KEY (purchase_return_slcode) REFERENCES finsl
(slcode) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_purchase_slcode FOREIGN KEY (purchase_slcode) REFERENCES finsl
(slcode) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_sctname FOREIGN KEY (sctname) REFERENCES admcity
(ctname) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE finsl ADD CONSTRAINT
r_finsl_trpcode FOREIGN KEY (trpcode) REFERENCES finsl
(slcode) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_postcode1 FOREIGN KEY (postcode1) REFERENCES finpost
(postcode) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE fintag ADD CONSTRAINT
r_fintag_postcode2 FOREIGN KEY (postcode2) REFERENCES finpost
(postcode) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE invarticle ADD CONSTRAINT
invarticle_r01 FOREIGN KEY (grpcode) REFERENCES invgrp
(grpcode) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r03 FOREIGN KEY (stfr) REFERENCES admcity
(ctname) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE invlgtnote ADD CONSTRAINT
invlgtnote_r04 FOREIGN KEY (stto) REFERENCES admcity
(ctname) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE invloc ADD CONSTRAINT
r_invloc_ctname FOREIGN KEY (ctname) REFERENCES admcity
(ctname) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE psite_global_appuser ADD CONSTRAINT
psite_global_appuser_r01 FOREIGN KEY (ctname) REFERENCES admcity
(ctname) DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE psite_global_salesperson ADD CONSTRAINT
psite_global_salesperson_r01 FOREIGN KEY (ctname) REFERENCES admcity
(ctname) DEFERRABLE INITIALLY DEFERRED;
----------------------------------------
DROP INDEX IF EXISTS main.invstkplanitem_ui01;
DROP INDEX IF EXISTS main.invstkplnitem_u01;
CREATE UNIQUE INDEX invstkplnitem_u01
    ON main.invstkplanitem USING btree
    (stkplancode ASC NULLS LAST, loccode ASC NULLS LAST, icode COLLATE pg_catalog."default" ASC NULLS LAST, lev1grpcode ASC NULLS LAST, lev2grpcode ASC NULLS LAST, grpcode ASC NULLS LAST, invarticle_code ASC NULLS LAST, COALESCE(invbatch_serial_code, '-10'::integer::bigint) ASC NULLS LAST);

DELETE FROM ROLEMENUOPERATION WHERE ROLEMENUID IN (SELECT ID FROM ROLEMENU WHERE MDMENUSHORTCODE = 'AdminCubeManager');
DELETE FROM ROLEMENU WHERE MDMENUSHORTCODE = 'AdminCubeManager';
DELETE FROM MDMENU WHERE SYS_SHORTCODE = 'AdminCubeManager';
DELETE FROM ROLEMENUOPERATION WHERE ROLEMENUID IN (SELECT ID FROM ROLEMENU WHERE MDMENUSHORTCODE = 'DataExchange');
DELETE FROM ROLEMENU WHERE MDMENUSHORTCODE = 'DataExchange';
DELETE FROM MDMENU WHERE SYS_SHORTCODE = 'DataExchange';
-- Enable the Triggers
DO $$ 
DECLARE 
    trigger_record RECORD; 
BEGIN 
 FOR trigger_record IN 
select a.trigger_name as tg_name, a.table_name as tbl_name from (SELECT 
    tgname AS trigger_name,
    relname AS table_name,
    CASE 
        WHEN tgisinternal THEN 'System Trigger'
        ELSE 'User-defined Trigger'
    END AS trigger_type
FROM 
    pg_trigger
JOIN 
    pg_class ON pg_trigger.tgrelid = pg_class.oid
JOIN 
    pg_namespace ON pg_class.relnamespace = pg_namespace.oid
    where pg_namespace.nspname = 'main') a
    where a.trigger_type!='System Trigger'
  LOOP 
        EXECUTE 'ALTER TABLE ' || trigger_record.tbl_name || ' ENABLE TRIGGER ' || trigger_record.tg_name ||';'; 
    END LOOP; 
    END $$;
	
ALTER EVENT TRIGGER t_ddl_drop_aud ENABLE;
ALTER EVENT TRIGGER t_ddl_create_alter_aud ENABLE;	
-- GENERAL POST MIGRATION WITH PROPER COMMENTS